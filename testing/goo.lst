     1                                  %define T_void 				0
     2                                  %define T_nil 				1
     3                                  %define T_char 				2
     4                                  %define T_string 			3
     5                                  %define T_symbol 			4
     6                                  %define T_closure 			5
     7                                  %define T_boolean 			8
     8                                  %define T_boolean_false 		(T_boolean | 1)
     9                                  %define T_boolean_true 			(T_boolean | 2)
    10                                  %define T_number 			16
    11                                  %define T_rational 			(T_number | 1)
    12                                  %define T_real 				(T_number | 2)
    13                                  %define T_collection 			32
    14                                  %define T_pair 				(T_collection | 1)
    15                                  %define T_vector 			(T_collection | 2)
    16                                  
    17                                  %define SOB_CHAR_VALUE(reg) 		byte [reg + 1]
    18                                  %define SOB_PAIR_CAR(reg)		qword [reg + 1]
    19                                  %define SOB_PAIR_CDR(reg)		qword [reg + 1 + 8]
    20                                  %define SOB_STRING_LENGTH(reg)		qword [reg + 1]
    21                                  %define SOB_VECTOR_LENGTH(reg)		qword [reg + 1]
    22                                  %define SOB_CLOSURE_ENV(reg)		qword [reg + 1]
    23                                  %define SOB_CLOSURE_CODE(reg)		qword [reg + 1 + 8]
    24                                  
    25                                  %define OLD_RDP 			qword [rbp]
    26                                  %define RET_ADDR 			qword [rbp + 8 * 1]
    27                                  %define ENV 				qword [rbp + 8 * 2]
    28                                  %define COUNT 				qword [rbp + 8 * 3]
    29                                  %define PARAM(n) 			qword [rbp + 8 * (4 + n)]
    30                                  %define AND_KILL_FRAME(n)		(8 * (2 + n))
    31                                  
    32                                  %macro ENTER 0
    33                                  	enter 0, 0
    34                                  	and rsp, ~15
    35                                  %endmacro
    36                                  
    37                                  %macro LEAVE 0
    38                                  	leave
    39                                  %endmacro
    40                                  
    41                                  %macro assert_type 2
    42                                          cmp byte [%1], %2
    43                                          jne L_error_incorrect_type
    44                                  %endmacro
    45                                  
    46                                  %macro assert_type_integer 1
    47                                          assert_rational(%1)
    48                                          cmp qword [%1 + 1 + 8], 1
    49                                          jne L_error_incorrect_type
    50                                  %endmacro
    51                                  
    52                                  %define assert_void(reg)		assert_type reg, T_void
    53                                  %define assert_nil(reg)			assert_type reg, T_nil
    54                                  %define assert_char(reg)		assert_type reg, T_char
    55                                  %define assert_string(reg)		assert_type reg, T_string
    56                                  %define assert_symbol(reg)		assert_type reg, T_symbol
    57                                  %define assert_closure(reg)		assert_type reg, T_closure
    58                                  %define assert_boolean(reg)		assert_type reg, T_boolean
    59                                  %define assert_rational(reg)		assert_type reg, T_rational
    60                                  %define assert_integer(reg)		assert_type_integer reg
    61                                  %define assert_real(reg)		assert_type reg, T_real
    62                                  %define assert_pair(reg)		assert_type reg, T_pair
    63                                  %define assert_vector(reg)		assert_type reg, T_vector
    64                                  
    65                                  %define sob_void			(L_constants + 0)
    66                                  %define sob_nil				(L_constants + 1)
    67                                  %define sob_boolean_false		(L_constants + 2)
    68                                  %define sob_boolean_true		(L_constants + 3)
    69                                  %define sob_char_nul			(L_constants + 4)
    70                                  
    71                                  %define bytes(n)			(n)
    72                                  %define kbytes(n) 			(bytes(n) << 10)
    73                                  %define mbytes(n) 			(kbytes(n) << 10)
    74                                  %define gbytes(n) 			(mbytes(n) << 10)
    75                                  
    76                                  section .data
    77                                  L_constants:
    78 00000000 00                      	db T_void
    79 00000001 01                      	db T_nil
    80 00000002 09                      	db T_boolean_false
    81 00000003 0A                      	db T_boolean_true
    82 00000004 0200                    	db T_char, 0x00	; #\x0
    83 00000006 03                      	db T_string	; "whatever"
    84 00000007 0800000000000000        	dq 8
    85 0000000F 7768617465766572        	db 0x77, 0x68, 0x61, 0x74, 0x65, 0x76, 0x65, 0x72
    86 00000017 04                      	db T_symbol	; whatever
    87 00000018 [0600000000000000]      	dq L_constants + 6
    88 00000020 11                      	db T_rational	; 0
    89 00000021 000000000000000001-     	dq 0, 1
    89 0000002A 00000000000000     
    90 00000031 03                      	db T_string	; "+"
    91 00000032 0100000000000000        	dq 1
    92 0000003A 2B                      	db 0x2B
    93 0000003B 04                      	db T_symbol	; +
    94 0000003C [3100000000000000]      	dq L_constants + 49
    95 00000044 03                      	db T_string	; "all arguments need ...
    96 00000045 2000000000000000        	dq 32
    97 0000004D 616C6C2061726775        	db 0x61, 0x6C, 0x6C, 0x20, 0x61, 0x72, 0x67, 0x75
    98 00000055 6D656E7473206E65        	db 0x6D, 0x65, 0x6E, 0x74, 0x73, 0x20, 0x6E, 0x65
    99 0000005D 656420746F206265        	db 0x65, 0x64, 0x20, 0x74, 0x6F, 0x20, 0x62, 0x65
   100 00000065 206E756D62657273        	db 0x20, 0x6E, 0x75, 0x6D, 0x62, 0x65, 0x72, 0x73
   101 0000006D 03                      	db T_string	; "-"
   102 0000006E 0100000000000000        	dq 1
   103 00000076 2D                      	db 0x2D
   104 00000077 04                      	db T_symbol	; -
   105 00000078 [6D00000000000000]      	dq L_constants + 109
   106 00000080 11                      	db T_rational	; 1
   107 00000081 010000000000000001-     	dq 1, 1
   107 0000008A 00000000000000     
   108 00000091 03                      	db T_string	; "*"
   109 00000092 0100000000000000        	dq 1
   110 0000009A 2A                      	db 0x2A
   111 0000009B 04                      	db T_symbol	; *
   112 0000009C [9100000000000000]      	dq L_constants + 145
   113 000000A4 03                      	db T_string	; "/"
   114 000000A5 0100000000000000        	dq 1
   115 000000AD 2F                      	db 0x2F
   116 000000AE 04                      	db T_symbol	; /
   117 000000AF [A400000000000000]      	dq L_constants + 164
   118 000000B7 03                      	db T_string	; "generic-comparator"
   119 000000B8 1200000000000000        	dq 18
   120 000000C0 67656E657269632D        	db 0x67, 0x65, 0x6E, 0x65, 0x72, 0x69, 0x63, 0x2D
   121 000000C8 636F6D7061726174        	db 0x63, 0x6F, 0x6D, 0x70, 0x61, 0x72, 0x61, 0x74
   122 000000D0 6F72                    	db 0x6F, 0x72
   123 000000D2 04                      	db T_symbol	; generic-comparator
   124 000000D3 [B700000000000000]      	dq L_constants + 183
   125 000000DB 03                      	db T_string	; "all the arguments m...
   126 000000DC 2100000000000000        	dq 33
   127 000000E4 616C6C2074686520        	db 0x61, 0x6C, 0x6C, 0x20, 0x74, 0x68, 0x65, 0x20
   128 000000EC 617267756D656E74        	db 0x61, 0x72, 0x67, 0x75, 0x6D, 0x65, 0x6E, 0x74
   129 000000F4 73206D7573742062        	db 0x73, 0x20, 0x6D, 0x75, 0x73, 0x74, 0x20, 0x62
   130 000000FC 65206E756D626572        	db 0x65, 0x20, 0x6E, 0x75, 0x6D, 0x62, 0x65, 0x72
   131 00000104 73                      	db 0x73
   132 00000105 03                      	db T_string	; "make-list"
   133 00000106 0900000000000000        	dq 9
   134 0000010E 6D616B652D6C6973        	db 0x6D, 0x61, 0x6B, 0x65, 0x2D, 0x6C, 0x69, 0x73
   135 00000116 74                      	db 0x74
   136 00000117 04                      	db T_symbol	; make-list
   137 00000118 [0501000000000000]      	dq L_constants + 261
   138 00000120 03                      	db T_string	; "Usage: (make-list l...
   139 00000121 2D00000000000000        	dq 45
   140 00000129 55736167653A2028        	db 0x55, 0x73, 0x61, 0x67, 0x65, 0x3A, 0x20, 0x28
   141 00000131 6D616B652D6C6973        	db 0x6D, 0x61, 0x6B, 0x65, 0x2D, 0x6C, 0x69, 0x73
   142 00000139 74206C656E677468        	db 0x74, 0x20, 0x6C, 0x65, 0x6E, 0x67, 0x74, 0x68
   143 00000141 203F6F7074696F6E        	db 0x20, 0x3F, 0x6F, 0x70, 0x74, 0x69, 0x6F, 0x6E
   144 00000149 616C2D696E69742D        	db 0x61, 0x6C, 0x2D, 0x69, 0x6E, 0x69, 0x74, 0x2D
   145 00000151 6368617229              	db 0x63, 0x68, 0x61, 0x72, 0x29
   146 00000156 0241                    	db T_char, 0x41	; #\A
   147 00000158 025A                    	db T_char, 0x5A	; #\Z
   148 0000015A 0261                    	db T_char, 0x61	; #\a
   149 0000015C 027A                    	db T_char, 0x7A	; #\z
   150 0000015E 03                      	db T_string	; "make-vector"
   151 0000015F 0B00000000000000        	dq 11
   152 00000167 6D616B652D766563        	db 0x6D, 0x61, 0x6B, 0x65, 0x2D, 0x76, 0x65, 0x63
   153 0000016F 746F72                  	db 0x74, 0x6F, 0x72
   154 00000172 04                      	db T_symbol	; make-vector
   155 00000173 [5E01000000000000]      	dq L_constants + 350
   156 0000017B 03                      	db T_string	; "Usage: (make-vector...
   157 0000017C 2B00000000000000        	dq 43
   158 00000184 55736167653A2028        	db 0x55, 0x73, 0x61, 0x67, 0x65, 0x3A, 0x20, 0x28
   159 0000018C 6D616B652D766563        	db 0x6D, 0x61, 0x6B, 0x65, 0x2D, 0x76, 0x65, 0x63
   160 00000194 746F722073697A65        	db 0x74, 0x6F, 0x72, 0x20, 0x73, 0x69, 0x7A, 0x65
   161 0000019C 203F6F7074696F6E        	db 0x20, 0x3F, 0x6F, 0x70, 0x74, 0x69, 0x6F, 0x6E
   162 000001A4 616C2D6465666175        	db 0x61, 0x6C, 0x2D, 0x64, 0x65, 0x66, 0x61, 0x75
   163 000001AC 6C7429                  	db 0x6C, 0x74, 0x29
   164 000001AF 03                      	db T_string	; "make-string"
   165 000001B0 0B00000000000000        	dq 11
   166 000001B8 6D616B652D737472        	db 0x6D, 0x61, 0x6B, 0x65, 0x2D, 0x73, 0x74, 0x72
   167 000001C0 696E67                  	db 0x69, 0x6E, 0x67
   168 000001C3 04                      	db T_symbol	; make-string
   169 000001C4 [AF01000000000000]      	dq L_constants + 431
   170 000001CC 03                      	db T_string	; "Usage: (make-string...
   171 000001CD 2B00000000000000        	dq 43
   172 000001D5 55736167653A2028        	db 0x55, 0x73, 0x61, 0x67, 0x65, 0x3A, 0x20, 0x28
   173 000001DD 6D616B652D737472        	db 0x6D, 0x61, 0x6B, 0x65, 0x2D, 0x73, 0x74, 0x72
   174 000001E5 696E672073697A65        	db 0x69, 0x6E, 0x67, 0x20, 0x73, 0x69, 0x7A, 0x65
   175 000001ED 203F6F7074696F6E        	db 0x20, 0x3F, 0x6F, 0x70, 0x74, 0x69, 0x6F, 0x6E
   176 000001F5 616C2D6465666175        	db 0x61, 0x6C, 0x2D, 0x64, 0x65, 0x66, 0x61, 0x75
   177 000001FD 6C7429                  	db 0x6C, 0x74, 0x29
   178 00000200 11                      	db T_rational	; 2
   179 00000201 020000000000000001-     	dq 2, 1
   179 0000020A 00000000000000     
   180                                  
   181                                  section .bss
   182                                  free_var_0:	; location of null?
   183 00000000 ????????????????        	resq 1
   184                                  free_var_1:	; location of pair?
   185 00000008 ????????????????        	resq 1
   186                                  free_var_2:	; location of void?
   187 00000010 ????????????????        	resq 1
   188                                  free_var_3:	; location of char?
   189 00000018 ????????????????        	resq 1
   190                                  free_var_4:	; location of string?
   191 00000020 ????????????????        	resq 1
   192                                  free_var_5:	; location of symbol?
   193 00000028 ????????????????        	resq 1
   194                                  free_var_6:	; location of vector?
   195 00000030 ????????????????        	resq 1
   196                                  free_var_7:	; location of procedure?
   197 00000038 ????????????????        	resq 1
   198                                  free_var_8:	; location of real?
   199 00000040 ????????????????        	resq 1
   200                                  free_var_9:	; location of rational?
   201 00000048 ????????????????        	resq 1
   202                                  free_var_10:	; location of boolean?
   203 00000050 ????????????????        	resq 1
   204                                  free_var_11:	; location of number?
   205 00000058 ????????????????        	resq 1
   206                                  free_var_12:	; location of collection?
   207 00000060 ????????????????        	resq 1
   208                                  free_var_13:	; location of cons
   209 00000068 ????????????????        	resq 1
   210                                  free_var_14:	; location of display-sexpr
   211 00000070 ????????????????        	resq 1
   212                                  free_var_15:	; location of write-char
   213 00000078 ????????????????        	resq 1
   214                                  free_var_16:	; location of car
   215 00000080 ????????????????        	resq 1
   216                                  free_var_17:	; location of cdr
   217 00000088 ????????????????        	resq 1
   218                                  free_var_18:	; location of string-length
   219 00000090 ????????????????        	resq 1
   220                                  free_var_19:	; location of vector-length
   221 00000098 ????????????????        	resq 1
   222                                  free_var_20:	; location of real->integer
   223 000000A0 ????????????????        	resq 1
   224                                  free_var_21:	; location of exit
   225 000000A8 ????????????????        	resq 1
   226                                  free_var_22:	; location of integer->real
   227 000000B0 ????????????????        	resq 1
   228                                  free_var_23:	; location of rational->real
   229 000000B8 ????????????????        	resq 1
   230                                  free_var_24:	; location of char->integer
   231 000000C0 ????????????????        	resq 1
   232                                  free_var_25:	; location of integer->char
   233 000000C8 ????????????????        	resq 1
   234                                  free_var_26:	; location of trng
   235 000000D0 ????????????????        	resq 1
   236                                  free_var_27:	; location of zero?
   237 000000D8 ????????????????        	resq 1
   238                                  free_var_28:	; location of integer?
   239 000000E0 ????????????????        	resq 1
   240                                  free_var_29:	; location of __bin-apply
   241 000000E8 ????????????????        	resq 1
   242                                  free_var_30:	; location of __bin-add-rr
   243 000000F0 ????????????????        	resq 1
   244                                  free_var_31:	; location of __bin-sub-rr
   245 000000F8 ????????????????        	resq 1
   246                                  free_var_32:	; location of __bin-mul-rr
   247 00000100 ????????????????        	resq 1
   248                                  free_var_33:	; location of __bin-div-rr
   249 00000108 ????????????????        	resq 1
   250                                  free_var_34:	; location of __bin-add-qq
   251 00000110 ????????????????        	resq 1
   252                                  free_var_35:	; location of __bin-sub-qq
   253 00000118 ????????????????        	resq 1
   254                                  free_var_36:	; location of __bin-mul-qq
   255 00000120 ????????????????        	resq 1
   256                                  free_var_37:	; location of __bin-div-qq
   257 00000128 ????????????????        	resq 1
   258                                  free_var_38:	; location of error
   259 00000130 ????????????????        	resq 1
   260                                  free_var_39:	; location of __bin-less-than-rr
   261 00000138 ????????????????        	resq 1
   262                                  free_var_40:	; location of __bin-less-than-qq
   263 00000140 ????????????????        	resq 1
   264                                  free_var_41:	; location of __bin-equal-rr
   265 00000148 ????????????????        	resq 1
   266                                  free_var_42:	; location of __bin-equal-qq
   267 00000150 ????????????????        	resq 1
   268                                  free_var_43:	; location of quotient
   269 00000158 ????????????????        	resq 1
   270                                  free_var_44:	; location of remainder
   271 00000160 ????????????????        	resq 1
   272                                  free_var_45:	; location of set-car!
   273 00000168 ????????????????        	resq 1
   274                                  free_var_46:	; location of set-cdr!
   275 00000170 ????????????????        	resq 1
   276                                  free_var_47:	; location of string-ref
   277 00000178 ????????????????        	resq 1
   278                                  free_var_48:	; location of vector-ref
   279 00000180 ????????????????        	resq 1
   280                                  free_var_49:	; location of vector-set!
   281 00000188 ????????????????        	resq 1
   282                                  free_var_50:	; location of string-set!
   283 00000190 ????????????????        	resq 1
   284                                  free_var_51:	; location of make-vector
   285 00000198 ????????????????        	resq 1
   286                                  free_var_52:	; location of make-string
   287 000001A0 ????????????????        	resq 1
   288                                  free_var_53:	; location of numerator
   289 000001A8 ????????????????        	resq 1
   290                                  free_var_54:	; location of denominator
   291 000001B0 ????????????????        	resq 1
   292                                  free_var_55:	; location of eq?
   293 000001B8 ????????????????        	resq 1
   294                                  free_var_56:	; location of caar
   295 000001C0 ????????????????        	resq 1
   296                                  free_var_57:	; location of cadr
   297 000001C8 ????????????????        	resq 1
   298                                  free_var_58:	; location of cdar
   299 000001D0 ????????????????        	resq 1
   300                                  free_var_59:	; location of cddr
   301 000001D8 ????????????????        	resq 1
   302                                  free_var_60:	; location of caaar
   303 000001E0 ????????????????        	resq 1
   304                                  free_var_61:	; location of caadr
   305 000001E8 ????????????????        	resq 1
   306                                  free_var_62:	; location of cadar
   307 000001F0 ????????????????        	resq 1
   308                                  free_var_63:	; location of caddr
   309 000001F8 ????????????????        	resq 1
   310                                  free_var_64:	; location of cdaar
   311 00000200 ????????????????        	resq 1
   312                                  free_var_65:	; location of cdadr
   313 00000208 ????????????????        	resq 1
   314                                  free_var_66:	; location of cddar
   315 00000210 ????????????????        	resq 1
   316                                  free_var_67:	; location of cdddr
   317 00000218 ????????????????        	resq 1
   318                                  free_var_68:	; location of caaaar
   319 00000220 ????????????????        	resq 1
   320                                  free_var_69:	; location of caaadr
   321 00000228 ????????????????        	resq 1
   322                                  free_var_70:	; location of caadar
   323 00000230 ????????????????        	resq 1
   324                                  free_var_71:	; location of caaddr
   325 00000238 ????????????????        	resq 1
   326                                  free_var_72:	; location of cadaar
   327 00000240 ????????????????        	resq 1
   328                                  free_var_73:	; location of cadadr
   329 00000248 ????????????????        	resq 1
   330                                  free_var_74:	; location of caddar
   331 00000250 ????????????????        	resq 1
   332                                  free_var_75:	; location of cadddr
   333 00000258 ????????????????        	resq 1
   334                                  free_var_76:	; location of cdaaar
   335 00000260 ????????????????        	resq 1
   336                                  free_var_77:	; location of cdaadr
   337 00000268 ????????????????        	resq 1
   338                                  free_var_78:	; location of cdadar
   339 00000270 ????????????????        	resq 1
   340                                  free_var_79:	; location of cdaddr
   341 00000278 ????????????????        	resq 1
   342                                  free_var_80:	; location of cddaar
   343 00000280 ????????????????        	resq 1
   344                                  free_var_81:	; location of cddadr
   345 00000288 ????????????????        	resq 1
   346                                  free_var_82:	; location of cdddar
   347 00000290 ????????????????        	resq 1
   348                                  free_var_83:	; location of cddddr
   349 00000298 ????????????????        	resq 1
   350                                  free_var_84:	; location of list?
   351 000002A0 ????????????????        	resq 1
   352                                  free_var_85:	; location of list
   353 000002A8 ????????????????        	resq 1
   354                                  free_var_86:	; location of not
   355 000002B0 ????????????????        	resq 1
   356                                  free_var_87:	; location of fraction?
   357 000002B8 ????????????????        	resq 1
   358                                  free_var_88:	; location of list*
   359 000002C0 ????????????????        	resq 1
   360                                  free_var_89:	; location of apply
   361 000002C8 ????????????????        	resq 1
   362                                  free_var_90:	; location of ormap
   363 000002D0 ????????????????        	resq 1
   364                                  free_var_91:	; location of map
   365 000002D8 ????????????????        	resq 1
   366                                  free_var_92:	; location of andmap
   367 000002E0 ????????????????        	resq 1
   368                                  free_var_93:	; location of reverse
   369 000002E8 ????????????????        	resq 1
   370                                  free_var_94:	; location of append
   371 000002F0 ????????????????        	resq 1
   372                                  free_var_95:	; location of fold-left
   373 000002F8 ????????????????        	resq 1
   374                                  free_var_96:	; location of fold-right
   375 00000300 ????????????????        	resq 1
   376                                  free_var_97:	; location of +
   377 00000308 ????????????????        	resq 1
   378                                  free_var_98:	; location of -
   379 00000310 ????????????????        	resq 1
   380                                  free_var_99:	; location of *
   381 00000318 ????????????????        	resq 1
   382                                  free_var_100:	; location of /
   383 00000320 ????????????????        	resq 1
   384                                  free_var_101:	; location of fact
   385 00000328 ????????????????        	resq 1
   386                                  free_var_102:	; location of <
   387 00000330 ????????????????        	resq 1
   388                                  free_var_103:	; location of <=
   389 00000338 ????????????????        	resq 1
   390                                  free_var_104:	; location of >
   391 00000340 ????????????????        	resq 1
   392                                  free_var_105:	; location of >=
   393 00000348 ????????????????        	resq 1
   394                                  free_var_106:	; location of =
   395 00000350 ????????????????        	resq 1
   396                                  free_var_107:	; location of make-list
   397 00000358 ????????????????        	resq 1
   398                                  free_var_108:	; location of char<?
   399 00000360 ????????????????        	resq 1
   400                                  free_var_109:	; location of char<=?
   401 00000368 ????????????????        	resq 1
   402                                  free_var_110:	; location of char=?
   403 00000370 ????????????????        	resq 1
   404                                  free_var_111:	; location of char>?
   405 00000378 ????????????????        	resq 1
   406                                  free_var_112:	; location of char>=?
   407 00000380 ????????????????        	resq 1
   408                                  free_var_113:	; location of char-downcase
   409 00000388 ????????????????        	resq 1
   410                                  free_var_114:	; location of char-upcase
   411 00000390 ????????????????        	resq 1
   412                                  free_var_115:	; location of char-ci<?
   413 00000398 ????????????????        	resq 1
   414                                  free_var_116:	; location of char-ci<=?
   415 000003A0 ????????????????        	resq 1
   416                                  free_var_117:	; location of char-ci=?
   417 000003A8 ????????????????        	resq 1
   418                                  free_var_118:	; location of char-ci>?
   419 000003B0 ????????????????        	resq 1
   420                                  free_var_119:	; location of char-ci>=?
   421 000003B8 ????????????????        	resq 1
   422                                  free_var_120:	; location of string-downcase
   423 000003C0 ????????????????        	resq 1
   424                                  free_var_121:	; location of string-upcase
   425 000003C8 ????????????????        	resq 1
   426                                  free_var_122:	; location of list->string
   427 000003D0 ????????????????        	resq 1
   428                                  free_var_123:	; location of string->list
   429 000003D8 ????????????????        	resq 1
   430                                  free_var_124:	; location of string<?
   431 000003E0 ????????????????        	resq 1
   432                                  free_var_125:	; location of string<=?
   433 000003E8 ????????????????        	resq 1
   434                                  free_var_126:	; location of string=?
   435 000003F0 ????????????????        	resq 1
   436                                  free_var_127:	; location of string>=?
   437 000003F8 ????????????????        	resq 1
   438                                  free_var_128:	; location of string>?
   439 00000400 ????????????????        	resq 1
   440                                  free_var_129:	; location of string-ci<?
   441 00000408 ????????????????        	resq 1
   442                                  free_var_130:	; location of string-ci<=?
   443 00000410 ????????????????        	resq 1
   444                                  free_var_131:	; location of string-ci=?
   445 00000418 ????????????????        	resq 1
   446                                  free_var_132:	; location of string-ci>=?
   447 00000420 ????????????????        	resq 1
   448                                  free_var_133:	; location of string-ci>?
   449 00000428 ????????????????        	resq 1
   450                                  free_var_134:	; location of length
   451 00000430 ????????????????        	resq 1
   452                                  free_var_135:	; location of list->vector
   453 00000438 ????????????????        	resq 1
   454                                  free_var_136:	; location of vector
   455 00000440 ????????????????        	resq 1
   456                                  free_var_137:	; location of vector->list
   457 00000448 ????????????????        	resq 1
   458                                  free_var_138:	; location of random
   459 00000450 ????????????????        	resq 1
   460                                  free_var_139:	; location of positive?
   461 00000458 ????????????????        	resq 1
   462                                  free_var_140:	; location of negative?
   463 00000460 ????????????????        	resq 1
   464                                  free_var_141:	; location of even?
   465 00000468 ????????????????        	resq 1
   466                                  free_var_142:	; location of odd?
   467 00000470 ????????????????        	resq 1
   468                                  free_var_143:	; location of abs
   469 00000478 ????????????????        	resq 1
   470                                  free_var_144:	; location of equal?
   471 00000480 ????????????????        	resq 1
   472                                  free_var_145:	; location of assoc
   473 00000488 ????????????????        	resq 1
   474                                  
   475                                  extern printf, fprintf, stdout, stderr, fwrite, exit, putchar
   476                                  global main
   477                                  section .text
   478                                  main:
   479 00000000 C8000000                        enter 0, 0
   480                                          
   481                                  	; building closure for null?
   482 00000004 48BF-                   	mov rdi, free_var_0
   482 00000006 [0000000000000000] 
   483 0000000E 48BE-                   	mov rsi, L_code_ptr_is_null
   483 00000010 [FE03010000000000] 
   484 00000018 E805030100              	call bind_primitive
   485                                  
   486                                  	; building closure for pair?
   487 0000001D 48BF-                   	mov rdi, free_var_1
   487 0000001F [0800000000000000] 
   488 00000027 48BE-                   	mov rsi, L_code_ptr_is_pair
   488 00000029 [3404010000000000] 
   489 00000031 E8EC020100              	call bind_primitive
   490                                  
   491                                  	; building closure for void?
   492 00000036 48BF-                   	mov rdi, free_var_2
   492 00000038 [1000000000000000] 
   493 00000040 48BE-                   	mov rsi, L_code_ptr_is_void
   493 00000042 [6A04010000000000] 
   494 0000004A E8D3020100              	call bind_primitive
   495                                  
   496                                  	; building closure for char?
   497 0000004F 48BF-                   	mov rdi, free_var_3
   497 00000051 [1800000000000000] 
   498 00000059 48BE-                   	mov rsi, L_code_ptr_is_char
   498 0000005B [A004010000000000] 
   499 00000063 E8BA020100              	call bind_primitive
   500                                  
   501                                  	; building closure for string?
   502 00000068 48BF-                   	mov rdi, free_var_4
   502 0000006A [2000000000000000] 
   503 00000072 48BE-                   	mov rsi, L_code_ptr_is_string
   503 00000074 [D604010000000000] 
   504 0000007C E8A1020100              	call bind_primitive
   505                                  
   506                                  	; building closure for symbol?
   507 00000081 48BF-                   	mov rdi, free_var_5
   507 00000083 [2800000000000000] 
   508 0000008B 48BE-                   	mov rsi, L_code_ptr_is_symbol
   508 0000008D [0C05010000000000] 
   509 00000095 E888020100              	call bind_primitive
   510                                  
   511                                  	; building closure for vector?
   512 0000009A 48BF-                   	mov rdi, free_var_6
   512 0000009C [3000000000000000] 
   513 000000A4 48BE-                   	mov rsi, L_code_ptr_is_vector
   513 000000A6 [4205010000000000] 
   514 000000AE E86F020100              	call bind_primitive
   515                                  
   516                                  	; building closure for procedure?
   517 000000B3 48BF-                   	mov rdi, free_var_7
   517 000000B5 [3800000000000000] 
   518 000000BD 48BE-                   	mov rsi, L_code_ptr_is_closure
   518 000000BF [7805010000000000] 
   519 000000C7 E856020100              	call bind_primitive
   520                                  
   521                                  	; building closure for real?
   522 000000CC 48BF-                   	mov rdi, free_var_8
   522 000000CE [4000000000000000] 
   523 000000D6 48BE-                   	mov rsi, L_code_ptr_is_real
   523 000000D8 [AE05010000000000] 
   524 000000E0 E83D020100              	call bind_primitive
   525                                  
   526                                  	; building closure for rational?
   527 000000E5 48BF-                   	mov rdi, free_var_9
   527 000000E7 [4800000000000000] 
   528 000000EF 48BE-                   	mov rsi, L_code_ptr_is_rational
   528 000000F1 [E405010000000000] 
   529 000000F9 E824020100              	call bind_primitive
   530                                  
   531                                  	; building closure for boolean?
   532 000000FE 48BF-                   	mov rdi, free_var_10
   532 00000100 [5000000000000000] 
   533 00000108 48BE-                   	mov rsi, L_code_ptr_is_boolean
   533 0000010A [1A06010000000000] 
   534 00000112 E80B020100              	call bind_primitive
   535                                  
   536                                  	; building closure for number?
   537 00000117 48BF-                   	mov rdi, free_var_11
   537 00000119 [5800000000000000] 
   538 00000121 48BE-                   	mov rsi, L_code_ptr_is_number
   538 00000123 [5206010000000000] 
   539 0000012B E8F2010100              	call bind_primitive
   540                                  
   541                                  	; building closure for collection?
   542 00000130 48BF-                   	mov rdi, free_var_12
   542 00000132 [6000000000000000] 
   543 0000013A 48BE-                   	mov rsi, L_code_ptr_is_collection
   543 0000013C [8A06010000000000] 
   544 00000144 E8D9010100              	call bind_primitive
   545                                  
   546                                  	; building closure for cons
   547 00000149 48BF-                   	mov rdi, free_var_13
   547 0000014B [6800000000000000] 
   548 00000153 48BE-                   	mov rsi, L_code_ptr_cons
   548 00000155 [C206010000000000] 
   549 0000015D E8C0010100              	call bind_primitive
   550                                  
   551                                  	; building closure for display-sexpr
   552 00000162 48BF-                   	mov rdi, free_var_14
   552 00000164 [7000000000000000] 
   553 0000016C 48BE-                   	mov rsi, L_code_ptr_display_sexpr
   553 0000016E [F606010000000000] 
   554 00000176 E8A7010100              	call bind_primitive
   555                                  
   556                                  	; building closure for write-char
   557 0000017B 48BF-                   	mov rdi, free_var_15
   557 0000017D [7800000000000000] 
   558 00000185 48BE-                   	mov rsi, L_code_ptr_write_char
   558 00000187 [2007010000000000] 
   559 0000018F E88E010100              	call bind_primitive
   560                                  
   561                                  	; building closure for car
   562 00000194 48BF-                   	mov rdi, free_var_16
   562 00000196 [8000000000000000] 
   563 0000019E 48BE-                   	mov rsi, L_code_ptr_car
   563 000001A0 [7707010000000000] 
   564 000001A8 E875010100              	call bind_primitive
   565                                  
   566                                  	; building closure for cdr
   567 000001AD 48BF-                   	mov rdi, free_var_17
   567 000001AF [8800000000000000] 
   568 000001B7 48BE-                   	mov rsi, L_code_ptr_cdr
   568 000001B9 [9F07010000000000] 
   569 000001C1 E85C010100              	call bind_primitive
   570                                  
   571                                  	; building closure for string-length
   572 000001C6 48BF-                   	mov rdi, free_var_18
   572 000001C8 [9000000000000000] 
   573 000001D0 48BE-                   	mov rsi, L_code_ptr_string_length
   573 000001D2 [C707010000000000] 
   574 000001DA E843010100              	call bind_primitive
   575                                  
   576                                  	; building closure for vector-length
   577 000001DF 48BF-                   	mov rdi, free_var_19
   577 000001E1 [9800000000000000] 
   578 000001E9 48BE-                   	mov rsi, L_code_ptr_vector_length
   578 000001EB [F407010000000000] 
   579 000001F3 E82A010100              	call bind_primitive
   580                                  
   581                                  	; building closure for real->integer
   582 000001F8 48BF-                   	mov rdi, free_var_20
   582 000001FA [A000000000000000] 
   583 00000202 48BE-                   	mov rsi, L_code_ptr_real_to_integer
   583 00000204 [2108010000000000] 
   584 0000020C E811010100              	call bind_primitive
   585                                  
   586                                  	; building closure for exit
   587 00000211 48BF-                   	mov rdi, free_var_21
   587 00000213 [A800000000000000] 
   588 0000021B 48BE-                   	mov rsi, L_code_ptr_exit
   588 0000021D [5408010000000000] 
   589 00000225 E8F8000100              	call bind_primitive
   590                                  
   591                                  	; building closure for integer->real
   592 0000022A 48BF-                   	mov rdi, free_var_22
   592 0000022C [B000000000000000] 
   593 00000234 48BE-                   	mov rsi, L_code_ptr_integer_to_real
   593 00000236 [7108010000000000] 
   594 0000023E E8DF000100              	call bind_primitive
   595                                  
   596                                  	; building closure for rational->real
   597 00000243 48BF-                   	mov rdi, free_var_23
   597 00000245 [B800000000000000] 
   598 0000024D 48BE-                   	mov rsi, L_code_ptr_rational_to_real
   598 0000024F [AE08010000000000] 
   599 00000257 E8C6000100              	call bind_primitive
   600                                  
   601                                  	; building closure for char->integer
   602 0000025C 48BF-                   	mov rdi, free_var_24
   602 0000025E [C000000000000000] 
   603 00000266 48BE-                   	mov rsi, L_code_ptr_char_to_integer
   603 00000268 [ED08010000000000] 
   604 00000270 E8AD000100              	call bind_primitive
   605                                  
   606                                  	; building closure for integer->char
   607 00000275 48BF-                   	mov rdi, free_var_25
   607 00000277 [C800000000000000] 
   608 0000027F 48BE-                   	mov rsi, L_code_ptr_integer_to_char
   608 00000281 [2209010000000000] 
   609 00000289 E894000100              	call bind_primitive
   610                                  
   611                                  	; building closure for trng
   612 0000028E 48BF-                   	mov rdi, free_var_26
   612 00000290 [D000000000000000] 
   613 00000298 48BE-                   	mov rsi, L_code_ptr_trng
   613 0000029A [7C09010000000000] 
   614 000002A2 E87B000100              	call bind_primitive
   615                                  
   616                                  	; building closure for zero?
   617 000002A7 48BF-                   	mov rdi, free_var_27
   617 000002A9 [D800000000000000] 
   618 000002B1 48BE-                   	mov rsi, L_code_ptr_is_zero
   618 000002B3 [9F09010000000000] 
   619 000002BB E862000100              	call bind_primitive
   620                                  
   621                                  	; building closure for integer?
   622 000002C0 48BF-                   	mov rdi, free_var_28
   622 000002C2 [E000000000000000] 
   623 000002CA 48BE-                   	mov rsi, L_code_ptr_is_integer
   623 000002CC [FA09010000000000] 
   624 000002D4 E849000100              	call bind_primitive
   625                                  
   626                                  	; building closure for __bin-apply
   627 000002D9 48BF-                   	mov rdi, free_var_29
   627 000002DB [E800000000000000] 
   628 000002E3 48BE-                   	mov rsi, L_code_ptr_bin_apply
   628 000002E5 [4A03010000000000] 
   629 000002ED E830000100              	call bind_primitive
   630                                  
   631                                  	; building closure for __bin-add-rr
   632 000002F2 48BF-                   	mov rdi, free_var_30
   632 000002F4 [F000000000000000] 
   633 000002FC 48BE-                   	mov rsi, L_code_ptr_raw_bin_add_rr
   633 000002FE [370A010000000000] 
   634 00000306 E817000100              	call bind_primitive
   635                                  
   636                                  	; building closure for __bin-sub-rr
   637 0000030B 48BF-                   	mov rdi, free_var_31
   637 0000030D [F800000000000000] 
   638 00000315 48BE-                   	mov rsi, L_code_ptr_raw_bin_sub_rr
   638 00000317 [7B0A010000000000] 
   639 0000031F E8FEFF0000              	call bind_primitive
   640                                  
   641                                  	; building closure for __bin-mul-rr
   642 00000324 48BF-                   	mov rdi, free_var_32
   642 00000326 [0001000000000000] 
   643 0000032E 48BE-                   	mov rsi, L_code_ptr_raw_bin_mul_rr
   643 00000330 [BF0A010000000000] 
   644 00000338 E8E5FF0000              	call bind_primitive
   645                                  
   646                                  	; building closure for __bin-div-rr
   647 0000033D 48BF-                   	mov rdi, free_var_33
   647 0000033F [0801000000000000] 
   648 00000347 48BE-                   	mov rsi, L_code_ptr_raw_bin_div_rr
   648 00000349 [030B010000000000] 
   649 00000351 E8CCFF0000              	call bind_primitive
   650                                  
   651                                  	; building closure for __bin-add-qq
   652 00000356 48BF-                   	mov rdi, free_var_34
   652 00000358 [1001000000000000] 
   653 00000360 48BE-                   	mov rsi, L_code_ptr_raw_bin_add_qq
   653 00000362 [550B010000000000] 
   654 0000036A E8B3FF0000              	call bind_primitive
   655                                  
   656                                  	; building closure for __bin-sub-qq
   657 0000036F 48BF-                   	mov rdi, free_var_35
   657 00000371 [1801000000000000] 
   658 00000379 48BE-                   	mov rsi, L_code_ptr_raw_bin_sub_qq
   658 0000037B [BD0B010000000000] 
   659 00000383 E89AFF0000              	call bind_primitive
   660                                  
   661                                  	; building closure for __bin-mul-qq
   662 00000388 48BF-                   	mov rdi, free_var_36
   662 0000038A [2001000000000000] 
   663 00000392 48BE-                   	mov rsi, L_code_ptr_raw_bin_mul_qq
   663 00000394 [250C010000000000] 
   664 0000039C E881FF0000              	call bind_primitive
   665                                  
   666                                  	; building closure for __bin-div-qq
   667 000003A1 48BF-                   	mov rdi, free_var_37
   667 000003A3 [2801000000000000] 
   668 000003AB 48BE-                   	mov rsi, L_code_ptr_raw_bin_div_qq
   668 000003AD [7D0C010000000000] 
   669 000003B5 E868FF0000              	call bind_primitive
   670                                  
   671                                  	; building closure for error
   672 000003BA 48BF-                   	mov rdi, free_var_38
   672 000003BC [3001000000000000] 
   673 000003C4 48BE-                   	mov rsi, L_code_ptr_error
   673 000003C6 [4B0D010000000000] 
   674 000003CE E84FFF0000              	call bind_primitive
   675                                  
   676                                  	; building closure for __bin-less-than-rr
   677 000003D3 48BF-                   	mov rdi, free_var_39
   677 000003D5 [3801000000000000] 
   678 000003DD 48BE-                   	mov rsi, L_code_ptr_raw_less_than_rr
   678 000003DF [020E010000000000] 
   679 000003E7 E836FF0000              	call bind_primitive
   680                                  
   681                                  	; building closure for __bin-less-than-qq
   682 000003EC 48BF-                   	mov rdi, free_var_40
   682 000003EE [4001000000000000] 
   683 000003F6 48BE-                   	mov rsi, L_code_ptr_raw_less_than_qq
   683 000003F8 [590E010000000000] 
   684 00000400 E81DFF0000              	call bind_primitive
   685                                  
   686                                  	; building closure for __bin-equal-rr
   687 00000405 48BF-                   	mov rdi, free_var_41
   687 00000407 [4801000000000000] 
   688 0000040F 48BE-                   	mov rsi, L_code_ptr_raw_equal_rr
   688 00000411 [BC0E010000000000] 
   689 00000419 E804FF0000              	call bind_primitive
   690                                  
   691                                  	; building closure for __bin-equal-qq
   692 0000041E 48BF-                   	mov rdi, free_var_42
   692 00000420 [5001000000000000] 
   693 00000428 48BE-                   	mov rsi, L_code_ptr_raw_equal_qq
   693 0000042A [130F010000000000] 
   694 00000432 E8EBFE0000              	call bind_primitive
   695                                  
   696                                  	; building closure for quotient
   697 00000437 48BF-                   	mov rdi, free_var_43
   697 00000439 [5801000000000000] 
   698 00000441 48BE-                   	mov rsi, L_code_ptr_quotient
   698 00000443 [760F010000000000] 
   699 0000044B E8D2FE0000              	call bind_primitive
   700                                  
   701                                  	; building closure for remainder
   702 00000450 48BF-                   	mov rdi, free_var_44
   702 00000452 [6001000000000000] 
   703 0000045A 48BE-                   	mov rsi, L_code_ptr_remainder
   703 0000045C [DC0F010000000000] 
   704 00000464 E8B9FE0000              	call bind_primitive
   705                                  
   706                                  	; building closure for set-car!
   707 00000469 48BF-                   	mov rdi, free_var_45
   707 0000046B [6801000000000000] 
   708 00000473 48BE-                   	mov rsi, L_code_ptr_set_car
   708 00000475 [4210010000000000] 
   709 0000047D E8A0FE0000              	call bind_primitive
   710                                  
   711                                  	; building closure for set-cdr!
   712 00000482 48BF-                   	mov rdi, free_var_46
   712 00000484 [7001000000000000] 
   713 0000048C 48BE-                   	mov rsi, L_code_ptr_set_cdr
   713 0000048E [7810010000000000] 
   714 00000496 E887FE0000              	call bind_primitive
   715                                  
   716                                  	; building closure for string-ref
   717 0000049B 48BF-                   	mov rdi, free_var_47
   717 0000049D [7801000000000000] 
   718 000004A5 48BE-                   	mov rsi, L_code_ptr_string_ref
   718 000004A7 [AE10010000000000] 
   719 000004AF E86EFE0000              	call bind_primitive
   720                                  
   721                                  	; building closure for vector-ref
   722 000004B4 48BF-                   	mov rdi, free_var_48
   722 000004B6 [8001000000000000] 
   723 000004BE 48BE-                   	mov rsi, L_code_ptr_vector_ref
   723 000004C0 [1911010000000000] 
   724 000004C8 E855FE0000              	call bind_primitive
   725                                  
   726                                  	; building closure for vector-set!
   727 000004CD 48BF-                   	mov rdi, free_var_49
   727 000004CF [8801000000000000] 
   728 000004D7 48BE-                   	mov rsi, L_code_ptr_vector_set
   728 000004D9 [7511010000000000] 
   729 000004E1 E83CFE0000              	call bind_primitive
   730                                  
   731                                  	; building closure for string-set!
   732 000004E6 48BF-                   	mov rdi, free_var_50
   732 000004E8 [9001000000000000] 
   733 000004F0 48BE-                   	mov rsi, L_code_ptr_string_set
   733 000004F2 [DF11010000000000] 
   734 000004FA E823FE0000              	call bind_primitive
   735                                  
   736                                  	; building closure for make-vector
   737 000004FF 48BF-                   	mov rdi, free_var_51
   737 00000501 [9801000000000000] 
   738 00000509 48BE-                   	mov rsi, L_code_ptr_make_vector
   738 0000050B [5412010000000000] 
   739 00000513 E80AFE0000              	call bind_primitive
   740                                  
   741                                  	; building closure for make-string
   742 00000518 48BF-                   	mov rdi, free_var_52
   742 0000051A [A001000000000000] 
   743 00000522 48BE-                   	mov rsi, L_code_ptr_make_string
   743 00000524 [BE12010000000000] 
   744 0000052C E8F1FD0000              	call bind_primitive
   745                                  
   746                                  	; building closure for numerator
   747 00000531 48BF-                   	mov rdi, free_var_53
   747 00000533 [A801000000000000] 
   748 0000053B 48BE-                   	mov rsi, L_code_ptr_numerator
   748 0000053D [3013010000000000] 
   749 00000545 E8D8FD0000              	call bind_primitive
   750                                  
   751                                  	; building closure for denominator
   752 0000054A 48BF-                   	mov rdi, free_var_54
   752 0000054C [B001000000000000] 
   753 00000554 48BE-                   	mov rsi, L_code_ptr_denominator
   753 00000556 [5D13010000000000] 
   754 0000055E E8BFFD0000              	call bind_primitive
   755                                  
   756                                  	; building closure for eq?
   757 00000563 48BF-                   	mov rdi, free_var_55
   757 00000565 [B801000000000000] 
   758 0000056D 48BE-                   	mov rsi, L_code_ptr_eq
   758 0000056F [8A13010000000000] 
   759 00000577 E8A6FD0000              	call bind_primitive
   760                                  
   761 0000057C BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
   762 00000581 E80BF80000              	call malloc
   763 00000586 50                      	push rax
   764 00000587 BF00000000              	mov rdi, 8 * 0	; new rib
   765 0000058C E800F80000              	call malloc
   766 00000591 50                      	push rax
   767 00000592 BF08000000              	mov rdi, 8 * 1	; extended env
   768 00000597 E8F5F70000              	call malloc
   769 0000059C 488B7D10                	mov rdi, ENV
   770 000005A0 BE00000000              	mov rsi, 0
   771 000005A5 BA01000000              	mov rdx, 1
   772                                  .L_lambda_simple_env_loop_0001:	; ext_env[i + 1] <-- env[i]
   773 000005AA 4883FE00                	cmp rsi, 0
   774 000005AE 7410                    	je .L_lambda_simple_env_end_0001
   775 000005B0 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
   776 000005B4 48890CD0                	mov qword [rax + 8 * rdx], rcx
   777 000005B8 48FFC6                  	inc rsi
   778 000005BB 48FFC2                  	inc rdx
   779 000005BE EBEA                    	jmp .L_lambda_simple_env_loop_0001
   780                                  .L_lambda_simple_env_end_0001:
   781 000005C0 5B                      	pop rbx
   782 000005C1 BE00000000              	mov rsi, 0
   783                                  .L_lambda_simple_params_loop_0001:	; copy params
   784 000005C6 4883FE00                	cmp rsi, 0
   785 000005CA 740E                    	je .L_lambda_simple_params_end_0001
   786 000005CC 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
   787 000005D1 488914F3                	mov qword [rbx + 8 * rsi], rdx
   788 000005D5 48FFC6                  	inc rsi
   789 000005D8 EBEC                    	jmp .L_lambda_simple_params_loop_0001
   790                                  .L_lambda_simple_params_end_0001:
   791 000005DA 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
   792 000005DD 4889C3                  	mov rbx, rax
   793 000005E0 58                      	pop rax
   794 000005E1 C60005                  	mov byte [rax], T_closure
   795 000005E4 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
   796 000005E8 48C74009[F5050000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0001
   797 000005F0 E987000000              	jmp .L_lambda_simple_end_0001
   798                                  .L_lambda_simple_code_0001:	; lambda-simple body
   799 000005F5 48837C241001            	cmp qword [rsp + 8 * 2], 1
   800 000005FB 740B                    	je .L_lambda_simple_arity_check_ok_0001
   801 000005FD FF742410                	push qword [rsp + 8 * 2]
   802 00000601 6A01                    	push 1
   803 00000603 E942F70000              	jmp L_error_incorrect_arity_simple
   804                                  .L_lambda_simple_arity_check_ok_0001:
   805 00000608 C8000000                	enter 0, 0
   806 0000060C 488B4520                	mov rax, qword [rbp + 8 * (4 + 0)]
   807 00000610 50                      	push rax
   808 00000611 6A01                    	push 1
   809 00000613 488B0425[80000000]      	mov rax, qword [free_var_16]
   810                                  	assert_closure(rax)
    42 0000061B 803805              <1>  cmp byte [%1], %2
    43 0000061E 0F85660F0100        <1>  jne L_error_incorrect_type
   811 00000624 FF7001                  	push SOB_CLOSURE_ENV(rax)
   812 00000627 FF5009                  	call SOB_CLOSURE_CODE(rax)
   813 0000062A 50                      	push rax
   814 0000062B 6A01                    	push 1
   815 0000062D 488B0425[80000000]      	mov rax, qword [free_var_16]
   816                                  	assert_closure(rax)
    42 00000635 803805              <1>  cmp byte [%1], %2
    43 00000638 0F854C0F0100        <1>  jne L_error_incorrect_type
   817 0000063E FF7001                  	push SOB_CLOSURE_ENV(rax)
   818 00000641 FF7508                  	push qword [rbp + 8 * 1] ; old ret addr
   819 00000644 FF7500                  	push qword [rbp] ; same the old rbp
   820 00000647 BA04000000              	mov rdx, 1 + 3
   821 0000064C 488B4D18                	mov rcx, COUNT
   822 00000650 488D4CCD20              	lea rcx, [rbp + 8*4 + rcx * 8]
   823 00000655 4889EF                  	mov rdi, rbp
   824                                  .L_tc_recycle_frame_loop_0001:
   825 00000658 4883FA00                	cmp rdx, 0
   826 0000065C 7413                    	je .L_tc_recycle_frame_done_0001
   827 0000065E 4883E908                	sub rcx, 8
   828 00000662 4883EF08                	sub rdi, 8
   829 00000666 488B37                  	mov rsi, [rdi]
   830 00000669 488931                  	mov qword [rcx], rsi
   831 0000066C 48FFCA                  	dec rdx
   832 0000066F EBE7                    	jmp .L_tc_recycle_frame_loop_0001
   833                                  .L_tc_recycle_frame_done_0001:
   834 00000671 5D                      	pop rbp ; restore the old rbp
   835 00000672 4889CC                  	mov rsp, rcx
   836 00000675 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
   837 00000678 C9                      	leave
   838 00000679 C21800                  	ret 8 * (2 + 1)
   839                                  .L_lambda_simple_end_0001:	; new closure is in rax
   840 0000067C 48890425[C0010000]      	mov qword [free_var_56], rax
   841 00000684 48B8-                   	mov rax, sob_void
   841 00000686 [0000000000000000] 
   842                                  
   843 0000068E 4889C7                  	mov rdi, rax
   844 00000691 E80CF70000              	call print_sexpr_if_not_void
   845                                  
   846 00000696 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
   847 0000069B E8F1F60000              	call malloc
   848 000006A0 50                      	push rax
   849 000006A1 BF00000000              	mov rdi, 8 * 0	; new rib
   850 000006A6 E8E6F60000              	call malloc
   851 000006AB 50                      	push rax
   852 000006AC BF08000000              	mov rdi, 8 * 1	; extended env
   853 000006B1 E8DBF60000              	call malloc
   854 000006B6 488B7D10                	mov rdi, ENV
   855 000006BA BE00000000              	mov rsi, 0
   856 000006BF BA01000000              	mov rdx, 1
   857                                  .L_lambda_simple_env_loop_0002:	; ext_env[i + 1] <-- env[i]
   858 000006C4 4883FE00                	cmp rsi, 0
   859 000006C8 7410                    	je .L_lambda_simple_env_end_0002
   860 000006CA 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
   861 000006CE 48890CD0                	mov qword [rax + 8 * rdx], rcx
   862 000006D2 48FFC6                  	inc rsi
   863 000006D5 48FFC2                  	inc rdx
   864 000006D8 EBEA                    	jmp .L_lambda_simple_env_loop_0002
   865                                  .L_lambda_simple_env_end_0002:
   866 000006DA 5B                      	pop rbx
   867 000006DB BE00000000              	mov rsi, 0
   868                                  .L_lambda_simple_params_loop_0002:	; copy params
   869 000006E0 4883FE00                	cmp rsi, 0
   870 000006E4 740E                    	je .L_lambda_simple_params_end_0002
   871 000006E6 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
   872 000006EB 488914F3                	mov qword [rbx + 8 * rsi], rdx
   873 000006EF 48FFC6                  	inc rsi
   874 000006F2 EBEC                    	jmp .L_lambda_simple_params_loop_0002
   875                                  .L_lambda_simple_params_end_0002:
   876 000006F4 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
   877 000006F7 4889C3                  	mov rbx, rax
   878 000006FA 58                      	pop rax
   879 000006FB C60005                  	mov byte [rax], T_closure
   880 000006FE 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
   881 00000702 48C74009[0F070000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0002
   882 0000070A E987000000              	jmp .L_lambda_simple_end_0002
   883                                  .L_lambda_simple_code_0002:	; lambda-simple body
   884 0000070F 48837C241001            	cmp qword [rsp + 8 * 2], 1
   885 00000715 740B                    	je .L_lambda_simple_arity_check_ok_0002
   886 00000717 FF742410                	push qword [rsp + 8 * 2]
   887 0000071B 6A01                    	push 1
   888 0000071D E928F60000              	jmp L_error_incorrect_arity_simple
   889                                  .L_lambda_simple_arity_check_ok_0002:
   890 00000722 C8000000                	enter 0, 0
   891 00000726 488B4520                	mov rax, qword [rbp + 8 * (4 + 0)]
   892 0000072A 50                      	push rax
   893 0000072B 6A01                    	push 1
   894 0000072D 488B0425[88000000]      	mov rax, qword [free_var_17]
   895                                  	assert_closure(rax)
    42 00000735 803805              <1>  cmp byte [%1], %2
    43 00000738 0F854C0E0100        <1>  jne L_error_incorrect_type
   896 0000073E FF7001                  	push SOB_CLOSURE_ENV(rax)
   897 00000741 FF5009                  	call SOB_CLOSURE_CODE(rax)
   898 00000744 50                      	push rax
   899 00000745 6A01                    	push 1
   900 00000747 488B0425[80000000]      	mov rax, qword [free_var_16]
   901                                  	assert_closure(rax)
    42 0000074F 803805              <1>  cmp byte [%1], %2
    43 00000752 0F85320E0100        <1>  jne L_error_incorrect_type
   902 00000758 FF7001                  	push SOB_CLOSURE_ENV(rax)
   903 0000075B FF7508                  	push qword [rbp + 8 * 1] ; old ret addr
   904 0000075E FF7500                  	push qword [rbp] ; same the old rbp
   905 00000761 BA04000000              	mov rdx, 1 + 3
   906 00000766 488B4D18                	mov rcx, COUNT
   907 0000076A 488D4CCD20              	lea rcx, [rbp + 8*4 + rcx * 8]
   908 0000076F 4889EF                  	mov rdi, rbp
   909                                  .L_tc_recycle_frame_loop_0002:
   910 00000772 4883FA00                	cmp rdx, 0
   911 00000776 7413                    	je .L_tc_recycle_frame_done_0002
   912 00000778 4883E908                	sub rcx, 8
   913 0000077C 4883EF08                	sub rdi, 8
   914 00000780 488B37                  	mov rsi, [rdi]
   915 00000783 488931                  	mov qword [rcx], rsi
   916 00000786 48FFCA                  	dec rdx
   917 00000789 EBE7                    	jmp .L_tc_recycle_frame_loop_0002
   918                                  .L_tc_recycle_frame_done_0002:
   919 0000078B 5D                      	pop rbp ; restore the old rbp
   920 0000078C 4889CC                  	mov rsp, rcx
   921 0000078F FF6009                  	jmp SOB_CLOSURE_CODE(rax)
   922 00000792 C9                      	leave
   923 00000793 C21800                  	ret 8 * (2 + 1)
   924                                  .L_lambda_simple_end_0002:	; new closure is in rax
   925 00000796 48890425[C8010000]      	mov qword [free_var_57], rax
   926 0000079E 48B8-                   	mov rax, sob_void
   926 000007A0 [0000000000000000] 
   927                                  
   928 000007A8 4889C7                  	mov rdi, rax
   929 000007AB E8F2F50000              	call print_sexpr_if_not_void
   930                                  
   931 000007B0 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
   932 000007B5 E8D7F50000              	call malloc
   933 000007BA 50                      	push rax
   934 000007BB BF00000000              	mov rdi, 8 * 0	; new rib
   935 000007C0 E8CCF50000              	call malloc
   936 000007C5 50                      	push rax
   937 000007C6 BF08000000              	mov rdi, 8 * 1	; extended env
   938 000007CB E8C1F50000              	call malloc
   939 000007D0 488B7D10                	mov rdi, ENV
   940 000007D4 BE00000000              	mov rsi, 0
   941 000007D9 BA01000000              	mov rdx, 1
   942                                  .L_lambda_simple_env_loop_0003:	; ext_env[i + 1] <-- env[i]
   943 000007DE 4883FE00                	cmp rsi, 0
   944 000007E2 7410                    	je .L_lambda_simple_env_end_0003
   945 000007E4 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
   946 000007E8 48890CD0                	mov qword [rax + 8 * rdx], rcx
   947 000007EC 48FFC6                  	inc rsi
   948 000007EF 48FFC2                  	inc rdx
   949 000007F2 EBEA                    	jmp .L_lambda_simple_env_loop_0003
   950                                  .L_lambda_simple_env_end_0003:
   951 000007F4 5B                      	pop rbx
   952 000007F5 BE00000000              	mov rsi, 0
   953                                  .L_lambda_simple_params_loop_0003:	; copy params
   954 000007FA 4883FE00                	cmp rsi, 0
   955 000007FE 740E                    	je .L_lambda_simple_params_end_0003
   956 00000800 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
   957 00000805 488914F3                	mov qword [rbx + 8 * rsi], rdx
   958 00000809 48FFC6                  	inc rsi
   959 0000080C EBEC                    	jmp .L_lambda_simple_params_loop_0003
   960                                  .L_lambda_simple_params_end_0003:
   961 0000080E 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
   962 00000811 4889C3                  	mov rbx, rax
   963 00000814 58                      	pop rax
   964 00000815 C60005                  	mov byte [rax], T_closure
   965 00000818 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
   966 0000081C 48C74009[29080000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0003
   967 00000824 E987000000              	jmp .L_lambda_simple_end_0003
   968                                  .L_lambda_simple_code_0003:	; lambda-simple body
   969 00000829 48837C241001            	cmp qword [rsp + 8 * 2], 1
   970 0000082F 740B                    	je .L_lambda_simple_arity_check_ok_0003
   971 00000831 FF742410                	push qword [rsp + 8 * 2]
   972 00000835 6A01                    	push 1
   973 00000837 E90EF50000              	jmp L_error_incorrect_arity_simple
   974                                  .L_lambda_simple_arity_check_ok_0003:
   975 0000083C C8000000                	enter 0, 0
   976 00000840 488B4520                	mov rax, qword [rbp + 8 * (4 + 0)]
   977 00000844 50                      	push rax
   978 00000845 6A01                    	push 1
   979 00000847 488B0425[80000000]      	mov rax, qword [free_var_16]
   980                                  	assert_closure(rax)
    42 0000084F 803805              <1>  cmp byte [%1], %2
    43 00000852 0F85320D0100        <1>  jne L_error_incorrect_type
   981 00000858 FF7001                  	push SOB_CLOSURE_ENV(rax)
   982 0000085B FF5009                  	call SOB_CLOSURE_CODE(rax)
   983 0000085E 50                      	push rax
   984 0000085F 6A01                    	push 1
   985 00000861 488B0425[88000000]      	mov rax, qword [free_var_17]
   986                                  	assert_closure(rax)
    42 00000869 803805              <1>  cmp byte [%1], %2
    43 0000086C 0F85180D0100        <1>  jne L_error_incorrect_type
   987 00000872 FF7001                  	push SOB_CLOSURE_ENV(rax)
   988 00000875 FF7508                  	push qword [rbp + 8 * 1] ; old ret addr
   989 00000878 FF7500                  	push qword [rbp] ; same the old rbp
   990 0000087B BA04000000              	mov rdx, 1 + 3
   991 00000880 488B4D18                	mov rcx, COUNT
   992 00000884 488D4CCD20              	lea rcx, [rbp + 8*4 + rcx * 8]
   993 00000889 4889EF                  	mov rdi, rbp
   994                                  .L_tc_recycle_frame_loop_0003:
   995 0000088C 4883FA00                	cmp rdx, 0
   996 00000890 7413                    	je .L_tc_recycle_frame_done_0003
   997 00000892 4883E908                	sub rcx, 8
   998 00000896 4883EF08                	sub rdi, 8
   999 0000089A 488B37                  	mov rsi, [rdi]
  1000 0000089D 488931                  	mov qword [rcx], rsi
  1001 000008A0 48FFCA                  	dec rdx
  1002 000008A3 EBE7                    	jmp .L_tc_recycle_frame_loop_0003
  1003                                  .L_tc_recycle_frame_done_0003:
  1004 000008A5 5D                      	pop rbp ; restore the old rbp
  1005 000008A6 4889CC                  	mov rsp, rcx
  1006 000008A9 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
  1007 000008AC C9                      	leave
  1008 000008AD C21800                  	ret 8 * (2 + 1)
  1009                                  .L_lambda_simple_end_0003:	; new closure is in rax
  1010 000008B0 48890425[D0010000]      	mov qword [free_var_58], rax
  1011 000008B8 48B8-                   	mov rax, sob_void
  1011 000008BA [0000000000000000] 
  1012                                  
  1013 000008C2 4889C7                  	mov rdi, rax
  1014 000008C5 E8D8F40000              	call print_sexpr_if_not_void
  1015                                  
  1016 000008CA BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  1017 000008CF E8BDF40000              	call malloc
  1018 000008D4 50                      	push rax
  1019 000008D5 BF00000000              	mov rdi, 8 * 0	; new rib
  1020 000008DA E8B2F40000              	call malloc
  1021 000008DF 50                      	push rax
  1022 000008E0 BF08000000              	mov rdi, 8 * 1	; extended env
  1023 000008E5 E8A7F40000              	call malloc
  1024 000008EA 488B7D10                	mov rdi, ENV
  1025 000008EE BE00000000              	mov rsi, 0
  1026 000008F3 BA01000000              	mov rdx, 1
  1027                                  .L_lambda_simple_env_loop_0004:	; ext_env[i + 1] <-- env[i]
  1028 000008F8 4883FE00                	cmp rsi, 0
  1029 000008FC 7410                    	je .L_lambda_simple_env_end_0004
  1030 000008FE 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  1031 00000902 48890CD0                	mov qword [rax + 8 * rdx], rcx
  1032 00000906 48FFC6                  	inc rsi
  1033 00000909 48FFC2                  	inc rdx
  1034 0000090C EBEA                    	jmp .L_lambda_simple_env_loop_0004
  1035                                  .L_lambda_simple_env_end_0004:
  1036 0000090E 5B                      	pop rbx
  1037 0000090F BE00000000              	mov rsi, 0
  1038                                  .L_lambda_simple_params_loop_0004:	; copy params
  1039 00000914 4883FE00                	cmp rsi, 0
  1040 00000918 740E                    	je .L_lambda_simple_params_end_0004
  1041 0000091A 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  1042 0000091F 488914F3                	mov qword [rbx + 8 * rsi], rdx
  1043 00000923 48FFC6                  	inc rsi
  1044 00000926 EBEC                    	jmp .L_lambda_simple_params_loop_0004
  1045                                  .L_lambda_simple_params_end_0004:
  1046 00000928 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  1047 0000092B 4889C3                  	mov rbx, rax
  1048 0000092E 58                      	pop rax
  1049 0000092F C60005                  	mov byte [rax], T_closure
  1050 00000932 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  1051 00000936 48C74009[43090000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0004
  1052 0000093E E987000000              	jmp .L_lambda_simple_end_0004
  1053                                  .L_lambda_simple_code_0004:	; lambda-simple body
  1054 00000943 48837C241001            	cmp qword [rsp + 8 * 2], 1
  1055 00000949 740B                    	je .L_lambda_simple_arity_check_ok_0004
  1056 0000094B FF742410                	push qword [rsp + 8 * 2]
  1057 0000094F 6A01                    	push 1
  1058 00000951 E9F4F30000              	jmp L_error_incorrect_arity_simple
  1059                                  .L_lambda_simple_arity_check_ok_0004:
  1060 00000956 C8000000                	enter 0, 0
  1061 0000095A 488B4520                	mov rax, qword [rbp + 8 * (4 + 0)]
  1062 0000095E 50                      	push rax
  1063 0000095F 6A01                    	push 1
  1064 00000961 488B0425[88000000]      	mov rax, qword [free_var_17]
  1065                                  	assert_closure(rax)
    42 00000969 803805              <1>  cmp byte [%1], %2
    43 0000096C 0F85180C0100        <1>  jne L_error_incorrect_type
  1066 00000972 FF7001                  	push SOB_CLOSURE_ENV(rax)
  1067 00000975 FF5009                  	call SOB_CLOSURE_CODE(rax)
  1068 00000978 50                      	push rax
  1069 00000979 6A01                    	push 1
  1070 0000097B 488B0425[88000000]      	mov rax, qword [free_var_17]
  1071                                  	assert_closure(rax)
    42 00000983 803805              <1>  cmp byte [%1], %2
    43 00000986 0F85FE0B0100        <1>  jne L_error_incorrect_type
  1072 0000098C FF7001                  	push SOB_CLOSURE_ENV(rax)
  1073 0000098F FF7508                  	push qword [rbp + 8 * 1] ; old ret addr
  1074 00000992 FF7500                  	push qword [rbp] ; same the old rbp
  1075 00000995 BA04000000              	mov rdx, 1 + 3
  1076 0000099A 488B4D18                	mov rcx, COUNT
  1077 0000099E 488D4CCD20              	lea rcx, [rbp + 8*4 + rcx * 8]
  1078 000009A3 4889EF                  	mov rdi, rbp
  1079                                  .L_tc_recycle_frame_loop_0004:
  1080 000009A6 4883FA00                	cmp rdx, 0
  1081 000009AA 7413                    	je .L_tc_recycle_frame_done_0004
  1082 000009AC 4883E908                	sub rcx, 8
  1083 000009B0 4883EF08                	sub rdi, 8
  1084 000009B4 488B37                  	mov rsi, [rdi]
  1085 000009B7 488931                  	mov qword [rcx], rsi
  1086 000009BA 48FFCA                  	dec rdx
  1087 000009BD EBE7                    	jmp .L_tc_recycle_frame_loop_0004
  1088                                  .L_tc_recycle_frame_done_0004:
  1089 000009BF 5D                      	pop rbp ; restore the old rbp
  1090 000009C0 4889CC                  	mov rsp, rcx
  1091 000009C3 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
  1092 000009C6 C9                      	leave
  1093 000009C7 C21800                  	ret 8 * (2 + 1)
  1094                                  .L_lambda_simple_end_0004:	; new closure is in rax
  1095 000009CA 48890425[D8010000]      	mov qword [free_var_59], rax
  1096 000009D2 48B8-                   	mov rax, sob_void
  1096 000009D4 [0000000000000000] 
  1097                                  
  1098 000009DC 4889C7                  	mov rdi, rax
  1099 000009DF E8BEF30000              	call print_sexpr_if_not_void
  1100                                  
  1101 000009E4 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  1102 000009E9 E8A3F30000              	call malloc
  1103 000009EE 50                      	push rax
  1104 000009EF BF00000000              	mov rdi, 8 * 0	; new rib
  1105 000009F4 E898F30000              	call malloc
  1106 000009F9 50                      	push rax
  1107 000009FA BF08000000              	mov rdi, 8 * 1	; extended env
  1108 000009FF E88DF30000              	call malloc
  1109 00000A04 488B7D10                	mov rdi, ENV
  1110 00000A08 BE00000000              	mov rsi, 0
  1111 00000A0D BA01000000              	mov rdx, 1
  1112                                  .L_lambda_simple_env_loop_0005:	; ext_env[i + 1] <-- env[i]
  1113 00000A12 4883FE00                	cmp rsi, 0
  1114 00000A16 7410                    	je .L_lambda_simple_env_end_0005
  1115 00000A18 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  1116 00000A1C 48890CD0                	mov qword [rax + 8 * rdx], rcx
  1117 00000A20 48FFC6                  	inc rsi
  1118 00000A23 48FFC2                  	inc rdx
  1119 00000A26 EBEA                    	jmp .L_lambda_simple_env_loop_0005
  1120                                  .L_lambda_simple_env_end_0005:
  1121 00000A28 5B                      	pop rbx
  1122 00000A29 BE00000000              	mov rsi, 0
  1123                                  .L_lambda_simple_params_loop_0005:	; copy params
  1124 00000A2E 4883FE00                	cmp rsi, 0
  1125 00000A32 740E                    	je .L_lambda_simple_params_end_0005
  1126 00000A34 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  1127 00000A39 488914F3                	mov qword [rbx + 8 * rsi], rdx
  1128 00000A3D 48FFC6                  	inc rsi
  1129 00000A40 EBEC                    	jmp .L_lambda_simple_params_loop_0005
  1130                                  .L_lambda_simple_params_end_0005:
  1131 00000A42 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  1132 00000A45 4889C3                  	mov rbx, rax
  1133 00000A48 58                      	pop rax
  1134 00000A49 C60005                  	mov byte [rax], T_closure
  1135 00000A4C 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  1136 00000A50 48C74009[5D0A0000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0005
  1137 00000A58 E987000000              	jmp .L_lambda_simple_end_0005
  1138                                  .L_lambda_simple_code_0005:	; lambda-simple body
  1139 00000A5D 48837C241001            	cmp qword [rsp + 8 * 2], 1
  1140 00000A63 740B                    	je .L_lambda_simple_arity_check_ok_0005
  1141 00000A65 FF742410                	push qword [rsp + 8 * 2]
  1142 00000A69 6A01                    	push 1
  1143 00000A6B E9DAF20000              	jmp L_error_incorrect_arity_simple
  1144                                  .L_lambda_simple_arity_check_ok_0005:
  1145 00000A70 C8000000                	enter 0, 0
  1146 00000A74 488B4520                	mov rax, qword [rbp + 8 * (4 + 0)]
  1147 00000A78 50                      	push rax
  1148 00000A79 6A01                    	push 1
  1149 00000A7B 488B0425[C0010000]      	mov rax, qword [free_var_56]
  1150                                  	assert_closure(rax)
    42 00000A83 803805              <1>  cmp byte [%1], %2
    43 00000A86 0F85FE0A0100        <1>  jne L_error_incorrect_type
  1151 00000A8C FF7001                  	push SOB_CLOSURE_ENV(rax)
  1152 00000A8F FF5009                  	call SOB_CLOSURE_CODE(rax)
  1153 00000A92 50                      	push rax
  1154 00000A93 6A01                    	push 1
  1155 00000A95 488B0425[80000000]      	mov rax, qword [free_var_16]
  1156                                  	assert_closure(rax)
    42 00000A9D 803805              <1>  cmp byte [%1], %2
    43 00000AA0 0F85E40A0100        <1>  jne L_error_incorrect_type
  1157 00000AA6 FF7001                  	push SOB_CLOSURE_ENV(rax)
  1158 00000AA9 FF7508                  	push qword [rbp + 8 * 1] ; old ret addr
  1159 00000AAC FF7500                  	push qword [rbp] ; same the old rbp
  1160 00000AAF BA04000000              	mov rdx, 1 + 3
  1161 00000AB4 488B4D18                	mov rcx, COUNT
  1162 00000AB8 488D4CCD20              	lea rcx, [rbp + 8*4 + rcx * 8]
  1163 00000ABD 4889EF                  	mov rdi, rbp
  1164                                  .L_tc_recycle_frame_loop_0005:
  1165 00000AC0 4883FA00                	cmp rdx, 0
  1166 00000AC4 7413                    	je .L_tc_recycle_frame_done_0005
  1167 00000AC6 4883E908                	sub rcx, 8
  1168 00000ACA 4883EF08                	sub rdi, 8
  1169 00000ACE 488B37                  	mov rsi, [rdi]
  1170 00000AD1 488931                  	mov qword [rcx], rsi
  1171 00000AD4 48FFCA                  	dec rdx
  1172 00000AD7 EBE7                    	jmp .L_tc_recycle_frame_loop_0005
  1173                                  .L_tc_recycle_frame_done_0005:
  1174 00000AD9 5D                      	pop rbp ; restore the old rbp
  1175 00000ADA 4889CC                  	mov rsp, rcx
  1176 00000ADD FF6009                  	jmp SOB_CLOSURE_CODE(rax)
  1177 00000AE0 C9                      	leave
  1178 00000AE1 C21800                  	ret 8 * (2 + 1)
  1179                                  .L_lambda_simple_end_0005:	; new closure is in rax
  1180 00000AE4 48890425[E0010000]      	mov qword [free_var_60], rax
  1181 00000AEC 48B8-                   	mov rax, sob_void
  1181 00000AEE [0000000000000000] 
  1182                                  
  1183 00000AF6 4889C7                  	mov rdi, rax
  1184 00000AF9 E8A4F20000              	call print_sexpr_if_not_void
  1185                                  
  1186 00000AFE BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  1187 00000B03 E889F20000              	call malloc
  1188 00000B08 50                      	push rax
  1189 00000B09 BF00000000              	mov rdi, 8 * 0	; new rib
  1190 00000B0E E87EF20000              	call malloc
  1191 00000B13 50                      	push rax
  1192 00000B14 BF08000000              	mov rdi, 8 * 1	; extended env
  1193 00000B19 E873F20000              	call malloc
  1194 00000B1E 488B7D10                	mov rdi, ENV
  1195 00000B22 BE00000000              	mov rsi, 0
  1196 00000B27 BA01000000              	mov rdx, 1
  1197                                  .L_lambda_simple_env_loop_0006:	; ext_env[i + 1] <-- env[i]
  1198 00000B2C 4883FE00                	cmp rsi, 0
  1199 00000B30 7410                    	je .L_lambda_simple_env_end_0006
  1200 00000B32 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  1201 00000B36 48890CD0                	mov qword [rax + 8 * rdx], rcx
  1202 00000B3A 48FFC6                  	inc rsi
  1203 00000B3D 48FFC2                  	inc rdx
  1204 00000B40 EBEA                    	jmp .L_lambda_simple_env_loop_0006
  1205                                  .L_lambda_simple_env_end_0006:
  1206 00000B42 5B                      	pop rbx
  1207 00000B43 BE00000000              	mov rsi, 0
  1208                                  .L_lambda_simple_params_loop_0006:	; copy params
  1209 00000B48 4883FE00                	cmp rsi, 0
  1210 00000B4C 740E                    	je .L_lambda_simple_params_end_0006
  1211 00000B4E 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  1212 00000B53 488914F3                	mov qword [rbx + 8 * rsi], rdx
  1213 00000B57 48FFC6                  	inc rsi
  1214 00000B5A EBEC                    	jmp .L_lambda_simple_params_loop_0006
  1215                                  .L_lambda_simple_params_end_0006:
  1216 00000B5C 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  1217 00000B5F 4889C3                  	mov rbx, rax
  1218 00000B62 58                      	pop rax
  1219 00000B63 C60005                  	mov byte [rax], T_closure
  1220 00000B66 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  1221 00000B6A 48C74009[770B0000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0006
  1222 00000B72 E987000000              	jmp .L_lambda_simple_end_0006
  1223                                  .L_lambda_simple_code_0006:	; lambda-simple body
  1224 00000B77 48837C241001            	cmp qword [rsp + 8 * 2], 1
  1225 00000B7D 740B                    	je .L_lambda_simple_arity_check_ok_0006
  1226 00000B7F FF742410                	push qword [rsp + 8 * 2]
  1227 00000B83 6A01                    	push 1
  1228 00000B85 E9C0F10000              	jmp L_error_incorrect_arity_simple
  1229                                  .L_lambda_simple_arity_check_ok_0006:
  1230 00000B8A C8000000                	enter 0, 0
  1231 00000B8E 488B4520                	mov rax, qword [rbp + 8 * (4 + 0)]
  1232 00000B92 50                      	push rax
  1233 00000B93 6A01                    	push 1
  1234 00000B95 488B0425[C8010000]      	mov rax, qword [free_var_57]
  1235                                  	assert_closure(rax)
    42 00000B9D 803805              <1>  cmp byte [%1], %2
    43 00000BA0 0F85E4090100        <1>  jne L_error_incorrect_type
  1236 00000BA6 FF7001                  	push SOB_CLOSURE_ENV(rax)
  1237 00000BA9 FF5009                  	call SOB_CLOSURE_CODE(rax)
  1238 00000BAC 50                      	push rax
  1239 00000BAD 6A01                    	push 1
  1240 00000BAF 488B0425[80000000]      	mov rax, qword [free_var_16]
  1241                                  	assert_closure(rax)
    42 00000BB7 803805              <1>  cmp byte [%1], %2
    43 00000BBA 0F85CA090100        <1>  jne L_error_incorrect_type
  1242 00000BC0 FF7001                  	push SOB_CLOSURE_ENV(rax)
  1243 00000BC3 FF7508                  	push qword [rbp + 8 * 1] ; old ret addr
  1244 00000BC6 FF7500                  	push qword [rbp] ; same the old rbp
  1245 00000BC9 BA04000000              	mov rdx, 1 + 3
  1246 00000BCE 488B4D18                	mov rcx, COUNT
  1247 00000BD2 488D4CCD20              	lea rcx, [rbp + 8*4 + rcx * 8]
  1248 00000BD7 4889EF                  	mov rdi, rbp
  1249                                  .L_tc_recycle_frame_loop_0006:
  1250 00000BDA 4883FA00                	cmp rdx, 0
  1251 00000BDE 7413                    	je .L_tc_recycle_frame_done_0006
  1252 00000BE0 4883E908                	sub rcx, 8
  1253 00000BE4 4883EF08                	sub rdi, 8
  1254 00000BE8 488B37                  	mov rsi, [rdi]
  1255 00000BEB 488931                  	mov qword [rcx], rsi
  1256 00000BEE 48FFCA                  	dec rdx
  1257 00000BF1 EBE7                    	jmp .L_tc_recycle_frame_loop_0006
  1258                                  .L_tc_recycle_frame_done_0006:
  1259 00000BF3 5D                      	pop rbp ; restore the old rbp
  1260 00000BF4 4889CC                  	mov rsp, rcx
  1261 00000BF7 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
  1262 00000BFA C9                      	leave
  1263 00000BFB C21800                  	ret 8 * (2 + 1)
  1264                                  .L_lambda_simple_end_0006:	; new closure is in rax
  1265 00000BFE 48890425[E8010000]      	mov qword [free_var_61], rax
  1266 00000C06 48B8-                   	mov rax, sob_void
  1266 00000C08 [0000000000000000] 
  1267                                  
  1268 00000C10 4889C7                  	mov rdi, rax
  1269 00000C13 E88AF10000              	call print_sexpr_if_not_void
  1270                                  
  1271 00000C18 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  1272 00000C1D E86FF10000              	call malloc
  1273 00000C22 50                      	push rax
  1274 00000C23 BF00000000              	mov rdi, 8 * 0	; new rib
  1275 00000C28 E864F10000              	call malloc
  1276 00000C2D 50                      	push rax
  1277 00000C2E BF08000000              	mov rdi, 8 * 1	; extended env
  1278 00000C33 E859F10000              	call malloc
  1279 00000C38 488B7D10                	mov rdi, ENV
  1280 00000C3C BE00000000              	mov rsi, 0
  1281 00000C41 BA01000000              	mov rdx, 1
  1282                                  .L_lambda_simple_env_loop_0007:	; ext_env[i + 1] <-- env[i]
  1283 00000C46 4883FE00                	cmp rsi, 0
  1284 00000C4A 7410                    	je .L_lambda_simple_env_end_0007
  1285 00000C4C 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  1286 00000C50 48890CD0                	mov qword [rax + 8 * rdx], rcx
  1287 00000C54 48FFC6                  	inc rsi
  1288 00000C57 48FFC2                  	inc rdx
  1289 00000C5A EBEA                    	jmp .L_lambda_simple_env_loop_0007
  1290                                  .L_lambda_simple_env_end_0007:
  1291 00000C5C 5B                      	pop rbx
  1292 00000C5D BE00000000              	mov rsi, 0
  1293                                  .L_lambda_simple_params_loop_0007:	; copy params
  1294 00000C62 4883FE00                	cmp rsi, 0
  1295 00000C66 740E                    	je .L_lambda_simple_params_end_0007
  1296 00000C68 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  1297 00000C6D 488914F3                	mov qword [rbx + 8 * rsi], rdx
  1298 00000C71 48FFC6                  	inc rsi
  1299 00000C74 EBEC                    	jmp .L_lambda_simple_params_loop_0007
  1300                                  .L_lambda_simple_params_end_0007:
  1301 00000C76 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  1302 00000C79 4889C3                  	mov rbx, rax
  1303 00000C7C 58                      	pop rax
  1304 00000C7D C60005                  	mov byte [rax], T_closure
  1305 00000C80 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  1306 00000C84 48C74009[910C0000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0007
  1307 00000C8C E987000000              	jmp .L_lambda_simple_end_0007
  1308                                  .L_lambda_simple_code_0007:	; lambda-simple body
  1309 00000C91 48837C241001            	cmp qword [rsp + 8 * 2], 1
  1310 00000C97 740B                    	je .L_lambda_simple_arity_check_ok_0007
  1311 00000C99 FF742410                	push qword [rsp + 8 * 2]
  1312 00000C9D 6A01                    	push 1
  1313 00000C9F E9A6F00000              	jmp L_error_incorrect_arity_simple
  1314                                  .L_lambda_simple_arity_check_ok_0007:
  1315 00000CA4 C8000000                	enter 0, 0
  1316 00000CA8 488B4520                	mov rax, qword [rbp + 8 * (4 + 0)]
  1317 00000CAC 50                      	push rax
  1318 00000CAD 6A01                    	push 1
  1319 00000CAF 488B0425[D0010000]      	mov rax, qword [free_var_58]
  1320                                  	assert_closure(rax)
    42 00000CB7 803805              <1>  cmp byte [%1], %2
    43 00000CBA 0F85CA080100        <1>  jne L_error_incorrect_type
  1321 00000CC0 FF7001                  	push SOB_CLOSURE_ENV(rax)
  1322 00000CC3 FF5009                  	call SOB_CLOSURE_CODE(rax)
  1323 00000CC6 50                      	push rax
  1324 00000CC7 6A01                    	push 1
  1325 00000CC9 488B0425[80000000]      	mov rax, qword [free_var_16]
  1326                                  	assert_closure(rax)
    42 00000CD1 803805              <1>  cmp byte [%1], %2
    43 00000CD4 0F85B0080100        <1>  jne L_error_incorrect_type
  1327 00000CDA FF7001                  	push SOB_CLOSURE_ENV(rax)
  1328 00000CDD FF7508                  	push qword [rbp + 8 * 1] ; old ret addr
  1329 00000CE0 FF7500                  	push qword [rbp] ; same the old rbp
  1330 00000CE3 BA04000000              	mov rdx, 1 + 3
  1331 00000CE8 488B4D18                	mov rcx, COUNT
  1332 00000CEC 488D4CCD20              	lea rcx, [rbp + 8*4 + rcx * 8]
  1333 00000CF1 4889EF                  	mov rdi, rbp
  1334                                  .L_tc_recycle_frame_loop_0007:
  1335 00000CF4 4883FA00                	cmp rdx, 0
  1336 00000CF8 7413                    	je .L_tc_recycle_frame_done_0007
  1337 00000CFA 4883E908                	sub rcx, 8
  1338 00000CFE 4883EF08                	sub rdi, 8
  1339 00000D02 488B37                  	mov rsi, [rdi]
  1340 00000D05 488931                  	mov qword [rcx], rsi
  1341 00000D08 48FFCA                  	dec rdx
  1342 00000D0B EBE7                    	jmp .L_tc_recycle_frame_loop_0007
  1343                                  .L_tc_recycle_frame_done_0007:
  1344 00000D0D 5D                      	pop rbp ; restore the old rbp
  1345 00000D0E 4889CC                  	mov rsp, rcx
  1346 00000D11 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
  1347 00000D14 C9                      	leave
  1348 00000D15 C21800                  	ret 8 * (2 + 1)
  1349                                  .L_lambda_simple_end_0007:	; new closure is in rax
  1350 00000D18 48890425[F0010000]      	mov qword [free_var_62], rax
  1351 00000D20 48B8-                   	mov rax, sob_void
  1351 00000D22 [0000000000000000] 
  1352                                  
  1353 00000D2A 4889C7                  	mov rdi, rax
  1354 00000D2D E870F00000              	call print_sexpr_if_not_void
  1355                                  
  1356 00000D32 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  1357 00000D37 E855F00000              	call malloc
  1358 00000D3C 50                      	push rax
  1359 00000D3D BF00000000              	mov rdi, 8 * 0	; new rib
  1360 00000D42 E84AF00000              	call malloc
  1361 00000D47 50                      	push rax
  1362 00000D48 BF08000000              	mov rdi, 8 * 1	; extended env
  1363 00000D4D E83FF00000              	call malloc
  1364 00000D52 488B7D10                	mov rdi, ENV
  1365 00000D56 BE00000000              	mov rsi, 0
  1366 00000D5B BA01000000              	mov rdx, 1
  1367                                  .L_lambda_simple_env_loop_0008:	; ext_env[i + 1] <-- env[i]
  1368 00000D60 4883FE00                	cmp rsi, 0
  1369 00000D64 7410                    	je .L_lambda_simple_env_end_0008
  1370 00000D66 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  1371 00000D6A 48890CD0                	mov qword [rax + 8 * rdx], rcx
  1372 00000D6E 48FFC6                  	inc rsi
  1373 00000D71 48FFC2                  	inc rdx
  1374 00000D74 EBEA                    	jmp .L_lambda_simple_env_loop_0008
  1375                                  .L_lambda_simple_env_end_0008:
  1376 00000D76 5B                      	pop rbx
  1377 00000D77 BE00000000              	mov rsi, 0
  1378                                  .L_lambda_simple_params_loop_0008:	; copy params
  1379 00000D7C 4883FE00                	cmp rsi, 0
  1380 00000D80 740E                    	je .L_lambda_simple_params_end_0008
  1381 00000D82 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  1382 00000D87 488914F3                	mov qword [rbx + 8 * rsi], rdx
  1383 00000D8B 48FFC6                  	inc rsi
  1384 00000D8E EBEC                    	jmp .L_lambda_simple_params_loop_0008
  1385                                  .L_lambda_simple_params_end_0008:
  1386 00000D90 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  1387 00000D93 4889C3                  	mov rbx, rax
  1388 00000D96 58                      	pop rax
  1389 00000D97 C60005                  	mov byte [rax], T_closure
  1390 00000D9A 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  1391 00000D9E 48C74009[AB0D0000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0008
  1392 00000DA6 E987000000              	jmp .L_lambda_simple_end_0008
  1393                                  .L_lambda_simple_code_0008:	; lambda-simple body
  1394 00000DAB 48837C241001            	cmp qword [rsp + 8 * 2], 1
  1395 00000DB1 740B                    	je .L_lambda_simple_arity_check_ok_0008
  1396 00000DB3 FF742410                	push qword [rsp + 8 * 2]
  1397 00000DB7 6A01                    	push 1
  1398 00000DB9 E98CEF0000              	jmp L_error_incorrect_arity_simple
  1399                                  .L_lambda_simple_arity_check_ok_0008:
  1400 00000DBE C8000000                	enter 0, 0
  1401 00000DC2 488B4520                	mov rax, qword [rbp + 8 * (4 + 0)]
  1402 00000DC6 50                      	push rax
  1403 00000DC7 6A01                    	push 1
  1404 00000DC9 488B0425[D8010000]      	mov rax, qword [free_var_59]
  1405                                  	assert_closure(rax)
    42 00000DD1 803805              <1>  cmp byte [%1], %2
    43 00000DD4 0F85B0070100        <1>  jne L_error_incorrect_type
  1406 00000DDA FF7001                  	push SOB_CLOSURE_ENV(rax)
  1407 00000DDD FF5009                  	call SOB_CLOSURE_CODE(rax)
  1408 00000DE0 50                      	push rax
  1409 00000DE1 6A01                    	push 1
  1410 00000DE3 488B0425[80000000]      	mov rax, qword [free_var_16]
  1411                                  	assert_closure(rax)
    42 00000DEB 803805              <1>  cmp byte [%1], %2
    43 00000DEE 0F8596070100        <1>  jne L_error_incorrect_type
  1412 00000DF4 FF7001                  	push SOB_CLOSURE_ENV(rax)
  1413 00000DF7 FF7508                  	push qword [rbp + 8 * 1] ; old ret addr
  1414 00000DFA FF7500                  	push qword [rbp] ; same the old rbp
  1415 00000DFD BA04000000              	mov rdx, 1 + 3
  1416 00000E02 488B4D18                	mov rcx, COUNT
  1417 00000E06 488D4CCD20              	lea rcx, [rbp + 8*4 + rcx * 8]
  1418 00000E0B 4889EF                  	mov rdi, rbp
  1419                                  .L_tc_recycle_frame_loop_0008:
  1420 00000E0E 4883FA00                	cmp rdx, 0
  1421 00000E12 7413                    	je .L_tc_recycle_frame_done_0008
  1422 00000E14 4883E908                	sub rcx, 8
  1423 00000E18 4883EF08                	sub rdi, 8
  1424 00000E1C 488B37                  	mov rsi, [rdi]
  1425 00000E1F 488931                  	mov qword [rcx], rsi
  1426 00000E22 48FFCA                  	dec rdx
  1427 00000E25 EBE7                    	jmp .L_tc_recycle_frame_loop_0008
  1428                                  .L_tc_recycle_frame_done_0008:
  1429 00000E27 5D                      	pop rbp ; restore the old rbp
  1430 00000E28 4889CC                  	mov rsp, rcx
  1431 00000E2B FF6009                  	jmp SOB_CLOSURE_CODE(rax)
  1432 00000E2E C9                      	leave
  1433 00000E2F C21800                  	ret 8 * (2 + 1)
  1434                                  .L_lambda_simple_end_0008:	; new closure is in rax
  1435 00000E32 48890425[F8010000]      	mov qword [free_var_63], rax
  1436 00000E3A 48B8-                   	mov rax, sob_void
  1436 00000E3C [0000000000000000] 
  1437                                  
  1438 00000E44 4889C7                  	mov rdi, rax
  1439 00000E47 E856EF0000              	call print_sexpr_if_not_void
  1440                                  
  1441 00000E4C BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  1442 00000E51 E83BEF0000              	call malloc
  1443 00000E56 50                      	push rax
  1444 00000E57 BF00000000              	mov rdi, 8 * 0	; new rib
  1445 00000E5C E830EF0000              	call malloc
  1446 00000E61 50                      	push rax
  1447 00000E62 BF08000000              	mov rdi, 8 * 1	; extended env
  1448 00000E67 E825EF0000              	call malloc
  1449 00000E6C 488B7D10                	mov rdi, ENV
  1450 00000E70 BE00000000              	mov rsi, 0
  1451 00000E75 BA01000000              	mov rdx, 1
  1452                                  .L_lambda_simple_env_loop_0009:	; ext_env[i + 1] <-- env[i]
  1453 00000E7A 4883FE00                	cmp rsi, 0
  1454 00000E7E 7410                    	je .L_lambda_simple_env_end_0009
  1455 00000E80 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  1456 00000E84 48890CD0                	mov qword [rax + 8 * rdx], rcx
  1457 00000E88 48FFC6                  	inc rsi
  1458 00000E8B 48FFC2                  	inc rdx
  1459 00000E8E EBEA                    	jmp .L_lambda_simple_env_loop_0009
  1460                                  .L_lambda_simple_env_end_0009:
  1461 00000E90 5B                      	pop rbx
  1462 00000E91 BE00000000              	mov rsi, 0
  1463                                  .L_lambda_simple_params_loop_0009:	; copy params
  1464 00000E96 4883FE00                	cmp rsi, 0
  1465 00000E9A 740E                    	je .L_lambda_simple_params_end_0009
  1466 00000E9C 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  1467 00000EA1 488914F3                	mov qword [rbx + 8 * rsi], rdx
  1468 00000EA5 48FFC6                  	inc rsi
  1469 00000EA8 EBEC                    	jmp .L_lambda_simple_params_loop_0009
  1470                                  .L_lambda_simple_params_end_0009:
  1471 00000EAA 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  1472 00000EAD 4889C3                  	mov rbx, rax
  1473 00000EB0 58                      	pop rax
  1474 00000EB1 C60005                  	mov byte [rax], T_closure
  1475 00000EB4 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  1476 00000EB8 48C74009[C50E0000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0009
  1477 00000EC0 E987000000              	jmp .L_lambda_simple_end_0009
  1478                                  .L_lambda_simple_code_0009:	; lambda-simple body
  1479 00000EC5 48837C241001            	cmp qword [rsp + 8 * 2], 1
  1480 00000ECB 740B                    	je .L_lambda_simple_arity_check_ok_0009
  1481 00000ECD FF742410                	push qword [rsp + 8 * 2]
  1482 00000ED1 6A01                    	push 1
  1483 00000ED3 E972EE0000              	jmp L_error_incorrect_arity_simple
  1484                                  .L_lambda_simple_arity_check_ok_0009:
  1485 00000ED8 C8000000                	enter 0, 0
  1486 00000EDC 488B4520                	mov rax, qword [rbp + 8 * (4 + 0)]
  1487 00000EE0 50                      	push rax
  1488 00000EE1 6A01                    	push 1
  1489 00000EE3 488B0425[C0010000]      	mov rax, qword [free_var_56]
  1490                                  	assert_closure(rax)
    42 00000EEB 803805              <1>  cmp byte [%1], %2
    43 00000EEE 0F8596060100        <1>  jne L_error_incorrect_type
  1491 00000EF4 FF7001                  	push SOB_CLOSURE_ENV(rax)
  1492 00000EF7 FF5009                  	call SOB_CLOSURE_CODE(rax)
  1493 00000EFA 50                      	push rax
  1494 00000EFB 6A01                    	push 1
  1495 00000EFD 488B0425[88000000]      	mov rax, qword [free_var_17]
  1496                                  	assert_closure(rax)
    42 00000F05 803805              <1>  cmp byte [%1], %2
    43 00000F08 0F857C060100        <1>  jne L_error_incorrect_type
  1497 00000F0E FF7001                  	push SOB_CLOSURE_ENV(rax)
  1498 00000F11 FF7508                  	push qword [rbp + 8 * 1] ; old ret addr
  1499 00000F14 FF7500                  	push qword [rbp] ; same the old rbp
  1500 00000F17 BA04000000              	mov rdx, 1 + 3
  1501 00000F1C 488B4D18                	mov rcx, COUNT
  1502 00000F20 488D4CCD20              	lea rcx, [rbp + 8*4 + rcx * 8]
  1503 00000F25 4889EF                  	mov rdi, rbp
  1504                                  .L_tc_recycle_frame_loop_0009:
  1505 00000F28 4883FA00                	cmp rdx, 0
  1506 00000F2C 7413                    	je .L_tc_recycle_frame_done_0009
  1507 00000F2E 4883E908                	sub rcx, 8
  1508 00000F32 4883EF08                	sub rdi, 8
  1509 00000F36 488B37                  	mov rsi, [rdi]
  1510 00000F39 488931                  	mov qword [rcx], rsi
  1511 00000F3C 48FFCA                  	dec rdx
  1512 00000F3F EBE7                    	jmp .L_tc_recycle_frame_loop_0009
  1513                                  .L_tc_recycle_frame_done_0009:
  1514 00000F41 5D                      	pop rbp ; restore the old rbp
  1515 00000F42 4889CC                  	mov rsp, rcx
  1516 00000F45 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
  1517 00000F48 C9                      	leave
  1518 00000F49 C21800                  	ret 8 * (2 + 1)
  1519                                  .L_lambda_simple_end_0009:	; new closure is in rax
  1520 00000F4C 48890425[00020000]      	mov qword [free_var_64], rax
  1521 00000F54 48B8-                   	mov rax, sob_void
  1521 00000F56 [0000000000000000] 
  1522                                  
  1523 00000F5E 4889C7                  	mov rdi, rax
  1524 00000F61 E83CEE0000              	call print_sexpr_if_not_void
  1525                                  
  1526 00000F66 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  1527 00000F6B E821EE0000              	call malloc
  1528 00000F70 50                      	push rax
  1529 00000F71 BF00000000              	mov rdi, 8 * 0	; new rib
  1530 00000F76 E816EE0000              	call malloc
  1531 00000F7B 50                      	push rax
  1532 00000F7C BF08000000              	mov rdi, 8 * 1	; extended env
  1533 00000F81 E80BEE0000              	call malloc
  1534 00000F86 488B7D10                	mov rdi, ENV
  1535 00000F8A BE00000000              	mov rsi, 0
  1536 00000F8F BA01000000              	mov rdx, 1
  1537                                  .L_lambda_simple_env_loop_000a:	; ext_env[i + 1] <-- env[i]
  1538 00000F94 4883FE00                	cmp rsi, 0
  1539 00000F98 7410                    	je .L_lambda_simple_env_end_000a
  1540 00000F9A 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  1541 00000F9E 48890CD0                	mov qword [rax + 8 * rdx], rcx
  1542 00000FA2 48FFC6                  	inc rsi
  1543 00000FA5 48FFC2                  	inc rdx
  1544 00000FA8 EBEA                    	jmp .L_lambda_simple_env_loop_000a
  1545                                  .L_lambda_simple_env_end_000a:
  1546 00000FAA 5B                      	pop rbx
  1547 00000FAB BE00000000              	mov rsi, 0
  1548                                  .L_lambda_simple_params_loop_000a:	; copy params
  1549 00000FB0 4883FE00                	cmp rsi, 0
  1550 00000FB4 740E                    	je .L_lambda_simple_params_end_000a
  1551 00000FB6 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  1552 00000FBB 488914F3                	mov qword [rbx + 8 * rsi], rdx
  1553 00000FBF 48FFC6                  	inc rsi
  1554 00000FC2 EBEC                    	jmp .L_lambda_simple_params_loop_000a
  1555                                  .L_lambda_simple_params_end_000a:
  1556 00000FC4 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  1557 00000FC7 4889C3                  	mov rbx, rax
  1558 00000FCA 58                      	pop rax
  1559 00000FCB C60005                  	mov byte [rax], T_closure
  1560 00000FCE 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  1561 00000FD2 48C74009[DF0F0000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_000a
  1562 00000FDA E987000000              	jmp .L_lambda_simple_end_000a
  1563                                  .L_lambda_simple_code_000a:	; lambda-simple body
  1564 00000FDF 48837C241001            	cmp qword [rsp + 8 * 2], 1
  1565 00000FE5 740B                    	je .L_lambda_simple_arity_check_ok_000a
  1566 00000FE7 FF742410                	push qword [rsp + 8 * 2]
  1567 00000FEB 6A01                    	push 1
  1568 00000FED E958ED0000              	jmp L_error_incorrect_arity_simple
  1569                                  .L_lambda_simple_arity_check_ok_000a:
  1570 00000FF2 C8000000                	enter 0, 0
  1571 00000FF6 488B4520                	mov rax, qword [rbp + 8 * (4 + 0)]
  1572 00000FFA 50                      	push rax
  1573 00000FFB 6A01                    	push 1
  1574 00000FFD 488B0425[C8010000]      	mov rax, qword [free_var_57]
  1575                                  	assert_closure(rax)
    42 00001005 803805              <1>  cmp byte [%1], %2
    43 00001008 0F857C050100        <1>  jne L_error_incorrect_type
  1576 0000100E FF7001                  	push SOB_CLOSURE_ENV(rax)
  1577 00001011 FF5009                  	call SOB_CLOSURE_CODE(rax)
  1578 00001014 50                      	push rax
  1579 00001015 6A01                    	push 1
  1580 00001017 488B0425[88000000]      	mov rax, qword [free_var_17]
  1581                                  	assert_closure(rax)
    42 0000101F 803805              <1>  cmp byte [%1], %2
    43 00001022 0F8562050100        <1>  jne L_error_incorrect_type
  1582 00001028 FF7001                  	push SOB_CLOSURE_ENV(rax)
  1583 0000102B FF7508                  	push qword [rbp + 8 * 1] ; old ret addr
  1584 0000102E FF7500                  	push qword [rbp] ; same the old rbp
  1585 00001031 BA04000000              	mov rdx, 1 + 3
  1586 00001036 488B4D18                	mov rcx, COUNT
  1587 0000103A 488D4CCD20              	lea rcx, [rbp + 8*4 + rcx * 8]
  1588 0000103F 4889EF                  	mov rdi, rbp
  1589                                  .L_tc_recycle_frame_loop_000a:
  1590 00001042 4883FA00                	cmp rdx, 0
  1591 00001046 7413                    	je .L_tc_recycle_frame_done_000a
  1592 00001048 4883E908                	sub rcx, 8
  1593 0000104C 4883EF08                	sub rdi, 8
  1594 00001050 488B37                  	mov rsi, [rdi]
  1595 00001053 488931                  	mov qword [rcx], rsi
  1596 00001056 48FFCA                  	dec rdx
  1597 00001059 EBE7                    	jmp .L_tc_recycle_frame_loop_000a
  1598                                  .L_tc_recycle_frame_done_000a:
  1599 0000105B 5D                      	pop rbp ; restore the old rbp
  1600 0000105C 4889CC                  	mov rsp, rcx
  1601 0000105F FF6009                  	jmp SOB_CLOSURE_CODE(rax)
  1602 00001062 C9                      	leave
  1603 00001063 C21800                  	ret 8 * (2 + 1)
  1604                                  .L_lambda_simple_end_000a:	; new closure is in rax
  1605 00001066 48890425[08020000]      	mov qword [free_var_65], rax
  1606 0000106E 48B8-                   	mov rax, sob_void
  1606 00001070 [0000000000000000] 
  1607                                  
  1608 00001078 4889C7                  	mov rdi, rax
  1609 0000107B E822ED0000              	call print_sexpr_if_not_void
  1610                                  
  1611 00001080 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  1612 00001085 E807ED0000              	call malloc
  1613 0000108A 50                      	push rax
  1614 0000108B BF00000000              	mov rdi, 8 * 0	; new rib
  1615 00001090 E8FCEC0000              	call malloc
  1616 00001095 50                      	push rax
  1617 00001096 BF08000000              	mov rdi, 8 * 1	; extended env
  1618 0000109B E8F1EC0000              	call malloc
  1619 000010A0 488B7D10                	mov rdi, ENV
  1620 000010A4 BE00000000              	mov rsi, 0
  1621 000010A9 BA01000000              	mov rdx, 1
  1622                                  .L_lambda_simple_env_loop_000b:	; ext_env[i + 1] <-- env[i]
  1623 000010AE 4883FE00                	cmp rsi, 0
  1624 000010B2 7410                    	je .L_lambda_simple_env_end_000b
  1625 000010B4 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  1626 000010B8 48890CD0                	mov qword [rax + 8 * rdx], rcx
  1627 000010BC 48FFC6                  	inc rsi
  1628 000010BF 48FFC2                  	inc rdx
  1629 000010C2 EBEA                    	jmp .L_lambda_simple_env_loop_000b
  1630                                  .L_lambda_simple_env_end_000b:
  1631 000010C4 5B                      	pop rbx
  1632 000010C5 BE00000000              	mov rsi, 0
  1633                                  .L_lambda_simple_params_loop_000b:	; copy params
  1634 000010CA 4883FE00                	cmp rsi, 0
  1635 000010CE 740E                    	je .L_lambda_simple_params_end_000b
  1636 000010D0 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  1637 000010D5 488914F3                	mov qword [rbx + 8 * rsi], rdx
  1638 000010D9 48FFC6                  	inc rsi
  1639 000010DC EBEC                    	jmp .L_lambda_simple_params_loop_000b
  1640                                  .L_lambda_simple_params_end_000b:
  1641 000010DE 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  1642 000010E1 4889C3                  	mov rbx, rax
  1643 000010E4 58                      	pop rax
  1644 000010E5 C60005                  	mov byte [rax], T_closure
  1645 000010E8 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  1646 000010EC 48C74009[F9100000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_000b
  1647 000010F4 E987000000              	jmp .L_lambda_simple_end_000b
  1648                                  .L_lambda_simple_code_000b:	; lambda-simple body
  1649 000010F9 48837C241001            	cmp qword [rsp + 8 * 2], 1
  1650 000010FF 740B                    	je .L_lambda_simple_arity_check_ok_000b
  1651 00001101 FF742410                	push qword [rsp + 8 * 2]
  1652 00001105 6A01                    	push 1
  1653 00001107 E93EEC0000              	jmp L_error_incorrect_arity_simple
  1654                                  .L_lambda_simple_arity_check_ok_000b:
  1655 0000110C C8000000                	enter 0, 0
  1656 00001110 488B4520                	mov rax, qword [rbp + 8 * (4 + 0)]
  1657 00001114 50                      	push rax
  1658 00001115 6A01                    	push 1
  1659 00001117 488B0425[D0010000]      	mov rax, qword [free_var_58]
  1660                                  	assert_closure(rax)
    42 0000111F 803805              <1>  cmp byte [%1], %2
    43 00001122 0F8562040100        <1>  jne L_error_incorrect_type
  1661 00001128 FF7001                  	push SOB_CLOSURE_ENV(rax)
  1662 0000112B FF5009                  	call SOB_CLOSURE_CODE(rax)
  1663 0000112E 50                      	push rax
  1664 0000112F 6A01                    	push 1
  1665 00001131 488B0425[88000000]      	mov rax, qword [free_var_17]
  1666                                  	assert_closure(rax)
    42 00001139 803805              <1>  cmp byte [%1], %2
    43 0000113C 0F8548040100        <1>  jne L_error_incorrect_type
  1667 00001142 FF7001                  	push SOB_CLOSURE_ENV(rax)
  1668 00001145 FF7508                  	push qword [rbp + 8 * 1] ; old ret addr
  1669 00001148 FF7500                  	push qword [rbp] ; same the old rbp
  1670 0000114B BA04000000              	mov rdx, 1 + 3
  1671 00001150 488B4D18                	mov rcx, COUNT
  1672 00001154 488D4CCD20              	lea rcx, [rbp + 8*4 + rcx * 8]
  1673 00001159 4889EF                  	mov rdi, rbp
  1674                                  .L_tc_recycle_frame_loop_000b:
  1675 0000115C 4883FA00                	cmp rdx, 0
  1676 00001160 7413                    	je .L_tc_recycle_frame_done_000b
  1677 00001162 4883E908                	sub rcx, 8
  1678 00001166 4883EF08                	sub rdi, 8
  1679 0000116A 488B37                  	mov rsi, [rdi]
  1680 0000116D 488931                  	mov qword [rcx], rsi
  1681 00001170 48FFCA                  	dec rdx
  1682 00001173 EBE7                    	jmp .L_tc_recycle_frame_loop_000b
  1683                                  .L_tc_recycle_frame_done_000b:
  1684 00001175 5D                      	pop rbp ; restore the old rbp
  1685 00001176 4889CC                  	mov rsp, rcx
  1686 00001179 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
  1687 0000117C C9                      	leave
  1688 0000117D C21800                  	ret 8 * (2 + 1)
  1689                                  .L_lambda_simple_end_000b:	; new closure is in rax
  1690 00001180 48890425[10020000]      	mov qword [free_var_66], rax
  1691 00001188 48B8-                   	mov rax, sob_void
  1691 0000118A [0000000000000000] 
  1692                                  
  1693 00001192 4889C7                  	mov rdi, rax
  1694 00001195 E808EC0000              	call print_sexpr_if_not_void
  1695                                  
  1696 0000119A BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  1697 0000119F E8EDEB0000              	call malloc
  1698 000011A4 50                      	push rax
  1699 000011A5 BF00000000              	mov rdi, 8 * 0	; new rib
  1700 000011AA E8E2EB0000              	call malloc
  1701 000011AF 50                      	push rax
  1702 000011B0 BF08000000              	mov rdi, 8 * 1	; extended env
  1703 000011B5 E8D7EB0000              	call malloc
  1704 000011BA 488B7D10                	mov rdi, ENV
  1705 000011BE BE00000000              	mov rsi, 0
  1706 000011C3 BA01000000              	mov rdx, 1
  1707                                  .L_lambda_simple_env_loop_000c:	; ext_env[i + 1] <-- env[i]
  1708 000011C8 4883FE00                	cmp rsi, 0
  1709 000011CC 7410                    	je .L_lambda_simple_env_end_000c
  1710 000011CE 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  1711 000011D2 48890CD0                	mov qword [rax + 8 * rdx], rcx
  1712 000011D6 48FFC6                  	inc rsi
  1713 000011D9 48FFC2                  	inc rdx
  1714 000011DC EBEA                    	jmp .L_lambda_simple_env_loop_000c
  1715                                  .L_lambda_simple_env_end_000c:
  1716 000011DE 5B                      	pop rbx
  1717 000011DF BE00000000              	mov rsi, 0
  1718                                  .L_lambda_simple_params_loop_000c:	; copy params
  1719 000011E4 4883FE00                	cmp rsi, 0
  1720 000011E8 740E                    	je .L_lambda_simple_params_end_000c
  1721 000011EA 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  1722 000011EF 488914F3                	mov qword [rbx + 8 * rsi], rdx
  1723 000011F3 48FFC6                  	inc rsi
  1724 000011F6 EBEC                    	jmp .L_lambda_simple_params_loop_000c
  1725                                  .L_lambda_simple_params_end_000c:
  1726 000011F8 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  1727 000011FB 4889C3                  	mov rbx, rax
  1728 000011FE 58                      	pop rax
  1729 000011FF C60005                  	mov byte [rax], T_closure
  1730 00001202 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  1731 00001206 48C74009[13120000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_000c
  1732 0000120E E987000000              	jmp .L_lambda_simple_end_000c
  1733                                  .L_lambda_simple_code_000c:	; lambda-simple body
  1734 00001213 48837C241001            	cmp qword [rsp + 8 * 2], 1
  1735 00001219 740B                    	je .L_lambda_simple_arity_check_ok_000c
  1736 0000121B FF742410                	push qword [rsp + 8 * 2]
  1737 0000121F 6A01                    	push 1
  1738 00001221 E924EB0000              	jmp L_error_incorrect_arity_simple
  1739                                  .L_lambda_simple_arity_check_ok_000c:
  1740 00001226 C8000000                	enter 0, 0
  1741 0000122A 488B4520                	mov rax, qword [rbp + 8 * (4 + 0)]
  1742 0000122E 50                      	push rax
  1743 0000122F 6A01                    	push 1
  1744 00001231 488B0425[D8010000]      	mov rax, qword [free_var_59]
  1745                                  	assert_closure(rax)
    42 00001239 803805              <1>  cmp byte [%1], %2
    43 0000123C 0F8548030100        <1>  jne L_error_incorrect_type
  1746 00001242 FF7001                  	push SOB_CLOSURE_ENV(rax)
  1747 00001245 FF5009                  	call SOB_CLOSURE_CODE(rax)
  1748 00001248 50                      	push rax
  1749 00001249 6A01                    	push 1
  1750 0000124B 488B0425[88000000]      	mov rax, qword [free_var_17]
  1751                                  	assert_closure(rax)
    42 00001253 803805              <1>  cmp byte [%1], %2
    43 00001256 0F852E030100        <1>  jne L_error_incorrect_type
  1752 0000125C FF7001                  	push SOB_CLOSURE_ENV(rax)
  1753 0000125F FF7508                  	push qword [rbp + 8 * 1] ; old ret addr
  1754 00001262 FF7500                  	push qword [rbp] ; same the old rbp
  1755 00001265 BA04000000              	mov rdx, 1 + 3
  1756 0000126A 488B4D18                	mov rcx, COUNT
  1757 0000126E 488D4CCD20              	lea rcx, [rbp + 8*4 + rcx * 8]
  1758 00001273 4889EF                  	mov rdi, rbp
  1759                                  .L_tc_recycle_frame_loop_000c:
  1760 00001276 4883FA00                	cmp rdx, 0
  1761 0000127A 7413                    	je .L_tc_recycle_frame_done_000c
  1762 0000127C 4883E908                	sub rcx, 8
  1763 00001280 4883EF08                	sub rdi, 8
  1764 00001284 488B37                  	mov rsi, [rdi]
  1765 00001287 488931                  	mov qword [rcx], rsi
  1766 0000128A 48FFCA                  	dec rdx
  1767 0000128D EBE7                    	jmp .L_tc_recycle_frame_loop_000c
  1768                                  .L_tc_recycle_frame_done_000c:
  1769 0000128F 5D                      	pop rbp ; restore the old rbp
  1770 00001290 4889CC                  	mov rsp, rcx
  1771 00001293 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
  1772 00001296 C9                      	leave
  1773 00001297 C21800                  	ret 8 * (2 + 1)
  1774                                  .L_lambda_simple_end_000c:	; new closure is in rax
  1775 0000129A 48890425[18020000]      	mov qword [free_var_67], rax
  1776 000012A2 48B8-                   	mov rax, sob_void
  1776 000012A4 [0000000000000000] 
  1777                                  
  1778 000012AC 4889C7                  	mov rdi, rax
  1779 000012AF E8EEEA0000              	call print_sexpr_if_not_void
  1780                                  
  1781 000012B4 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  1782 000012B9 E8D3EA0000              	call malloc
  1783 000012BE 50                      	push rax
  1784 000012BF BF00000000              	mov rdi, 8 * 0	; new rib
  1785 000012C4 E8C8EA0000              	call malloc
  1786 000012C9 50                      	push rax
  1787 000012CA BF08000000              	mov rdi, 8 * 1	; extended env
  1788 000012CF E8BDEA0000              	call malloc
  1789 000012D4 488B7D10                	mov rdi, ENV
  1790 000012D8 BE00000000              	mov rsi, 0
  1791 000012DD BA01000000              	mov rdx, 1
  1792                                  .L_lambda_simple_env_loop_000d:	; ext_env[i + 1] <-- env[i]
  1793 000012E2 4883FE00                	cmp rsi, 0
  1794 000012E6 7410                    	je .L_lambda_simple_env_end_000d
  1795 000012E8 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  1796 000012EC 48890CD0                	mov qword [rax + 8 * rdx], rcx
  1797 000012F0 48FFC6                  	inc rsi
  1798 000012F3 48FFC2                  	inc rdx
  1799 000012F6 EBEA                    	jmp .L_lambda_simple_env_loop_000d
  1800                                  .L_lambda_simple_env_end_000d:
  1801 000012F8 5B                      	pop rbx
  1802 000012F9 BE00000000              	mov rsi, 0
  1803                                  .L_lambda_simple_params_loop_000d:	; copy params
  1804 000012FE 4883FE00                	cmp rsi, 0
  1805 00001302 740E                    	je .L_lambda_simple_params_end_000d
  1806 00001304 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  1807 00001309 488914F3                	mov qword [rbx + 8 * rsi], rdx
  1808 0000130D 48FFC6                  	inc rsi
  1809 00001310 EBEC                    	jmp .L_lambda_simple_params_loop_000d
  1810                                  .L_lambda_simple_params_end_000d:
  1811 00001312 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  1812 00001315 4889C3                  	mov rbx, rax
  1813 00001318 58                      	pop rax
  1814 00001319 C60005                  	mov byte [rax], T_closure
  1815 0000131C 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  1816 00001320 48C74009[2D130000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_000d
  1817 00001328 E987000000              	jmp .L_lambda_simple_end_000d
  1818                                  .L_lambda_simple_code_000d:	; lambda-simple body
  1819 0000132D 48837C241001            	cmp qword [rsp + 8 * 2], 1
  1820 00001333 740B                    	je .L_lambda_simple_arity_check_ok_000d
  1821 00001335 FF742410                	push qword [rsp + 8 * 2]
  1822 00001339 6A01                    	push 1
  1823 0000133B E90AEA0000              	jmp L_error_incorrect_arity_simple
  1824                                  .L_lambda_simple_arity_check_ok_000d:
  1825 00001340 C8000000                	enter 0, 0
  1826 00001344 488B4520                	mov rax, qword [rbp + 8 * (4 + 0)]
  1827 00001348 50                      	push rax
  1828 00001349 6A01                    	push 1
  1829 0000134B 488B0425[C0010000]      	mov rax, qword [free_var_56]
  1830                                  	assert_closure(rax)
    42 00001353 803805              <1>  cmp byte [%1], %2
    43 00001356 0F852E020100        <1>  jne L_error_incorrect_type
  1831 0000135C FF7001                  	push SOB_CLOSURE_ENV(rax)
  1832 0000135F FF5009                  	call SOB_CLOSURE_CODE(rax)
  1833 00001362 50                      	push rax
  1834 00001363 6A01                    	push 1
  1835 00001365 488B0425[C0010000]      	mov rax, qword [free_var_56]
  1836                                  	assert_closure(rax)
    42 0000136D 803805              <1>  cmp byte [%1], %2
    43 00001370 0F8514020100        <1>  jne L_error_incorrect_type
  1837 00001376 FF7001                  	push SOB_CLOSURE_ENV(rax)
  1838 00001379 FF7508                  	push qword [rbp + 8 * 1] ; old ret addr
  1839 0000137C FF7500                  	push qword [rbp] ; same the old rbp
  1840 0000137F BA04000000              	mov rdx, 1 + 3
  1841 00001384 488B4D18                	mov rcx, COUNT
  1842 00001388 488D4CCD20              	lea rcx, [rbp + 8*4 + rcx * 8]
  1843 0000138D 4889EF                  	mov rdi, rbp
  1844                                  .L_tc_recycle_frame_loop_000d:
  1845 00001390 4883FA00                	cmp rdx, 0
  1846 00001394 7413                    	je .L_tc_recycle_frame_done_000d
  1847 00001396 4883E908                	sub rcx, 8
  1848 0000139A 4883EF08                	sub rdi, 8
  1849 0000139E 488B37                  	mov rsi, [rdi]
  1850 000013A1 488931                  	mov qword [rcx], rsi
  1851 000013A4 48FFCA                  	dec rdx
  1852 000013A7 EBE7                    	jmp .L_tc_recycle_frame_loop_000d
  1853                                  .L_tc_recycle_frame_done_000d:
  1854 000013A9 5D                      	pop rbp ; restore the old rbp
  1855 000013AA 4889CC                  	mov rsp, rcx
  1856 000013AD FF6009                  	jmp SOB_CLOSURE_CODE(rax)
  1857 000013B0 C9                      	leave
  1858 000013B1 C21800                  	ret 8 * (2 + 1)
  1859                                  .L_lambda_simple_end_000d:	; new closure is in rax
  1860 000013B4 48890425[20020000]      	mov qword [free_var_68], rax
  1861 000013BC 48B8-                   	mov rax, sob_void
  1861 000013BE [0000000000000000] 
  1862                                  
  1863 000013C6 4889C7                  	mov rdi, rax
  1864 000013C9 E8D4E90000              	call print_sexpr_if_not_void
  1865                                  
  1866 000013CE BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  1867 000013D3 E8B9E90000              	call malloc
  1868 000013D8 50                      	push rax
  1869 000013D9 BF00000000              	mov rdi, 8 * 0	; new rib
  1870 000013DE E8AEE90000              	call malloc
  1871 000013E3 50                      	push rax
  1872 000013E4 BF08000000              	mov rdi, 8 * 1	; extended env
  1873 000013E9 E8A3E90000              	call malloc
  1874 000013EE 488B7D10                	mov rdi, ENV
  1875 000013F2 BE00000000              	mov rsi, 0
  1876 000013F7 BA01000000              	mov rdx, 1
  1877                                  .L_lambda_simple_env_loop_000e:	; ext_env[i + 1] <-- env[i]
  1878 000013FC 4883FE00                	cmp rsi, 0
  1879 00001400 7410                    	je .L_lambda_simple_env_end_000e
  1880 00001402 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  1881 00001406 48890CD0                	mov qword [rax + 8 * rdx], rcx
  1882 0000140A 48FFC6                  	inc rsi
  1883 0000140D 48FFC2                  	inc rdx
  1884 00001410 EBEA                    	jmp .L_lambda_simple_env_loop_000e
  1885                                  .L_lambda_simple_env_end_000e:
  1886 00001412 5B                      	pop rbx
  1887 00001413 BE00000000              	mov rsi, 0
  1888                                  .L_lambda_simple_params_loop_000e:	; copy params
  1889 00001418 4883FE00                	cmp rsi, 0
  1890 0000141C 740E                    	je .L_lambda_simple_params_end_000e
  1891 0000141E 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  1892 00001423 488914F3                	mov qword [rbx + 8 * rsi], rdx
  1893 00001427 48FFC6                  	inc rsi
  1894 0000142A EBEC                    	jmp .L_lambda_simple_params_loop_000e
  1895                                  .L_lambda_simple_params_end_000e:
  1896 0000142C 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  1897 0000142F 4889C3                  	mov rbx, rax
  1898 00001432 58                      	pop rax
  1899 00001433 C60005                  	mov byte [rax], T_closure
  1900 00001436 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  1901 0000143A 48C74009[47140000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_000e
  1902 00001442 E987000000              	jmp .L_lambda_simple_end_000e
  1903                                  .L_lambda_simple_code_000e:	; lambda-simple body
  1904 00001447 48837C241001            	cmp qword [rsp + 8 * 2], 1
  1905 0000144D 740B                    	je .L_lambda_simple_arity_check_ok_000e
  1906 0000144F FF742410                	push qword [rsp + 8 * 2]
  1907 00001453 6A01                    	push 1
  1908 00001455 E9F0E80000              	jmp L_error_incorrect_arity_simple
  1909                                  .L_lambda_simple_arity_check_ok_000e:
  1910 0000145A C8000000                	enter 0, 0
  1911 0000145E 488B4520                	mov rax, qword [rbp + 8 * (4 + 0)]
  1912 00001462 50                      	push rax
  1913 00001463 6A01                    	push 1
  1914 00001465 488B0425[C8010000]      	mov rax, qword [free_var_57]
  1915                                  	assert_closure(rax)
    42 0000146D 803805              <1>  cmp byte [%1], %2
    43 00001470 0F8514010100        <1>  jne L_error_incorrect_type
  1916 00001476 FF7001                  	push SOB_CLOSURE_ENV(rax)
  1917 00001479 FF5009                  	call SOB_CLOSURE_CODE(rax)
  1918 0000147C 50                      	push rax
  1919 0000147D 6A01                    	push 1
  1920 0000147F 488B0425[C0010000]      	mov rax, qword [free_var_56]
  1921                                  	assert_closure(rax)
    42 00001487 803805              <1>  cmp byte [%1], %2
    43 0000148A 0F85FA000100        <1>  jne L_error_incorrect_type
  1922 00001490 FF7001                  	push SOB_CLOSURE_ENV(rax)
  1923 00001493 FF7508                  	push qword [rbp + 8 * 1] ; old ret addr
  1924 00001496 FF7500                  	push qword [rbp] ; same the old rbp
  1925 00001499 BA04000000              	mov rdx, 1 + 3
  1926 0000149E 488B4D18                	mov rcx, COUNT
  1927 000014A2 488D4CCD20              	lea rcx, [rbp + 8*4 + rcx * 8]
  1928 000014A7 4889EF                  	mov rdi, rbp
  1929                                  .L_tc_recycle_frame_loop_000e:
  1930 000014AA 4883FA00                	cmp rdx, 0
  1931 000014AE 7413                    	je .L_tc_recycle_frame_done_000e
  1932 000014B0 4883E908                	sub rcx, 8
  1933 000014B4 4883EF08                	sub rdi, 8
  1934 000014B8 488B37                  	mov rsi, [rdi]
  1935 000014BB 488931                  	mov qword [rcx], rsi
  1936 000014BE 48FFCA                  	dec rdx
  1937 000014C1 EBE7                    	jmp .L_tc_recycle_frame_loop_000e
  1938                                  .L_tc_recycle_frame_done_000e:
  1939 000014C3 5D                      	pop rbp ; restore the old rbp
  1940 000014C4 4889CC                  	mov rsp, rcx
  1941 000014C7 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
  1942 000014CA C9                      	leave
  1943 000014CB C21800                  	ret 8 * (2 + 1)
  1944                                  .L_lambda_simple_end_000e:	; new closure is in rax
  1945 000014CE 48890425[28020000]      	mov qword [free_var_69], rax
  1946 000014D6 48B8-                   	mov rax, sob_void
  1946 000014D8 [0000000000000000] 
  1947                                  
  1948 000014E0 4889C7                  	mov rdi, rax
  1949 000014E3 E8BAE80000              	call print_sexpr_if_not_void
  1950                                  
  1951 000014E8 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  1952 000014ED E89FE80000              	call malloc
  1953 000014F2 50                      	push rax
  1954 000014F3 BF00000000              	mov rdi, 8 * 0	; new rib
  1955 000014F8 E894E80000              	call malloc
  1956 000014FD 50                      	push rax
  1957 000014FE BF08000000              	mov rdi, 8 * 1	; extended env
  1958 00001503 E889E80000              	call malloc
  1959 00001508 488B7D10                	mov rdi, ENV
  1960 0000150C BE00000000              	mov rsi, 0
  1961 00001511 BA01000000              	mov rdx, 1
  1962                                  .L_lambda_simple_env_loop_000f:	; ext_env[i + 1] <-- env[i]
  1963 00001516 4883FE00                	cmp rsi, 0
  1964 0000151A 7410                    	je .L_lambda_simple_env_end_000f
  1965 0000151C 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  1966 00001520 48890CD0                	mov qword [rax + 8 * rdx], rcx
  1967 00001524 48FFC6                  	inc rsi
  1968 00001527 48FFC2                  	inc rdx
  1969 0000152A EBEA                    	jmp .L_lambda_simple_env_loop_000f
  1970                                  .L_lambda_simple_env_end_000f:
  1971 0000152C 5B                      	pop rbx
  1972 0000152D BE00000000              	mov rsi, 0
  1973                                  .L_lambda_simple_params_loop_000f:	; copy params
  1974 00001532 4883FE00                	cmp rsi, 0
  1975 00001536 740E                    	je .L_lambda_simple_params_end_000f
  1976 00001538 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  1977 0000153D 488914F3                	mov qword [rbx + 8 * rsi], rdx
  1978 00001541 48FFC6                  	inc rsi
  1979 00001544 EBEC                    	jmp .L_lambda_simple_params_loop_000f
  1980                                  .L_lambda_simple_params_end_000f:
  1981 00001546 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  1982 00001549 4889C3                  	mov rbx, rax
  1983 0000154C 58                      	pop rax
  1984 0000154D C60005                  	mov byte [rax], T_closure
  1985 00001550 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  1986 00001554 48C74009[61150000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_000f
  1987 0000155C E987000000              	jmp .L_lambda_simple_end_000f
  1988                                  .L_lambda_simple_code_000f:	; lambda-simple body
  1989 00001561 48837C241001            	cmp qword [rsp + 8 * 2], 1
  1990 00001567 740B                    	je .L_lambda_simple_arity_check_ok_000f
  1991 00001569 FF742410                	push qword [rsp + 8 * 2]
  1992 0000156D 6A01                    	push 1
  1993 0000156F E9D6E70000              	jmp L_error_incorrect_arity_simple
  1994                                  .L_lambda_simple_arity_check_ok_000f:
  1995 00001574 C8000000                	enter 0, 0
  1996 00001578 488B4520                	mov rax, qword [rbp + 8 * (4 + 0)]
  1997 0000157C 50                      	push rax
  1998 0000157D 6A01                    	push 1
  1999 0000157F 488B0425[D0010000]      	mov rax, qword [free_var_58]
  2000                                  	assert_closure(rax)
    42 00001587 803805              <1>  cmp byte [%1], %2
    43 0000158A 0F85FAFF0000        <1>  jne L_error_incorrect_type
  2001 00001590 FF7001                  	push SOB_CLOSURE_ENV(rax)
  2002 00001593 FF5009                  	call SOB_CLOSURE_CODE(rax)
  2003 00001596 50                      	push rax
  2004 00001597 6A01                    	push 1
  2005 00001599 488B0425[C0010000]      	mov rax, qword [free_var_56]
  2006                                  	assert_closure(rax)
    42 000015A1 803805              <1>  cmp byte [%1], %2
    43 000015A4 0F85E0FF0000        <1>  jne L_error_incorrect_type
  2007 000015AA FF7001                  	push SOB_CLOSURE_ENV(rax)
  2008 000015AD FF7508                  	push qword [rbp + 8 * 1] ; old ret addr
  2009 000015B0 FF7500                  	push qword [rbp] ; same the old rbp
  2010 000015B3 BA04000000              	mov rdx, 1 + 3
  2011 000015B8 488B4D18                	mov rcx, COUNT
  2012 000015BC 488D4CCD20              	lea rcx, [rbp + 8*4 + rcx * 8]
  2013 000015C1 4889EF                  	mov rdi, rbp
  2014                                  .L_tc_recycle_frame_loop_000f:
  2015 000015C4 4883FA00                	cmp rdx, 0
  2016 000015C8 7413                    	je .L_tc_recycle_frame_done_000f
  2017 000015CA 4883E908                	sub rcx, 8
  2018 000015CE 4883EF08                	sub rdi, 8
  2019 000015D2 488B37                  	mov rsi, [rdi]
  2020 000015D5 488931                  	mov qword [rcx], rsi
  2021 000015D8 48FFCA                  	dec rdx
  2022 000015DB EBE7                    	jmp .L_tc_recycle_frame_loop_000f
  2023                                  .L_tc_recycle_frame_done_000f:
  2024 000015DD 5D                      	pop rbp ; restore the old rbp
  2025 000015DE 4889CC                  	mov rsp, rcx
  2026 000015E1 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
  2027 000015E4 C9                      	leave
  2028 000015E5 C21800                  	ret 8 * (2 + 1)
  2029                                  .L_lambda_simple_end_000f:	; new closure is in rax
  2030 000015E8 48890425[30020000]      	mov qword [free_var_70], rax
  2031 000015F0 48B8-                   	mov rax, sob_void
  2031 000015F2 [0000000000000000] 
  2032                                  
  2033 000015FA 4889C7                  	mov rdi, rax
  2034 000015FD E8A0E70000              	call print_sexpr_if_not_void
  2035                                  
  2036 00001602 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  2037 00001607 E885E70000              	call malloc
  2038 0000160C 50                      	push rax
  2039 0000160D BF00000000              	mov rdi, 8 * 0	; new rib
  2040 00001612 E87AE70000              	call malloc
  2041 00001617 50                      	push rax
  2042 00001618 BF08000000              	mov rdi, 8 * 1	; extended env
  2043 0000161D E86FE70000              	call malloc
  2044 00001622 488B7D10                	mov rdi, ENV
  2045 00001626 BE00000000              	mov rsi, 0
  2046 0000162B BA01000000              	mov rdx, 1
  2047                                  .L_lambda_simple_env_loop_0010:	; ext_env[i + 1] <-- env[i]
  2048 00001630 4883FE00                	cmp rsi, 0
  2049 00001634 7410                    	je .L_lambda_simple_env_end_0010
  2050 00001636 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  2051 0000163A 48890CD0                	mov qword [rax + 8 * rdx], rcx
  2052 0000163E 48FFC6                  	inc rsi
  2053 00001641 48FFC2                  	inc rdx
  2054 00001644 EBEA                    	jmp .L_lambda_simple_env_loop_0010
  2055                                  .L_lambda_simple_env_end_0010:
  2056 00001646 5B                      	pop rbx
  2057 00001647 BE00000000              	mov rsi, 0
  2058                                  .L_lambda_simple_params_loop_0010:	; copy params
  2059 0000164C 4883FE00                	cmp rsi, 0
  2060 00001650 740E                    	je .L_lambda_simple_params_end_0010
  2061 00001652 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  2062 00001657 488914F3                	mov qword [rbx + 8 * rsi], rdx
  2063 0000165B 48FFC6                  	inc rsi
  2064 0000165E EBEC                    	jmp .L_lambda_simple_params_loop_0010
  2065                                  .L_lambda_simple_params_end_0010:
  2066 00001660 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  2067 00001663 4889C3                  	mov rbx, rax
  2068 00001666 58                      	pop rax
  2069 00001667 C60005                  	mov byte [rax], T_closure
  2070 0000166A 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  2071 0000166E 48C74009[7B160000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0010
  2072 00001676 E987000000              	jmp .L_lambda_simple_end_0010
  2073                                  .L_lambda_simple_code_0010:	; lambda-simple body
  2074 0000167B 48837C241001            	cmp qword [rsp + 8 * 2], 1
  2075 00001681 740B                    	je .L_lambda_simple_arity_check_ok_0010
  2076 00001683 FF742410                	push qword [rsp + 8 * 2]
  2077 00001687 6A01                    	push 1
  2078 00001689 E9BCE60000              	jmp L_error_incorrect_arity_simple
  2079                                  .L_lambda_simple_arity_check_ok_0010:
  2080 0000168E C8000000                	enter 0, 0
  2081 00001692 488B4520                	mov rax, qword [rbp + 8 * (4 + 0)]
  2082 00001696 50                      	push rax
  2083 00001697 6A01                    	push 1
  2084 00001699 488B0425[D8010000]      	mov rax, qword [free_var_59]
  2085                                  	assert_closure(rax)
    42 000016A1 803805              <1>  cmp byte [%1], %2
    43 000016A4 0F85E0FE0000        <1>  jne L_error_incorrect_type
  2086 000016AA FF7001                  	push SOB_CLOSURE_ENV(rax)
  2087 000016AD FF5009                  	call SOB_CLOSURE_CODE(rax)
  2088 000016B0 50                      	push rax
  2089 000016B1 6A01                    	push 1
  2090 000016B3 488B0425[C0010000]      	mov rax, qword [free_var_56]
  2091                                  	assert_closure(rax)
    42 000016BB 803805              <1>  cmp byte [%1], %2
    43 000016BE 0F85C6FE0000        <1>  jne L_error_incorrect_type
  2092 000016C4 FF7001                  	push SOB_CLOSURE_ENV(rax)
  2093 000016C7 FF7508                  	push qword [rbp + 8 * 1] ; old ret addr
  2094 000016CA FF7500                  	push qword [rbp] ; same the old rbp
  2095 000016CD BA04000000              	mov rdx, 1 + 3
  2096 000016D2 488B4D18                	mov rcx, COUNT
  2097 000016D6 488D4CCD20              	lea rcx, [rbp + 8*4 + rcx * 8]
  2098 000016DB 4889EF                  	mov rdi, rbp
  2099                                  .L_tc_recycle_frame_loop_0010:
  2100 000016DE 4883FA00                	cmp rdx, 0
  2101 000016E2 7413                    	je .L_tc_recycle_frame_done_0010
  2102 000016E4 4883E908                	sub rcx, 8
  2103 000016E8 4883EF08                	sub rdi, 8
  2104 000016EC 488B37                  	mov rsi, [rdi]
  2105 000016EF 488931                  	mov qword [rcx], rsi
  2106 000016F2 48FFCA                  	dec rdx
  2107 000016F5 EBE7                    	jmp .L_tc_recycle_frame_loop_0010
  2108                                  .L_tc_recycle_frame_done_0010:
  2109 000016F7 5D                      	pop rbp ; restore the old rbp
  2110 000016F8 4889CC                  	mov rsp, rcx
  2111 000016FB FF6009                  	jmp SOB_CLOSURE_CODE(rax)
  2112 000016FE C9                      	leave
  2113 000016FF C21800                  	ret 8 * (2 + 1)
  2114                                  .L_lambda_simple_end_0010:	; new closure is in rax
  2115 00001702 48890425[38020000]      	mov qword [free_var_71], rax
  2116 0000170A 48B8-                   	mov rax, sob_void
  2116 0000170C [0000000000000000] 
  2117                                  
  2118 00001714 4889C7                  	mov rdi, rax
  2119 00001717 E886E60000              	call print_sexpr_if_not_void
  2120                                  
  2121 0000171C BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  2122 00001721 E86BE60000              	call malloc
  2123 00001726 50                      	push rax
  2124 00001727 BF00000000              	mov rdi, 8 * 0	; new rib
  2125 0000172C E860E60000              	call malloc
  2126 00001731 50                      	push rax
  2127 00001732 BF08000000              	mov rdi, 8 * 1	; extended env
  2128 00001737 E855E60000              	call malloc
  2129 0000173C 488B7D10                	mov rdi, ENV
  2130 00001740 BE00000000              	mov rsi, 0
  2131 00001745 BA01000000              	mov rdx, 1
  2132                                  .L_lambda_simple_env_loop_0011:	; ext_env[i + 1] <-- env[i]
  2133 0000174A 4883FE00                	cmp rsi, 0
  2134 0000174E 7410                    	je .L_lambda_simple_env_end_0011
  2135 00001750 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  2136 00001754 48890CD0                	mov qword [rax + 8 * rdx], rcx
  2137 00001758 48FFC6                  	inc rsi
  2138 0000175B 48FFC2                  	inc rdx
  2139 0000175E EBEA                    	jmp .L_lambda_simple_env_loop_0011
  2140                                  .L_lambda_simple_env_end_0011:
  2141 00001760 5B                      	pop rbx
  2142 00001761 BE00000000              	mov rsi, 0
  2143                                  .L_lambda_simple_params_loop_0011:	; copy params
  2144 00001766 4883FE00                	cmp rsi, 0
  2145 0000176A 740E                    	je .L_lambda_simple_params_end_0011
  2146 0000176C 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  2147 00001771 488914F3                	mov qword [rbx + 8 * rsi], rdx
  2148 00001775 48FFC6                  	inc rsi
  2149 00001778 EBEC                    	jmp .L_lambda_simple_params_loop_0011
  2150                                  .L_lambda_simple_params_end_0011:
  2151 0000177A 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  2152 0000177D 4889C3                  	mov rbx, rax
  2153 00001780 58                      	pop rax
  2154 00001781 C60005                  	mov byte [rax], T_closure
  2155 00001784 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  2156 00001788 48C74009[95170000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0011
  2157 00001790 E987000000              	jmp .L_lambda_simple_end_0011
  2158                                  .L_lambda_simple_code_0011:	; lambda-simple body
  2159 00001795 48837C241001            	cmp qword [rsp + 8 * 2], 1
  2160 0000179B 740B                    	je .L_lambda_simple_arity_check_ok_0011
  2161 0000179D FF742410                	push qword [rsp + 8 * 2]
  2162 000017A1 6A01                    	push 1
  2163 000017A3 E9A2E50000              	jmp L_error_incorrect_arity_simple
  2164                                  .L_lambda_simple_arity_check_ok_0011:
  2165 000017A8 C8000000                	enter 0, 0
  2166 000017AC 488B4520                	mov rax, qword [rbp + 8 * (4 + 0)]
  2167 000017B0 50                      	push rax
  2168 000017B1 6A01                    	push 1
  2169 000017B3 488B0425[C0010000]      	mov rax, qword [free_var_56]
  2170                                  	assert_closure(rax)
    42 000017BB 803805              <1>  cmp byte [%1], %2
    43 000017BE 0F85C6FD0000        <1>  jne L_error_incorrect_type
  2171 000017C4 FF7001                  	push SOB_CLOSURE_ENV(rax)
  2172 000017C7 FF5009                  	call SOB_CLOSURE_CODE(rax)
  2173 000017CA 50                      	push rax
  2174 000017CB 6A01                    	push 1
  2175 000017CD 488B0425[C8010000]      	mov rax, qword [free_var_57]
  2176                                  	assert_closure(rax)
    42 000017D5 803805              <1>  cmp byte [%1], %2
    43 000017D8 0F85ACFD0000        <1>  jne L_error_incorrect_type
  2177 000017DE FF7001                  	push SOB_CLOSURE_ENV(rax)
  2178 000017E1 FF7508                  	push qword [rbp + 8 * 1] ; old ret addr
  2179 000017E4 FF7500                  	push qword [rbp] ; same the old rbp
  2180 000017E7 BA04000000              	mov rdx, 1 + 3
  2181 000017EC 488B4D18                	mov rcx, COUNT
  2182 000017F0 488D4CCD20              	lea rcx, [rbp + 8*4 + rcx * 8]
  2183 000017F5 4889EF                  	mov rdi, rbp
  2184                                  .L_tc_recycle_frame_loop_0011:
  2185 000017F8 4883FA00                	cmp rdx, 0
  2186 000017FC 7413                    	je .L_tc_recycle_frame_done_0011
  2187 000017FE 4883E908                	sub rcx, 8
  2188 00001802 4883EF08                	sub rdi, 8
  2189 00001806 488B37                  	mov rsi, [rdi]
  2190 00001809 488931                  	mov qword [rcx], rsi
  2191 0000180C 48FFCA                  	dec rdx
  2192 0000180F EBE7                    	jmp .L_tc_recycle_frame_loop_0011
  2193                                  .L_tc_recycle_frame_done_0011:
  2194 00001811 5D                      	pop rbp ; restore the old rbp
  2195 00001812 4889CC                  	mov rsp, rcx
  2196 00001815 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
  2197 00001818 C9                      	leave
  2198 00001819 C21800                  	ret 8 * (2 + 1)
  2199                                  .L_lambda_simple_end_0011:	; new closure is in rax
  2200 0000181C 48890425[40020000]      	mov qword [free_var_72], rax
  2201 00001824 48B8-                   	mov rax, sob_void
  2201 00001826 [0000000000000000] 
  2202                                  
  2203 0000182E 4889C7                  	mov rdi, rax
  2204 00001831 E86CE50000              	call print_sexpr_if_not_void
  2205                                  
  2206 00001836 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  2207 0000183B E851E50000              	call malloc
  2208 00001840 50                      	push rax
  2209 00001841 BF00000000              	mov rdi, 8 * 0	; new rib
  2210 00001846 E846E50000              	call malloc
  2211 0000184B 50                      	push rax
  2212 0000184C BF08000000              	mov rdi, 8 * 1	; extended env
  2213 00001851 E83BE50000              	call malloc
  2214 00001856 488B7D10                	mov rdi, ENV
  2215 0000185A BE00000000              	mov rsi, 0
  2216 0000185F BA01000000              	mov rdx, 1
  2217                                  .L_lambda_simple_env_loop_0012:	; ext_env[i + 1] <-- env[i]
  2218 00001864 4883FE00                	cmp rsi, 0
  2219 00001868 7410                    	je .L_lambda_simple_env_end_0012
  2220 0000186A 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  2221 0000186E 48890CD0                	mov qword [rax + 8 * rdx], rcx
  2222 00001872 48FFC6                  	inc rsi
  2223 00001875 48FFC2                  	inc rdx
  2224 00001878 EBEA                    	jmp .L_lambda_simple_env_loop_0012
  2225                                  .L_lambda_simple_env_end_0012:
  2226 0000187A 5B                      	pop rbx
  2227 0000187B BE00000000              	mov rsi, 0
  2228                                  .L_lambda_simple_params_loop_0012:	; copy params
  2229 00001880 4883FE00                	cmp rsi, 0
  2230 00001884 740E                    	je .L_lambda_simple_params_end_0012
  2231 00001886 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  2232 0000188B 488914F3                	mov qword [rbx + 8 * rsi], rdx
  2233 0000188F 48FFC6                  	inc rsi
  2234 00001892 EBEC                    	jmp .L_lambda_simple_params_loop_0012
  2235                                  .L_lambda_simple_params_end_0012:
  2236 00001894 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  2237 00001897 4889C3                  	mov rbx, rax
  2238 0000189A 58                      	pop rax
  2239 0000189B C60005                  	mov byte [rax], T_closure
  2240 0000189E 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  2241 000018A2 48C74009[AF180000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0012
  2242 000018AA E987000000              	jmp .L_lambda_simple_end_0012
  2243                                  .L_lambda_simple_code_0012:	; lambda-simple body
  2244 000018AF 48837C241001            	cmp qword [rsp + 8 * 2], 1
  2245 000018B5 740B                    	je .L_lambda_simple_arity_check_ok_0012
  2246 000018B7 FF742410                	push qword [rsp + 8 * 2]
  2247 000018BB 6A01                    	push 1
  2248 000018BD E988E40000              	jmp L_error_incorrect_arity_simple
  2249                                  .L_lambda_simple_arity_check_ok_0012:
  2250 000018C2 C8000000                	enter 0, 0
  2251 000018C6 488B4520                	mov rax, qword [rbp + 8 * (4 + 0)]
  2252 000018CA 50                      	push rax
  2253 000018CB 6A01                    	push 1
  2254 000018CD 488B0425[C8010000]      	mov rax, qword [free_var_57]
  2255                                  	assert_closure(rax)
    42 000018D5 803805              <1>  cmp byte [%1], %2
    43 000018D8 0F85ACFC0000        <1>  jne L_error_incorrect_type
  2256 000018DE FF7001                  	push SOB_CLOSURE_ENV(rax)
  2257 000018E1 FF5009                  	call SOB_CLOSURE_CODE(rax)
  2258 000018E4 50                      	push rax
  2259 000018E5 6A01                    	push 1
  2260 000018E7 488B0425[C8010000]      	mov rax, qword [free_var_57]
  2261                                  	assert_closure(rax)
    42 000018EF 803805              <1>  cmp byte [%1], %2
    43 000018F2 0F8592FC0000        <1>  jne L_error_incorrect_type
  2262 000018F8 FF7001                  	push SOB_CLOSURE_ENV(rax)
  2263 000018FB FF7508                  	push qword [rbp + 8 * 1] ; old ret addr
  2264 000018FE FF7500                  	push qword [rbp] ; same the old rbp
  2265 00001901 BA04000000              	mov rdx, 1 + 3
  2266 00001906 488B4D18                	mov rcx, COUNT
  2267 0000190A 488D4CCD20              	lea rcx, [rbp + 8*4 + rcx * 8]
  2268 0000190F 4889EF                  	mov rdi, rbp
  2269                                  .L_tc_recycle_frame_loop_0012:
  2270 00001912 4883FA00                	cmp rdx, 0
  2271 00001916 7413                    	je .L_tc_recycle_frame_done_0012
  2272 00001918 4883E908                	sub rcx, 8
  2273 0000191C 4883EF08                	sub rdi, 8
  2274 00001920 488B37                  	mov rsi, [rdi]
  2275 00001923 488931                  	mov qword [rcx], rsi
  2276 00001926 48FFCA                  	dec rdx
  2277 00001929 EBE7                    	jmp .L_tc_recycle_frame_loop_0012
  2278                                  .L_tc_recycle_frame_done_0012:
  2279 0000192B 5D                      	pop rbp ; restore the old rbp
  2280 0000192C 4889CC                  	mov rsp, rcx
  2281 0000192F FF6009                  	jmp SOB_CLOSURE_CODE(rax)
  2282 00001932 C9                      	leave
  2283 00001933 C21800                  	ret 8 * (2 + 1)
  2284                                  .L_lambda_simple_end_0012:	; new closure is in rax
  2285 00001936 48890425[48020000]      	mov qword [free_var_73], rax
  2286 0000193E 48B8-                   	mov rax, sob_void
  2286 00001940 [0000000000000000] 
  2287                                  
  2288 00001948 4889C7                  	mov rdi, rax
  2289 0000194B E852E40000              	call print_sexpr_if_not_void
  2290                                  
  2291 00001950 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  2292 00001955 E837E40000              	call malloc
  2293 0000195A 50                      	push rax
  2294 0000195B BF00000000              	mov rdi, 8 * 0	; new rib
  2295 00001960 E82CE40000              	call malloc
  2296 00001965 50                      	push rax
  2297 00001966 BF08000000              	mov rdi, 8 * 1	; extended env
  2298 0000196B E821E40000              	call malloc
  2299 00001970 488B7D10                	mov rdi, ENV
  2300 00001974 BE00000000              	mov rsi, 0
  2301 00001979 BA01000000              	mov rdx, 1
  2302                                  .L_lambda_simple_env_loop_0013:	; ext_env[i + 1] <-- env[i]
  2303 0000197E 4883FE00                	cmp rsi, 0
  2304 00001982 7410                    	je .L_lambda_simple_env_end_0013
  2305 00001984 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  2306 00001988 48890CD0                	mov qword [rax + 8 * rdx], rcx
  2307 0000198C 48FFC6                  	inc rsi
  2308 0000198F 48FFC2                  	inc rdx
  2309 00001992 EBEA                    	jmp .L_lambda_simple_env_loop_0013
  2310                                  .L_lambda_simple_env_end_0013:
  2311 00001994 5B                      	pop rbx
  2312 00001995 BE00000000              	mov rsi, 0
  2313                                  .L_lambda_simple_params_loop_0013:	; copy params
  2314 0000199A 4883FE00                	cmp rsi, 0
  2315 0000199E 740E                    	je .L_lambda_simple_params_end_0013
  2316 000019A0 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  2317 000019A5 488914F3                	mov qword [rbx + 8 * rsi], rdx
  2318 000019A9 48FFC6                  	inc rsi
  2319 000019AC EBEC                    	jmp .L_lambda_simple_params_loop_0013
  2320                                  .L_lambda_simple_params_end_0013:
  2321 000019AE 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  2322 000019B1 4889C3                  	mov rbx, rax
  2323 000019B4 58                      	pop rax
  2324 000019B5 C60005                  	mov byte [rax], T_closure
  2325 000019B8 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  2326 000019BC 48C74009[C9190000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0013
  2327 000019C4 E987000000              	jmp .L_lambda_simple_end_0013
  2328                                  .L_lambda_simple_code_0013:	; lambda-simple body
  2329 000019C9 48837C241001            	cmp qword [rsp + 8 * 2], 1
  2330 000019CF 740B                    	je .L_lambda_simple_arity_check_ok_0013
  2331 000019D1 FF742410                	push qword [rsp + 8 * 2]
  2332 000019D5 6A01                    	push 1
  2333 000019D7 E96EE30000              	jmp L_error_incorrect_arity_simple
  2334                                  .L_lambda_simple_arity_check_ok_0013:
  2335 000019DC C8000000                	enter 0, 0
  2336 000019E0 488B4520                	mov rax, qword [rbp + 8 * (4 + 0)]
  2337 000019E4 50                      	push rax
  2338 000019E5 6A01                    	push 1
  2339 000019E7 488B0425[D0010000]      	mov rax, qword [free_var_58]
  2340                                  	assert_closure(rax)
    42 000019EF 803805              <1>  cmp byte [%1], %2
    43 000019F2 0F8592FB0000        <1>  jne L_error_incorrect_type
  2341 000019F8 FF7001                  	push SOB_CLOSURE_ENV(rax)
  2342 000019FB FF5009                  	call SOB_CLOSURE_CODE(rax)
  2343 000019FE 50                      	push rax
  2344 000019FF 6A01                    	push 1
  2345 00001A01 488B0425[C8010000]      	mov rax, qword [free_var_57]
  2346                                  	assert_closure(rax)
    42 00001A09 803805              <1>  cmp byte [%1], %2
    43 00001A0C 0F8578FB0000        <1>  jne L_error_incorrect_type
  2347 00001A12 FF7001                  	push SOB_CLOSURE_ENV(rax)
  2348 00001A15 FF7508                  	push qword [rbp + 8 * 1] ; old ret addr
  2349 00001A18 FF7500                  	push qword [rbp] ; same the old rbp
  2350 00001A1B BA04000000              	mov rdx, 1 + 3
  2351 00001A20 488B4D18                	mov rcx, COUNT
  2352 00001A24 488D4CCD20              	lea rcx, [rbp + 8*4 + rcx * 8]
  2353 00001A29 4889EF                  	mov rdi, rbp
  2354                                  .L_tc_recycle_frame_loop_0013:
  2355 00001A2C 4883FA00                	cmp rdx, 0
  2356 00001A30 7413                    	je .L_tc_recycle_frame_done_0013
  2357 00001A32 4883E908                	sub rcx, 8
  2358 00001A36 4883EF08                	sub rdi, 8
  2359 00001A3A 488B37                  	mov rsi, [rdi]
  2360 00001A3D 488931                  	mov qword [rcx], rsi
  2361 00001A40 48FFCA                  	dec rdx
  2362 00001A43 EBE7                    	jmp .L_tc_recycle_frame_loop_0013
  2363                                  .L_tc_recycle_frame_done_0013:
  2364 00001A45 5D                      	pop rbp ; restore the old rbp
  2365 00001A46 4889CC                  	mov rsp, rcx
  2366 00001A49 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
  2367 00001A4C C9                      	leave
  2368 00001A4D C21800                  	ret 8 * (2 + 1)
  2369                                  .L_lambda_simple_end_0013:	; new closure is in rax
  2370 00001A50 48890425[50020000]      	mov qword [free_var_74], rax
  2371 00001A58 48B8-                   	mov rax, sob_void
  2371 00001A5A [0000000000000000] 
  2372                                  
  2373 00001A62 4889C7                  	mov rdi, rax
  2374 00001A65 E838E30000              	call print_sexpr_if_not_void
  2375                                  
  2376 00001A6A BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  2377 00001A6F E81DE30000              	call malloc
  2378 00001A74 50                      	push rax
  2379 00001A75 BF00000000              	mov rdi, 8 * 0	; new rib
  2380 00001A7A E812E30000              	call malloc
  2381 00001A7F 50                      	push rax
  2382 00001A80 BF08000000              	mov rdi, 8 * 1	; extended env
  2383 00001A85 E807E30000              	call malloc
  2384 00001A8A 488B7D10                	mov rdi, ENV
  2385 00001A8E BE00000000              	mov rsi, 0
  2386 00001A93 BA01000000              	mov rdx, 1
  2387                                  .L_lambda_simple_env_loop_0014:	; ext_env[i + 1] <-- env[i]
  2388 00001A98 4883FE00                	cmp rsi, 0
  2389 00001A9C 7410                    	je .L_lambda_simple_env_end_0014
  2390 00001A9E 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  2391 00001AA2 48890CD0                	mov qword [rax + 8 * rdx], rcx
  2392 00001AA6 48FFC6                  	inc rsi
  2393 00001AA9 48FFC2                  	inc rdx
  2394 00001AAC EBEA                    	jmp .L_lambda_simple_env_loop_0014
  2395                                  .L_lambda_simple_env_end_0014:
  2396 00001AAE 5B                      	pop rbx
  2397 00001AAF BE00000000              	mov rsi, 0
  2398                                  .L_lambda_simple_params_loop_0014:	; copy params
  2399 00001AB4 4883FE00                	cmp rsi, 0
  2400 00001AB8 740E                    	je .L_lambda_simple_params_end_0014
  2401 00001ABA 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  2402 00001ABF 488914F3                	mov qword [rbx + 8 * rsi], rdx
  2403 00001AC3 48FFC6                  	inc rsi
  2404 00001AC6 EBEC                    	jmp .L_lambda_simple_params_loop_0014
  2405                                  .L_lambda_simple_params_end_0014:
  2406 00001AC8 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  2407 00001ACB 4889C3                  	mov rbx, rax
  2408 00001ACE 58                      	pop rax
  2409 00001ACF C60005                  	mov byte [rax], T_closure
  2410 00001AD2 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  2411 00001AD6 48C74009[E31A0000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0014
  2412 00001ADE E987000000              	jmp .L_lambda_simple_end_0014
  2413                                  .L_lambda_simple_code_0014:	; lambda-simple body
  2414 00001AE3 48837C241001            	cmp qword [rsp + 8 * 2], 1
  2415 00001AE9 740B                    	je .L_lambda_simple_arity_check_ok_0014
  2416 00001AEB FF742410                	push qword [rsp + 8 * 2]
  2417 00001AEF 6A01                    	push 1
  2418 00001AF1 E954E20000              	jmp L_error_incorrect_arity_simple
  2419                                  .L_lambda_simple_arity_check_ok_0014:
  2420 00001AF6 C8000000                	enter 0, 0
  2421 00001AFA 488B4520                	mov rax, qword [rbp + 8 * (4 + 0)]
  2422 00001AFE 50                      	push rax
  2423 00001AFF 6A01                    	push 1
  2424 00001B01 488B0425[D8010000]      	mov rax, qword [free_var_59]
  2425                                  	assert_closure(rax)
    42 00001B09 803805              <1>  cmp byte [%1], %2
    43 00001B0C 0F8578FA0000        <1>  jne L_error_incorrect_type
  2426 00001B12 FF7001                  	push SOB_CLOSURE_ENV(rax)
  2427 00001B15 FF5009                  	call SOB_CLOSURE_CODE(rax)
  2428 00001B18 50                      	push rax
  2429 00001B19 6A01                    	push 1
  2430 00001B1B 488B0425[C8010000]      	mov rax, qword [free_var_57]
  2431                                  	assert_closure(rax)
    42 00001B23 803805              <1>  cmp byte [%1], %2
    43 00001B26 0F855EFA0000        <1>  jne L_error_incorrect_type
  2432 00001B2C FF7001                  	push SOB_CLOSURE_ENV(rax)
  2433 00001B2F FF7508                  	push qword [rbp + 8 * 1] ; old ret addr
  2434 00001B32 FF7500                  	push qword [rbp] ; same the old rbp
  2435 00001B35 BA04000000              	mov rdx, 1 + 3
  2436 00001B3A 488B4D18                	mov rcx, COUNT
  2437 00001B3E 488D4CCD20              	lea rcx, [rbp + 8*4 + rcx * 8]
  2438 00001B43 4889EF                  	mov rdi, rbp
  2439                                  .L_tc_recycle_frame_loop_0014:
  2440 00001B46 4883FA00                	cmp rdx, 0
  2441 00001B4A 7413                    	je .L_tc_recycle_frame_done_0014
  2442 00001B4C 4883E908                	sub rcx, 8
  2443 00001B50 4883EF08                	sub rdi, 8
  2444 00001B54 488B37                  	mov rsi, [rdi]
  2445 00001B57 488931                  	mov qword [rcx], rsi
  2446 00001B5A 48FFCA                  	dec rdx
  2447 00001B5D EBE7                    	jmp .L_tc_recycle_frame_loop_0014
  2448                                  .L_tc_recycle_frame_done_0014:
  2449 00001B5F 5D                      	pop rbp ; restore the old rbp
  2450 00001B60 4889CC                  	mov rsp, rcx
  2451 00001B63 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
  2452 00001B66 C9                      	leave
  2453 00001B67 C21800                  	ret 8 * (2 + 1)
  2454                                  .L_lambda_simple_end_0014:	; new closure is in rax
  2455 00001B6A 48890425[58020000]      	mov qword [free_var_75], rax
  2456 00001B72 48B8-                   	mov rax, sob_void
  2456 00001B74 [0000000000000000] 
  2457                                  
  2458 00001B7C 4889C7                  	mov rdi, rax
  2459 00001B7F E81EE20000              	call print_sexpr_if_not_void
  2460                                  
  2461 00001B84 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  2462 00001B89 E803E20000              	call malloc
  2463 00001B8E 50                      	push rax
  2464 00001B8F BF00000000              	mov rdi, 8 * 0	; new rib
  2465 00001B94 E8F8E10000              	call malloc
  2466 00001B99 50                      	push rax
  2467 00001B9A BF08000000              	mov rdi, 8 * 1	; extended env
  2468 00001B9F E8EDE10000              	call malloc
  2469 00001BA4 488B7D10                	mov rdi, ENV
  2470 00001BA8 BE00000000              	mov rsi, 0
  2471 00001BAD BA01000000              	mov rdx, 1
  2472                                  .L_lambda_simple_env_loop_0015:	; ext_env[i + 1] <-- env[i]
  2473 00001BB2 4883FE00                	cmp rsi, 0
  2474 00001BB6 7410                    	je .L_lambda_simple_env_end_0015
  2475 00001BB8 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  2476 00001BBC 48890CD0                	mov qword [rax + 8 * rdx], rcx
  2477 00001BC0 48FFC6                  	inc rsi
  2478 00001BC3 48FFC2                  	inc rdx
  2479 00001BC6 EBEA                    	jmp .L_lambda_simple_env_loop_0015
  2480                                  .L_lambda_simple_env_end_0015:
  2481 00001BC8 5B                      	pop rbx
  2482 00001BC9 BE00000000              	mov rsi, 0
  2483                                  .L_lambda_simple_params_loop_0015:	; copy params
  2484 00001BCE 4883FE00                	cmp rsi, 0
  2485 00001BD2 740E                    	je .L_lambda_simple_params_end_0015
  2486 00001BD4 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  2487 00001BD9 488914F3                	mov qword [rbx + 8 * rsi], rdx
  2488 00001BDD 48FFC6                  	inc rsi
  2489 00001BE0 EBEC                    	jmp .L_lambda_simple_params_loop_0015
  2490                                  .L_lambda_simple_params_end_0015:
  2491 00001BE2 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  2492 00001BE5 4889C3                  	mov rbx, rax
  2493 00001BE8 58                      	pop rax
  2494 00001BE9 C60005                  	mov byte [rax], T_closure
  2495 00001BEC 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  2496 00001BF0 48C74009[FD1B0000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0015
  2497 00001BF8 E987000000              	jmp .L_lambda_simple_end_0015
  2498                                  .L_lambda_simple_code_0015:	; lambda-simple body
  2499 00001BFD 48837C241001            	cmp qword [rsp + 8 * 2], 1
  2500 00001C03 740B                    	je .L_lambda_simple_arity_check_ok_0015
  2501 00001C05 FF742410                	push qword [rsp + 8 * 2]
  2502 00001C09 6A01                    	push 1
  2503 00001C0B E93AE10000              	jmp L_error_incorrect_arity_simple
  2504                                  .L_lambda_simple_arity_check_ok_0015:
  2505 00001C10 C8000000                	enter 0, 0
  2506 00001C14 488B4520                	mov rax, qword [rbp + 8 * (4 + 0)]
  2507 00001C18 50                      	push rax
  2508 00001C19 6A01                    	push 1
  2509 00001C1B 488B0425[C0010000]      	mov rax, qword [free_var_56]
  2510                                  	assert_closure(rax)
    42 00001C23 803805              <1>  cmp byte [%1], %2
    43 00001C26 0F855EF90000        <1>  jne L_error_incorrect_type
  2511 00001C2C FF7001                  	push SOB_CLOSURE_ENV(rax)
  2512 00001C2F FF5009                  	call SOB_CLOSURE_CODE(rax)
  2513 00001C32 50                      	push rax
  2514 00001C33 6A01                    	push 1
  2515 00001C35 488B0425[D0010000]      	mov rax, qword [free_var_58]
  2516                                  	assert_closure(rax)
    42 00001C3D 803805              <1>  cmp byte [%1], %2
    43 00001C40 0F8544F90000        <1>  jne L_error_incorrect_type
  2517 00001C46 FF7001                  	push SOB_CLOSURE_ENV(rax)
  2518 00001C49 FF7508                  	push qword [rbp + 8 * 1] ; old ret addr
  2519 00001C4C FF7500                  	push qword [rbp] ; same the old rbp
  2520 00001C4F BA04000000              	mov rdx, 1 + 3
  2521 00001C54 488B4D18                	mov rcx, COUNT
  2522 00001C58 488D4CCD20              	lea rcx, [rbp + 8*4 + rcx * 8]
  2523 00001C5D 4889EF                  	mov rdi, rbp
  2524                                  .L_tc_recycle_frame_loop_0015:
  2525 00001C60 4883FA00                	cmp rdx, 0
  2526 00001C64 7413                    	je .L_tc_recycle_frame_done_0015
  2527 00001C66 4883E908                	sub rcx, 8
  2528 00001C6A 4883EF08                	sub rdi, 8
  2529 00001C6E 488B37                  	mov rsi, [rdi]
  2530 00001C71 488931                  	mov qword [rcx], rsi
  2531 00001C74 48FFCA                  	dec rdx
  2532 00001C77 EBE7                    	jmp .L_tc_recycle_frame_loop_0015
  2533                                  .L_tc_recycle_frame_done_0015:
  2534 00001C79 5D                      	pop rbp ; restore the old rbp
  2535 00001C7A 4889CC                  	mov rsp, rcx
  2536 00001C7D FF6009                  	jmp SOB_CLOSURE_CODE(rax)
  2537 00001C80 C9                      	leave
  2538 00001C81 C21800                  	ret 8 * (2 + 1)
  2539                                  .L_lambda_simple_end_0015:	; new closure is in rax
  2540 00001C84 48890425[60020000]      	mov qword [free_var_76], rax
  2541 00001C8C 48B8-                   	mov rax, sob_void
  2541 00001C8E [0000000000000000] 
  2542                                  
  2543 00001C96 4889C7                  	mov rdi, rax
  2544 00001C99 E804E10000              	call print_sexpr_if_not_void
  2545                                  
  2546 00001C9E BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  2547 00001CA3 E8E9E00000              	call malloc
  2548 00001CA8 50                      	push rax
  2549 00001CA9 BF00000000              	mov rdi, 8 * 0	; new rib
  2550 00001CAE E8DEE00000              	call malloc
  2551 00001CB3 50                      	push rax
  2552 00001CB4 BF08000000              	mov rdi, 8 * 1	; extended env
  2553 00001CB9 E8D3E00000              	call malloc
  2554 00001CBE 488B7D10                	mov rdi, ENV
  2555 00001CC2 BE00000000              	mov rsi, 0
  2556 00001CC7 BA01000000              	mov rdx, 1
  2557                                  .L_lambda_simple_env_loop_0016:	; ext_env[i + 1] <-- env[i]
  2558 00001CCC 4883FE00                	cmp rsi, 0
  2559 00001CD0 7410                    	je .L_lambda_simple_env_end_0016
  2560 00001CD2 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  2561 00001CD6 48890CD0                	mov qword [rax + 8 * rdx], rcx
  2562 00001CDA 48FFC6                  	inc rsi
  2563 00001CDD 48FFC2                  	inc rdx
  2564 00001CE0 EBEA                    	jmp .L_lambda_simple_env_loop_0016
  2565                                  .L_lambda_simple_env_end_0016:
  2566 00001CE2 5B                      	pop rbx
  2567 00001CE3 BE00000000              	mov rsi, 0
  2568                                  .L_lambda_simple_params_loop_0016:	; copy params
  2569 00001CE8 4883FE00                	cmp rsi, 0
  2570 00001CEC 740E                    	je .L_lambda_simple_params_end_0016
  2571 00001CEE 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  2572 00001CF3 488914F3                	mov qword [rbx + 8 * rsi], rdx
  2573 00001CF7 48FFC6                  	inc rsi
  2574 00001CFA EBEC                    	jmp .L_lambda_simple_params_loop_0016
  2575                                  .L_lambda_simple_params_end_0016:
  2576 00001CFC 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  2577 00001CFF 4889C3                  	mov rbx, rax
  2578 00001D02 58                      	pop rax
  2579 00001D03 C60005                  	mov byte [rax], T_closure
  2580 00001D06 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  2581 00001D0A 48C74009[171D0000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0016
  2582 00001D12 E987000000              	jmp .L_lambda_simple_end_0016
  2583                                  .L_lambda_simple_code_0016:	; lambda-simple body
  2584 00001D17 48837C241001            	cmp qword [rsp + 8 * 2], 1
  2585 00001D1D 740B                    	je .L_lambda_simple_arity_check_ok_0016
  2586 00001D1F FF742410                	push qword [rsp + 8 * 2]
  2587 00001D23 6A01                    	push 1
  2588 00001D25 E920E00000              	jmp L_error_incorrect_arity_simple
  2589                                  .L_lambda_simple_arity_check_ok_0016:
  2590 00001D2A C8000000                	enter 0, 0
  2591 00001D2E 488B4520                	mov rax, qword [rbp + 8 * (4 + 0)]
  2592 00001D32 50                      	push rax
  2593 00001D33 6A01                    	push 1
  2594 00001D35 488B0425[C8010000]      	mov rax, qword [free_var_57]
  2595                                  	assert_closure(rax)
    42 00001D3D 803805              <1>  cmp byte [%1], %2
    43 00001D40 0F8544F80000        <1>  jne L_error_incorrect_type
  2596 00001D46 FF7001                  	push SOB_CLOSURE_ENV(rax)
  2597 00001D49 FF5009                  	call SOB_CLOSURE_CODE(rax)
  2598 00001D4C 50                      	push rax
  2599 00001D4D 6A01                    	push 1
  2600 00001D4F 488B0425[D0010000]      	mov rax, qword [free_var_58]
  2601                                  	assert_closure(rax)
    42 00001D57 803805              <1>  cmp byte [%1], %2
    43 00001D5A 0F852AF80000        <1>  jne L_error_incorrect_type
  2602 00001D60 FF7001                  	push SOB_CLOSURE_ENV(rax)
  2603 00001D63 FF7508                  	push qword [rbp + 8 * 1] ; old ret addr
  2604 00001D66 FF7500                  	push qword [rbp] ; same the old rbp
  2605 00001D69 BA04000000              	mov rdx, 1 + 3
  2606 00001D6E 488B4D18                	mov rcx, COUNT
  2607 00001D72 488D4CCD20              	lea rcx, [rbp + 8*4 + rcx * 8]
  2608 00001D77 4889EF                  	mov rdi, rbp
  2609                                  .L_tc_recycle_frame_loop_0016:
  2610 00001D7A 4883FA00                	cmp rdx, 0
  2611 00001D7E 7413                    	je .L_tc_recycle_frame_done_0016
  2612 00001D80 4883E908                	sub rcx, 8
  2613 00001D84 4883EF08                	sub rdi, 8
  2614 00001D88 488B37                  	mov rsi, [rdi]
  2615 00001D8B 488931                  	mov qword [rcx], rsi
  2616 00001D8E 48FFCA                  	dec rdx
  2617 00001D91 EBE7                    	jmp .L_tc_recycle_frame_loop_0016
  2618                                  .L_tc_recycle_frame_done_0016:
  2619 00001D93 5D                      	pop rbp ; restore the old rbp
  2620 00001D94 4889CC                  	mov rsp, rcx
  2621 00001D97 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
  2622 00001D9A C9                      	leave
  2623 00001D9B C21800                  	ret 8 * (2 + 1)
  2624                                  .L_lambda_simple_end_0016:	; new closure is in rax
  2625 00001D9E 48890425[68020000]      	mov qword [free_var_77], rax
  2626 00001DA6 48B8-                   	mov rax, sob_void
  2626 00001DA8 [0000000000000000] 
  2627                                  
  2628 00001DB0 4889C7                  	mov rdi, rax
  2629 00001DB3 E8EADF0000              	call print_sexpr_if_not_void
  2630                                  
  2631 00001DB8 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  2632 00001DBD E8CFDF0000              	call malloc
  2633 00001DC2 50                      	push rax
  2634 00001DC3 BF00000000              	mov rdi, 8 * 0	; new rib
  2635 00001DC8 E8C4DF0000              	call malloc
  2636 00001DCD 50                      	push rax
  2637 00001DCE BF08000000              	mov rdi, 8 * 1	; extended env
  2638 00001DD3 E8B9DF0000              	call malloc
  2639 00001DD8 488B7D10                	mov rdi, ENV
  2640 00001DDC BE00000000              	mov rsi, 0
  2641 00001DE1 BA01000000              	mov rdx, 1
  2642                                  .L_lambda_simple_env_loop_0017:	; ext_env[i + 1] <-- env[i]
  2643 00001DE6 4883FE00                	cmp rsi, 0
  2644 00001DEA 7410                    	je .L_lambda_simple_env_end_0017
  2645 00001DEC 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  2646 00001DF0 48890CD0                	mov qword [rax + 8 * rdx], rcx
  2647 00001DF4 48FFC6                  	inc rsi
  2648 00001DF7 48FFC2                  	inc rdx
  2649 00001DFA EBEA                    	jmp .L_lambda_simple_env_loop_0017
  2650                                  .L_lambda_simple_env_end_0017:
  2651 00001DFC 5B                      	pop rbx
  2652 00001DFD BE00000000              	mov rsi, 0
  2653                                  .L_lambda_simple_params_loop_0017:	; copy params
  2654 00001E02 4883FE00                	cmp rsi, 0
  2655 00001E06 740E                    	je .L_lambda_simple_params_end_0017
  2656 00001E08 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  2657 00001E0D 488914F3                	mov qword [rbx + 8 * rsi], rdx
  2658 00001E11 48FFC6                  	inc rsi
  2659 00001E14 EBEC                    	jmp .L_lambda_simple_params_loop_0017
  2660                                  .L_lambda_simple_params_end_0017:
  2661 00001E16 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  2662 00001E19 4889C3                  	mov rbx, rax
  2663 00001E1C 58                      	pop rax
  2664 00001E1D C60005                  	mov byte [rax], T_closure
  2665 00001E20 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  2666 00001E24 48C74009[311E0000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0017
  2667 00001E2C E987000000              	jmp .L_lambda_simple_end_0017
  2668                                  .L_lambda_simple_code_0017:	; lambda-simple body
  2669 00001E31 48837C241001            	cmp qword [rsp + 8 * 2], 1
  2670 00001E37 740B                    	je .L_lambda_simple_arity_check_ok_0017
  2671 00001E39 FF742410                	push qword [rsp + 8 * 2]
  2672 00001E3D 6A01                    	push 1
  2673 00001E3F E906DF0000              	jmp L_error_incorrect_arity_simple
  2674                                  .L_lambda_simple_arity_check_ok_0017:
  2675 00001E44 C8000000                	enter 0, 0
  2676 00001E48 488B4520                	mov rax, qword [rbp + 8 * (4 + 0)]
  2677 00001E4C 50                      	push rax
  2678 00001E4D 6A01                    	push 1
  2679 00001E4F 488B0425[D0010000]      	mov rax, qword [free_var_58]
  2680                                  	assert_closure(rax)
    42 00001E57 803805              <1>  cmp byte [%1], %2
    43 00001E5A 0F852AF70000        <1>  jne L_error_incorrect_type
  2681 00001E60 FF7001                  	push SOB_CLOSURE_ENV(rax)
  2682 00001E63 FF5009                  	call SOB_CLOSURE_CODE(rax)
  2683 00001E66 50                      	push rax
  2684 00001E67 6A01                    	push 1
  2685 00001E69 488B0425[D0010000]      	mov rax, qword [free_var_58]
  2686                                  	assert_closure(rax)
    42 00001E71 803805              <1>  cmp byte [%1], %2
    43 00001E74 0F8510F70000        <1>  jne L_error_incorrect_type
  2687 00001E7A FF7001                  	push SOB_CLOSURE_ENV(rax)
  2688 00001E7D FF7508                  	push qword [rbp + 8 * 1] ; old ret addr
  2689 00001E80 FF7500                  	push qword [rbp] ; same the old rbp
  2690 00001E83 BA04000000              	mov rdx, 1 + 3
  2691 00001E88 488B4D18                	mov rcx, COUNT
  2692 00001E8C 488D4CCD20              	lea rcx, [rbp + 8*4 + rcx * 8]
  2693 00001E91 4889EF                  	mov rdi, rbp
  2694                                  .L_tc_recycle_frame_loop_0017:
  2695 00001E94 4883FA00                	cmp rdx, 0
  2696 00001E98 7413                    	je .L_tc_recycle_frame_done_0017
  2697 00001E9A 4883E908                	sub rcx, 8
  2698 00001E9E 4883EF08                	sub rdi, 8
  2699 00001EA2 488B37                  	mov rsi, [rdi]
  2700 00001EA5 488931                  	mov qword [rcx], rsi
  2701 00001EA8 48FFCA                  	dec rdx
  2702 00001EAB EBE7                    	jmp .L_tc_recycle_frame_loop_0017
  2703                                  .L_tc_recycle_frame_done_0017:
  2704 00001EAD 5D                      	pop rbp ; restore the old rbp
  2705 00001EAE 4889CC                  	mov rsp, rcx
  2706 00001EB1 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
  2707 00001EB4 C9                      	leave
  2708 00001EB5 C21800                  	ret 8 * (2 + 1)
  2709                                  .L_lambda_simple_end_0017:	; new closure is in rax
  2710 00001EB8 48890425[70020000]      	mov qword [free_var_78], rax
  2711 00001EC0 48B8-                   	mov rax, sob_void
  2711 00001EC2 [0000000000000000] 
  2712                                  
  2713 00001ECA 4889C7                  	mov rdi, rax
  2714 00001ECD E8D0DE0000              	call print_sexpr_if_not_void
  2715                                  
  2716 00001ED2 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  2717 00001ED7 E8B5DE0000              	call malloc
  2718 00001EDC 50                      	push rax
  2719 00001EDD BF00000000              	mov rdi, 8 * 0	; new rib
  2720 00001EE2 E8AADE0000              	call malloc
  2721 00001EE7 50                      	push rax
  2722 00001EE8 BF08000000              	mov rdi, 8 * 1	; extended env
  2723 00001EED E89FDE0000              	call malloc
  2724 00001EF2 488B7D10                	mov rdi, ENV
  2725 00001EF6 BE00000000              	mov rsi, 0
  2726 00001EFB BA01000000              	mov rdx, 1
  2727                                  .L_lambda_simple_env_loop_0018:	; ext_env[i + 1] <-- env[i]
  2728 00001F00 4883FE00                	cmp rsi, 0
  2729 00001F04 7410                    	je .L_lambda_simple_env_end_0018
  2730 00001F06 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  2731 00001F0A 48890CD0                	mov qword [rax + 8 * rdx], rcx
  2732 00001F0E 48FFC6                  	inc rsi
  2733 00001F11 48FFC2                  	inc rdx
  2734 00001F14 EBEA                    	jmp .L_lambda_simple_env_loop_0018
  2735                                  .L_lambda_simple_env_end_0018:
  2736 00001F16 5B                      	pop rbx
  2737 00001F17 BE00000000              	mov rsi, 0
  2738                                  .L_lambda_simple_params_loop_0018:	; copy params
  2739 00001F1C 4883FE00                	cmp rsi, 0
  2740 00001F20 740E                    	je .L_lambda_simple_params_end_0018
  2741 00001F22 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  2742 00001F27 488914F3                	mov qword [rbx + 8 * rsi], rdx
  2743 00001F2B 48FFC6                  	inc rsi
  2744 00001F2E EBEC                    	jmp .L_lambda_simple_params_loop_0018
  2745                                  .L_lambda_simple_params_end_0018:
  2746 00001F30 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  2747 00001F33 4889C3                  	mov rbx, rax
  2748 00001F36 58                      	pop rax
  2749 00001F37 C60005                  	mov byte [rax], T_closure
  2750 00001F3A 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  2751 00001F3E 48C74009[4B1F0000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0018
  2752 00001F46 E987000000              	jmp .L_lambda_simple_end_0018
  2753                                  .L_lambda_simple_code_0018:	; lambda-simple body
  2754 00001F4B 48837C241001            	cmp qword [rsp + 8 * 2], 1
  2755 00001F51 740B                    	je .L_lambda_simple_arity_check_ok_0018
  2756 00001F53 FF742410                	push qword [rsp + 8 * 2]
  2757 00001F57 6A01                    	push 1
  2758 00001F59 E9ECDD0000              	jmp L_error_incorrect_arity_simple
  2759                                  .L_lambda_simple_arity_check_ok_0018:
  2760 00001F5E C8000000                	enter 0, 0
  2761 00001F62 488B4520                	mov rax, qword [rbp + 8 * (4 + 0)]
  2762 00001F66 50                      	push rax
  2763 00001F67 6A01                    	push 1
  2764 00001F69 488B0425[D8010000]      	mov rax, qword [free_var_59]
  2765                                  	assert_closure(rax)
    42 00001F71 803805              <1>  cmp byte [%1], %2
    43 00001F74 0F8510F60000        <1>  jne L_error_incorrect_type
  2766 00001F7A FF7001                  	push SOB_CLOSURE_ENV(rax)
  2767 00001F7D FF5009                  	call SOB_CLOSURE_CODE(rax)
  2768 00001F80 50                      	push rax
  2769 00001F81 6A01                    	push 1
  2770 00001F83 488B0425[D0010000]      	mov rax, qword [free_var_58]
  2771                                  	assert_closure(rax)
    42 00001F8B 803805              <1>  cmp byte [%1], %2
    43 00001F8E 0F85F6F50000        <1>  jne L_error_incorrect_type
  2772 00001F94 FF7001                  	push SOB_CLOSURE_ENV(rax)
  2773 00001F97 FF7508                  	push qword [rbp + 8 * 1] ; old ret addr
  2774 00001F9A FF7500                  	push qword [rbp] ; same the old rbp
  2775 00001F9D BA04000000              	mov rdx, 1 + 3
  2776 00001FA2 488B4D18                	mov rcx, COUNT
  2777 00001FA6 488D4CCD20              	lea rcx, [rbp + 8*4 + rcx * 8]
  2778 00001FAB 4889EF                  	mov rdi, rbp
  2779                                  .L_tc_recycle_frame_loop_0018:
  2780 00001FAE 4883FA00                	cmp rdx, 0
  2781 00001FB2 7413                    	je .L_tc_recycle_frame_done_0018
  2782 00001FB4 4883E908                	sub rcx, 8
  2783 00001FB8 4883EF08                	sub rdi, 8
  2784 00001FBC 488B37                  	mov rsi, [rdi]
  2785 00001FBF 488931                  	mov qword [rcx], rsi
  2786 00001FC2 48FFCA                  	dec rdx
  2787 00001FC5 EBE7                    	jmp .L_tc_recycle_frame_loop_0018
  2788                                  .L_tc_recycle_frame_done_0018:
  2789 00001FC7 5D                      	pop rbp ; restore the old rbp
  2790 00001FC8 4889CC                  	mov rsp, rcx
  2791 00001FCB FF6009                  	jmp SOB_CLOSURE_CODE(rax)
  2792 00001FCE C9                      	leave
  2793 00001FCF C21800                  	ret 8 * (2 + 1)
  2794                                  .L_lambda_simple_end_0018:	; new closure is in rax
  2795 00001FD2 48890425[78020000]      	mov qword [free_var_79], rax
  2796 00001FDA 48B8-                   	mov rax, sob_void
  2796 00001FDC [0000000000000000] 
  2797                                  
  2798 00001FE4 4889C7                  	mov rdi, rax
  2799 00001FE7 E8B6DD0000              	call print_sexpr_if_not_void
  2800                                  
  2801 00001FEC BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  2802 00001FF1 E89BDD0000              	call malloc
  2803 00001FF6 50                      	push rax
  2804 00001FF7 BF00000000              	mov rdi, 8 * 0	; new rib
  2805 00001FFC E890DD0000              	call malloc
  2806 00002001 50                      	push rax
  2807 00002002 BF08000000              	mov rdi, 8 * 1	; extended env
  2808 00002007 E885DD0000              	call malloc
  2809 0000200C 488B7D10                	mov rdi, ENV
  2810 00002010 BE00000000              	mov rsi, 0
  2811 00002015 BA01000000              	mov rdx, 1
  2812                                  .L_lambda_simple_env_loop_0019:	; ext_env[i + 1] <-- env[i]
  2813 0000201A 4883FE00                	cmp rsi, 0
  2814 0000201E 7410                    	je .L_lambda_simple_env_end_0019
  2815 00002020 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  2816 00002024 48890CD0                	mov qword [rax + 8 * rdx], rcx
  2817 00002028 48FFC6                  	inc rsi
  2818 0000202B 48FFC2                  	inc rdx
  2819 0000202E EBEA                    	jmp .L_lambda_simple_env_loop_0019
  2820                                  .L_lambda_simple_env_end_0019:
  2821 00002030 5B                      	pop rbx
  2822 00002031 BE00000000              	mov rsi, 0
  2823                                  .L_lambda_simple_params_loop_0019:	; copy params
  2824 00002036 4883FE00                	cmp rsi, 0
  2825 0000203A 740E                    	je .L_lambda_simple_params_end_0019
  2826 0000203C 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  2827 00002041 488914F3                	mov qword [rbx + 8 * rsi], rdx
  2828 00002045 48FFC6                  	inc rsi
  2829 00002048 EBEC                    	jmp .L_lambda_simple_params_loop_0019
  2830                                  .L_lambda_simple_params_end_0019:
  2831 0000204A 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  2832 0000204D 4889C3                  	mov rbx, rax
  2833 00002050 58                      	pop rax
  2834 00002051 C60005                  	mov byte [rax], T_closure
  2835 00002054 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  2836 00002058 48C74009[65200000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0019
  2837 00002060 E987000000              	jmp .L_lambda_simple_end_0019
  2838                                  .L_lambda_simple_code_0019:	; lambda-simple body
  2839 00002065 48837C241001            	cmp qword [rsp + 8 * 2], 1
  2840 0000206B 740B                    	je .L_lambda_simple_arity_check_ok_0019
  2841 0000206D FF742410                	push qword [rsp + 8 * 2]
  2842 00002071 6A01                    	push 1
  2843 00002073 E9D2DC0000              	jmp L_error_incorrect_arity_simple
  2844                                  .L_lambda_simple_arity_check_ok_0019:
  2845 00002078 C8000000                	enter 0, 0
  2846 0000207C 488B4520                	mov rax, qword [rbp + 8 * (4 + 0)]
  2847 00002080 50                      	push rax
  2848 00002081 6A01                    	push 1
  2849 00002083 488B0425[C0010000]      	mov rax, qword [free_var_56]
  2850                                  	assert_closure(rax)
    42 0000208B 803805              <1>  cmp byte [%1], %2
    43 0000208E 0F85F6F40000        <1>  jne L_error_incorrect_type
  2851 00002094 FF7001                  	push SOB_CLOSURE_ENV(rax)
  2852 00002097 FF5009                  	call SOB_CLOSURE_CODE(rax)
  2853 0000209A 50                      	push rax
  2854 0000209B 6A01                    	push 1
  2855 0000209D 488B0425[D8010000]      	mov rax, qword [free_var_59]
  2856                                  	assert_closure(rax)
    42 000020A5 803805              <1>  cmp byte [%1], %2
    43 000020A8 0F85DCF40000        <1>  jne L_error_incorrect_type
  2857 000020AE FF7001                  	push SOB_CLOSURE_ENV(rax)
  2858 000020B1 FF7508                  	push qword [rbp + 8 * 1] ; old ret addr
  2859 000020B4 FF7500                  	push qword [rbp] ; same the old rbp
  2860 000020B7 BA04000000              	mov rdx, 1 + 3
  2861 000020BC 488B4D18                	mov rcx, COUNT
  2862 000020C0 488D4CCD20              	lea rcx, [rbp + 8*4 + rcx * 8]
  2863 000020C5 4889EF                  	mov rdi, rbp
  2864                                  .L_tc_recycle_frame_loop_0019:
  2865 000020C8 4883FA00                	cmp rdx, 0
  2866 000020CC 7413                    	je .L_tc_recycle_frame_done_0019
  2867 000020CE 4883E908                	sub rcx, 8
  2868 000020D2 4883EF08                	sub rdi, 8
  2869 000020D6 488B37                  	mov rsi, [rdi]
  2870 000020D9 488931                  	mov qword [rcx], rsi
  2871 000020DC 48FFCA                  	dec rdx
  2872 000020DF EBE7                    	jmp .L_tc_recycle_frame_loop_0019
  2873                                  .L_tc_recycle_frame_done_0019:
  2874 000020E1 5D                      	pop rbp ; restore the old rbp
  2875 000020E2 4889CC                  	mov rsp, rcx
  2876 000020E5 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
  2877 000020E8 C9                      	leave
  2878 000020E9 C21800                  	ret 8 * (2 + 1)
  2879                                  .L_lambda_simple_end_0019:	; new closure is in rax
  2880 000020EC 48890425[80020000]      	mov qword [free_var_80], rax
  2881 000020F4 48B8-                   	mov rax, sob_void
  2881 000020F6 [0000000000000000] 
  2882                                  
  2883 000020FE 4889C7                  	mov rdi, rax
  2884 00002101 E89CDC0000              	call print_sexpr_if_not_void
  2885                                  
  2886 00002106 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  2887 0000210B E881DC0000              	call malloc
  2888 00002110 50                      	push rax
  2889 00002111 BF00000000              	mov rdi, 8 * 0	; new rib
  2890 00002116 E876DC0000              	call malloc
  2891 0000211B 50                      	push rax
  2892 0000211C BF08000000              	mov rdi, 8 * 1	; extended env
  2893 00002121 E86BDC0000              	call malloc
  2894 00002126 488B7D10                	mov rdi, ENV
  2895 0000212A BE00000000              	mov rsi, 0
  2896 0000212F BA01000000              	mov rdx, 1
  2897                                  .L_lambda_simple_env_loop_001a:	; ext_env[i + 1] <-- env[i]
  2898 00002134 4883FE00                	cmp rsi, 0
  2899 00002138 7410                    	je .L_lambda_simple_env_end_001a
  2900 0000213A 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  2901 0000213E 48890CD0                	mov qword [rax + 8 * rdx], rcx
  2902 00002142 48FFC6                  	inc rsi
  2903 00002145 48FFC2                  	inc rdx
  2904 00002148 EBEA                    	jmp .L_lambda_simple_env_loop_001a
  2905                                  .L_lambda_simple_env_end_001a:
  2906 0000214A 5B                      	pop rbx
  2907 0000214B BE00000000              	mov rsi, 0
  2908                                  .L_lambda_simple_params_loop_001a:	; copy params
  2909 00002150 4883FE00                	cmp rsi, 0
  2910 00002154 740E                    	je .L_lambda_simple_params_end_001a
  2911 00002156 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  2912 0000215B 488914F3                	mov qword [rbx + 8 * rsi], rdx
  2913 0000215F 48FFC6                  	inc rsi
  2914 00002162 EBEC                    	jmp .L_lambda_simple_params_loop_001a
  2915                                  .L_lambda_simple_params_end_001a:
  2916 00002164 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  2917 00002167 4889C3                  	mov rbx, rax
  2918 0000216A 58                      	pop rax
  2919 0000216B C60005                  	mov byte [rax], T_closure
  2920 0000216E 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  2921 00002172 48C74009[7F210000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_001a
  2922 0000217A E987000000              	jmp .L_lambda_simple_end_001a
  2923                                  .L_lambda_simple_code_001a:	; lambda-simple body
  2924 0000217F 48837C241001            	cmp qword [rsp + 8 * 2], 1
  2925 00002185 740B                    	je .L_lambda_simple_arity_check_ok_001a
  2926 00002187 FF742410                	push qword [rsp + 8 * 2]
  2927 0000218B 6A01                    	push 1
  2928 0000218D E9B8DB0000              	jmp L_error_incorrect_arity_simple
  2929                                  .L_lambda_simple_arity_check_ok_001a:
  2930 00002192 C8000000                	enter 0, 0
  2931 00002196 488B4520                	mov rax, qword [rbp + 8 * (4 + 0)]
  2932 0000219A 50                      	push rax
  2933 0000219B 6A01                    	push 1
  2934 0000219D 488B0425[C8010000]      	mov rax, qword [free_var_57]
  2935                                  	assert_closure(rax)
    42 000021A5 803805              <1>  cmp byte [%1], %2
    43 000021A8 0F85DCF30000        <1>  jne L_error_incorrect_type
  2936 000021AE FF7001                  	push SOB_CLOSURE_ENV(rax)
  2937 000021B1 FF5009                  	call SOB_CLOSURE_CODE(rax)
  2938 000021B4 50                      	push rax
  2939 000021B5 6A01                    	push 1
  2940 000021B7 488B0425[D8010000]      	mov rax, qword [free_var_59]
  2941                                  	assert_closure(rax)
    42 000021BF 803805              <1>  cmp byte [%1], %2
    43 000021C2 0F85C2F30000        <1>  jne L_error_incorrect_type
  2942 000021C8 FF7001                  	push SOB_CLOSURE_ENV(rax)
  2943 000021CB FF7508                  	push qword [rbp + 8 * 1] ; old ret addr
  2944 000021CE FF7500                  	push qword [rbp] ; same the old rbp
  2945 000021D1 BA04000000              	mov rdx, 1 + 3
  2946 000021D6 488B4D18                	mov rcx, COUNT
  2947 000021DA 488D4CCD20              	lea rcx, [rbp + 8*4 + rcx * 8]
  2948 000021DF 4889EF                  	mov rdi, rbp
  2949                                  .L_tc_recycle_frame_loop_001a:
  2950 000021E2 4883FA00                	cmp rdx, 0
  2951 000021E6 7413                    	je .L_tc_recycle_frame_done_001a
  2952 000021E8 4883E908                	sub rcx, 8
  2953 000021EC 4883EF08                	sub rdi, 8
  2954 000021F0 488B37                  	mov rsi, [rdi]
  2955 000021F3 488931                  	mov qword [rcx], rsi
  2956 000021F6 48FFCA                  	dec rdx
  2957 000021F9 EBE7                    	jmp .L_tc_recycle_frame_loop_001a
  2958                                  .L_tc_recycle_frame_done_001a:
  2959 000021FB 5D                      	pop rbp ; restore the old rbp
  2960 000021FC 4889CC                  	mov rsp, rcx
  2961 000021FF FF6009                  	jmp SOB_CLOSURE_CODE(rax)
  2962 00002202 C9                      	leave
  2963 00002203 C21800                  	ret 8 * (2 + 1)
  2964                                  .L_lambda_simple_end_001a:	; new closure is in rax
  2965 00002206 48890425[88020000]      	mov qword [free_var_81], rax
  2966 0000220E 48B8-                   	mov rax, sob_void
  2966 00002210 [0000000000000000] 
  2967                                  
  2968 00002218 4889C7                  	mov rdi, rax
  2969 0000221B E882DB0000              	call print_sexpr_if_not_void
  2970                                  
  2971 00002220 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  2972 00002225 E867DB0000              	call malloc
  2973 0000222A 50                      	push rax
  2974 0000222B BF00000000              	mov rdi, 8 * 0	; new rib
  2975 00002230 E85CDB0000              	call malloc
  2976 00002235 50                      	push rax
  2977 00002236 BF08000000              	mov rdi, 8 * 1	; extended env
  2978 0000223B E851DB0000              	call malloc
  2979 00002240 488B7D10                	mov rdi, ENV
  2980 00002244 BE00000000              	mov rsi, 0
  2981 00002249 BA01000000              	mov rdx, 1
  2982                                  .L_lambda_simple_env_loop_001b:	; ext_env[i + 1] <-- env[i]
  2983 0000224E 4883FE00                	cmp rsi, 0
  2984 00002252 7410                    	je .L_lambda_simple_env_end_001b
  2985 00002254 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  2986 00002258 48890CD0                	mov qword [rax + 8 * rdx], rcx
  2987 0000225C 48FFC6                  	inc rsi
  2988 0000225F 48FFC2                  	inc rdx
  2989 00002262 EBEA                    	jmp .L_lambda_simple_env_loop_001b
  2990                                  .L_lambda_simple_env_end_001b:
  2991 00002264 5B                      	pop rbx
  2992 00002265 BE00000000              	mov rsi, 0
  2993                                  .L_lambda_simple_params_loop_001b:	; copy params
  2994 0000226A 4883FE00                	cmp rsi, 0
  2995 0000226E 740E                    	je .L_lambda_simple_params_end_001b
  2996 00002270 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  2997 00002275 488914F3                	mov qword [rbx + 8 * rsi], rdx
  2998 00002279 48FFC6                  	inc rsi
  2999 0000227C EBEC                    	jmp .L_lambda_simple_params_loop_001b
  3000                                  .L_lambda_simple_params_end_001b:
  3001 0000227E 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  3002 00002281 4889C3                  	mov rbx, rax
  3003 00002284 58                      	pop rax
  3004 00002285 C60005                  	mov byte [rax], T_closure
  3005 00002288 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  3006 0000228C 48C74009[99220000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_001b
  3007 00002294 E987000000              	jmp .L_lambda_simple_end_001b
  3008                                  .L_lambda_simple_code_001b:	; lambda-simple body
  3009 00002299 48837C241001            	cmp qword [rsp + 8 * 2], 1
  3010 0000229F 740B                    	je .L_lambda_simple_arity_check_ok_001b
  3011 000022A1 FF742410                	push qword [rsp + 8 * 2]
  3012 000022A5 6A01                    	push 1
  3013 000022A7 E99EDA0000              	jmp L_error_incorrect_arity_simple
  3014                                  .L_lambda_simple_arity_check_ok_001b:
  3015 000022AC C8000000                	enter 0, 0
  3016 000022B0 488B4520                	mov rax, qword [rbp + 8 * (4 + 0)]
  3017 000022B4 50                      	push rax
  3018 000022B5 6A01                    	push 1
  3019 000022B7 488B0425[D0010000]      	mov rax, qword [free_var_58]
  3020                                  	assert_closure(rax)
    42 000022BF 803805              <1>  cmp byte [%1], %2
    43 000022C2 0F85C2F20000        <1>  jne L_error_incorrect_type
  3021 000022C8 FF7001                  	push SOB_CLOSURE_ENV(rax)
  3022 000022CB FF5009                  	call SOB_CLOSURE_CODE(rax)
  3023 000022CE 50                      	push rax
  3024 000022CF 6A01                    	push 1
  3025 000022D1 488B0425[D8010000]      	mov rax, qword [free_var_59]
  3026                                  	assert_closure(rax)
    42 000022D9 803805              <1>  cmp byte [%1], %2
    43 000022DC 0F85A8F20000        <1>  jne L_error_incorrect_type
  3027 000022E2 FF7001                  	push SOB_CLOSURE_ENV(rax)
  3028 000022E5 FF7508                  	push qword [rbp + 8 * 1] ; old ret addr
  3029 000022E8 FF7500                  	push qword [rbp] ; same the old rbp
  3030 000022EB BA04000000              	mov rdx, 1 + 3
  3031 000022F0 488B4D18                	mov rcx, COUNT
  3032 000022F4 488D4CCD20              	lea rcx, [rbp + 8*4 + rcx * 8]
  3033 000022F9 4889EF                  	mov rdi, rbp
  3034                                  .L_tc_recycle_frame_loop_001b:
  3035 000022FC 4883FA00                	cmp rdx, 0
  3036 00002300 7413                    	je .L_tc_recycle_frame_done_001b
  3037 00002302 4883E908                	sub rcx, 8
  3038 00002306 4883EF08                	sub rdi, 8
  3039 0000230A 488B37                  	mov rsi, [rdi]
  3040 0000230D 488931                  	mov qword [rcx], rsi
  3041 00002310 48FFCA                  	dec rdx
  3042 00002313 EBE7                    	jmp .L_tc_recycle_frame_loop_001b
  3043                                  .L_tc_recycle_frame_done_001b:
  3044 00002315 5D                      	pop rbp ; restore the old rbp
  3045 00002316 4889CC                  	mov rsp, rcx
  3046 00002319 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
  3047 0000231C C9                      	leave
  3048 0000231D C21800                  	ret 8 * (2 + 1)
  3049                                  .L_lambda_simple_end_001b:	; new closure is in rax
  3050 00002320 48890425[90020000]      	mov qword [free_var_82], rax
  3051 00002328 48B8-                   	mov rax, sob_void
  3051 0000232A [0000000000000000] 
  3052                                  
  3053 00002332 4889C7                  	mov rdi, rax
  3054 00002335 E868DA0000              	call print_sexpr_if_not_void
  3055                                  
  3056 0000233A BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  3057 0000233F E84DDA0000              	call malloc
  3058 00002344 50                      	push rax
  3059 00002345 BF00000000              	mov rdi, 8 * 0	; new rib
  3060 0000234A E842DA0000              	call malloc
  3061 0000234F 50                      	push rax
  3062 00002350 BF08000000              	mov rdi, 8 * 1	; extended env
  3063 00002355 E837DA0000              	call malloc
  3064 0000235A 488B7D10                	mov rdi, ENV
  3065 0000235E BE00000000              	mov rsi, 0
  3066 00002363 BA01000000              	mov rdx, 1
  3067                                  .L_lambda_simple_env_loop_001c:	; ext_env[i + 1] <-- env[i]
  3068 00002368 4883FE00                	cmp rsi, 0
  3069 0000236C 7410                    	je .L_lambda_simple_env_end_001c
  3070 0000236E 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  3071 00002372 48890CD0                	mov qword [rax + 8 * rdx], rcx
  3072 00002376 48FFC6                  	inc rsi
  3073 00002379 48FFC2                  	inc rdx
  3074 0000237C EBEA                    	jmp .L_lambda_simple_env_loop_001c
  3075                                  .L_lambda_simple_env_end_001c:
  3076 0000237E 5B                      	pop rbx
  3077 0000237F BE00000000              	mov rsi, 0
  3078                                  .L_lambda_simple_params_loop_001c:	; copy params
  3079 00002384 4883FE00                	cmp rsi, 0
  3080 00002388 740E                    	je .L_lambda_simple_params_end_001c
  3081 0000238A 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  3082 0000238F 488914F3                	mov qword [rbx + 8 * rsi], rdx
  3083 00002393 48FFC6                  	inc rsi
  3084 00002396 EBEC                    	jmp .L_lambda_simple_params_loop_001c
  3085                                  .L_lambda_simple_params_end_001c:
  3086 00002398 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  3087 0000239B 4889C3                  	mov rbx, rax
  3088 0000239E 58                      	pop rax
  3089 0000239F C60005                  	mov byte [rax], T_closure
  3090 000023A2 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  3091 000023A6 48C74009[B3230000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_001c
  3092 000023AE E987000000              	jmp .L_lambda_simple_end_001c
  3093                                  .L_lambda_simple_code_001c:	; lambda-simple body
  3094 000023B3 48837C241001            	cmp qword [rsp + 8 * 2], 1
  3095 000023B9 740B                    	je .L_lambda_simple_arity_check_ok_001c
  3096 000023BB FF742410                	push qword [rsp + 8 * 2]
  3097 000023BF 6A01                    	push 1
  3098 000023C1 E984D90000              	jmp L_error_incorrect_arity_simple
  3099                                  .L_lambda_simple_arity_check_ok_001c:
  3100 000023C6 C8000000                	enter 0, 0
  3101 000023CA 488B4520                	mov rax, qword [rbp + 8 * (4 + 0)]
  3102 000023CE 50                      	push rax
  3103 000023CF 6A01                    	push 1
  3104 000023D1 488B0425[D8010000]      	mov rax, qword [free_var_59]
  3105                                  	assert_closure(rax)
    42 000023D9 803805              <1>  cmp byte [%1], %2
    43 000023DC 0F85A8F10000        <1>  jne L_error_incorrect_type
  3106 000023E2 FF7001                  	push SOB_CLOSURE_ENV(rax)
  3107 000023E5 FF5009                  	call SOB_CLOSURE_CODE(rax)
  3108 000023E8 50                      	push rax
  3109 000023E9 6A01                    	push 1
  3110 000023EB 488B0425[D8010000]      	mov rax, qword [free_var_59]
  3111                                  	assert_closure(rax)
    42 000023F3 803805              <1>  cmp byte [%1], %2
    43 000023F6 0F858EF10000        <1>  jne L_error_incorrect_type
  3112 000023FC FF7001                  	push SOB_CLOSURE_ENV(rax)
  3113 000023FF FF7508                  	push qword [rbp + 8 * 1] ; old ret addr
  3114 00002402 FF7500                  	push qword [rbp] ; same the old rbp
  3115 00002405 BA04000000              	mov rdx, 1 + 3
  3116 0000240A 488B4D18                	mov rcx, COUNT
  3117 0000240E 488D4CCD20              	lea rcx, [rbp + 8*4 + rcx * 8]
  3118 00002413 4889EF                  	mov rdi, rbp
  3119                                  .L_tc_recycle_frame_loop_001c:
  3120 00002416 4883FA00                	cmp rdx, 0
  3121 0000241A 7413                    	je .L_tc_recycle_frame_done_001c
  3122 0000241C 4883E908                	sub rcx, 8
  3123 00002420 4883EF08                	sub rdi, 8
  3124 00002424 488B37                  	mov rsi, [rdi]
  3125 00002427 488931                  	mov qword [rcx], rsi
  3126 0000242A 48FFCA                  	dec rdx
  3127 0000242D EBE7                    	jmp .L_tc_recycle_frame_loop_001c
  3128                                  .L_tc_recycle_frame_done_001c:
  3129 0000242F 5D                      	pop rbp ; restore the old rbp
  3130 00002430 4889CC                  	mov rsp, rcx
  3131 00002433 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
  3132 00002436 C9                      	leave
  3133 00002437 C21800                  	ret 8 * (2 + 1)
  3134                                  .L_lambda_simple_end_001c:	; new closure is in rax
  3135 0000243A 48890425[98020000]      	mov qword [free_var_83], rax
  3136 00002442 48B8-                   	mov rax, sob_void
  3136 00002444 [0000000000000000] 
  3137                                  
  3138 0000244C 4889C7                  	mov rdi, rax
  3139 0000244F E84ED90000              	call print_sexpr_if_not_void
  3140                                  
  3141 00002454 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  3142 00002459 E833D90000              	call malloc
  3143 0000245E 50                      	push rax
  3144 0000245F BF00000000              	mov rdi, 8 * 0	; new rib
  3145 00002464 E828D90000              	call malloc
  3146 00002469 50                      	push rax
  3147 0000246A BF08000000              	mov rdi, 8 * 1	; extended env
  3148 0000246F E81DD90000              	call malloc
  3149 00002474 488B7D10                	mov rdi, ENV
  3150 00002478 BE00000000              	mov rsi, 0
  3151 0000247D BA01000000              	mov rdx, 1
  3152                                  .L_lambda_simple_env_loop_001d:	; ext_env[i + 1] <-- env[i]
  3153 00002482 4883FE00                	cmp rsi, 0
  3154 00002486 7410                    	je .L_lambda_simple_env_end_001d
  3155 00002488 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  3156 0000248C 48890CD0                	mov qword [rax + 8 * rdx], rcx
  3157 00002490 48FFC6                  	inc rsi
  3158 00002493 48FFC2                  	inc rdx
  3159 00002496 EBEA                    	jmp .L_lambda_simple_env_loop_001d
  3160                                  .L_lambda_simple_env_end_001d:
  3161 00002498 5B                      	pop rbx
  3162 00002499 BE00000000              	mov rsi, 0
  3163                                  .L_lambda_simple_params_loop_001d:	; copy params
  3164 0000249E 4883FE00                	cmp rsi, 0
  3165 000024A2 740E                    	je .L_lambda_simple_params_end_001d
  3166 000024A4 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  3167 000024A9 488914F3                	mov qword [rbx + 8 * rsi], rdx
  3168 000024AD 48FFC6                  	inc rsi
  3169 000024B0 EBEC                    	jmp .L_lambda_simple_params_loop_001d
  3170                                  .L_lambda_simple_params_end_001d:
  3171 000024B2 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  3172 000024B5 4889C3                  	mov rbx, rax
  3173 000024B8 58                      	pop rax
  3174 000024B9 C60005                  	mov byte [rax], T_closure
  3175 000024BC 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  3176 000024C0 48C74009[CD240000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_001d
  3177 000024C8 E9E3000000              	jmp .L_lambda_simple_end_001d
  3178                                  .L_lambda_simple_code_001d:	; lambda-simple body
  3179 000024CD 48837C241001            	cmp qword [rsp + 8 * 2], 1
  3180 000024D3 740B                    	je .L_lambda_simple_arity_check_ok_001d
  3181 000024D5 FF742410                	push qword [rsp + 8 * 2]
  3182 000024D9 6A01                    	push 1
  3183 000024DB E96AD80000              	jmp L_error_incorrect_arity_simple
  3184                                  .L_lambda_simple_arity_check_ok_001d:
  3185 000024E0 C8000000                	enter 0, 0
  3186 000024E4 488B4520                	mov rax, qword [rbp + 8 * (4 + 0)]
  3187 000024E8 50                      	push rax
  3188 000024E9 6A01                    	push 1
  3189 000024EB 488B0425[00000000]      	mov rax, qword [free_var_0]
  3190                                  	assert_closure(rax)
    42 000024F3 803805              <1>  cmp byte [%1], %2
    43 000024F6 0F858EF00000        <1>  jne L_error_incorrect_type
  3191 000024FC FF7001                  	push SOB_CLOSURE_ENV(rax)
  3192 000024FF FF5009                  	call SOB_CLOSURE_CODE(rax)
  3193 00002502 483D[02000000]          	cmp rax, sob_boolean_false
  3194 00002508 0F859E000000            	jne .L_or_end_0001
  3195 0000250E 488B4520                	mov rax, qword [rbp + 8 * (4 + 0)]
  3196 00002512 50                      	push rax
  3197 00002513 6A01                    	push 1
  3198 00002515 488B0425[08000000]      	mov rax, qword [free_var_1]
  3199                                  	assert_closure(rax)
    42 0000251D 803805              <1>  cmp byte [%1], %2
    43 00002520 0F8564F00000        <1>  jne L_error_incorrect_type
  3200 00002526 FF7001                  	push SOB_CLOSURE_ENV(rax)
  3201 00002529 FF5009                  	call SOB_CLOSURE_CODE(rax)
  3202 0000252C 483D[02000000]          	cmp rax, sob_boolean_false
  3203 00002532 746E                              	je .L_if_else_0001
  3204 00002534 488B4520                          	mov rax, qword [rbp + 8 * (4 + 0)]
  3205 00002538 50                      	push rax
  3206 00002539 6A01                    	push 1
  3207 0000253B 488B0425[88000000]      	mov rax, qword [free_var_17]
  3208                                  	assert_closure(rax)
    42 00002543 803805              <1>  cmp byte [%1], %2
    43 00002546 0F853EF00000        <1>  jne L_error_incorrect_type
  3209 0000254C FF7001                  	push SOB_CLOSURE_ENV(rax)
  3210 0000254F FF5009                  	call SOB_CLOSURE_CODE(rax)
  3211 00002552 50                      	push rax
  3212 00002553 6A01                    	push 1
  3213 00002555 488B0425[A0020000]      	mov rax, qword [free_var_84]
  3214                                  	assert_closure(rax)
    42 0000255D 803805              <1>  cmp byte [%1], %2
    43 00002560 0F8524F00000        <1>  jne L_error_incorrect_type
  3215 00002566 FF7001                  	push SOB_CLOSURE_ENV(rax)
  3216 00002569 FF7508                  	push qword [rbp + 8 * 1] ; old ret addr
  3217 0000256C FF7500                  	push qword [rbp] ; same the old rbp
  3218 0000256F BA04000000              	mov rdx, 1 + 3
  3219 00002574 488B4D18                	mov rcx, COUNT
  3220 00002578 488D4CCD20              	lea rcx, [rbp + 8*4 + rcx * 8]
  3221 0000257D 4889EF                  	mov rdi, rbp
  3222                                  .L_tc_recycle_frame_loop_001d:
  3223 00002580 4883FA00                	cmp rdx, 0
  3224 00002584 7413                    	je .L_tc_recycle_frame_done_001d
  3225 00002586 4883E908                	sub rcx, 8
  3226 0000258A 4883EF08                	sub rdi, 8
  3227 0000258E 488B37                  	mov rsi, [rdi]
  3228 00002591 488931                  	mov qword [rcx], rsi
  3229 00002594 48FFCA                  	dec rdx
  3230 00002597 EBE7                    	jmp .L_tc_recycle_frame_loop_001d
  3231                                  .L_tc_recycle_frame_done_001d:
  3232 00002599 5D                      	pop rbp ; restore the old rbp
  3233 0000259A 4889CC                  	mov rsp, rcx
  3234 0000259D FF6009                  	jmp SOB_CLOSURE_CODE(rax)
  3235 000025A0 EB0A                    	jmp .L_if_end_0001
  3236                                            .L_if_else_0001:
  3237 000025A2 48B8-                             	mov rax, L_constants + 2
  3237 000025A4 [0200000000000000] 
  3238                                  .L_if_end_0001:
  3239                                  .L_or_end_0001:
  3240 000025AC C9                      	leave
  3241 000025AD C21800                  	ret 8 * (2 + 1)
  3242                                  .L_lambda_simple_end_001d:	; new closure is in rax
  3243 000025B0 48890425[A0020000]      	mov qword [free_var_84], rax
  3244 000025B8 48B8-                   	mov rax, sob_void
  3244 000025BA [0000000000000000] 
  3245                                  
  3246 000025C2 4889C7                  	mov rdi, rax
  3247 000025C5 E8D8D70000              	call print_sexpr_if_not_void
  3248                                  
  3249 000025CA BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  3250 000025CF E8BDD70000              	call malloc
  3251 000025D4 50                      	push rax
  3252 000025D5 BF00000000              	mov rdi, 8 * 0	; new rib
  3253 000025DA E8B2D70000              	call malloc
  3254 000025DF 50                      	push rax
  3255 000025E0 BF08000000              	mov rdi, 8 * 1	; extended env
  3256 000025E5 E8A7D70000              	call malloc
  3257 000025EA 488B7D10                	mov rdi, ENV
  3258 000025EE BE00000000              	mov rsi, 0
  3259 000025F3 BA01000000              	mov rdx, 1
  3260                                  .L_lambda_opt_env_loop_0001:	; ext_env[i + 1] <-- env[i]
  3261 000025F8 4883FE00                	cmp rsi, 0
  3262 000025FC 7410                    	je .L_lambda_opt_env_end_0001
  3263 000025FE 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  3264 00002602 48890CD0                	mov qword [rax + 8 * rdx], rcx
  3265 00002606 48FFC6                  	inc rsi
  3266 00002609 48FFC2                  	inc rdx
  3267 0000260C EBEA                    	jmp .L_lambda_opt_env_loop_0001
  3268                                  .L_lambda_opt_env_end_0001:
  3269 0000260E 5B                      	pop rbx
  3270 0000260F BE00000000              	mov rsi, 0
  3271                                  .L_lambda_opt_params_loop_0001:	; copy params
  3272 00002614 4883FE00                	cmp rsi, 0
  3273 00002618 740E                    	je .L_lambda_opt_params_end_0001
  3274 0000261A 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  3275 0000261F 488914F3                	mov qword [rbx + 8 * rsi], rdx
  3276 00002623 48FFC6                  	inc rsi
  3277 00002626 EBEC                    	jmp .L_lambda_opt_params_loop_0001
  3278                                  .L_lambda_opt_params_end_0001:
  3279 00002628 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  3280 0000262B 4889C3                  	mov rbx, rax
  3281 0000262E 58                      	pop rax
  3282 0000262F C60005                  	mov byte [rax], T_closure
  3283 00002632 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  3284 00002636 48C74009[43260000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_opt_code_0001
  3285 0000263E E9DE000000              	jmp .L_lambda_opt_end_0001
  3286                                  .L_lambda_opt_code_0001:	; lambda-opt body
  3287 00002643 48837C241000            	cmp qword [rsp + 8 * 2], 0
  3288 00002649 740D                    	je .L_lambda_opt_arity_check_exact_0001
  3289 0000264B 7F43                    	jg .L_lambda_opt_arity_check_more_0001
  3290 0000264D FF742410                	push qword [rsp + 8 * 2]
  3291 00002651 6A00                    	push 0
  3292 00002653 E906D70000              	jmp L_error_incorrect_arity_opt
  3293                                  .L_lambda_opt_arity_check_exact_0001:
  3294 00002658 48C744241001000000      	mov qword [rsp + 8 * 2], 1
  3295 00002661 BA03000000              	mov rdx, 3
  3296 00002666 FF3424                  	push qword [rsp]
  3297 00002669 BE01000000              	mov rsi, 1
  3298                                  .L_lambda_opt_stack_shrink_loop_0001:
  3299 0000266E 4839D6                  	cmp rsi, rdx
  3300 00002671 7411                    	je .L_lambda_opt_stack_shrink_loop_exit_0001
  3301 00002673 488D5CF408              	lea rbx, [rsp + 8 + rsi * 8]
  3302 00002678 488B0B                  	mov rcx, [rbx]
  3303 0000267B 48894BF8                	mov qword [rbx - 8], rcx
  3304 0000267F 48FFC6                  	inc rsi
  3305 00002682 EBEA                    	jmp .L_lambda_opt_stack_shrink_loop_0001
  3306                                  .L_lambda_opt_stack_shrink_loop_exit_0001:
  3307 00002684 48C703[01000000]        	mov qword [rbx], sob_nil
  3308 0000268B E985000000              	jmp .L_lambda_opt_stack_adjusted_0001
  3309                                  .L_lambda_opt_arity_check_more_0001:
  3310 00002690 488B542410              	mov rdx, qword [rsp + 8 * 2]
  3311 00002695 4883EA00                	sub rdx, 0
  3312 00002699 48C744241001000000      	mov qword [rsp + 8 * 2], 1
  3313 000026A2 BE00000000              	mov rsi, 0
  3314 000026A7 488D5CD410              	lea rbx, [rsp + 2 * 8 + 0 * 8 + rdx * 8]
  3315 000026AC 48B9-                   	mov rcx, sob_nil
  3315 000026AE [0100000000000000] 
  3316                                  .L_lambda_opt_stack_shrink_loop_0002:
  3317 000026B6 4839D6                  	cmp rsi, rdx
  3318 000026B9 7427                    je .L_lambda_opt_stack_shrink_loop_exit_0002
  3319 000026BB BF11000000              	mov rdi, 17 ; 1+8+8
  3320 000026C0 E8CCD60000              	call malloc
  3321 000026C5 48894809                	mov SOB_PAIR_CDR(rax), rcx
  3322 000026C9 48F7DE                  	neg rsi
  3323 000026CC 488B0CF3                	mov rcx, qword [rbx + rsi * 8]
  3324 000026D0 48F7DE                  	neg rsi
  3325 000026D3 48894801                	mov SOB_PAIR_CAR(rax), rcx
  3326 000026D7 C60021                  	mov byte [rax], T_pair
  3327 000026DA 4889C1                  	mov rcx, rax
  3328 000026DD 48FFC6                  	inc rsi
  3329 000026E0 EBD4                    	jmp .L_lambda_opt_stack_shrink_loop_0002
  3330                                  .L_lambda_opt_stack_shrink_loop_exit_0002:
  3331 000026E2 48890B                  	mov qword [rbx], rcx
  3332 000026E5 4883EB08                	sub rbx, 8
  3333 000026E9 4889E7                  	mov rdi, rsp
  3334 000026EC 4883C710                	add rdi, 16
  3335 000026F0 BE03000000              	mov rsi, 3
  3336                                  .L_lambda_opt_stack_shrink_loop_0003:
  3337 000026F5 4883FE00                	cmp rsi,0
  3338 000026F9 7413                    	je .L_lambda_opt_stack_shrink_loop_exit_0003
  3339 000026FB 488B0F                  	mov rcx, qword [rdi]
  3340 000026FE 48890B                  	mov [rbx], rcx
  3341 00002701 48FFCE                  	dec rsi
  3342 00002704 4883EB08                	sub rbx, 8
  3343 00002708 4883EF08                	sub rdi, 8
  3344 0000270C EBE7                    	jmp .L_lambda_opt_stack_shrink_loop_0003
  3345                                  .L_lambda_opt_stack_shrink_loop_exit_0003:
  3346 0000270E 4883C308                	add rbx, 8
  3347 00002712 4889DC                  	mov rsp, rbx
  3348                                  .L_lambda_opt_stack_adjusted_0001:
  3349 00002715 C8000000                	enter 0, 0
  3350 00002719 488B4520                	mov rax, qword [rbp + 8 * (4 + 0)]
  3351 0000271D C9                      	leave
  3352 0000271E C21800                  	ret 8 * (2 + 1)
  3353                                  .L_lambda_opt_end_0001:	; new closure is in rax
  3354 00002721 48890425[A8020000]      	mov qword [free_var_85], rax
  3355 00002729 48B8-                   	mov rax, sob_void
  3355 0000272B [0000000000000000] 
  3356                                  
  3357 00002733 4889C7                  	mov rdi, rax
  3358 00002736 E867D60000              	call print_sexpr_if_not_void
  3359                                  
  3360 0000273B BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  3361 00002740 E84CD60000              	call malloc
  3362 00002745 50                      	push rax
  3363 00002746 BF00000000              	mov rdi, 8 * 0	; new rib
  3364 0000274B E841D60000              	call malloc
  3365 00002750 50                      	push rax
  3366 00002751 BF08000000              	mov rdi, 8 * 1	; extended env
  3367 00002756 E836D60000              	call malloc
  3368 0000275B 488B7D10                	mov rdi, ENV
  3369 0000275F BE00000000              	mov rsi, 0
  3370 00002764 BA01000000              	mov rdx, 1
  3371                                  .L_lambda_simple_env_loop_001e:	; ext_env[i + 1] <-- env[i]
  3372 00002769 4883FE00                	cmp rsi, 0
  3373 0000276D 7410                    	je .L_lambda_simple_env_end_001e
  3374 0000276F 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  3375 00002773 48890CD0                	mov qword [rax + 8 * rdx], rcx
  3376 00002777 48FFC6                  	inc rsi
  3377 0000277A 48FFC2                  	inc rdx
  3378 0000277D EBEA                    	jmp .L_lambda_simple_env_loop_001e
  3379                                  .L_lambda_simple_env_end_001e:
  3380 0000277F 5B                      	pop rbx
  3381 00002780 BE00000000              	mov rsi, 0
  3382                                  .L_lambda_simple_params_loop_001e:	; copy params
  3383 00002785 4883FE00                	cmp rsi, 0
  3384 00002789 740E                    	je .L_lambda_simple_params_end_001e
  3385 0000278B 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  3386 00002790 488914F3                	mov qword [rbx + 8 * rsi], rdx
  3387 00002794 48FFC6                  	inc rsi
  3388 00002797 EBEC                    	jmp .L_lambda_simple_params_loop_001e
  3389                                  .L_lambda_simple_params_end_001e:
  3390 00002799 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  3391 0000279C 4889C3                  	mov rbx, rax
  3392 0000279F 58                      	pop rax
  3393 000027A0 C60005                  	mov byte [rax], T_closure
  3394 000027A3 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  3395 000027A7 48C74009[B1270000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_001e
  3396 000027AF EB3D                    	jmp .L_lambda_simple_end_001e
  3397                                  .L_lambda_simple_code_001e:	; lambda-simple body
  3398 000027B1 48837C241001            	cmp qword [rsp + 8 * 2], 1
  3399 000027B7 740B                    	je .L_lambda_simple_arity_check_ok_001e
  3400 000027B9 FF742410                	push qword [rsp + 8 * 2]
  3401 000027BD 6A01                    	push 1
  3402 000027BF E986D50000              	jmp L_error_incorrect_arity_simple
  3403                                  .L_lambda_simple_arity_check_ok_001e:
  3404 000027C4 C8000000                	enter 0, 0
  3405 000027C8 488B4520                	mov rax, qword [rbp + 8 * (4 + 0)]
  3406 000027CC 483D[02000000]          	cmp rax, sob_boolean_false
  3407 000027D2 740C                              	je .L_if_else_0002
  3408 000027D4 48B8-                             	mov rax, L_constants + 2
  3408 000027D6 [0200000000000000] 
  3409 000027DE EB0A                    	jmp .L_if_end_0002
  3410                                            .L_if_else_0002:
  3411 000027E0 48B8-                             	mov rax, L_constants + 3
  3411 000027E2 [0300000000000000] 
  3412                                  .L_if_end_0002:
  3413 000027EA C9                      	leave
  3414 000027EB C21800                  	ret 8 * (2 + 1)
  3415                                  .L_lambda_simple_end_001e:	; new closure is in rax
  3416 000027EE 48890425[B0020000]      	mov qword [free_var_86], rax
  3417 000027F6 48B8-                   	mov rax, sob_void
  3417 000027F8 [0000000000000000] 
  3418                                  
  3419 00002800 4889C7                  	mov rdi, rax
  3420 00002803 E89AD50000              	call print_sexpr_if_not_void
  3421                                  
  3422 00002808 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  3423 0000280D E87FD50000              	call malloc
  3424 00002812 50                      	push rax
  3425 00002813 BF00000000              	mov rdi, 8 * 0	; new rib
  3426 00002818 E874D50000              	call malloc
  3427 0000281D 50                      	push rax
  3428 0000281E BF08000000              	mov rdi, 8 * 1	; extended env
  3429 00002823 E869D50000              	call malloc
  3430 00002828 488B7D10                	mov rdi, ENV
  3431 0000282C BE00000000              	mov rsi, 0
  3432 00002831 BA01000000              	mov rdx, 1
  3433                                  .L_lambda_simple_env_loop_001f:	; ext_env[i + 1] <-- env[i]
  3434 00002836 4883FE00                	cmp rsi, 0
  3435 0000283A 7410                    	je .L_lambda_simple_env_end_001f
  3436 0000283C 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  3437 00002840 48890CD0                	mov qword [rax + 8 * rdx], rcx
  3438 00002844 48FFC6                  	inc rsi
  3439 00002847 48FFC2                  	inc rdx
  3440 0000284A EBEA                    	jmp .L_lambda_simple_env_loop_001f
  3441                                  .L_lambda_simple_env_end_001f:
  3442 0000284C 5B                      	pop rbx
  3443 0000284D BE00000000              	mov rsi, 0
  3444                                  .L_lambda_simple_params_loop_001f:	; copy params
  3445 00002852 4883FE00                	cmp rsi, 0
  3446 00002856 740E                    	je .L_lambda_simple_params_end_001f
  3447 00002858 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  3448 0000285D 488914F3                	mov qword [rbx + 8 * rsi], rdx
  3449 00002861 48FFC6                  	inc rsi
  3450 00002864 EBEC                    	jmp .L_lambda_simple_params_loop_001f
  3451                                  .L_lambda_simple_params_end_001f:
  3452 00002866 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  3453 00002869 4889C3                  	mov rbx, rax
  3454 0000286C 58                      	pop rax
  3455 0000286D C60005                  	mov byte [rax], T_closure
  3456 00002870 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  3457 00002874 48C74009[81280000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_001f
  3458 0000287C E9B9000000              	jmp .L_lambda_simple_end_001f
  3459                                  .L_lambda_simple_code_001f:	; lambda-simple body
  3460 00002881 48837C241001            	cmp qword [rsp + 8 * 2], 1
  3461 00002887 740B                    	je .L_lambda_simple_arity_check_ok_001f
  3462 00002889 FF742410                	push qword [rsp + 8 * 2]
  3463 0000288D 6A01                    	push 1
  3464 0000288F E9B6D40000              	jmp L_error_incorrect_arity_simple
  3465                                  .L_lambda_simple_arity_check_ok_001f:
  3466 00002894 C8000000                	enter 0, 0
  3467 00002898 488B4520                	mov rax, qword [rbp + 8 * (4 + 0)]
  3468 0000289C 50                      	push rax
  3469 0000289D 6A01                    	push 1
  3470 0000289F 488B0425[48000000]      	mov rax, qword [free_var_9]
  3471                                  	assert_closure(rax)
    42 000028A7 803805              <1>  cmp byte [%1], %2
    43 000028AA 0F85DAEC0000        <1>  jne L_error_incorrect_type
  3472 000028B0 FF7001                  	push SOB_CLOSURE_ENV(rax)
  3473 000028B3 FF5009                  	call SOB_CLOSURE_CODE(rax)
  3474 000028B6 483D[02000000]          	cmp rax, sob_boolean_false
  3475 000028BC 746E                              	je .L_if_else_0003
  3476 000028BE 488B4520                          	mov rax, qword [rbp + 8 * (4 + 0)]
  3477 000028C2 50                      	push rax
  3478 000028C3 6A01                    	push 1
  3479 000028C5 488B0425[E0000000]      	mov rax, qword [free_var_28]
  3480                                  	assert_closure(rax)
    42 000028CD 803805              <1>  cmp byte [%1], %2
    43 000028D0 0F85B4EC0000        <1>  jne L_error_incorrect_type
  3481 000028D6 FF7001                  	push SOB_CLOSURE_ENV(rax)
  3482 000028D9 FF5009                  	call SOB_CLOSURE_CODE(rax)
  3483 000028DC 50                      	push rax
  3484 000028DD 6A01                    	push 1
  3485 000028DF 488B0425[B0020000]      	mov rax, qword [free_var_86]
  3486                                  	assert_closure(rax)
    42 000028E7 803805              <1>  cmp byte [%1], %2
    43 000028EA 0F859AEC0000        <1>  jne L_error_incorrect_type
  3487 000028F0 FF7001                  	push SOB_CLOSURE_ENV(rax)
  3488 000028F3 FF7508                  	push qword [rbp + 8 * 1] ; old ret addr
  3489 000028F6 FF7500                  	push qword [rbp] ; same the old rbp
  3490 000028F9 BA04000000              	mov rdx, 1 + 3
  3491 000028FE 488B4D18                	mov rcx, COUNT
  3492 00002902 488D4CCD20              	lea rcx, [rbp + 8*4 + rcx * 8]
  3493 00002907 4889EF                  	mov rdi, rbp
  3494                                  .L_tc_recycle_frame_loop_001e:
  3495 0000290A 4883FA00                	cmp rdx, 0
  3496 0000290E 7413                    	je .L_tc_recycle_frame_done_001e
  3497 00002910 4883E908                	sub rcx, 8
  3498 00002914 4883EF08                	sub rdi, 8
  3499 00002918 488B37                  	mov rsi, [rdi]
  3500 0000291B 488931                  	mov qword [rcx], rsi
  3501 0000291E 48FFCA                  	dec rdx
  3502 00002921 EBE7                    	jmp .L_tc_recycle_frame_loop_001e
  3503                                  .L_tc_recycle_frame_done_001e:
  3504 00002923 5D                      	pop rbp ; restore the old rbp
  3505 00002924 4889CC                  	mov rsp, rcx
  3506 00002927 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
  3507 0000292A EB0A                    	jmp .L_if_end_0003
  3508                                            .L_if_else_0003:
  3509 0000292C 48B8-                             	mov rax, L_constants + 2
  3509 0000292E [0200000000000000] 
  3510                                  .L_if_end_0003:
  3511 00002936 C9                      	leave
  3512 00002937 C21800                  	ret 8 * (2 + 1)
  3513                                  .L_lambda_simple_end_001f:	; new closure is in rax
  3514 0000293A 48890425[B8020000]      	mov qword [free_var_87], rax
  3515 00002942 48B8-                   	mov rax, sob_void
  3515 00002944 [0000000000000000] 
  3516                                  
  3517 0000294C 4889C7                  	mov rdi, rax
  3518 0000294F E84ED40000              	call print_sexpr_if_not_void
  3519                                  
  3520 00002954 48B8-                   	mov rax, L_constants + 23
  3520 00002956 [1700000000000000] 
  3521 0000295E 50                      	push rax
  3522 0000295F 6A01                    	push 1
  3523 00002961 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  3524 00002966 E826D40000              	call malloc
  3525 0000296B 50                      	push rax
  3526 0000296C BF00000000              	mov rdi, 8 * 0	; new rib
  3527 00002971 E81BD40000              	call malloc
  3528 00002976 50                      	push rax
  3529 00002977 BF08000000              	mov rdi, 8 * 1	; extended env
  3530 0000297C E810D40000              	call malloc
  3531 00002981 488B7D10                	mov rdi, ENV
  3532 00002985 BE00000000              	mov rsi, 0
  3533 0000298A BA01000000              	mov rdx, 1
  3534                                  .L_lambda_simple_env_loop_0020:	; ext_env[i + 1] <-- env[i]
  3535 0000298F 4883FE00                	cmp rsi, 0
  3536 00002993 7410                    	je .L_lambda_simple_env_end_0020
  3537 00002995 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  3538 00002999 48890CD0                	mov qword [rax + 8 * rdx], rcx
  3539 0000299D 48FFC6                  	inc rsi
  3540 000029A0 48FFC2                  	inc rdx
  3541 000029A3 EBEA                    	jmp .L_lambda_simple_env_loop_0020
  3542                                  .L_lambda_simple_env_end_0020:
  3543 000029A5 5B                      	pop rbx
  3544 000029A6 BE00000000              	mov rsi, 0
  3545                                  .L_lambda_simple_params_loop_0020:	; copy params
  3546 000029AB 4883FE00                	cmp rsi, 0
  3547 000029AF 740E                    	je .L_lambda_simple_params_end_0020
  3548 000029B1 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  3549 000029B6 488914F3                	mov qword [rbx + 8 * rsi], rdx
  3550 000029BA 48FFC6                  	inc rsi
  3551 000029BD EBEC                    	jmp .L_lambda_simple_params_loop_0020
  3552                                  .L_lambda_simple_params_end_0020:
  3553 000029BF 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  3554 000029C2 4889C3                  	mov rbx, rax
  3555 000029C5 58                      	pop rax
  3556 000029C6 C60005                  	mov byte [rax], T_closure
  3557 000029C9 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  3558 000029CD 48C74009[DA290000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0020
  3559 000029D5 E96F030000              	jmp .L_lambda_simple_end_0020
  3560                                  .L_lambda_simple_code_0020:	; lambda-simple body
  3561 000029DA 48837C241001            	cmp qword [rsp + 8 * 2], 1
  3562 000029E0 740B                    	je .L_lambda_simple_arity_check_ok_0020
  3563 000029E2 FF742410                	push qword [rsp + 8 * 2]
  3564 000029E6 6A01                    	push 1
  3565 000029E8 E95DD30000              	jmp L_error_incorrect_arity_simple
  3566                                  .L_lambda_simple_arity_check_ok_0020:
  3567 000029ED C8000000                	enter 0, 0
  3568 000029F1 488B4520                	mov rax, qword [rbp + 8 * (4 + 0)]
  3569 000029F5 4889C2                  	mov rdx, rax
  3570 000029F8 BF08000000              	mov rdi, 8
  3571 000029FD E88FD30000              	call malloc
  3572 00002A02 488910                  	mov qword[rax], rdx
  3573 00002A05 48894520                	mov qword [rbp + 8 * (4 + 0)], rax
  3574 00002A09 48B8-                   	mov rax, sob_void
  3574 00002A0B [0000000000000000] 
  3575                                  
  3576 00002A13 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  3577 00002A18 E874D30000              	call malloc
  3578 00002A1D 50                      	push rax
  3579 00002A1E BF08000000              	mov rdi, 8 * 1	; new rib
  3580 00002A23 E869D30000              	call malloc
  3581 00002A28 50                      	push rax
  3582 00002A29 BF10000000              	mov rdi, 8 * 2	; extended env
  3583 00002A2E E85ED30000              	call malloc
  3584 00002A33 488B7D10                	mov rdi, ENV
  3585 00002A37 BE00000000              	mov rsi, 0
  3586 00002A3C BA01000000              	mov rdx, 1
  3587                                  .L_lambda_simple_env_loop_0021:	; ext_env[i + 1] <-- env[i]
  3588 00002A41 4883FE01                	cmp rsi, 1
  3589 00002A45 7410                    	je .L_lambda_simple_env_end_0021
  3590 00002A47 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  3591 00002A4B 48890CD0                	mov qword [rax + 8 * rdx], rcx
  3592 00002A4F 48FFC6                  	inc rsi
  3593 00002A52 48FFC2                  	inc rdx
  3594 00002A55 EBEA                    	jmp .L_lambda_simple_env_loop_0021
  3595                                  .L_lambda_simple_env_end_0021:
  3596 00002A57 5B                      	pop rbx
  3597 00002A58 BE00000000              	mov rsi, 0
  3598                                  .L_lambda_simple_params_loop_0021:	; copy params
  3599 00002A5D 4883FE01                	cmp rsi, 1
  3600 00002A61 740E                    	je .L_lambda_simple_params_end_0021
  3601 00002A63 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  3602 00002A68 488914F3                	mov qword [rbx + 8 * rsi], rdx
  3603 00002A6C 48FFC6                  	inc rsi
  3604 00002A6F EBEC                    	jmp .L_lambda_simple_params_loop_0021
  3605                                  .L_lambda_simple_params_end_0021:
  3606 00002A71 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  3607 00002A74 4889C3                  	mov rbx, rax
  3608 00002A77 58                      	pop rax
  3609 00002A78 C60005                  	mov byte [rax], T_closure
  3610 00002A7B 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  3611 00002A7F 48C74009[8C2A0000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0021
  3612 00002A87 E9F9000000              	jmp .L_lambda_simple_end_0021
  3613                                  .L_lambda_simple_code_0021:	; lambda-simple body
  3614 00002A8C 48837C241002            	cmp qword [rsp + 8 * 2], 2
  3615 00002A92 740B                    	je .L_lambda_simple_arity_check_ok_0021
  3616 00002A94 FF742410                	push qword [rsp + 8 * 2]
  3617 00002A98 6A02                    	push 2
  3618 00002A9A E9ABD20000              	jmp L_error_incorrect_arity_simple
  3619                                  .L_lambda_simple_arity_check_ok_0021:
  3620 00002A9F C8000000                	enter 0, 0
  3621 00002AA3 488B4528                	mov rax, qword [rbp + 8 * (4 + 1)]
  3622 00002AA7 50                      	push rax
  3623 00002AA8 6A01                    	push 1
  3624 00002AAA 488B0425[00000000]      	mov rax, qword [free_var_0]
  3625                                  	assert_closure(rax)
    42 00002AB2 803805              <1>  cmp byte [%1], %2
    43 00002AB5 0F85CFEA0000        <1>  jne L_error_incorrect_type
  3626 00002ABB FF7001                  	push SOB_CLOSURE_ENV(rax)
  3627 00002ABE FF5009                  	call SOB_CLOSURE_CODE(rax)
  3628 00002AC1 483D[02000000]          	cmp rax, sob_boolean_false
  3629 00002AC7 7409                              	je .L_if_else_0004
  3630 00002AC9 488B4520                          	mov rax, qword [rbp + 8 * (4 + 0)]
  3631 00002ACD E9AF000000              	jmp .L_if_end_0004
  3632                                            .L_if_else_0004:
  3633 00002AD2 488B4528                          	mov rax, qword [rbp + 8 * (4 + 1)]
  3634 00002AD6 50                      	push rax
  3635 00002AD7 6A01                    	push 1
  3636 00002AD9 488B0425[88000000]      	mov rax, qword [free_var_17]
  3637                                  	assert_closure(rax)
    42 00002AE1 803805              <1>  cmp byte [%1], %2
    43 00002AE4 0F85A0EA0000        <1>  jne L_error_incorrect_type
  3638 00002AEA FF7001                  	push SOB_CLOSURE_ENV(rax)
  3639 00002AED FF5009                  	call SOB_CLOSURE_CODE(rax)
  3640 00002AF0 50                      	push rax
  3641 00002AF1 488B4528                	mov rax, qword [rbp + 8 * (4 + 1)]
  3642 00002AF5 50                      	push rax
  3643 00002AF6 6A01                    	push 1
  3644 00002AF8 488B0425[80000000]      	mov rax, qword [free_var_16]
  3645                                  	assert_closure(rax)
    42 00002B00 803805              <1>  cmp byte [%1], %2
    43 00002B03 0F8581EA0000        <1>  jne L_error_incorrect_type
  3646 00002B09 FF7001                  	push SOB_CLOSURE_ENV(rax)
  3647 00002B0C FF5009                  	call SOB_CLOSURE_CODE(rax)
  3648 00002B0F 50                      	push rax
  3649 00002B10 6A02                    	push 2
  3650 00002B12 488B4510                	mov rax, qword [rbp + 8 * 2]
  3651 00002B16 488B00                  	mov rax, qword [rax + 8 * 0]
  3652 00002B19 488B00                  	mov rax, qword [rax + 8 * 0]
  3653 00002B1C 488B00                  	mov rax, qword [rax]
  3654                                  	assert_closure(rax)
    42 00002B1F 803805              <1>  cmp byte [%1], %2
    43 00002B22 0F8562EA0000        <1>  jne L_error_incorrect_type
  3655 00002B28 FF7001                  	push SOB_CLOSURE_ENV(rax)
  3656 00002B2B FF5009                  	call SOB_CLOSURE_CODE(rax)
  3657 00002B2E 50                      	push rax
  3658 00002B2F 488B4520                	mov rax, qword [rbp + 8 * (4 + 0)]
  3659 00002B33 50                      	push rax
  3660 00002B34 6A02                    	push 2
  3661 00002B36 488B0425[68000000]      	mov rax, qword [free_var_13]
  3662                                  	assert_closure(rax)
    42 00002B3E 803805              <1>  cmp byte [%1], %2
    43 00002B41 0F8543EA0000        <1>  jne L_error_incorrect_type
  3663 00002B47 FF7001                  	push SOB_CLOSURE_ENV(rax)
  3664 00002B4A FF7508                  	push qword [rbp + 8 * 1] ; old ret addr
  3665 00002B4D FF7500                  	push qword [rbp] ; same the old rbp
  3666 00002B50 BA05000000              	mov rdx, 2 + 3
  3667 00002B55 488B4D18                	mov rcx, COUNT
  3668 00002B59 488D4CCD20              	lea rcx, [rbp + 8*4 + rcx * 8]
  3669 00002B5E 4889EF                  	mov rdi, rbp
  3670                                  .L_tc_recycle_frame_loop_001f:
  3671 00002B61 4883FA00                	cmp rdx, 0
  3672 00002B65 7413                    	je .L_tc_recycle_frame_done_001f
  3673 00002B67 4883E908                	sub rcx, 8
  3674 00002B6B 4883EF08                	sub rdi, 8
  3675 00002B6F 488B37                  	mov rsi, [rdi]
  3676 00002B72 488931                  	mov qword [rcx], rsi
  3677 00002B75 48FFCA                  	dec rdx
  3678 00002B78 EBE7                    	jmp .L_tc_recycle_frame_loop_001f
  3679                                  .L_tc_recycle_frame_done_001f:
  3680 00002B7A 5D                      	pop rbp ; restore the old rbp
  3681 00002B7B 4889CC                  	mov rsp, rcx
  3682 00002B7E FF6009                  	jmp SOB_CLOSURE_CODE(rax)
  3683                                  .L_if_end_0004:
  3684 00002B81 C9                      	leave
  3685 00002B82 C22000                  	ret 8 * (2 + 2)
  3686                                  .L_lambda_simple_end_0021:	; new closure is in rax
  3687 00002B85 50                      	push rax
  3688 00002B86 488B4520                	mov rax, qword [rbp + 8 * (4 + 0)]
  3689 00002B8A 8F00                    	pop qword [rax]
  3690 00002B8C 48B8-                   	mov rax, sob_void
  3690 00002B8E [0000000000000000] 
  3691                                  
  3692 00002B96 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  3693 00002B9B E8F1D10000              	call malloc
  3694 00002BA0 50                      	push rax
  3695 00002BA1 BF08000000              	mov rdi, 8 * 1	; new rib
  3696 00002BA6 E8E6D10000              	call malloc
  3697 00002BAB 50                      	push rax
  3698 00002BAC BF10000000              	mov rdi, 8 * 2	; extended env
  3699 00002BB1 E8DBD10000              	call malloc
  3700 00002BB6 488B7D10                	mov rdi, ENV
  3701 00002BBA BE00000000              	mov rsi, 0
  3702 00002BBF BA01000000              	mov rdx, 1
  3703                                  .L_lambda_opt_env_loop_0002:	; ext_env[i + 1] <-- env[i]
  3704 00002BC4 4883FE01                	cmp rsi, 1
  3705 00002BC8 7410                    	je .L_lambda_opt_env_end_0002
  3706 00002BCA 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  3707 00002BCE 48890CD0                	mov qword [rax + 8 * rdx], rcx
  3708 00002BD2 48FFC6                  	inc rsi
  3709 00002BD5 48FFC2                  	inc rdx
  3710 00002BD8 EBEA                    	jmp .L_lambda_opt_env_loop_0002
  3711                                  .L_lambda_opt_env_end_0002:
  3712 00002BDA 5B                      	pop rbx
  3713 00002BDB BE00000000              	mov rsi, 0
  3714                                  .L_lambda_opt_params_loop_0002:	; copy params
  3715 00002BE0 4883FE01                	cmp rsi, 1
  3716 00002BE4 740E                    	je .L_lambda_opt_params_end_0002
  3717 00002BE6 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  3718 00002BEB 488914F3                	mov qword [rbx + 8 * rsi], rdx
  3719 00002BEF 48FFC6                  	inc rsi
  3720 00002BF2 EBEC                    	jmp .L_lambda_opt_params_loop_0002
  3721                                  .L_lambda_opt_params_end_0002:
  3722 00002BF4 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  3723 00002BF7 4889C3                  	mov rbx, rax
  3724 00002BFA 58                      	pop rax
  3725 00002BFB C60005                  	mov byte [rax], T_closure
  3726 00002BFE 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  3727 00002C02 48C74009[0F2C0000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_opt_code_0002
  3728 00002C0A E936010000              	jmp .L_lambda_opt_end_0002
  3729                                  .L_lambda_opt_code_0002:	; lambda-opt body
  3730 00002C0F 48837C241001            	cmp qword [rsp + 8 * 2], 1
  3731 00002C15 740D                    	je .L_lambda_opt_arity_check_exact_0002
  3732 00002C17 7F43                    	jg .L_lambda_opt_arity_check_more_0002
  3733 00002C19 FF742410                	push qword [rsp + 8 * 2]
  3734 00002C1D 6A01                    	push 1
  3735 00002C1F E93AD10000              	jmp L_error_incorrect_arity_opt
  3736                                  .L_lambda_opt_arity_check_exact_0002:
  3737 00002C24 48C744241002000000      	mov qword [rsp + 8 * 2], 2
  3738 00002C2D BA04000000              	mov rdx, 4
  3739 00002C32 FF3424                  	push qword [rsp]
  3740 00002C35 BE01000000              	mov rsi, 1
  3741                                  .L_lambda_opt_stack_shrink_loop_0004:
  3742 00002C3A 4839D6                  	cmp rsi, rdx
  3743 00002C3D 7411                    	je .L_lambda_opt_stack_shrink_loop_exit_0004
  3744 00002C3F 488D5CF408              	lea rbx, [rsp + 8 + rsi * 8]
  3745 00002C44 488B0B                  	mov rcx, [rbx]
  3746 00002C47 48894BF8                	mov qword [rbx - 8], rcx
  3747 00002C4B 48FFC6                  	inc rsi
  3748 00002C4E EBEA                    	jmp .L_lambda_opt_stack_shrink_loop_0004
  3749                                  .L_lambda_opt_stack_shrink_loop_exit_0004:
  3750 00002C50 48C703[01000000]        	mov qword [rbx], sob_nil
  3751 00002C57 E985000000              	jmp .L_lambda_opt_stack_adjusted_0002
  3752                                  .L_lambda_opt_arity_check_more_0002:
  3753 00002C5C 488B542410              	mov rdx, qword [rsp + 8 * 2]
  3754 00002C61 4883EA01                	sub rdx, 1
  3755 00002C65 48C744241002000000      	mov qword [rsp + 8 * 2], 2
  3756 00002C6E BE00000000              	mov rsi, 0
  3757 00002C73 488D5CD418              	lea rbx, [rsp + 2 * 8 + 1 * 8 + rdx * 8]
  3758 00002C78 48B9-                   	mov rcx, sob_nil
  3758 00002C7A [0100000000000000] 
  3759                                  .L_lambda_opt_stack_shrink_loop_0005:
  3760 00002C82 4839D6                  	cmp rsi, rdx
  3761 00002C85 7427                    je .L_lambda_opt_stack_shrink_loop_exit_0005
  3762 00002C87 BF11000000              	mov rdi, 17 ; 1+8+8
  3763 00002C8C E800D10000              	call malloc
  3764 00002C91 48894809                	mov SOB_PAIR_CDR(rax), rcx
  3765 00002C95 48F7DE                  	neg rsi
  3766 00002C98 488B0CF3                	mov rcx, qword [rbx + rsi * 8]
  3767 00002C9C 48F7DE                  	neg rsi
  3768 00002C9F 48894801                	mov SOB_PAIR_CAR(rax), rcx
  3769 00002CA3 C60021                  	mov byte [rax], T_pair
  3770 00002CA6 4889C1                  	mov rcx, rax
  3771 00002CA9 48FFC6                  	inc rsi
  3772 00002CAC EBD4                    	jmp .L_lambda_opt_stack_shrink_loop_0005
  3773                                  .L_lambda_opt_stack_shrink_loop_exit_0005:
  3774 00002CAE 48890B                  	mov qword [rbx], rcx
  3775 00002CB1 4883EB08                	sub rbx, 8
  3776 00002CB5 4889E7                  	mov rdi, rsp
  3777 00002CB8 4883C718                	add rdi, 24
  3778 00002CBC BE04000000              	mov rsi, 4
  3779                                  .L_lambda_opt_stack_shrink_loop_0006:
  3780 00002CC1 4883FE00                	cmp rsi,0
  3781 00002CC5 7413                    	je .L_lambda_opt_stack_shrink_loop_exit_0006
  3782 00002CC7 488B0F                  	mov rcx, qword [rdi]
  3783 00002CCA 48890B                  	mov [rbx], rcx
  3784 00002CCD 48FFCE                  	dec rsi
  3785 00002CD0 4883EB08                	sub rbx, 8
  3786 00002CD4 4883EF08                	sub rdi, 8
  3787 00002CD8 EBE7                    	jmp .L_lambda_opt_stack_shrink_loop_0006
  3788                                  .L_lambda_opt_stack_shrink_loop_exit_0006:
  3789 00002CDA 4883C308                	add rbx, 8
  3790 00002CDE 4889DC                  	mov rsp, rbx
  3791                                  .L_lambda_opt_stack_adjusted_0002:
  3792 00002CE1 C8000000                	enter 0, 0
  3793 00002CE5 488B4528                	mov rax, qword [rbp + 8 * (4 + 1)]
  3794 00002CE9 50                      	push rax
  3795 00002CEA 488B4520                	mov rax, qword [rbp + 8 * (4 + 0)]
  3796 00002CEE 50                      	push rax
  3797 00002CEF 6A02                    	push 2
  3798 00002CF1 488B4510                	mov rax, qword [rbp + 8 * 2]
  3799 00002CF5 488B00                  	mov rax, qword [rax + 8 * 0]
  3800 00002CF8 488B00                  	mov rax, qword [rax + 8 * 0]
  3801 00002CFB 488B00                  	mov rax, qword [rax]
  3802                                  	assert_closure(rax)
    42 00002CFE 803805              <1>  cmp byte [%1], %2
    43 00002D01 0F8583E80000        <1>  jne L_error_incorrect_type
  3803 00002D07 FF7001                  	push SOB_CLOSURE_ENV(rax)
  3804 00002D0A FF7508                  	push qword [rbp + 8 * 1] ; old ret addr
  3805 00002D0D FF7500                  	push qword [rbp] ; same the old rbp
  3806 00002D10 BA05000000              	mov rdx, 2 + 3
  3807 00002D15 488B4D18                	mov rcx, COUNT
  3808 00002D19 488D4CCD20              	lea rcx, [rbp + 8*4 + rcx * 8]
  3809 00002D1E 4889EF                  	mov rdi, rbp
  3810                                  .L_tc_recycle_frame_loop_0020:
  3811 00002D21 4883FA00                	cmp rdx, 0
  3812 00002D25 7413                    	je .L_tc_recycle_frame_done_0020
  3813 00002D27 4883E908                	sub rcx, 8
  3814 00002D2B 4883EF08                	sub rdi, 8
  3815 00002D2F 488B37                  	mov rsi, [rdi]
  3816 00002D32 488931                  	mov qword [rcx], rsi
  3817 00002D35 48FFCA                  	dec rdx
  3818 00002D38 EBE7                    	jmp .L_tc_recycle_frame_loop_0020
  3819                                  .L_tc_recycle_frame_done_0020:
  3820 00002D3A 5D                      	pop rbp ; restore the old rbp
  3821 00002D3B 4889CC                  	mov rsp, rcx
  3822 00002D3E FF6009                  	jmp SOB_CLOSURE_CODE(rax)
  3823 00002D41 C9                      	leave
  3824 00002D42 C22000                  	ret 8 * (2 + 2)
  3825                                  .L_lambda_opt_end_0002:	; new closure is in rax
  3826 00002D45 C9                      	leave
  3827 00002D46 C21800                  	ret 8 * (2 + 1)
  3828                                  .L_lambda_simple_end_0020:	; new closure is in rax
  3829                                  	assert_closure(rax)
    42 00002D49 803805              <1>  cmp byte [%1], %2
    43 00002D4C 0F8538E80000        <1>  jne L_error_incorrect_type
  3830 00002D52 FF7001                  	push SOB_CLOSURE_ENV(rax)
  3831 00002D55 FF5009                  	call SOB_CLOSURE_CODE(rax)
  3832 00002D58 48890425[C0020000]      	mov qword [free_var_88], rax
  3833 00002D60 48B8-                   	mov rax, sob_void
  3833 00002D62 [0000000000000000] 
  3834                                  
  3835 00002D6A 4889C7                  	mov rdi, rax
  3836 00002D6D E830D00000              	call print_sexpr_if_not_void
  3837                                  
  3838 00002D72 48B8-                   	mov rax, L_constants + 23
  3838 00002D74 [1700000000000000] 
  3839 00002D7C 50                      	push rax
  3840 00002D7D 6A01                    	push 1
  3841 00002D7F BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  3842 00002D84 E808D00000              	call malloc
  3843 00002D89 50                      	push rax
  3844 00002D8A BF00000000              	mov rdi, 8 * 0	; new rib
  3845 00002D8F E8FDCF0000              	call malloc
  3846 00002D94 50                      	push rax
  3847 00002D95 BF08000000              	mov rdi, 8 * 1	; extended env
  3848 00002D9A E8F2CF0000              	call malloc
  3849 00002D9F 488B7D10                	mov rdi, ENV
  3850 00002DA3 BE00000000              	mov rsi, 0
  3851 00002DA8 BA01000000              	mov rdx, 1
  3852                                  .L_lambda_simple_env_loop_0022:	; ext_env[i + 1] <-- env[i]
  3853 00002DAD 4883FE00                	cmp rsi, 0
  3854 00002DB1 7410                    	je .L_lambda_simple_env_end_0022
  3855 00002DB3 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  3856 00002DB7 48890CD0                	mov qword [rax + 8 * rdx], rcx
  3857 00002DBB 48FFC6                  	inc rsi
  3858 00002DBE 48FFC2                  	inc rdx
  3859 00002DC1 EBEA                    	jmp .L_lambda_simple_env_loop_0022
  3860                                  .L_lambda_simple_env_end_0022:
  3861 00002DC3 5B                      	pop rbx
  3862 00002DC4 BE00000000              	mov rsi, 0
  3863                                  .L_lambda_simple_params_loop_0022:	; copy params
  3864 00002DC9 4883FE00                	cmp rsi, 0
  3865 00002DCD 740E                    	je .L_lambda_simple_params_end_0022
  3866 00002DCF 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  3867 00002DD4 488914F3                	mov qword [rbx + 8 * rsi], rdx
  3868 00002DD8 48FFC6                  	inc rsi
  3869 00002DDB EBEC                    	jmp .L_lambda_simple_params_loop_0022
  3870                                  .L_lambda_simple_params_end_0022:
  3871 00002DDD 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  3872 00002DE0 4889C3                  	mov rbx, rax
  3873 00002DE3 58                      	pop rax
  3874 00002DE4 C60005                  	mov byte [rax], T_closure
  3875 00002DE7 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  3876 00002DEB 48C74009[F82D0000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0022
  3877 00002DF3 E9C3030000              	jmp .L_lambda_simple_end_0022
  3878                                  .L_lambda_simple_code_0022:	; lambda-simple body
  3879 00002DF8 48837C241001            	cmp qword [rsp + 8 * 2], 1
  3880 00002DFE 740B                    	je .L_lambda_simple_arity_check_ok_0022
  3881 00002E00 FF742410                	push qword [rsp + 8 * 2]
  3882 00002E04 6A01                    	push 1
  3883 00002E06 E93FCF0000              	jmp L_error_incorrect_arity_simple
  3884                                  .L_lambda_simple_arity_check_ok_0022:
  3885 00002E0B C8000000                	enter 0, 0
  3886 00002E0F 488B4520                	mov rax, qword [rbp + 8 * (4 + 0)]
  3887 00002E13 4889C2                  	mov rdx, rax
  3888 00002E16 BF08000000              	mov rdi, 8
  3889 00002E1B E871CF0000              	call malloc
  3890 00002E20 488910                  	mov qword[rax], rdx
  3891 00002E23 48894520                	mov qword [rbp + 8 * (4 + 0)], rax
  3892 00002E27 48B8-                   	mov rax, sob_void
  3892 00002E29 [0000000000000000] 
  3893                                  
  3894 00002E31 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  3895 00002E36 E856CF0000              	call malloc
  3896 00002E3B 50                      	push rax
  3897 00002E3C BF08000000              	mov rdi, 8 * 1	; new rib
  3898 00002E41 E84BCF0000              	call malloc
  3899 00002E46 50                      	push rax
  3900 00002E47 BF10000000              	mov rdi, 8 * 2	; extended env
  3901 00002E4C E840CF0000              	call malloc
  3902 00002E51 488B7D10                	mov rdi, ENV
  3903 00002E55 BE00000000              	mov rsi, 0
  3904 00002E5A BA01000000              	mov rdx, 1
  3905                                  .L_lambda_simple_env_loop_0023:	; ext_env[i + 1] <-- env[i]
  3906 00002E5F 4883FE01                	cmp rsi, 1
  3907 00002E63 7410                    	je .L_lambda_simple_env_end_0023
  3908 00002E65 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  3909 00002E69 48890CD0                	mov qword [rax + 8 * rdx], rcx
  3910 00002E6D 48FFC6                  	inc rsi
  3911 00002E70 48FFC2                  	inc rdx
  3912 00002E73 EBEA                    	jmp .L_lambda_simple_env_loop_0023
  3913                                  .L_lambda_simple_env_end_0023:
  3914 00002E75 5B                      	pop rbx
  3915 00002E76 BE00000000              	mov rsi, 0
  3916                                  .L_lambda_simple_params_loop_0023:	; copy params
  3917 00002E7B 4883FE01                	cmp rsi, 1
  3918 00002E7F 740E                    	je .L_lambda_simple_params_end_0023
  3919 00002E81 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  3920 00002E86 488914F3                	mov qword [rbx + 8 * rsi], rdx
  3921 00002E8A 48FFC6                  	inc rsi
  3922 00002E8D EBEC                    	jmp .L_lambda_simple_params_loop_0023
  3923                                  .L_lambda_simple_params_end_0023:
  3924 00002E8F 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  3925 00002E92 4889C3                  	mov rbx, rax
  3926 00002E95 58                      	pop rax
  3927 00002E96 C60005                  	mov byte [rax], T_closure
  3928 00002E99 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  3929 00002E9D 48C74009[AA2E0000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0023
  3930 00002EA5 E9FA000000              	jmp .L_lambda_simple_end_0023
  3931                                  .L_lambda_simple_code_0023:	; lambda-simple body
  3932 00002EAA 48837C241002            	cmp qword [rsp + 8 * 2], 2
  3933 00002EB0 740B                    	je .L_lambda_simple_arity_check_ok_0023
  3934 00002EB2 FF742410                	push qword [rsp + 8 * 2]
  3935 00002EB6 6A02                    	push 2
  3936 00002EB8 E98DCE0000              	jmp L_error_incorrect_arity_simple
  3937                                  .L_lambda_simple_arity_check_ok_0023:
  3938 00002EBD C8000000                	enter 0, 0
  3939 00002EC1 488B4528                	mov rax, qword [rbp + 8 * (4 + 1)]
  3940 00002EC5 50                      	push rax
  3941 00002EC6 6A01                    	push 1
  3942 00002EC8 488B0425[08000000]      	mov rax, qword [free_var_1]
  3943                                  	assert_closure(rax)
    42 00002ED0 803805              <1>  cmp byte [%1], %2
    43 00002ED3 0F85B1E60000        <1>  jne L_error_incorrect_type
  3944 00002ED9 FF7001                  	push SOB_CLOSURE_ENV(rax)
  3945 00002EDC FF5009                  	call SOB_CLOSURE_CODE(rax)
  3946 00002EDF 483D[02000000]          	cmp rax, sob_boolean_false
  3947 00002EE5 0F84B1000000                      	je .L_if_else_0005
  3948 00002EEB 488B4528                          	mov rax, qword [rbp + 8 * (4 + 1)]
  3949 00002EEF 50                      	push rax
  3950 00002EF0 6A01                    	push 1
  3951 00002EF2 488B0425[88000000]      	mov rax, qword [free_var_17]
  3952                                  	assert_closure(rax)
    42 00002EFA 803805              <1>  cmp byte [%1], %2
    43 00002EFD 0F8587E60000        <1>  jne L_error_incorrect_type
  3953 00002F03 FF7001                  	push SOB_CLOSURE_ENV(rax)
  3954 00002F06 FF5009                  	call SOB_CLOSURE_CODE(rax)
  3955 00002F09 50                      	push rax
  3956 00002F0A 488B4528                	mov rax, qword [rbp + 8 * (4 + 1)]
  3957 00002F0E 50                      	push rax
  3958 00002F0F 6A01                    	push 1
  3959 00002F11 488B0425[80000000]      	mov rax, qword [free_var_16]
  3960                                  	assert_closure(rax)
    42 00002F19 803805              <1>  cmp byte [%1], %2
    43 00002F1C 0F8568E60000        <1>  jne L_error_incorrect_type
  3961 00002F22 FF7001                  	push SOB_CLOSURE_ENV(rax)
  3962 00002F25 FF5009                  	call SOB_CLOSURE_CODE(rax)
  3963 00002F28 50                      	push rax
  3964 00002F29 6A02                    	push 2
  3965 00002F2B 488B4510                	mov rax, qword [rbp + 8 * 2]
  3966 00002F2F 488B00                  	mov rax, qword [rax + 8 * 0]
  3967 00002F32 488B00                  	mov rax, qword [rax + 8 * 0]
  3968 00002F35 488B00                  	mov rax, qword [rax]
  3969                                  	assert_closure(rax)
    42 00002F38 803805              <1>  cmp byte [%1], %2
    43 00002F3B 0F8549E60000        <1>  jne L_error_incorrect_type
  3970 00002F41 FF7001                  	push SOB_CLOSURE_ENV(rax)
  3971 00002F44 FF5009                  	call SOB_CLOSURE_CODE(rax)
  3972 00002F47 50                      	push rax
  3973 00002F48 488B4520                	mov rax, qword [rbp + 8 * (4 + 0)]
  3974 00002F4C 50                      	push rax
  3975 00002F4D 6A02                    	push 2
  3976 00002F4F 488B0425[68000000]      	mov rax, qword [free_var_13]
  3977                                  	assert_closure(rax)
    42 00002F57 803805              <1>  cmp byte [%1], %2
    43 00002F5A 0F852AE60000        <1>  jne L_error_incorrect_type
  3978 00002F60 FF7001                  	push SOB_CLOSURE_ENV(rax)
  3979 00002F63 FF7508                  	push qword [rbp + 8 * 1] ; old ret addr
  3980 00002F66 FF7500                  	push qword [rbp] ; same the old rbp
  3981 00002F69 BA05000000              	mov rdx, 2 + 3
  3982 00002F6E 488B4D18                	mov rcx, COUNT
  3983 00002F72 488D4CCD20              	lea rcx, [rbp + 8*4 + rcx * 8]
  3984 00002F77 4889EF                  	mov rdi, rbp
  3985                                  .L_tc_recycle_frame_loop_0021:
  3986 00002F7A 4883FA00                	cmp rdx, 0
  3987 00002F7E 7413                    	je .L_tc_recycle_frame_done_0021
  3988 00002F80 4883E908                	sub rcx, 8
  3989 00002F84 4883EF08                	sub rdi, 8
  3990 00002F88 488B37                  	mov rsi, [rdi]
  3991 00002F8B 488931                  	mov qword [rcx], rsi
  3992 00002F8E 48FFCA                  	dec rdx
  3993 00002F91 EBE7                    	jmp .L_tc_recycle_frame_loop_0021
  3994                                  .L_tc_recycle_frame_done_0021:
  3995 00002F93 5D                      	pop rbp ; restore the old rbp
  3996 00002F94 4889CC                  	mov rsp, rcx
  3997 00002F97 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
  3998 00002F9A EB04                    	jmp .L_if_end_0005
  3999                                            .L_if_else_0005:
  4000 00002F9C 488B4520                          	mov rax, qword [rbp + 8 * (4 + 0)]
  4001                                  .L_if_end_0005:
  4002 00002FA0 C9                      	leave
  4003 00002FA1 C22000                  	ret 8 * (2 + 2)
  4004                                  .L_lambda_simple_end_0023:	; new closure is in rax
  4005 00002FA4 50                      	push rax
  4006 00002FA5 488B4520                	mov rax, qword [rbp + 8 * (4 + 0)]
  4007 00002FA9 8F00                    	pop qword [rax]
  4008 00002FAB 48B8-                   	mov rax, sob_void
  4008 00002FAD [0000000000000000] 
  4009                                  
  4010 00002FB5 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  4011 00002FBA E8D2CD0000              	call malloc
  4012 00002FBF 50                      	push rax
  4013 00002FC0 BF08000000              	mov rdi, 8 * 1	; new rib
  4014 00002FC5 E8C7CD0000              	call malloc
  4015 00002FCA 50                      	push rax
  4016 00002FCB BF10000000              	mov rdi, 8 * 2	; extended env
  4017 00002FD0 E8BCCD0000              	call malloc
  4018 00002FD5 488B7D10                	mov rdi, ENV
  4019 00002FD9 BE00000000              	mov rsi, 0
  4020 00002FDE BA01000000              	mov rdx, 1
  4021                                  .L_lambda_opt_env_loop_0003:	; ext_env[i + 1] <-- env[i]
  4022 00002FE3 4883FE01                	cmp rsi, 1
  4023 00002FE7 7410                    	je .L_lambda_opt_env_end_0003
  4024 00002FE9 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  4025 00002FED 48890CD0                	mov qword [rax + 8 * rdx], rcx
  4026 00002FF1 48FFC6                  	inc rsi
  4027 00002FF4 48FFC2                  	inc rdx
  4028 00002FF7 EBEA                    	jmp .L_lambda_opt_env_loop_0003
  4029                                  .L_lambda_opt_env_end_0003:
  4030 00002FF9 5B                      	pop rbx
  4031 00002FFA BE00000000              	mov rsi, 0
  4032                                  .L_lambda_opt_params_loop_0003:	; copy params
  4033 00002FFF 4883FE01                	cmp rsi, 1
  4034 00003003 740E                    	je .L_lambda_opt_params_end_0003
  4035 00003005 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  4036 0000300A 488914F3                	mov qword [rbx + 8 * rsi], rdx
  4037 0000300E 48FFC6                  	inc rsi
  4038 00003011 EBEC                    	jmp .L_lambda_opt_params_loop_0003
  4039                                  .L_lambda_opt_params_end_0003:
  4040 00003013 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  4041 00003016 4889C3                  	mov rbx, rax
  4042 00003019 58                      	pop rax
  4043 0000301A C60005                  	mov byte [rax], T_closure
  4044 0000301D 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  4045 00003021 48C74009[2E300000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_opt_code_0003
  4046 00003029 E989010000              	jmp .L_lambda_opt_end_0003
  4047                                  .L_lambda_opt_code_0003:	; lambda-opt body
  4048 0000302E 48837C241001            	cmp qword [rsp + 8 * 2], 1
  4049 00003034 740D                    	je .L_lambda_opt_arity_check_exact_0003
  4050 00003036 7F43                    	jg .L_lambda_opt_arity_check_more_0003
  4051 00003038 FF742410                	push qword [rsp + 8 * 2]
  4052 0000303C 6A01                    	push 1
  4053 0000303E E91BCD0000              	jmp L_error_incorrect_arity_opt
  4054                                  .L_lambda_opt_arity_check_exact_0003:
  4055 00003043 48C744241002000000      	mov qword [rsp + 8 * 2], 2
  4056 0000304C BA04000000              	mov rdx, 4
  4057 00003051 FF3424                  	push qword [rsp]
  4058 00003054 BE01000000              	mov rsi, 1
  4059                                  .L_lambda_opt_stack_shrink_loop_0007:
  4060 00003059 4839D6                  	cmp rsi, rdx
  4061 0000305C 7411                    	je .L_lambda_opt_stack_shrink_loop_exit_0007
  4062 0000305E 488D5CF408              	lea rbx, [rsp + 8 + rsi * 8]
  4063 00003063 488B0B                  	mov rcx, [rbx]
  4064 00003066 48894BF8                	mov qword [rbx - 8], rcx
  4065 0000306A 48FFC6                  	inc rsi
  4066 0000306D EBEA                    	jmp .L_lambda_opt_stack_shrink_loop_0007
  4067                                  .L_lambda_opt_stack_shrink_loop_exit_0007:
  4068 0000306F 48C703[01000000]        	mov qword [rbx], sob_nil
  4069 00003076 E985000000              	jmp .L_lambda_opt_stack_adjusted_0003
  4070                                  .L_lambda_opt_arity_check_more_0003:
  4071 0000307B 488B542410              	mov rdx, qword [rsp + 8 * 2]
  4072 00003080 4883EA01                	sub rdx, 1
  4073 00003084 48C744241002000000      	mov qword [rsp + 8 * 2], 2
  4074 0000308D BE00000000              	mov rsi, 0
  4075 00003092 488D5CD418              	lea rbx, [rsp + 2 * 8 + 1 * 8 + rdx * 8]
  4076 00003097 48B9-                   	mov rcx, sob_nil
  4076 00003099 [0100000000000000] 
  4077                                  .L_lambda_opt_stack_shrink_loop_0008:
  4078 000030A1 4839D6                  	cmp rsi, rdx
  4079 000030A4 7427                    je .L_lambda_opt_stack_shrink_loop_exit_0008
  4080 000030A6 BF11000000              	mov rdi, 17 ; 1+8+8
  4081 000030AB E8E1CC0000              	call malloc
  4082 000030B0 48894809                	mov SOB_PAIR_CDR(rax), rcx
  4083 000030B4 48F7DE                  	neg rsi
  4084 000030B7 488B0CF3                	mov rcx, qword [rbx + rsi * 8]
  4085 000030BB 48F7DE                  	neg rsi
  4086 000030BE 48894801                	mov SOB_PAIR_CAR(rax), rcx
  4087 000030C2 C60021                  	mov byte [rax], T_pair
  4088 000030C5 4889C1                  	mov rcx, rax
  4089 000030C8 48FFC6                  	inc rsi
  4090 000030CB EBD4                    	jmp .L_lambda_opt_stack_shrink_loop_0008
  4091                                  .L_lambda_opt_stack_shrink_loop_exit_0008:
  4092 000030CD 48890B                  	mov qword [rbx], rcx
  4093 000030D0 4883EB08                	sub rbx, 8
  4094 000030D4 4889E7                  	mov rdi, rsp
  4095 000030D7 4883C718                	add rdi, 24
  4096 000030DB BE04000000              	mov rsi, 4
  4097                                  .L_lambda_opt_stack_shrink_loop_0009:
  4098 000030E0 4883FE00                	cmp rsi,0
  4099 000030E4 7413                    	je .L_lambda_opt_stack_shrink_loop_exit_0009
  4100 000030E6 488B0F                  	mov rcx, qword [rdi]
  4101 000030E9 48890B                  	mov [rbx], rcx
  4102 000030EC 48FFCE                  	dec rsi
  4103 000030EF 4883EB08                	sub rbx, 8
  4104 000030F3 4883EF08                	sub rdi, 8
  4105 000030F7 EBE7                    	jmp .L_lambda_opt_stack_shrink_loop_0009
  4106                                  .L_lambda_opt_stack_shrink_loop_exit_0009:
  4107 000030F9 4883C308                	add rbx, 8
  4108 000030FD 4889DC                  	mov rsp, rbx
  4109                                  .L_lambda_opt_stack_adjusted_0003:
  4110 00003100 C8000000                	enter 0, 0
  4111 00003104 488B4528                	mov rax, qword [rbp + 8 * (4 + 1)]
  4112 00003108 50                      	push rax
  4113 00003109 6A01                    	push 1
  4114 0000310B 488B0425[88000000]      	mov rax, qword [free_var_17]
  4115                                  	assert_closure(rax)
    42 00003113 803805              <1>  cmp byte [%1], %2
    43 00003116 0F856EE40000        <1>  jne L_error_incorrect_type
  4116 0000311C FF7001                  	push SOB_CLOSURE_ENV(rax)
  4117 0000311F FF5009                  	call SOB_CLOSURE_CODE(rax)
  4118 00003122 50                      	push rax
  4119 00003123 488B4528                	mov rax, qword [rbp + 8 * (4 + 1)]
  4120 00003127 50                      	push rax
  4121 00003128 6A01                    	push 1
  4122 0000312A 488B0425[80000000]      	mov rax, qword [free_var_16]
  4123                                  	assert_closure(rax)
    42 00003132 803805              <1>  cmp byte [%1], %2
    43 00003135 0F854FE40000        <1>  jne L_error_incorrect_type
  4124 0000313B FF7001                  	push SOB_CLOSURE_ENV(rax)
  4125 0000313E FF5009                  	call SOB_CLOSURE_CODE(rax)
  4126 00003141 50                      	push rax
  4127 00003142 6A02                    	push 2
  4128 00003144 488B4510                	mov rax, qword [rbp + 8 * 2]
  4129 00003148 488B00                  	mov rax, qword [rax + 8 * 0]
  4130 0000314B 488B00                  	mov rax, qword [rax + 8 * 0]
  4131 0000314E 488B00                  	mov rax, qword [rax]
  4132                                  	assert_closure(rax)
    42 00003151 803805              <1>  cmp byte [%1], %2
    43 00003154 0F8530E40000        <1>  jne L_error_incorrect_type
  4133 0000315A FF7001                  	push SOB_CLOSURE_ENV(rax)
  4134 0000315D FF5009                  	call SOB_CLOSURE_CODE(rax)
  4135 00003160 50                      	push rax
  4136 00003161 488B4520                	mov rax, qword [rbp + 8 * (4 + 0)]
  4137 00003165 50                      	push rax
  4138 00003166 6A02                    	push 2
  4139 00003168 488B0425[E8000000]      	mov rax, qword [free_var_29]
  4140                                  	assert_closure(rax)
    42 00003170 803805              <1>  cmp byte [%1], %2
    43 00003173 0F8511E40000        <1>  jne L_error_incorrect_type
  4141 00003179 FF7001                  	push SOB_CLOSURE_ENV(rax)
  4142 0000317C FF7508                  	push qword [rbp + 8 * 1] ; old ret addr
  4143 0000317F FF7500                  	push qword [rbp] ; same the old rbp
  4144 00003182 BA05000000              	mov rdx, 2 + 3
  4145 00003187 488B4D18                	mov rcx, COUNT
  4146 0000318B 488D4CCD20              	lea rcx, [rbp + 8*4 + rcx * 8]
  4147 00003190 4889EF                  	mov rdi, rbp
  4148                                  .L_tc_recycle_frame_loop_0022:
  4149 00003193 4883FA00                	cmp rdx, 0
  4150 00003197 7413                    	je .L_tc_recycle_frame_done_0022
  4151 00003199 4883E908                	sub rcx, 8
  4152 0000319D 4883EF08                	sub rdi, 8
  4153 000031A1 488B37                  	mov rsi, [rdi]
  4154 000031A4 488931                  	mov qword [rcx], rsi
  4155 000031A7 48FFCA                  	dec rdx
  4156 000031AA EBE7                    	jmp .L_tc_recycle_frame_loop_0022
  4157                                  .L_tc_recycle_frame_done_0022:
  4158 000031AC 5D                      	pop rbp ; restore the old rbp
  4159 000031AD 4889CC                  	mov rsp, rcx
  4160 000031B0 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
  4161 000031B3 C9                      	leave
  4162 000031B4 C22000                  	ret 8 * (2 + 2)
  4163                                  .L_lambda_opt_end_0003:	; new closure is in rax
  4164 000031B7 C9                      	leave
  4165 000031B8 C21800                  	ret 8 * (2 + 1)
  4166                                  .L_lambda_simple_end_0022:	; new closure is in rax
  4167                                  	assert_closure(rax)
    42 000031BB 803805              <1>  cmp byte [%1], %2
    43 000031BE 0F85C6E30000        <1>  jne L_error_incorrect_type
  4168 000031C4 FF7001                  	push SOB_CLOSURE_ENV(rax)
  4169 000031C7 FF5009                  	call SOB_CLOSURE_CODE(rax)
  4170 000031CA 48890425[C8020000]      	mov qword [free_var_89], rax
  4171 000031D2 48B8-                   	mov rax, sob_void
  4171 000031D4 [0000000000000000] 
  4172                                  
  4173 000031DC 4889C7                  	mov rdi, rax
  4174 000031DF E8BECB0000              	call print_sexpr_if_not_void
  4175                                  
  4176 000031E4 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  4177 000031E9 E8A3CB0000              	call malloc
  4178 000031EE 50                      	push rax
  4179 000031EF BF00000000              	mov rdi, 8 * 0	; new rib
  4180 000031F4 E898CB0000              	call malloc
  4181 000031F9 50                      	push rax
  4182 000031FA BF08000000              	mov rdi, 8 * 1	; extended env
  4183 000031FF E88DCB0000              	call malloc
  4184 00003204 488B7D10                	mov rdi, ENV
  4185 00003208 BE00000000              	mov rsi, 0
  4186 0000320D BA01000000              	mov rdx, 1
  4187                                  .L_lambda_opt_env_loop_0004:	; ext_env[i + 1] <-- env[i]
  4188 00003212 4883FE00                	cmp rsi, 0
  4189 00003216 7410                    	je .L_lambda_opt_env_end_0004
  4190 00003218 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  4191 0000321C 48890CD0                	mov qword [rax + 8 * rdx], rcx
  4192 00003220 48FFC6                  	inc rsi
  4193 00003223 48FFC2                  	inc rdx
  4194 00003226 EBEA                    	jmp .L_lambda_opt_env_loop_0004
  4195                                  .L_lambda_opt_env_end_0004:
  4196 00003228 5B                      	pop rbx
  4197 00003229 BE00000000              	mov rsi, 0
  4198                                  .L_lambda_opt_params_loop_0004:	; copy params
  4199 0000322E 4883FE00                	cmp rsi, 0
  4200 00003232 740E                    	je .L_lambda_opt_params_end_0004
  4201 00003234 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  4202 00003239 488914F3                	mov qword [rbx + 8 * rsi], rdx
  4203 0000323D 48FFC6                  	inc rsi
  4204 00003240 EBEC                    	jmp .L_lambda_opt_params_loop_0004
  4205                                  .L_lambda_opt_params_end_0004:
  4206 00003242 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  4207 00003245 4889C3                  	mov rbx, rax
  4208 00003248 58                      	pop rax
  4209 00003249 C60005                  	mov byte [rax], T_closure
  4210 0000324C 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  4211 00003250 48C74009[5D320000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_opt_code_0004
  4212 00003258 E9FC030000              	jmp .L_lambda_opt_end_0004
  4213                                  .L_lambda_opt_code_0004:	; lambda-opt body
  4214 0000325D 48837C241001            	cmp qword [rsp + 8 * 2], 1
  4215 00003263 740D                    	je .L_lambda_opt_arity_check_exact_0004
  4216 00003265 7F43                    	jg .L_lambda_opt_arity_check_more_0004
  4217 00003267 FF742410                	push qword [rsp + 8 * 2]
  4218 0000326B 6A01                    	push 1
  4219 0000326D E9ECCA0000              	jmp L_error_incorrect_arity_opt
  4220                                  .L_lambda_opt_arity_check_exact_0004:
  4221 00003272 48C744241002000000      	mov qword [rsp + 8 * 2], 2
  4222 0000327B BA04000000              	mov rdx, 4
  4223 00003280 FF3424                  	push qword [rsp]
  4224 00003283 BE01000000              	mov rsi, 1
  4225                                  .L_lambda_opt_stack_shrink_loop_000a:
  4226 00003288 4839D6                  	cmp rsi, rdx
  4227 0000328B 7411                    	je .L_lambda_opt_stack_shrink_loop_exit_000a
  4228 0000328D 488D5CF408              	lea rbx, [rsp + 8 + rsi * 8]
  4229 00003292 488B0B                  	mov rcx, [rbx]
  4230 00003295 48894BF8                	mov qword [rbx - 8], rcx
  4231 00003299 48FFC6                  	inc rsi
  4232 0000329C EBEA                    	jmp .L_lambda_opt_stack_shrink_loop_000a
  4233                                  .L_lambda_opt_stack_shrink_loop_exit_000a:
  4234 0000329E 48C703[01000000]        	mov qword [rbx], sob_nil
  4235 000032A5 E985000000              	jmp .L_lambda_opt_stack_adjusted_0004
  4236                                  .L_lambda_opt_arity_check_more_0004:
  4237 000032AA 488B542410              	mov rdx, qword [rsp + 8 * 2]
  4238 000032AF 4883EA01                	sub rdx, 1
  4239 000032B3 48C744241002000000      	mov qword [rsp + 8 * 2], 2
  4240 000032BC BE00000000              	mov rsi, 0
  4241 000032C1 488D5CD418              	lea rbx, [rsp + 2 * 8 + 1 * 8 + rdx * 8]
  4242 000032C6 48B9-                   	mov rcx, sob_nil
  4242 000032C8 [0100000000000000] 
  4243                                  .L_lambda_opt_stack_shrink_loop_000b:
  4244 000032D0 4839D6                  	cmp rsi, rdx
  4245 000032D3 7427                    je .L_lambda_opt_stack_shrink_loop_exit_000b
  4246 000032D5 BF11000000              	mov rdi, 17 ; 1+8+8
  4247 000032DA E8B2CA0000              	call malloc
  4248 000032DF 48894809                	mov SOB_PAIR_CDR(rax), rcx
  4249 000032E3 48F7DE                  	neg rsi
  4250 000032E6 488B0CF3                	mov rcx, qword [rbx + rsi * 8]
  4251 000032EA 48F7DE                  	neg rsi
  4252 000032ED 48894801                	mov SOB_PAIR_CAR(rax), rcx
  4253 000032F1 C60021                  	mov byte [rax], T_pair
  4254 000032F4 4889C1                  	mov rcx, rax
  4255 000032F7 48FFC6                  	inc rsi
  4256 000032FA EBD4                    	jmp .L_lambda_opt_stack_shrink_loop_000b
  4257                                  .L_lambda_opt_stack_shrink_loop_exit_000b:
  4258 000032FC 48890B                  	mov qword [rbx], rcx
  4259 000032FF 4883EB08                	sub rbx, 8
  4260 00003303 4889E7                  	mov rdi, rsp
  4261 00003306 4883C718                	add rdi, 24
  4262 0000330A BE04000000              	mov rsi, 4
  4263                                  .L_lambda_opt_stack_shrink_loop_000c:
  4264 0000330F 4883FE00                	cmp rsi,0
  4265 00003313 7413                    	je .L_lambda_opt_stack_shrink_loop_exit_000c
  4266 00003315 488B0F                  	mov rcx, qword [rdi]
  4267 00003318 48890B                  	mov [rbx], rcx
  4268 0000331B 48FFCE                  	dec rsi
  4269 0000331E 4883EB08                	sub rbx, 8
  4270 00003322 4883EF08                	sub rdi, 8
  4271 00003326 EBE7                    	jmp .L_lambda_opt_stack_shrink_loop_000c
  4272                                  .L_lambda_opt_stack_shrink_loop_exit_000c:
  4273 00003328 4883C308                	add rbx, 8
  4274 0000332C 4889DC                  	mov rsp, rbx
  4275                                  .L_lambda_opt_stack_adjusted_0004:
  4276 0000332F C8000000                	enter 0, 0
  4277 00003333 48B8-                   	mov rax, L_constants + 23
  4277 00003335 [1700000000000000] 
  4278 0000333D 50                      	push rax
  4279 0000333E 6A01                    	push 1
  4280 00003340 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  4281 00003345 E847CA0000              	call malloc
  4282 0000334A 50                      	push rax
  4283 0000334B BF10000000              	mov rdi, 8 * 2	; new rib
  4284 00003350 E83CCA0000              	call malloc
  4285 00003355 50                      	push rax
  4286 00003356 BF10000000              	mov rdi, 8 * 2	; extended env
  4287 0000335B E831CA0000              	call malloc
  4288 00003360 488B7D10                	mov rdi, ENV
  4289 00003364 BE00000000              	mov rsi, 0
  4290 00003369 BA01000000              	mov rdx, 1
  4291                                  .L_lambda_simple_env_loop_0024:	; ext_env[i + 1] <-- env[i]
  4292 0000336E 4883FE01                	cmp rsi, 1
  4293 00003372 7410                    	je .L_lambda_simple_env_end_0024
  4294 00003374 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  4295 00003378 48890CD0                	mov qword [rax + 8 * rdx], rcx
  4296 0000337C 48FFC6                  	inc rsi
  4297 0000337F 48FFC2                  	inc rdx
  4298 00003382 EBEA                    	jmp .L_lambda_simple_env_loop_0024
  4299                                  .L_lambda_simple_env_end_0024:
  4300 00003384 5B                      	pop rbx
  4301 00003385 BE00000000              	mov rsi, 0
  4302                                  .L_lambda_simple_params_loop_0024:	; copy params
  4303 0000338A 4883FE02                	cmp rsi, 2
  4304 0000338E 740E                    	je .L_lambda_simple_params_end_0024
  4305 00003390 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  4306 00003395 488914F3                	mov qword [rbx + 8 * rsi], rdx
  4307 00003399 48FFC6                  	inc rsi
  4308 0000339C EBEC                    	jmp .L_lambda_simple_params_loop_0024
  4309                                  .L_lambda_simple_params_end_0024:
  4310 0000339E 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  4311 000033A1 4889C3                  	mov rbx, rax
  4312 000033A4 58                      	pop rax
  4313 000033A5 C60005                  	mov byte [rax], T_closure
  4314 000033A8 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  4315 000033AC 48C74009[B9330000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0024
  4316 000033B4 E959020000              	jmp .L_lambda_simple_end_0024
  4317                                  .L_lambda_simple_code_0024:	; lambda-simple body
  4318 000033B9 48837C241001            	cmp qword [rsp + 8 * 2], 1
  4319 000033BF 740B                    	je .L_lambda_simple_arity_check_ok_0024
  4320 000033C1 FF742410                	push qword [rsp + 8 * 2]
  4321 000033C5 6A01                    	push 1
  4322 000033C7 E97EC90000              	jmp L_error_incorrect_arity_simple
  4323                                  .L_lambda_simple_arity_check_ok_0024:
  4324 000033CC C8000000                	enter 0, 0
  4325 000033D0 488B4520                	mov rax, qword [rbp + 8 * (4 + 0)]
  4326 000033D4 4889C2                  	mov rdx, rax
  4327 000033D7 BF08000000              	mov rdi, 8
  4328 000033DC E8B0C90000              	call malloc
  4329 000033E1 488910                  	mov qword[rax], rdx
  4330 000033E4 48894520                	mov qword [rbp + 8 * (4 + 0)], rax
  4331 000033E8 48B8-                   	mov rax, sob_void
  4331 000033EA [0000000000000000] 
  4332                                  
  4333 000033F2 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  4334 000033F7 E895C90000              	call malloc
  4335 000033FC 50                      	push rax
  4336 000033FD BF08000000              	mov rdi, 8 * 1	; new rib
  4337 00003402 E88AC90000              	call malloc
  4338 00003407 50                      	push rax
  4339 00003408 BF18000000              	mov rdi, 8 * 3	; extended env
  4340 0000340D E87FC90000              	call malloc
  4341 00003412 488B7D10                	mov rdi, ENV
  4342 00003416 BE00000000              	mov rsi, 0
  4343 0000341B BA01000000              	mov rdx, 1
  4344                                  .L_lambda_simple_env_loop_0025:	; ext_env[i + 1] <-- env[i]
  4345 00003420 4883FE02                	cmp rsi, 2
  4346 00003424 7410                    	je .L_lambda_simple_env_end_0025
  4347 00003426 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  4348 0000342A 48890CD0                	mov qword [rax + 8 * rdx], rcx
  4349 0000342E 48FFC6                  	inc rsi
  4350 00003431 48FFC2                  	inc rdx
  4351 00003434 EBEA                    	jmp .L_lambda_simple_env_loop_0025
  4352                                  .L_lambda_simple_env_end_0025:
  4353 00003436 5B                      	pop rbx
  4354 00003437 BE00000000              	mov rsi, 0
  4355                                  .L_lambda_simple_params_loop_0025:	; copy params
  4356 0000343C 4883FE01                	cmp rsi, 1
  4357 00003440 740E                    	je .L_lambda_simple_params_end_0025
  4358 00003442 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  4359 00003447 488914F3                	mov qword [rbx + 8 * rsi], rdx
  4360 0000344B 48FFC6                  	inc rsi
  4361 0000344E EBEC                    	jmp .L_lambda_simple_params_loop_0025
  4362                                  .L_lambda_simple_params_end_0025:
  4363 00003450 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  4364 00003453 4889C3                  	mov rbx, rax
  4365 00003456 58                      	pop rax
  4366 00003457 C60005                  	mov byte [rax], T_closure
  4367 0000345A 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  4368 0000345E 48C74009[6B340000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0025
  4369 00003466 E93A010000              	jmp .L_lambda_simple_end_0025
  4370                                  .L_lambda_simple_code_0025:	; lambda-simple body
  4371 0000346B 48837C241001            	cmp qword [rsp + 8 * 2], 1
  4372 00003471 740B                    	je .L_lambda_simple_arity_check_ok_0025
  4373 00003473 FF742410                	push qword [rsp + 8 * 2]
  4374 00003477 6A01                    	push 1
  4375 00003479 E9CCC80000              	jmp L_error_incorrect_arity_simple
  4376                                  .L_lambda_simple_arity_check_ok_0025:
  4377 0000347E C8000000                	enter 0, 0
  4378 00003482 488B4520                	mov rax, qword [rbp + 8 * (4 + 0)]
  4379 00003486 50                      	push rax
  4380 00003487 6A01                    	push 1
  4381 00003489 488B0425[80000000]      	mov rax, qword [free_var_16]
  4382                                  	assert_closure(rax)
    42 00003491 803805              <1>  cmp byte [%1], %2
    43 00003494 0F85F0E00000        <1>  jne L_error_incorrect_type
  4383 0000349A FF7001                  	push SOB_CLOSURE_ENV(rax)
  4384 0000349D FF5009                  	call SOB_CLOSURE_CODE(rax)
  4385 000034A0 50                      	push rax
  4386 000034A1 6A01                    	push 1
  4387 000034A3 488B0425[08000000]      	mov rax, qword [free_var_1]
  4388                                  	assert_closure(rax)
    42 000034AB 803805              <1>  cmp byte [%1], %2
    43 000034AE 0F85D6E00000        <1>  jne L_error_incorrect_type
  4389 000034B4 FF7001                  	push SOB_CLOSURE_ENV(rax)
  4390 000034B7 FF5009                  	call SOB_CLOSURE_CODE(rax)
  4391 000034BA 483D[02000000]          	cmp rax, sob_boolean_false
  4392 000034C0 0F84D1000000                      	je .L_if_else_0006
  4393 000034C6 488B4520                          	mov rax, qword [rbp + 8 * (4 + 0)]
  4394 000034CA 50                      	push rax
  4395 000034CB 488B0425[80000000]      	mov rax, qword [free_var_16]
  4396 000034D3 50                      	push rax
  4397 000034D4 6A02                    	push 2
  4398 000034D6 488B0425[D8020000]      	mov rax, qword [free_var_91]
  4399                                  	assert_closure(rax)
    42 000034DE 803805              <1>  cmp byte [%1], %2
    43 000034E1 0F85A3E00000        <1>  jne L_error_incorrect_type
  4400 000034E7 FF7001                  	push SOB_CLOSURE_ENV(rax)
  4401 000034EA FF5009                  	call SOB_CLOSURE_CODE(rax)
  4402 000034ED 50                      	push rax
  4403 000034EE 488B4510                	mov rax, qword [rbp + 8 * 2]
  4404 000034F2 488B4008                	mov rax, qword [rax + 8 * 1]
  4405 000034F6 488B00                  	mov rax, qword [rax + 8 * 0]
  4406 000034F9 50                      	push rax
  4407 000034FA 6A02                    	push 2
  4408 000034FC 488B0425[C8020000]      	mov rax, qword [free_var_89]
  4409                                  	assert_closure(rax)
    42 00003504 803805              <1>  cmp byte [%1], %2
    43 00003507 0F857DE00000        <1>  jne L_error_incorrect_type
  4410 0000350D FF7001                  	push SOB_CLOSURE_ENV(rax)
  4411 00003510 FF5009                  	call SOB_CLOSURE_CODE(rax)
  4412 00003513 483D[02000000]          	cmp rax, sob_boolean_false
  4413 00003519 757A                    	jne .L_or_end_0002
  4414 0000351B 488B4520                	mov rax, qword [rbp + 8 * (4 + 0)]
  4415 0000351F 50                      	push rax
  4416 00003520 488B0425[88000000]      	mov rax, qword [free_var_17]
  4417 00003528 50                      	push rax
  4418 00003529 6A02                    	push 2
  4419 0000352B 488B0425[D8020000]      	mov rax, qword [free_var_91]
  4420                                  	assert_closure(rax)
    42 00003533 803805              <1>  cmp byte [%1], %2
    43 00003536 0F854EE00000        <1>  jne L_error_incorrect_type
  4421 0000353C FF7001                  	push SOB_CLOSURE_ENV(rax)
  4422 0000353F FF5009                  	call SOB_CLOSURE_CODE(rax)
  4423 00003542 50                      	push rax
  4424 00003543 6A01                    	push 1
  4425 00003545 488B4510                	mov rax, qword [rbp + 8 * 2]
  4426 00003549 488B00                  	mov rax, qword [rax + 8 * 0]
  4427 0000354C 488B00                  	mov rax, qword [rax + 8 * 0]
  4428 0000354F 488B00                  	mov rax, qword [rax]
  4429                                  	assert_closure(rax)
    42 00003552 803805              <1>  cmp byte [%1], %2
    43 00003555 0F852FE00000        <1>  jne L_error_incorrect_type
  4430 0000355B FF7001                  	push SOB_CLOSURE_ENV(rax)
  4431 0000355E FF7508                  	push qword [rbp + 8 * 1] ; old ret addr
  4432 00003561 FF7500                  	push qword [rbp] ; same the old rbp
  4433 00003564 BA04000000              	mov rdx, 1 + 3
  4434 00003569 488B4D18                	mov rcx, COUNT
  4435 0000356D 488D4CCD20              	lea rcx, [rbp + 8*4 + rcx * 8]
  4436 00003572 4889EF                  	mov rdi, rbp
  4437                                  .L_tc_recycle_frame_loop_0024:
  4438 00003575 4883FA00                	cmp rdx, 0
  4439 00003579 7413                    	je .L_tc_recycle_frame_done_0024
  4440 0000357B 4883E908                	sub rcx, 8
  4441 0000357F 4883EF08                	sub rdi, 8
  4442 00003583 488B37                  	mov rsi, [rdi]
  4443 00003586 488931                  	mov qword [rcx], rsi
  4444 00003589 48FFCA                  	dec rdx
  4445 0000358C EBE7                    	jmp .L_tc_recycle_frame_loop_0024
  4446                                  .L_tc_recycle_frame_done_0024:
  4447 0000358E 5D                      	pop rbp ; restore the old rbp
  4448 0000358F 4889CC                  	mov rsp, rcx
  4449 00003592 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
  4450                                  .L_or_end_0002:
  4451 00003595 EB0A                    	jmp .L_if_end_0006
  4452                                            .L_if_else_0006:
  4453 00003597 48B8-                             	mov rax, L_constants + 2
  4453 00003599 [0200000000000000] 
  4454                                  .L_if_end_0006:
  4455 000035A1 C9                      	leave
  4456 000035A2 C21800                  	ret 8 * (2 + 1)
  4457                                  .L_lambda_simple_end_0025:	; new closure is in rax
  4458 000035A5 50                      	push rax
  4459 000035A6 488B4520                	mov rax, qword [rbp + 8 * (4 + 0)]
  4460 000035AA 8F00                    	pop qword [rax]
  4461 000035AC 48B8-                   	mov rax, sob_void
  4461 000035AE [0000000000000000] 
  4462                                  
  4463 000035B6 488B4510                	mov rax, qword [rbp + 8 * 2]
  4464 000035BA 488B00                  	mov rax, qword [rax + 8 * 0]
  4465 000035BD 488B4008                	mov rax, qword [rax + 8 * 1]
  4466 000035C1 50                      	push rax
  4467 000035C2 6A01                    	push 1
  4468 000035C4 488B4520                	mov rax, qword [rbp + 8 * (4 + 0)]
  4469 000035C8 488B00                  	mov rax, qword [rax]
  4470                                  	assert_closure(rax)
    42 000035CB 803805              <1>  cmp byte [%1], %2
    43 000035CE 0F85B6DF0000        <1>  jne L_error_incorrect_type
  4471 000035D4 FF7001                  	push SOB_CLOSURE_ENV(rax)
  4472 000035D7 FF7508                  	push qword [rbp + 8 * 1] ; old ret addr
  4473 000035DA FF7500                  	push qword [rbp] ; same the old rbp
  4474 000035DD BA04000000              	mov rdx, 1 + 3
  4475 000035E2 488B4D18                	mov rcx, COUNT
  4476 000035E6 488D4CCD20              	lea rcx, [rbp + 8*4 + rcx * 8]
  4477 000035EB 4889EF                  	mov rdi, rbp
  4478                                  .L_tc_recycle_frame_loop_0025:
  4479 000035EE 4883FA00                	cmp rdx, 0
  4480 000035F2 7413                    	je .L_tc_recycle_frame_done_0025
  4481 000035F4 4883E908                	sub rcx, 8
  4482 000035F8 4883EF08                	sub rdi, 8
  4483 000035FC 488B37                  	mov rsi, [rdi]
  4484 000035FF 488931                  	mov qword [rcx], rsi
  4485 00003602 48FFCA                  	dec rdx
  4486 00003605 EBE7                    	jmp .L_tc_recycle_frame_loop_0025
  4487                                  .L_tc_recycle_frame_done_0025:
  4488 00003607 5D                      	pop rbp ; restore the old rbp
  4489 00003608 4889CC                  	mov rsp, rcx
  4490 0000360B FF6009                  	jmp SOB_CLOSURE_CODE(rax)
  4491 0000360E C9                      	leave
  4492 0000360F C21800                  	ret 8 * (2 + 1)
  4493                                  .L_lambda_simple_end_0024:	; new closure is in rax
  4494                                  	assert_closure(rax)
    42 00003612 803805              <1>  cmp byte [%1], %2
    43 00003615 0F856FDF0000        <1>  jne L_error_incorrect_type
  4495 0000361B FF7001                  	push SOB_CLOSURE_ENV(rax)
  4496 0000361E FF7508                  	push qword [rbp + 8 * 1] ; old ret addr
  4497 00003621 FF7500                  	push qword [rbp] ; same the old rbp
  4498 00003624 BA04000000              	mov rdx, 1 + 3
  4499 00003629 488B4D18                	mov rcx, COUNT
  4500 0000362D 488D4CCD20              	lea rcx, [rbp + 8*4 + rcx * 8]
  4501 00003632 4889EF                  	mov rdi, rbp
  4502                                  .L_tc_recycle_frame_loop_0023:
  4503 00003635 4883FA00                	cmp rdx, 0
  4504 00003639 7413                    	je .L_tc_recycle_frame_done_0023
  4505 0000363B 4883E908                	sub rcx, 8
  4506 0000363F 4883EF08                	sub rdi, 8
  4507 00003643 488B37                  	mov rsi, [rdi]
  4508 00003646 488931                  	mov qword [rcx], rsi
  4509 00003649 48FFCA                  	dec rdx
  4510 0000364C EBE7                    	jmp .L_tc_recycle_frame_loop_0023
  4511                                  .L_tc_recycle_frame_done_0023:
  4512 0000364E 5D                      	pop rbp ; restore the old rbp
  4513 0000364F 4889CC                  	mov rsp, rcx
  4514 00003652 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
  4515 00003655 C9                      	leave
  4516 00003656 C22000                  	ret 8 * (2 + 2)
  4517                                  .L_lambda_opt_end_0004:	; new closure is in rax
  4518 00003659 48890425[D0020000]      	mov qword [free_var_90], rax
  4519 00003661 48B8-                   	mov rax, sob_void
  4519 00003663 [0000000000000000] 
  4520                                  
  4521 0000366B 4889C7                  	mov rdi, rax
  4522 0000366E E82FC70000              	call print_sexpr_if_not_void
  4523                                  
  4524 00003673 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  4525 00003678 E814C70000              	call malloc
  4526 0000367D 50                      	push rax
  4527 0000367E BF00000000              	mov rdi, 8 * 0	; new rib
  4528 00003683 E809C70000              	call malloc
  4529 00003688 50                      	push rax
  4530 00003689 BF08000000              	mov rdi, 8 * 1	; extended env
  4531 0000368E E8FEC60000              	call malloc
  4532 00003693 488B7D10                	mov rdi, ENV
  4533 00003697 BE00000000              	mov rsi, 0
  4534 0000369C BA01000000              	mov rdx, 1
  4535                                  .L_lambda_opt_env_loop_0005:	; ext_env[i + 1] <-- env[i]
  4536 000036A1 4883FE00                	cmp rsi, 0
  4537 000036A5 7410                    	je .L_lambda_opt_env_end_0005
  4538 000036A7 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  4539 000036AB 48890CD0                	mov qword [rax + 8 * rdx], rcx
  4540 000036AF 48FFC6                  	inc rsi
  4541 000036B2 48FFC2                  	inc rdx
  4542 000036B5 EBEA                    	jmp .L_lambda_opt_env_loop_0005
  4543                                  .L_lambda_opt_env_end_0005:
  4544 000036B7 5B                      	pop rbx
  4545 000036B8 BE00000000              	mov rsi, 0
  4546                                  .L_lambda_opt_params_loop_0005:	; copy params
  4547 000036BD 4883FE00                	cmp rsi, 0
  4548 000036C1 740E                    	je .L_lambda_opt_params_end_0005
  4549 000036C3 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  4550 000036C8 488914F3                	mov qword [rbx + 8 * rsi], rdx
  4551 000036CC 48FFC6                  	inc rsi
  4552 000036CF EBEC                    	jmp .L_lambda_opt_params_loop_0005
  4553                                  .L_lambda_opt_params_end_0005:
  4554 000036D1 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  4555 000036D4 4889C3                  	mov rbx, rax
  4556 000036D7 58                      	pop rax
  4557 000036D8 C60005                  	mov byte [rax], T_closure
  4558 000036DB 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  4559 000036DF 48C74009[EC360000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_opt_code_0005
  4560 000036E7 E900040000              	jmp .L_lambda_opt_end_0005
  4561                                  .L_lambda_opt_code_0005:	; lambda-opt body
  4562 000036EC 48837C241001            	cmp qword [rsp + 8 * 2], 1
  4563 000036F2 740D                    	je .L_lambda_opt_arity_check_exact_0005
  4564 000036F4 7F43                    	jg .L_lambda_opt_arity_check_more_0005
  4565 000036F6 FF742410                	push qword [rsp + 8 * 2]
  4566 000036FA 6A01                    	push 1
  4567 000036FC E95DC60000              	jmp L_error_incorrect_arity_opt
  4568                                  .L_lambda_opt_arity_check_exact_0005:
  4569 00003701 48C744241002000000      	mov qword [rsp + 8 * 2], 2
  4570 0000370A BA04000000              	mov rdx, 4
  4571 0000370F FF3424                  	push qword [rsp]
  4572 00003712 BE01000000              	mov rsi, 1
  4573                                  .L_lambda_opt_stack_shrink_loop_000d:
  4574 00003717 4839D6                  	cmp rsi, rdx
  4575 0000371A 7411                    	je .L_lambda_opt_stack_shrink_loop_exit_000d
  4576 0000371C 488D5CF408              	lea rbx, [rsp + 8 + rsi * 8]
  4577 00003721 488B0B                  	mov rcx, [rbx]
  4578 00003724 48894BF8                	mov qword [rbx - 8], rcx
  4579 00003728 48FFC6                  	inc rsi
  4580 0000372B EBEA                    	jmp .L_lambda_opt_stack_shrink_loop_000d
  4581                                  .L_lambda_opt_stack_shrink_loop_exit_000d:
  4582 0000372D 48C703[01000000]        	mov qword [rbx], sob_nil
  4583 00003734 E985000000              	jmp .L_lambda_opt_stack_adjusted_0005
  4584                                  .L_lambda_opt_arity_check_more_0005:
  4585 00003739 488B542410              	mov rdx, qword [rsp + 8 * 2]
  4586 0000373E 4883EA01                	sub rdx, 1
  4587 00003742 48C744241002000000      	mov qword [rsp + 8 * 2], 2
  4588 0000374B BE00000000              	mov rsi, 0
  4589 00003750 488D5CD418              	lea rbx, [rsp + 2 * 8 + 1 * 8 + rdx * 8]
  4590 00003755 48B9-                   	mov rcx, sob_nil
  4590 00003757 [0100000000000000] 
  4591                                  .L_lambda_opt_stack_shrink_loop_000e:
  4592 0000375F 4839D6                  	cmp rsi, rdx
  4593 00003762 7427                    je .L_lambda_opt_stack_shrink_loop_exit_000e
  4594 00003764 BF11000000              	mov rdi, 17 ; 1+8+8
  4595 00003769 E823C60000              	call malloc
  4596 0000376E 48894809                	mov SOB_PAIR_CDR(rax), rcx
  4597 00003772 48F7DE                  	neg rsi
  4598 00003775 488B0CF3                	mov rcx, qword [rbx + rsi * 8]
  4599 00003779 48F7DE                  	neg rsi
  4600 0000377C 48894801                	mov SOB_PAIR_CAR(rax), rcx
  4601 00003780 C60021                  	mov byte [rax], T_pair
  4602 00003783 4889C1                  	mov rcx, rax
  4603 00003786 48FFC6                  	inc rsi
  4604 00003789 EBD4                    	jmp .L_lambda_opt_stack_shrink_loop_000e
  4605                                  .L_lambda_opt_stack_shrink_loop_exit_000e:
  4606 0000378B 48890B                  	mov qword [rbx], rcx
  4607 0000378E 4883EB08                	sub rbx, 8
  4608 00003792 4889E7                  	mov rdi, rsp
  4609 00003795 4883C718                	add rdi, 24
  4610 00003799 BE04000000              	mov rsi, 4
  4611                                  .L_lambda_opt_stack_shrink_loop_000f:
  4612 0000379E 4883FE00                	cmp rsi,0
  4613 000037A2 7413                    	je .L_lambda_opt_stack_shrink_loop_exit_000f
  4614 000037A4 488B0F                  	mov rcx, qword [rdi]
  4615 000037A7 48890B                  	mov [rbx], rcx
  4616 000037AA 48FFCE                  	dec rsi
  4617 000037AD 4883EB08                	sub rbx, 8
  4618 000037B1 4883EF08                	sub rdi, 8
  4619 000037B5 EBE7                    	jmp .L_lambda_opt_stack_shrink_loop_000f
  4620                                  .L_lambda_opt_stack_shrink_loop_exit_000f:
  4621 000037B7 4883C308                	add rbx, 8
  4622 000037BB 4889DC                  	mov rsp, rbx
  4623                                  .L_lambda_opt_stack_adjusted_0005:
  4624 000037BE C8000000                	enter 0, 0
  4625 000037C2 48B8-                   	mov rax, L_constants + 23
  4625 000037C4 [1700000000000000] 
  4626 000037CC 50                      	push rax
  4627 000037CD 6A01                    	push 1
  4628 000037CF BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  4629 000037D4 E8B8C50000              	call malloc
  4630 000037D9 50                      	push rax
  4631 000037DA BF10000000              	mov rdi, 8 * 2	; new rib
  4632 000037DF E8ADC50000              	call malloc
  4633 000037E4 50                      	push rax
  4634 000037E5 BF10000000              	mov rdi, 8 * 2	; extended env
  4635 000037EA E8A2C50000              	call malloc
  4636 000037EF 488B7D10                	mov rdi, ENV
  4637 000037F3 BE00000000              	mov rsi, 0
  4638 000037F8 BA01000000              	mov rdx, 1
  4639                                  .L_lambda_simple_env_loop_0026:	; ext_env[i + 1] <-- env[i]
  4640 000037FD 4883FE01                	cmp rsi, 1
  4641 00003801 7410                    	je .L_lambda_simple_env_end_0026
  4642 00003803 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  4643 00003807 48890CD0                	mov qword [rax + 8 * rdx], rcx
  4644 0000380B 48FFC6                  	inc rsi
  4645 0000380E 48FFC2                  	inc rdx
  4646 00003811 EBEA                    	jmp .L_lambda_simple_env_loop_0026
  4647                                  .L_lambda_simple_env_end_0026:
  4648 00003813 5B                      	pop rbx
  4649 00003814 BE00000000              	mov rsi, 0
  4650                                  .L_lambda_simple_params_loop_0026:	; copy params
  4651 00003819 4883FE02                	cmp rsi, 2
  4652 0000381D 740E                    	je .L_lambda_simple_params_end_0026
  4653 0000381F 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  4654 00003824 488914F3                	mov qword [rbx + 8 * rsi], rdx
  4655 00003828 48FFC6                  	inc rsi
  4656 0000382B EBEC                    	jmp .L_lambda_simple_params_loop_0026
  4657                                  .L_lambda_simple_params_end_0026:
  4658 0000382D 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  4659 00003830 4889C3                  	mov rbx, rax
  4660 00003833 58                      	pop rax
  4661 00003834 C60005                  	mov byte [rax], T_closure
  4662 00003837 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  4663 0000383B 48C74009[48380000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0026
  4664 00003843 E95D020000              	jmp .L_lambda_simple_end_0026
  4665                                  .L_lambda_simple_code_0026:	; lambda-simple body
  4666 00003848 48837C241001            	cmp qword [rsp + 8 * 2], 1
  4667 0000384E 740B                    	je .L_lambda_simple_arity_check_ok_0026
  4668 00003850 FF742410                	push qword [rsp + 8 * 2]
  4669 00003854 6A01                    	push 1
  4670 00003856 E9EFC40000              	jmp L_error_incorrect_arity_simple
  4671                                  .L_lambda_simple_arity_check_ok_0026:
  4672 0000385B C8000000                	enter 0, 0
  4673 0000385F 488B4520                	mov rax, qword [rbp + 8 * (4 + 0)]
  4674 00003863 4889C2                  	mov rdx, rax
  4675 00003866 BF08000000              	mov rdi, 8
  4676 0000386B E821C50000              	call malloc
  4677 00003870 488910                  	mov qword[rax], rdx
  4678 00003873 48894520                	mov qword [rbp + 8 * (4 + 0)], rax
  4679 00003877 48B8-                   	mov rax, sob_void
  4679 00003879 [0000000000000000] 
  4680                                  
  4681 00003881 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  4682 00003886 E806C50000              	call malloc
  4683 0000388B 50                      	push rax
  4684 0000388C BF08000000              	mov rdi, 8 * 1	; new rib
  4685 00003891 E8FBC40000              	call malloc
  4686 00003896 50                      	push rax
  4687 00003897 BF18000000              	mov rdi, 8 * 3	; extended env
  4688 0000389C E8F0C40000              	call malloc
  4689 000038A1 488B7D10                	mov rdi, ENV
  4690 000038A5 BE00000000              	mov rsi, 0
  4691 000038AA BA01000000              	mov rdx, 1
  4692                                  .L_lambda_simple_env_loop_0027:	; ext_env[i + 1] <-- env[i]
  4693 000038AF 4883FE02                	cmp rsi, 2
  4694 000038B3 7410                    	je .L_lambda_simple_env_end_0027
  4695 000038B5 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  4696 000038B9 48890CD0                	mov qword [rax + 8 * rdx], rcx
  4697 000038BD 48FFC6                  	inc rsi
  4698 000038C0 48FFC2                  	inc rdx
  4699 000038C3 EBEA                    	jmp .L_lambda_simple_env_loop_0027
  4700                                  .L_lambda_simple_env_end_0027:
  4701 000038C5 5B                      	pop rbx
  4702 000038C6 BE00000000              	mov rsi, 0
  4703                                  .L_lambda_simple_params_loop_0027:	; copy params
  4704 000038CB 4883FE01                	cmp rsi, 1
  4705 000038CF 740E                    	je .L_lambda_simple_params_end_0027
  4706 000038D1 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  4707 000038D6 488914F3                	mov qword [rbx + 8 * rsi], rdx
  4708 000038DA 48FFC6                  	inc rsi
  4709 000038DD EBEC                    	jmp .L_lambda_simple_params_loop_0027
  4710                                  .L_lambda_simple_params_end_0027:
  4711 000038DF 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  4712 000038E2 4889C3                  	mov rbx, rax
  4713 000038E5 58                      	pop rax
  4714 000038E6 C60005                  	mov byte [rax], T_closure
  4715 000038E9 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  4716 000038ED 48C74009[FA380000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0027
  4717 000038F5 E93E010000              	jmp .L_lambda_simple_end_0027
  4718                                  .L_lambda_simple_code_0027:	; lambda-simple body
  4719 000038FA 48837C241001            	cmp qword [rsp + 8 * 2], 1
  4720 00003900 740B                    	je .L_lambda_simple_arity_check_ok_0027
  4721 00003902 FF742410                	push qword [rsp + 8 * 2]
  4722 00003906 6A01                    	push 1
  4723 00003908 E93DC40000              	jmp L_error_incorrect_arity_simple
  4724                                  .L_lambda_simple_arity_check_ok_0027:
  4725 0000390D C8000000                	enter 0, 0
  4726 00003911 488B4520                	mov rax, qword [rbp + 8 * (4 + 0)]
  4727 00003915 50                      	push rax
  4728 00003916 6A01                    	push 1
  4729 00003918 488B0425[80000000]      	mov rax, qword [free_var_16]
  4730                                  	assert_closure(rax)
    42 00003920 803805              <1>  cmp byte [%1], %2
    43 00003923 0F8561DC0000        <1>  jne L_error_incorrect_type
  4731 00003929 FF7001                  	push SOB_CLOSURE_ENV(rax)
  4732 0000392C FF5009                  	call SOB_CLOSURE_CODE(rax)
  4733 0000392F 50                      	push rax
  4734 00003930 6A01                    	push 1
  4735 00003932 488B0425[00000000]      	mov rax, qword [free_var_0]
  4736                                  	assert_closure(rax)
    42 0000393A 803805              <1>  cmp byte [%1], %2
    43 0000393D 0F8547DC0000        <1>  jne L_error_incorrect_type
  4737 00003943 FF7001                  	push SOB_CLOSURE_ENV(rax)
  4738 00003946 FF5009                  	call SOB_CLOSURE_CODE(rax)
  4739 00003949 483D[02000000]          	cmp rax, sob_boolean_false
  4740 0000394F 0F85DF000000            	jne .L_or_end_0003
  4741 00003955 488B4520                	mov rax, qword [rbp + 8 * (4 + 0)]
  4742 00003959 50                      	push rax
  4743 0000395A 488B0425[80000000]      	mov rax, qword [free_var_16]
  4744 00003962 50                      	push rax
  4745 00003963 6A02                    	push 2
  4746 00003965 488B0425[D8020000]      	mov rax, qword [free_var_91]
  4747                                  	assert_closure(rax)
    42 0000396D 803805              <1>  cmp byte [%1], %2
    43 00003970 0F8514DC0000        <1>  jne L_error_incorrect_type
  4748 00003976 FF7001                  	push SOB_CLOSURE_ENV(rax)
  4749 00003979 FF5009                  	call SOB_CLOSURE_CODE(rax)
  4750 0000397C 50                      	push rax
  4751 0000397D 488B4510                	mov rax, qword [rbp + 8 * 2]
  4752 00003981 488B4008                	mov rax, qword [rax + 8 * 1]
  4753 00003985 488B00                  	mov rax, qword [rax + 8 * 0]
  4754 00003988 50                      	push rax
  4755 00003989 6A02                    	push 2
  4756 0000398B 488B0425[C8020000]      	mov rax, qword [free_var_89]
  4757                                  	assert_closure(rax)
    42 00003993 803805              <1>  cmp byte [%1], %2
    43 00003996 0F85EEDB0000        <1>  jne L_error_incorrect_type
  4758 0000399C FF7001                  	push SOB_CLOSURE_ENV(rax)
  4759 0000399F FF5009                  	call SOB_CLOSURE_CODE(rax)
  4760 000039A2 483D[02000000]          	cmp rax, sob_boolean_false
  4761 000039A8 0F847C000000                      	je .L_if_else_0007
  4762 000039AE 488B4520                          	mov rax, qword [rbp + 8 * (4 + 0)]
  4763 000039B2 50                      	push rax
  4764 000039B3 488B0425[88000000]      	mov rax, qword [free_var_17]
  4765 000039BB 50                      	push rax
  4766 000039BC 6A02                    	push 2
  4767 000039BE 488B0425[D8020000]      	mov rax, qword [free_var_91]
  4768                                  	assert_closure(rax)
    42 000039C6 803805              <1>  cmp byte [%1], %2
    43 000039C9 0F85BBDB0000        <1>  jne L_error_incorrect_type
  4769 000039CF FF7001                  	push SOB_CLOSURE_ENV(rax)
  4770 000039D2 FF5009                  	call SOB_CLOSURE_CODE(rax)
  4771 000039D5 50                      	push rax
  4772 000039D6 6A01                    	push 1
  4773 000039D8 488B4510                	mov rax, qword [rbp + 8 * 2]
  4774 000039DC 488B00                  	mov rax, qword [rax + 8 * 0]
  4775 000039DF 488B00                  	mov rax, qword [rax + 8 * 0]
  4776 000039E2 488B00                  	mov rax, qword [rax]
  4777                                  	assert_closure(rax)
    42 000039E5 803805              <1>  cmp byte [%1], %2
    43 000039E8 0F859CDB0000        <1>  jne L_error_incorrect_type
  4778 000039EE FF7001                  	push SOB_CLOSURE_ENV(rax)
  4779 000039F1 FF7508                  	push qword [rbp + 8 * 1] ; old ret addr
  4780 000039F4 FF7500                  	push qword [rbp] ; same the old rbp
  4781 000039F7 BA04000000              	mov rdx, 1 + 3
  4782 000039FC 488B4D18                	mov rcx, COUNT
  4783 00003A00 488D4CCD20              	lea rcx, [rbp + 8*4 + rcx * 8]
  4784 00003A05 4889EF                  	mov rdi, rbp
  4785                                  .L_tc_recycle_frame_loop_0027:
  4786 00003A08 4883FA00                	cmp rdx, 0
  4787 00003A0C 7413                    	je .L_tc_recycle_frame_done_0027
  4788 00003A0E 4883E908                	sub rcx, 8
  4789 00003A12 4883EF08                	sub rdi, 8
  4790 00003A16 488B37                  	mov rsi, [rdi]
  4791 00003A19 488931                  	mov qword [rcx], rsi
  4792 00003A1C 48FFCA                  	dec rdx
  4793 00003A1F EBE7                    	jmp .L_tc_recycle_frame_loop_0027
  4794                                  .L_tc_recycle_frame_done_0027:
  4795 00003A21 5D                      	pop rbp ; restore the old rbp
  4796 00003A22 4889CC                  	mov rsp, rcx
  4797 00003A25 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
  4798 00003A28 EB0A                    	jmp .L_if_end_0007
  4799                                            .L_if_else_0007:
  4800 00003A2A 48B8-                             	mov rax, L_constants + 2
  4800 00003A2C [0200000000000000] 
  4801                                  .L_if_end_0007:
  4802                                  .L_or_end_0003:
  4803 00003A34 C9                      	leave
  4804 00003A35 C21800                  	ret 8 * (2 + 1)
  4805                                  .L_lambda_simple_end_0027:	; new closure is in rax
  4806 00003A38 50                      	push rax
  4807 00003A39 488B4520                	mov rax, qword [rbp + 8 * (4 + 0)]
  4808 00003A3D 8F00                    	pop qword [rax]
  4809 00003A3F 48B8-                   	mov rax, sob_void
  4809 00003A41 [0000000000000000] 
  4810                                  
  4811 00003A49 488B4510                	mov rax, qword [rbp + 8 * 2]
  4812 00003A4D 488B00                  	mov rax, qword [rax + 8 * 0]
  4813 00003A50 488B4008                	mov rax, qword [rax + 8 * 1]
  4814 00003A54 50                      	push rax
  4815 00003A55 6A01                    	push 1
  4816 00003A57 488B4520                	mov rax, qword [rbp + 8 * (4 + 0)]
  4817 00003A5B 488B00                  	mov rax, qword [rax]
  4818                                  	assert_closure(rax)
    42 00003A5E 803805              <1>  cmp byte [%1], %2
    43 00003A61 0F8523DB0000        <1>  jne L_error_incorrect_type
  4819 00003A67 FF7001                  	push SOB_CLOSURE_ENV(rax)
  4820 00003A6A FF7508                  	push qword [rbp + 8 * 1] ; old ret addr
  4821 00003A6D FF7500                  	push qword [rbp] ; same the old rbp
  4822 00003A70 BA04000000              	mov rdx, 1 + 3
  4823 00003A75 488B4D18                	mov rcx, COUNT
  4824 00003A79 488D4CCD20              	lea rcx, [rbp + 8*4 + rcx * 8]
  4825 00003A7E 4889EF                  	mov rdi, rbp
  4826                                  .L_tc_recycle_frame_loop_0028:
  4827 00003A81 4883FA00                	cmp rdx, 0
  4828 00003A85 7413                    	je .L_tc_recycle_frame_done_0028
  4829 00003A87 4883E908                	sub rcx, 8
  4830 00003A8B 4883EF08                	sub rdi, 8
  4831 00003A8F 488B37                  	mov rsi, [rdi]
  4832 00003A92 488931                  	mov qword [rcx], rsi
  4833 00003A95 48FFCA                  	dec rdx
  4834 00003A98 EBE7                    	jmp .L_tc_recycle_frame_loop_0028
  4835                                  .L_tc_recycle_frame_done_0028:
  4836 00003A9A 5D                      	pop rbp ; restore the old rbp
  4837 00003A9B 4889CC                  	mov rsp, rcx
  4838 00003A9E FF6009                  	jmp SOB_CLOSURE_CODE(rax)
  4839 00003AA1 C9                      	leave
  4840 00003AA2 C21800                  	ret 8 * (2 + 1)
  4841                                  .L_lambda_simple_end_0026:	; new closure is in rax
  4842                                  	assert_closure(rax)
    42 00003AA5 803805              <1>  cmp byte [%1], %2
    43 00003AA8 0F85DCDA0000        <1>  jne L_error_incorrect_type
  4843 00003AAE FF7001                  	push SOB_CLOSURE_ENV(rax)
  4844 00003AB1 FF7508                  	push qword [rbp + 8 * 1] ; old ret addr
  4845 00003AB4 FF7500                  	push qword [rbp] ; same the old rbp
  4846 00003AB7 BA04000000              	mov rdx, 1 + 3
  4847 00003ABC 488B4D18                	mov rcx, COUNT
  4848 00003AC0 488D4CCD20              	lea rcx, [rbp + 8*4 + rcx * 8]
  4849 00003AC5 4889EF                  	mov rdi, rbp
  4850                                  .L_tc_recycle_frame_loop_0026:
  4851 00003AC8 4883FA00                	cmp rdx, 0
  4852 00003ACC 7413                    	je .L_tc_recycle_frame_done_0026
  4853 00003ACE 4883E908                	sub rcx, 8
  4854 00003AD2 4883EF08                	sub rdi, 8
  4855 00003AD6 488B37                  	mov rsi, [rdi]
  4856 00003AD9 488931                  	mov qword [rcx], rsi
  4857 00003ADC 48FFCA                  	dec rdx
  4858 00003ADF EBE7                    	jmp .L_tc_recycle_frame_loop_0026
  4859                                  .L_tc_recycle_frame_done_0026:
  4860 00003AE1 5D                      	pop rbp ; restore the old rbp
  4861 00003AE2 4889CC                  	mov rsp, rcx
  4862 00003AE5 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
  4863 00003AE8 C9                      	leave
  4864 00003AE9 C22000                  	ret 8 * (2 + 2)
  4865                                  .L_lambda_opt_end_0005:	; new closure is in rax
  4866 00003AEC 48890425[E0020000]      	mov qword [free_var_92], rax
  4867 00003AF4 48B8-                   	mov rax, sob_void
  4867 00003AF6 [0000000000000000] 
  4868                                  
  4869 00003AFE 4889C7                  	mov rdi, rax
  4870 00003B01 E89CC20000              	call print_sexpr_if_not_void
  4871                                  
  4872 00003B06 48B8-                   	mov rax, L_constants + 23
  4872 00003B08 [1700000000000000] 
  4873 00003B10 50                      	push rax
  4874 00003B11 48B8-                   	mov rax, L_constants + 23
  4874 00003B13 [1700000000000000] 
  4875 00003B1B 50                      	push rax
  4876 00003B1C 6A02                    	push 2
  4877 00003B1E BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  4878 00003B23 E869C20000              	call malloc
  4879 00003B28 50                      	push rax
  4880 00003B29 BF00000000              	mov rdi, 8 * 0	; new rib
  4881 00003B2E E85EC20000              	call malloc
  4882 00003B33 50                      	push rax
  4883 00003B34 BF08000000              	mov rdi, 8 * 1	; extended env
  4884 00003B39 E853C20000              	call malloc
  4885 00003B3E 488B7D10                	mov rdi, ENV
  4886 00003B42 BE00000000              	mov rsi, 0
  4887 00003B47 BA01000000              	mov rdx, 1
  4888                                  .L_lambda_simple_env_loop_0028:	; ext_env[i + 1] <-- env[i]
  4889 00003B4C 4883FE00                	cmp rsi, 0
  4890 00003B50 7410                    	je .L_lambda_simple_env_end_0028
  4891 00003B52 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  4892 00003B56 48890CD0                	mov qword [rax + 8 * rdx], rcx
  4893 00003B5A 48FFC6                  	inc rsi
  4894 00003B5D 48FFC2                  	inc rdx
  4895 00003B60 EBEA                    	jmp .L_lambda_simple_env_loop_0028
  4896                                  .L_lambda_simple_env_end_0028:
  4897 00003B62 5B                      	pop rbx
  4898 00003B63 BE00000000              	mov rsi, 0
  4899                                  .L_lambda_simple_params_loop_0028:	; copy params
  4900 00003B68 4883FE00                	cmp rsi, 0
  4901 00003B6C 740E                    	je .L_lambda_simple_params_end_0028
  4902 00003B6E 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  4903 00003B73 488914F3                	mov qword [rbx + 8 * rsi], rdx
  4904 00003B77 48FFC6                  	inc rsi
  4905 00003B7A EBEC                    	jmp .L_lambda_simple_params_loop_0028
  4906                                  .L_lambda_simple_params_end_0028:
  4907 00003B7C 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  4908 00003B7F 4889C3                  	mov rbx, rax
  4909 00003B82 58                      	pop rax
  4910 00003B83 C60005                  	mov byte [rax], T_closure
  4911 00003B86 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  4912 00003B8A 48C74009[973B0000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0028
  4913 00003B92 E9BF050000              	jmp .L_lambda_simple_end_0028
  4914                                  .L_lambda_simple_code_0028:	; lambda-simple body
  4915 00003B97 48837C241002            	cmp qword [rsp + 8 * 2], 2
  4916 00003B9D 740B                    	je .L_lambda_simple_arity_check_ok_0028
  4917 00003B9F FF742410                	push qword [rsp + 8 * 2]
  4918 00003BA3 6A02                    	push 2
  4919 00003BA5 E9A0C10000              	jmp L_error_incorrect_arity_simple
  4920                                  .L_lambda_simple_arity_check_ok_0028:
  4921 00003BAA C8000000                	enter 0, 0
  4922 00003BAE 488B4520                	mov rax, qword [rbp + 8 * (4 + 0)]
  4923 00003BB2 4889C2                  	mov rdx, rax
  4924 00003BB5 BF08000000              	mov rdi, 8
  4925 00003BBA E8D2C10000              	call malloc
  4926 00003BBF 488910                  	mov qword[rax], rdx
  4927 00003BC2 48894520                	mov qword [rbp + 8 * (4 + 0)], rax
  4928 00003BC6 48B8-                   	mov rax, sob_void
  4928 00003BC8 [0000000000000000] 
  4929                                  
  4930 00003BD0 488B4528                	mov rax, qword [rbp + 8 * (4 + 1)]
  4931 00003BD4 4889C2                  	mov rdx, rax
  4932 00003BD7 BF08000000              	mov rdi, 8
  4933 00003BDC E8B0C10000              	call malloc
  4934 00003BE1 488910                  	mov qword[rax], rdx
  4935 00003BE4 48894528                	mov qword [rbp + 8 * (4 + 1)], rax
  4936 00003BE8 48B8-                   	mov rax, sob_void
  4936 00003BEA [0000000000000000] 
  4937                                  
  4938 00003BF2 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  4939 00003BF7 E895C10000              	call malloc
  4940 00003BFC 50                      	push rax
  4941 00003BFD BF10000000              	mov rdi, 8 * 2	; new rib
  4942 00003C02 E88AC10000              	call malloc
  4943 00003C07 50                      	push rax
  4944 00003C08 BF10000000              	mov rdi, 8 * 2	; extended env
  4945 00003C0D E87FC10000              	call malloc
  4946 00003C12 488B7D10                	mov rdi, ENV
  4947 00003C16 BE00000000              	mov rsi, 0
  4948 00003C1B BA01000000              	mov rdx, 1
  4949                                  .L_lambda_simple_env_loop_0029:	; ext_env[i + 1] <-- env[i]
  4950 00003C20 4883FE01                	cmp rsi, 1
  4951 00003C24 7410                    	je .L_lambda_simple_env_end_0029
  4952 00003C26 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  4953 00003C2A 48890CD0                	mov qword [rax + 8 * rdx], rcx
  4954 00003C2E 48FFC6                  	inc rsi
  4955 00003C31 48FFC2                  	inc rdx
  4956 00003C34 EBEA                    	jmp .L_lambda_simple_env_loop_0029
  4957                                  .L_lambda_simple_env_end_0029:
  4958 00003C36 5B                      	pop rbx
  4959 00003C37 BE00000000              	mov rsi, 0
  4960                                  .L_lambda_simple_params_loop_0029:	; copy params
  4961 00003C3C 4883FE02                	cmp rsi, 2
  4962 00003C40 740E                    	je .L_lambda_simple_params_end_0029
  4963 00003C42 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  4964 00003C47 488914F3                	mov qword [rbx + 8 * rsi], rdx
  4965 00003C4B 48FFC6                  	inc rsi
  4966 00003C4E EBEC                    	jmp .L_lambda_simple_params_loop_0029
  4967                                  .L_lambda_simple_params_end_0029:
  4968 00003C50 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  4969 00003C53 4889C3                  	mov rbx, rax
  4970 00003C56 58                      	pop rax
  4971 00003C57 C60005                  	mov byte [rax], T_closure
  4972 00003C5A 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  4973 00003C5E 48C74009[6B3C0000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0029
  4974 00003C66 E915010000              	jmp .L_lambda_simple_end_0029
  4975                                  .L_lambda_simple_code_0029:	; lambda-simple body
  4976 00003C6B 48837C241002            	cmp qword [rsp + 8 * 2], 2
  4977 00003C71 740B                    	je .L_lambda_simple_arity_check_ok_0029
  4978 00003C73 FF742410                	push qword [rsp + 8 * 2]
  4979 00003C77 6A02                    	push 2
  4980 00003C79 E9CCC00000              	jmp L_error_incorrect_arity_simple
  4981                                  .L_lambda_simple_arity_check_ok_0029:
  4982 00003C7E C8000000                	enter 0, 0
  4983 00003C82 488B4528                	mov rax, qword [rbp + 8 * (4 + 1)]
  4984 00003C86 50                      	push rax
  4985 00003C87 6A01                    	push 1
  4986 00003C89 488B0425[00000000]      	mov rax, qword [free_var_0]
  4987                                  	assert_closure(rax)
    42 00003C91 803805              <1>  cmp byte [%1], %2
    43 00003C94 0F85F0D80000        <1>  jne L_error_incorrect_type
  4988 00003C9A FF7001                  	push SOB_CLOSURE_ENV(rax)
  4989 00003C9D FF5009                  	call SOB_CLOSURE_CODE(rax)
  4990 00003CA0 483D[02000000]          	cmp rax, sob_boolean_false
  4991 00003CA6 740F                              	je .L_if_else_0008
  4992 00003CA8 48B8-                             	mov rax, L_constants + 1
  4992 00003CAA [0100000000000000] 
  4993 00003CB2 E9C5000000              	jmp .L_if_end_0008
  4994                                            .L_if_else_0008:
  4995 00003CB7 488B4528                          	mov rax, qword [rbp + 8 * (4 + 1)]
  4996 00003CBB 50                      	push rax
  4997 00003CBC 6A01                    	push 1
  4998 00003CBE 488B0425[88000000]      	mov rax, qword [free_var_17]
  4999                                  	assert_closure(rax)
    42 00003CC6 803805              <1>  cmp byte [%1], %2
    43 00003CC9 0F85BBD80000        <1>  jne L_error_incorrect_type
  5000 00003CCF FF7001                  	push SOB_CLOSURE_ENV(rax)
  5001 00003CD2 FF5009                  	call SOB_CLOSURE_CODE(rax)
  5002 00003CD5 50                      	push rax
  5003 00003CD6 488B4520                	mov rax, qword [rbp + 8 * (4 + 0)]
  5004 00003CDA 50                      	push rax
  5005 00003CDB 6A02                    	push 2
  5006 00003CDD 488B4510                	mov rax, qword [rbp + 8 * 2]
  5007 00003CE1 488B00                  	mov rax, qword [rax + 8 * 0]
  5008 00003CE4 488B00                  	mov rax, qword [rax + 8 * 0]
  5009 00003CE7 488B00                  	mov rax, qword [rax]
  5010                                  	assert_closure(rax)
    42 00003CEA 803805              <1>  cmp byte [%1], %2
    43 00003CED 0F8597D80000        <1>  jne L_error_incorrect_type
  5011 00003CF3 FF7001                  	push SOB_CLOSURE_ENV(rax)
  5012 00003CF6 FF5009                  	call SOB_CLOSURE_CODE(rax)
  5013 00003CF9 50                      	push rax
  5014 00003CFA 488B4528                	mov rax, qword [rbp + 8 * (4 + 1)]
  5015 00003CFE 50                      	push rax
  5016 00003CFF 6A01                    	push 1
  5017 00003D01 488B0425[80000000]      	mov rax, qword [free_var_16]
  5018                                  	assert_closure(rax)
    42 00003D09 803805              <1>  cmp byte [%1], %2
    43 00003D0C 0F8578D80000        <1>  jne L_error_incorrect_type
  5019 00003D12 FF7001                  	push SOB_CLOSURE_ENV(rax)
  5020 00003D15 FF5009                  	call SOB_CLOSURE_CODE(rax)
  5021 00003D18 50                      	push rax
  5022 00003D19 6A01                    	push 1
  5023 00003D1B 488B4520                	mov rax, qword [rbp + 8 * (4 + 0)]
  5024                                  	assert_closure(rax)
    42 00003D1F 803805              <1>  cmp byte [%1], %2
    43 00003D22 0F8562D80000        <1>  jne L_error_incorrect_type
  5025 00003D28 FF7001                  	push SOB_CLOSURE_ENV(rax)
  5026 00003D2B FF5009                  	call SOB_CLOSURE_CODE(rax)
  5027 00003D2E 50                      	push rax
  5028 00003D2F 6A02                    	push 2
  5029 00003D31 488B0425[68000000]      	mov rax, qword [free_var_13]
  5030                                  	assert_closure(rax)
    42 00003D39 803805              <1>  cmp byte [%1], %2
    43 00003D3C 0F8548D80000        <1>  jne L_error_incorrect_type
  5031 00003D42 FF7001                  	push SOB_CLOSURE_ENV(rax)
  5032 00003D45 FF7508                  	push qword [rbp + 8 * 1] ; old ret addr
  5033 00003D48 FF7500                  	push qword [rbp] ; same the old rbp
  5034 00003D4B BA05000000              	mov rdx, 2 + 3
  5035 00003D50 488B4D18                	mov rcx, COUNT
  5036 00003D54 488D4CCD20              	lea rcx, [rbp + 8*4 + rcx * 8]
  5037 00003D59 4889EF                  	mov rdi, rbp
  5038                                  .L_tc_recycle_frame_loop_0029:
  5039 00003D5C 4883FA00                	cmp rdx, 0
  5040 00003D60 7413                    	je .L_tc_recycle_frame_done_0029
  5041 00003D62 4883E908                	sub rcx, 8
  5042 00003D66 4883EF08                	sub rdi, 8
  5043 00003D6A 488B37                  	mov rsi, [rdi]
  5044 00003D6D 488931                  	mov qword [rcx], rsi
  5045 00003D70 48FFCA                  	dec rdx
  5046 00003D73 EBE7                    	jmp .L_tc_recycle_frame_loop_0029
  5047                                  .L_tc_recycle_frame_done_0029:
  5048 00003D75 5D                      	pop rbp ; restore the old rbp
  5049 00003D76 4889CC                  	mov rsp, rcx
  5050 00003D79 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
  5051                                  .L_if_end_0008:
  5052 00003D7C C9                      	leave
  5053 00003D7D C22000                  	ret 8 * (2 + 2)
  5054                                  .L_lambda_simple_end_0029:	; new closure is in rax
  5055 00003D80 50                      	push rax
  5056 00003D81 488B4520                	mov rax, qword [rbp + 8 * (4 + 0)]
  5057 00003D85 8F00                    	pop qword [rax]
  5058 00003D87 48B8-                   	mov rax, sob_void
  5058 00003D89 [0000000000000000] 
  5059                                  
  5060 00003D91 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  5061 00003D96 E8F6BF0000              	call malloc
  5062 00003D9B 50                      	push rax
  5063 00003D9C BF10000000              	mov rdi, 8 * 2	; new rib
  5064 00003DA1 E8EBBF0000              	call malloc
  5065 00003DA6 50                      	push rax
  5066 00003DA7 BF10000000              	mov rdi, 8 * 2	; extended env
  5067 00003DAC E8E0BF0000              	call malloc
  5068 00003DB1 488B7D10                	mov rdi, ENV
  5069 00003DB5 BE00000000              	mov rsi, 0
  5070 00003DBA BA01000000              	mov rdx, 1
  5071                                  .L_lambda_simple_env_loop_002a:	; ext_env[i + 1] <-- env[i]
  5072 00003DBF 4883FE01                	cmp rsi, 1
  5073 00003DC3 7410                    	je .L_lambda_simple_env_end_002a
  5074 00003DC5 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  5075 00003DC9 48890CD0                	mov qword [rax + 8 * rdx], rcx
  5076 00003DCD 48FFC6                  	inc rsi
  5077 00003DD0 48FFC2                  	inc rdx
  5078 00003DD3 EBEA                    	jmp .L_lambda_simple_env_loop_002a
  5079                                  .L_lambda_simple_env_end_002a:
  5080 00003DD5 5B                      	pop rbx
  5081 00003DD6 BE00000000              	mov rsi, 0
  5082                                  .L_lambda_simple_params_loop_002a:	; copy params
  5083 00003DDB 4883FE02                	cmp rsi, 2
  5084 00003DDF 740E                    	je .L_lambda_simple_params_end_002a
  5085 00003DE1 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  5086 00003DE6 488914F3                	mov qword [rbx + 8 * rsi], rdx
  5087 00003DEA 48FFC6                  	inc rsi
  5088 00003DED EBEC                    	jmp .L_lambda_simple_params_loop_002a
  5089                                  .L_lambda_simple_params_end_002a:
  5090 00003DEF 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  5091 00003DF2 4889C3                  	mov rbx, rax
  5092 00003DF5 58                      	pop rax
  5093 00003DF6 C60005                  	mov byte [rax], T_closure
  5094 00003DF9 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  5095 00003DFD 48C74009[0A3E0000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_002a
  5096 00003E05 E955010000              	jmp .L_lambda_simple_end_002a
  5097                                  .L_lambda_simple_code_002a:	; lambda-simple body
  5098 00003E0A 48837C241002            	cmp qword [rsp + 8 * 2], 2
  5099 00003E10 740B                    	je .L_lambda_simple_arity_check_ok_002a
  5100 00003E12 FF742410                	push qword [rsp + 8 * 2]
  5101 00003E16 6A02                    	push 2
  5102 00003E18 E92DBF0000              	jmp L_error_incorrect_arity_simple
  5103                                  .L_lambda_simple_arity_check_ok_002a:
  5104 00003E1D C8000000                	enter 0, 0
  5105 00003E21 488B4528                	mov rax, qword [rbp + 8 * (4 + 1)]
  5106 00003E25 50                      	push rax
  5107 00003E26 6A01                    	push 1
  5108 00003E28 488B0425[80000000]      	mov rax, qword [free_var_16]
  5109                                  	assert_closure(rax)
    42 00003E30 803805              <1>  cmp byte [%1], %2
    43 00003E33 0F8551D70000        <1>  jne L_error_incorrect_type
  5110 00003E39 FF7001                  	push SOB_CLOSURE_ENV(rax)
  5111 00003E3C FF5009                  	call SOB_CLOSURE_CODE(rax)
  5112 00003E3F 50                      	push rax
  5113 00003E40 6A01                    	push 1
  5114 00003E42 488B0425[00000000]      	mov rax, qword [free_var_0]
  5115                                  	assert_closure(rax)
    42 00003E4A 803805              <1>  cmp byte [%1], %2
    43 00003E4D 0F8537D70000        <1>  jne L_error_incorrect_type
  5116 00003E53 FF7001                  	push SOB_CLOSURE_ENV(rax)
  5117 00003E56 FF5009                  	call SOB_CLOSURE_CODE(rax)
  5118 00003E59 483D[02000000]          	cmp rax, sob_boolean_false
  5119 00003E5F 740F                              	je .L_if_else_0009
  5120 00003E61 48B8-                             	mov rax, L_constants + 1
  5120 00003E63 [0100000000000000] 
  5121 00003E6B E9EB000000              	jmp .L_if_end_0009
  5122                                            .L_if_else_0009:
  5123 00003E70 488B4528                          	mov rax, qword [rbp + 8 * (4 + 1)]
  5124 00003E74 50                      	push rax
  5125 00003E75 488B0425[88000000]      	mov rax, qword [free_var_17]
  5126 00003E7D 50                      	push rax
  5127 00003E7E 6A02                    	push 2
  5128 00003E80 488B4510                	mov rax, qword [rbp + 8 * 2]
  5129 00003E84 488B00                  	mov rax, qword [rax + 8 * 0]
  5130 00003E87 488B00                  	mov rax, qword [rax + 8 * 0]
  5131 00003E8A 488B00                  	mov rax, qword [rax]
  5132                                  	assert_closure(rax)
    42 00003E8D 803805              <1>  cmp byte [%1], %2
    43 00003E90 0F85F4D60000        <1>  jne L_error_incorrect_type
  5133 00003E96 FF7001                  	push SOB_CLOSURE_ENV(rax)
  5134 00003E99 FF5009                  	call SOB_CLOSURE_CODE(rax)
  5135 00003E9C 50                      	push rax
  5136 00003E9D 488B4520                	mov rax, qword [rbp + 8 * (4 + 0)]
  5137 00003EA1 50                      	push rax
  5138 00003EA2 6A02                    	push 2
  5139 00003EA4 488B4510                	mov rax, qword [rbp + 8 * 2]
  5140 00003EA8 488B00                  	mov rax, qword [rax + 8 * 0]
  5141 00003EAB 488B4008                	mov rax, qword [rax + 8 * 1]
  5142 00003EAF 488B00                  	mov rax, qword [rax]
  5143                                  	assert_closure(rax)
    42 00003EB2 803805              <1>  cmp byte [%1], %2
    43 00003EB5 0F85CFD60000        <1>  jne L_error_incorrect_type
  5144 00003EBB FF7001                  	push SOB_CLOSURE_ENV(rax)
  5145 00003EBE FF5009                  	call SOB_CLOSURE_CODE(rax)
  5146 00003EC1 50                      	push rax
  5147 00003EC2 488B4528                	mov rax, qword [rbp + 8 * (4 + 1)]
  5148 00003EC6 50                      	push rax
  5149 00003EC7 488B0425[80000000]      	mov rax, qword [free_var_16]
  5150 00003ECF 50                      	push rax
  5151 00003ED0 6A02                    	push 2
  5152 00003ED2 488B4510                	mov rax, qword [rbp + 8 * 2]
  5153 00003ED6 488B00                  	mov rax, qword [rax + 8 * 0]
  5154 00003ED9 488B00                  	mov rax, qword [rax + 8 * 0]
  5155 00003EDC 488B00                  	mov rax, qword [rax]
  5156                                  	assert_closure(rax)
    42 00003EDF 803805              <1>  cmp byte [%1], %2
    43 00003EE2 0F85A2D60000        <1>  jne L_error_incorrect_type
  5157 00003EE8 FF7001                  	push SOB_CLOSURE_ENV(rax)
  5158 00003EEB FF5009                  	call SOB_CLOSURE_CODE(rax)
  5159 00003EEE 50                      	push rax
  5160 00003EEF 488B4520                	mov rax, qword [rbp + 8 * (4 + 0)]
  5161 00003EF3 50                      	push rax
  5162 00003EF4 6A02                    	push 2
  5163 00003EF6 488B0425[C8020000]      	mov rax, qword [free_var_89]
  5164                                  	assert_closure(rax)
    42 00003EFE 803805              <1>  cmp byte [%1], %2
    43 00003F01 0F8583D60000        <1>  jne L_error_incorrect_type
  5165 00003F07 FF7001                  	push SOB_CLOSURE_ENV(rax)
  5166 00003F0A FF5009                  	call SOB_CLOSURE_CODE(rax)
  5167 00003F0D 50                      	push rax
  5168 00003F0E 6A02                    	push 2
  5169 00003F10 488B0425[68000000]      	mov rax, qword [free_var_13]
  5170                                  	assert_closure(rax)
    42 00003F18 803805              <1>  cmp byte [%1], %2
    43 00003F1B 0F8569D60000        <1>  jne L_error_incorrect_type
  5171 00003F21 FF7001                  	push SOB_CLOSURE_ENV(rax)
  5172 00003F24 FF7508                  	push qword [rbp + 8 * 1] ; old ret addr
  5173 00003F27 FF7500                  	push qword [rbp] ; same the old rbp
  5174 00003F2A BA05000000              	mov rdx, 2 + 3
  5175 00003F2F 488B4D18                	mov rcx, COUNT
  5176 00003F33 488D4CCD20              	lea rcx, [rbp + 8*4 + rcx * 8]
  5177 00003F38 4889EF                  	mov rdi, rbp
  5178                                  .L_tc_recycle_frame_loop_002a:
  5179 00003F3B 4883FA00                	cmp rdx, 0
  5180 00003F3F 7413                    	je .L_tc_recycle_frame_done_002a
  5181 00003F41 4883E908                	sub rcx, 8
  5182 00003F45 4883EF08                	sub rdi, 8
  5183 00003F49 488B37                  	mov rsi, [rdi]
  5184 00003F4C 488931                  	mov qword [rcx], rsi
  5185 00003F4F 48FFCA                  	dec rdx
  5186 00003F52 EBE7                    	jmp .L_tc_recycle_frame_loop_002a
  5187                                  .L_tc_recycle_frame_done_002a:
  5188 00003F54 5D                      	pop rbp ; restore the old rbp
  5189 00003F55 4889CC                  	mov rsp, rcx
  5190 00003F58 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
  5191                                  .L_if_end_0009:
  5192 00003F5B C9                      	leave
  5193 00003F5C C22000                  	ret 8 * (2 + 2)
  5194                                  .L_lambda_simple_end_002a:	; new closure is in rax
  5195 00003F5F 50                      	push rax
  5196 00003F60 488B4528                	mov rax, qword [rbp + 8 * (4 + 1)]
  5197 00003F64 8F00                    	pop qword [rax]
  5198 00003F66 48B8-                   	mov rax, sob_void
  5198 00003F68 [0000000000000000] 
  5199                                  
  5200 00003F70 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  5201 00003F75 E817BE0000              	call malloc
  5202 00003F7A 50                      	push rax
  5203 00003F7B BF10000000              	mov rdi, 8 * 2	; new rib
  5204 00003F80 E80CBE0000              	call malloc
  5205 00003F85 50                      	push rax
  5206 00003F86 BF10000000              	mov rdi, 8 * 2	; extended env
  5207 00003F8B E801BE0000              	call malloc
  5208 00003F90 488B7D10                	mov rdi, ENV
  5209 00003F94 BE00000000              	mov rsi, 0
  5210 00003F99 BA01000000              	mov rdx, 1
  5211                                  .L_lambda_opt_env_loop_0006:	; ext_env[i + 1] <-- env[i]
  5212 00003F9E 4883FE01                	cmp rsi, 1
  5213 00003FA2 7410                    	je .L_lambda_opt_env_end_0006
  5214 00003FA4 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  5215 00003FA8 48890CD0                	mov qword [rax + 8 * rdx], rcx
  5216 00003FAC 48FFC6                  	inc rsi
  5217 00003FAF 48FFC2                  	inc rdx
  5218 00003FB2 EBEA                    	jmp .L_lambda_opt_env_loop_0006
  5219                                  .L_lambda_opt_env_end_0006:
  5220 00003FB4 5B                      	pop rbx
  5221 00003FB5 BE00000000              	mov rsi, 0
  5222                                  .L_lambda_opt_params_loop_0006:	; copy params
  5223 00003FBA 4883FE02                	cmp rsi, 2
  5224 00003FBE 740E                    	je .L_lambda_opt_params_end_0006
  5225 00003FC0 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  5226 00003FC5 488914F3                	mov qword [rbx + 8 * rsi], rdx
  5227 00003FC9 48FFC6                  	inc rsi
  5228 00003FCC EBEC                    	jmp .L_lambda_opt_params_loop_0006
  5229                                  .L_lambda_opt_params_end_0006:
  5230 00003FCE 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  5231 00003FD1 4889C3                  	mov rbx, rax
  5232 00003FD4 58                      	pop rax
  5233 00003FD5 C60005                  	mov byte [rax], T_closure
  5234 00003FD8 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  5235 00003FDC 48C74009[E93F0000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_opt_code_0006
  5236 00003FE4 E969010000              	jmp .L_lambda_opt_end_0006
  5237                                  .L_lambda_opt_code_0006:	; lambda-opt body
  5238 00003FE9 48837C241001            	cmp qword [rsp + 8 * 2], 1
  5239 00003FEF 740D                    	je .L_lambda_opt_arity_check_exact_0006
  5240 00003FF1 7F43                    	jg .L_lambda_opt_arity_check_more_0006
  5241 00003FF3 FF742410                	push qword [rsp + 8 * 2]
  5242 00003FF7 6A01                    	push 1
  5243 00003FF9 E960BD0000              	jmp L_error_incorrect_arity_opt
  5244                                  .L_lambda_opt_arity_check_exact_0006:
  5245 00003FFE 48C744241002000000      	mov qword [rsp + 8 * 2], 2
  5246 00004007 BA04000000              	mov rdx, 4
  5247 0000400C FF3424                  	push qword [rsp]
  5248 0000400F BE01000000              	mov rsi, 1
  5249                                  .L_lambda_opt_stack_shrink_loop_0010:
  5250 00004014 4839D6                  	cmp rsi, rdx
  5251 00004017 7411                    	je .L_lambda_opt_stack_shrink_loop_exit_0010
  5252 00004019 488D5CF408              	lea rbx, [rsp + 8 + rsi * 8]
  5253 0000401E 488B0B                  	mov rcx, [rbx]
  5254 00004021 48894BF8                	mov qword [rbx - 8], rcx
  5255 00004025 48FFC6                  	inc rsi
  5256 00004028 EBEA                    	jmp .L_lambda_opt_stack_shrink_loop_0010
  5257                                  .L_lambda_opt_stack_shrink_loop_exit_0010:
  5258 0000402A 48C703[01000000]        	mov qword [rbx], sob_nil
  5259 00004031 E985000000              	jmp .L_lambda_opt_stack_adjusted_0006
  5260                                  .L_lambda_opt_arity_check_more_0006:
  5261 00004036 488B542410              	mov rdx, qword [rsp + 8 * 2]
  5262 0000403B 4883EA01                	sub rdx, 1
  5263 0000403F 48C744241002000000      	mov qword [rsp + 8 * 2], 2
  5264 00004048 BE00000000              	mov rsi, 0
  5265 0000404D 488D5CD418              	lea rbx, [rsp + 2 * 8 + 1 * 8 + rdx * 8]
  5266 00004052 48B9-                   	mov rcx, sob_nil
  5266 00004054 [0100000000000000] 
  5267                                  .L_lambda_opt_stack_shrink_loop_0011:
  5268 0000405C 4839D6                  	cmp rsi, rdx
  5269 0000405F 7427                    je .L_lambda_opt_stack_shrink_loop_exit_0011
  5270 00004061 BF11000000              	mov rdi, 17 ; 1+8+8
  5271 00004066 E826BD0000              	call malloc
  5272 0000406B 48894809                	mov SOB_PAIR_CDR(rax), rcx
  5273 0000406F 48F7DE                  	neg rsi
  5274 00004072 488B0CF3                	mov rcx, qword [rbx + rsi * 8]
  5275 00004076 48F7DE                  	neg rsi
  5276 00004079 48894801                	mov SOB_PAIR_CAR(rax), rcx
  5277 0000407D C60021                  	mov byte [rax], T_pair
  5278 00004080 4889C1                  	mov rcx, rax
  5279 00004083 48FFC6                  	inc rsi
  5280 00004086 EBD4                    	jmp .L_lambda_opt_stack_shrink_loop_0011
  5281                                  .L_lambda_opt_stack_shrink_loop_exit_0011:
  5282 00004088 48890B                  	mov qword [rbx], rcx
  5283 0000408B 4883EB08                	sub rbx, 8
  5284 0000408F 4889E7                  	mov rdi, rsp
  5285 00004092 4883C718                	add rdi, 24
  5286 00004096 BE04000000              	mov rsi, 4
  5287                                  .L_lambda_opt_stack_shrink_loop_0012:
  5288 0000409B 4883FE00                	cmp rsi,0
  5289 0000409F 7413                    	je .L_lambda_opt_stack_shrink_loop_exit_0012
  5290 000040A1 488B0F                  	mov rcx, qword [rdi]
  5291 000040A4 48890B                  	mov [rbx], rcx
  5292 000040A7 48FFCE                  	dec rsi
  5293 000040AA 4883EB08                	sub rbx, 8
  5294 000040AE 4883EF08                	sub rdi, 8
  5295 000040B2 EBE7                    	jmp .L_lambda_opt_stack_shrink_loop_0012
  5296                                  .L_lambda_opt_stack_shrink_loop_exit_0012:
  5297 000040B4 4883C308                	add rbx, 8
  5298 000040B8 4889DC                  	mov rsp, rbx
  5299                                  .L_lambda_opt_stack_adjusted_0006:
  5300 000040BB C8000000                	enter 0, 0
  5301 000040BF 488B4528                	mov rax, qword [rbp + 8 * (4 + 1)]
  5302 000040C3 50                      	push rax
  5303 000040C4 6A01                    	push 1
  5304 000040C6 488B0425[00000000]      	mov rax, qword [free_var_0]
  5305                                  	assert_closure(rax)
    42 000040CE 803805              <1>  cmp byte [%1], %2
    43 000040D1 0F85B3D40000        <1>  jne L_error_incorrect_type
  5306 000040D7 FF7001                  	push SOB_CLOSURE_ENV(rax)
  5307 000040DA FF5009                  	call SOB_CLOSURE_CODE(rax)
  5308 000040DD 483D[02000000]          	cmp rax, sob_boolean_false
  5309 000040E3 740C                              	je .L_if_else_000a
  5310 000040E5 48B8-                             	mov rax, L_constants + 1
  5310 000040E7 [0100000000000000] 
  5311 000040EF EB5D                    	jmp .L_if_end_000a
  5312                                            .L_if_else_000a:
  5313 000040F1 488B4528                          	mov rax, qword [rbp + 8 * (4 + 1)]
  5314 000040F5 50                      	push rax
  5315 000040F6 488B4520                	mov rax, qword [rbp + 8 * (4 + 0)]
  5316 000040FA 50                      	push rax
  5317 000040FB 6A02                    	push 2
  5318 000040FD 488B4510                	mov rax, qword [rbp + 8 * 2]
  5319 00004101 488B00                  	mov rax, qword [rax + 8 * 0]
  5320 00004104 488B4008                	mov rax, qword [rax + 8 * 1]
  5321 00004108 488B00                  	mov rax, qword [rax]
  5322                                  	assert_closure(rax)
    42 0000410B 803805              <1>  cmp byte [%1], %2
    43 0000410E 0F8576D40000        <1>  jne L_error_incorrect_type
  5323 00004114 FF7001                  	push SOB_CLOSURE_ENV(rax)
  5324 00004117 FF7508                  	push qword [rbp + 8 * 1] ; old ret addr
  5325 0000411A FF7500                  	push qword [rbp] ; same the old rbp
  5326 0000411D BA05000000              	mov rdx, 2 + 3
  5327 00004122 488B4D18                	mov rcx, COUNT
  5328 00004126 488D4CCD20              	lea rcx, [rbp + 8*4 + rcx * 8]
  5329 0000412B 4889EF                  	mov rdi, rbp
  5330                                  .L_tc_recycle_frame_loop_002b:
  5331 0000412E 4883FA00                	cmp rdx, 0
  5332 00004132 7413                    	je .L_tc_recycle_frame_done_002b
  5333 00004134 4883E908                	sub rcx, 8
  5334 00004138 4883EF08                	sub rdi, 8
  5335 0000413C 488B37                  	mov rsi, [rdi]
  5336 0000413F 488931                  	mov qword [rcx], rsi
  5337 00004142 48FFCA                  	dec rdx
  5338 00004145 EBE7                    	jmp .L_tc_recycle_frame_loop_002b
  5339                                  .L_tc_recycle_frame_done_002b:
  5340 00004147 5D                      	pop rbp ; restore the old rbp
  5341 00004148 4889CC                  	mov rsp, rcx
  5342 0000414B FF6009                  	jmp SOB_CLOSURE_CODE(rax)
  5343                                  .L_if_end_000a:
  5344 0000414E C9                      	leave
  5345 0000414F C22000                  	ret 8 * (2 + 2)
  5346                                  .L_lambda_opt_end_0006:	; new closure is in rax
  5347 00004152 C9                      	leave
  5348 00004153 C22000                  	ret 8 * (2 + 2)
  5349                                  .L_lambda_simple_end_0028:	; new closure is in rax
  5350                                  	assert_closure(rax)
    42 00004156 803805              <1>  cmp byte [%1], %2
    43 00004159 0F852BD40000        <1>  jne L_error_incorrect_type
  5351 0000415F FF7001                  	push SOB_CLOSURE_ENV(rax)
  5352 00004162 FF5009                  	call SOB_CLOSURE_CODE(rax)
  5353 00004165 48890425[D8020000]      	mov qword [free_var_91], rax
  5354 0000416D 48B8-                   	mov rax, sob_void
  5354 0000416F [0000000000000000] 
  5355                                  
  5356 00004177 4889C7                  	mov rdi, rax
  5357 0000417A E823BC0000              	call print_sexpr_if_not_void
  5358                                  
  5359 0000417F 48B8-                   	mov rax, L_constants + 23
  5359 00004181 [1700000000000000] 
  5360 00004189 50                      	push rax
  5361 0000418A 6A01                    	push 1
  5362 0000418C BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  5363 00004191 E8FBBB0000              	call malloc
  5364 00004196 50                      	push rax
  5365 00004197 BF00000000              	mov rdi, 8 * 0	; new rib
  5366 0000419C E8F0BB0000              	call malloc
  5367 000041A1 50                      	push rax
  5368 000041A2 BF08000000              	mov rdi, 8 * 1	; extended env
  5369 000041A7 E8E5BB0000              	call malloc
  5370 000041AC 488B7D10                	mov rdi, ENV
  5371 000041B0 BE00000000              	mov rsi, 0
  5372 000041B5 BA01000000              	mov rdx, 1
  5373                                  .L_lambda_simple_env_loop_002b:	; ext_env[i + 1] <-- env[i]
  5374 000041BA 4883FE00                	cmp rsi, 0
  5375 000041BE 7410                    	je .L_lambda_simple_env_end_002b
  5376 000041C0 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  5377 000041C4 48890CD0                	mov qword [rax + 8 * rdx], rcx
  5378 000041C8 48FFC6                  	inc rsi
  5379 000041CB 48FFC2                  	inc rdx
  5380 000041CE EBEA                    	jmp .L_lambda_simple_env_loop_002b
  5381                                  .L_lambda_simple_env_end_002b:
  5382 000041D0 5B                      	pop rbx
  5383 000041D1 BE00000000              	mov rsi, 0
  5384                                  .L_lambda_simple_params_loop_002b:	; copy params
  5385 000041D6 4883FE00                	cmp rsi, 0
  5386 000041DA 740E                    	je .L_lambda_simple_params_end_002b
  5387 000041DC 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  5388 000041E1 488914F3                	mov qword [rbx + 8 * rsi], rdx
  5389 000041E5 48FFC6                  	inc rsi
  5390 000041E8 EBEC                    	jmp .L_lambda_simple_params_loop_002b
  5391                                  .L_lambda_simple_params_end_002b:
  5392 000041EA 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  5393 000041ED 4889C3                  	mov rbx, rax
  5394 000041F0 58                      	pop rax
  5395 000041F1 C60005                  	mov byte [rax], T_closure
  5396 000041F4 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  5397 000041F8 48C74009[05420000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_002b
  5398 00004200 E9B6020000              	jmp .L_lambda_simple_end_002b
  5399                                  .L_lambda_simple_code_002b:	; lambda-simple body
  5400 00004205 48837C241001            	cmp qword [rsp + 8 * 2], 1
  5401 0000420B 740B                    	je .L_lambda_simple_arity_check_ok_002b
  5402 0000420D FF742410                	push qword [rsp + 8 * 2]
  5403 00004211 6A01                    	push 1
  5404 00004213 E932BB0000              	jmp L_error_incorrect_arity_simple
  5405                                  .L_lambda_simple_arity_check_ok_002b:
  5406 00004218 C8000000                	enter 0, 0
  5407 0000421C 488B4520                	mov rax, qword [rbp + 8 * (4 + 0)]
  5408 00004220 4889C2                  	mov rdx, rax
  5409 00004223 BF08000000              	mov rdi, 8
  5410 00004228 E864BB0000              	call malloc
  5411 0000422D 488910                  	mov qword[rax], rdx
  5412 00004230 48894520                	mov qword [rbp + 8 * (4 + 0)], rax
  5413 00004234 48B8-                   	mov rax, sob_void
  5413 00004236 [0000000000000000] 
  5414                                  
  5415 0000423E BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  5416 00004243 E849BB0000              	call malloc
  5417 00004248 50                      	push rax
  5418 00004249 BF08000000              	mov rdi, 8 * 1	; new rib
  5419 0000424E E83EBB0000              	call malloc
  5420 00004253 50                      	push rax
  5421 00004254 BF10000000              	mov rdi, 8 * 2	; extended env
  5422 00004259 E833BB0000              	call malloc
  5423 0000425E 488B7D10                	mov rdi, ENV
  5424 00004262 BE00000000              	mov rsi, 0
  5425 00004267 BA01000000              	mov rdx, 1
  5426                                  .L_lambda_simple_env_loop_002c:	; ext_env[i + 1] <-- env[i]
  5427 0000426C 4883FE01                	cmp rsi, 1
  5428 00004270 7410                    	je .L_lambda_simple_env_end_002c
  5429 00004272 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  5430 00004276 48890CD0                	mov qword [rax + 8 * rdx], rcx
  5431 0000427A 48FFC6                  	inc rsi
  5432 0000427D 48FFC2                  	inc rdx
  5433 00004280 EBEA                    	jmp .L_lambda_simple_env_loop_002c
  5434                                  .L_lambda_simple_env_end_002c:
  5435 00004282 5B                      	pop rbx
  5436 00004283 BE00000000              	mov rsi, 0
  5437                                  .L_lambda_simple_params_loop_002c:	; copy params
  5438 00004288 4883FE01                	cmp rsi, 1
  5439 0000428C 740E                    	je .L_lambda_simple_params_end_002c
  5440 0000428E 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  5441 00004293 488914F3                	mov qword [rbx + 8 * rsi], rdx
  5442 00004297 48FFC6                  	inc rsi
  5443 0000429A EBEC                    	jmp .L_lambda_simple_params_loop_002c
  5444                                  .L_lambda_simple_params_end_002c:
  5445 0000429C 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  5446 0000429F 4889C3                  	mov rbx, rax
  5447 000042A2 58                      	pop rax
  5448 000042A3 C60005                  	mov byte [rax], T_closure
  5449 000042A6 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  5450 000042AA 48C74009[B7420000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_002c
  5451 000042B2 E9F9000000              	jmp .L_lambda_simple_end_002c
  5452                                  .L_lambda_simple_code_002c:	; lambda-simple body
  5453 000042B7 48837C241002            	cmp qword [rsp + 8 * 2], 2
  5454 000042BD 740B                    	je .L_lambda_simple_arity_check_ok_002c
  5455 000042BF FF742410                	push qword [rsp + 8 * 2]
  5456 000042C3 6A02                    	push 2
  5457 000042C5 E980BA0000              	jmp L_error_incorrect_arity_simple
  5458                                  .L_lambda_simple_arity_check_ok_002c:
  5459 000042CA C8000000                	enter 0, 0
  5460 000042CE 488B4520                	mov rax, qword [rbp + 8 * (4 + 0)]
  5461 000042D2 50                      	push rax
  5462 000042D3 6A01                    	push 1
  5463 000042D5 488B0425[00000000]      	mov rax, qword [free_var_0]
  5464                                  	assert_closure(rax)
    42 000042DD 803805              <1>  cmp byte [%1], %2
    43 000042E0 0F85A4D20000        <1>  jne L_error_incorrect_type
  5465 000042E6 FF7001                  	push SOB_CLOSURE_ENV(rax)
  5466 000042E9 FF5009                  	call SOB_CLOSURE_CODE(rax)
  5467 000042EC 483D[02000000]          	cmp rax, sob_boolean_false
  5468 000042F2 7409                              	je .L_if_else_000b
  5469 000042F4 488B4528                          	mov rax, qword [rbp + 8 * (4 + 1)]
  5470 000042F8 E9AF000000              	jmp .L_if_end_000b
  5471                                            .L_if_else_000b:
  5472 000042FD 488B4528                          	mov rax, qword [rbp + 8 * (4 + 1)]
  5473 00004301 50                      	push rax
  5474 00004302 488B4520                	mov rax, qword [rbp + 8 * (4 + 0)]
  5475 00004306 50                      	push rax
  5476 00004307 6A01                    	push 1
  5477 00004309 488B0425[80000000]      	mov rax, qword [free_var_16]
  5478                                  	assert_closure(rax)
    42 00004311 803805              <1>  cmp byte [%1], %2
    43 00004314 0F8570D20000        <1>  jne L_error_incorrect_type
  5479 0000431A FF7001                  	push SOB_CLOSURE_ENV(rax)
  5480 0000431D FF5009                  	call SOB_CLOSURE_CODE(rax)
  5481 00004320 50                      	push rax
  5482 00004321 6A02                    	push 2
  5483 00004323 488B0425[68000000]      	mov rax, qword [free_var_13]
  5484                                  	assert_closure(rax)
    42 0000432B 803805              <1>  cmp byte [%1], %2
    43 0000432E 0F8556D20000        <1>  jne L_error_incorrect_type
  5485 00004334 FF7001                  	push SOB_CLOSURE_ENV(rax)
  5486 00004337 FF5009                  	call SOB_CLOSURE_CODE(rax)
  5487 0000433A 50                      	push rax
  5488 0000433B 488B4520                	mov rax, qword [rbp + 8 * (4 + 0)]
  5489 0000433F 50                      	push rax
  5490 00004340 6A01                    	push 1
  5491 00004342 488B0425[88000000]      	mov rax, qword [free_var_17]
  5492                                  	assert_closure(rax)
    42 0000434A 803805              <1>  cmp byte [%1], %2
    43 0000434D 0F8537D20000        <1>  jne L_error_incorrect_type
  5493 00004353 FF7001                  	push SOB_CLOSURE_ENV(rax)
  5494 00004356 FF5009                  	call SOB_CLOSURE_CODE(rax)
  5495 00004359 50                      	push rax
  5496 0000435A 6A02                    	push 2
  5497 0000435C 488B4510                	mov rax, qword [rbp + 8 * 2]
  5498 00004360 488B00                  	mov rax, qword [rax + 8 * 0]
  5499 00004363 488B00                  	mov rax, qword [rax + 8 * 0]
  5500 00004366 488B00                  	mov rax, qword [rax]
  5501                                  	assert_closure(rax)
    42 00004369 803805              <1>  cmp byte [%1], %2
    43 0000436C 0F8518D20000        <1>  jne L_error_incorrect_type
  5502 00004372 FF7001                  	push SOB_CLOSURE_ENV(rax)
  5503 00004375 FF7508                  	push qword [rbp + 8 * 1] ; old ret addr
  5504 00004378 FF7500                  	push qword [rbp] ; same the old rbp
  5505 0000437B BA05000000              	mov rdx, 2 + 3
  5506 00004380 488B4D18                	mov rcx, COUNT
  5507 00004384 488D4CCD20              	lea rcx, [rbp + 8*4 + rcx * 8]
  5508 00004389 4889EF                  	mov rdi, rbp
  5509                                  .L_tc_recycle_frame_loop_002c:
  5510 0000438C 4883FA00                	cmp rdx, 0
  5511 00004390 7413                    	je .L_tc_recycle_frame_done_002c
  5512 00004392 4883E908                	sub rcx, 8
  5513 00004396 4883EF08                	sub rdi, 8
  5514 0000439A 488B37                  	mov rsi, [rdi]
  5515 0000439D 488931                  	mov qword [rcx], rsi
  5516 000043A0 48FFCA                  	dec rdx
  5517 000043A3 EBE7                    	jmp .L_tc_recycle_frame_loop_002c
  5518                                  .L_tc_recycle_frame_done_002c:
  5519 000043A5 5D                      	pop rbp ; restore the old rbp
  5520 000043A6 4889CC                  	mov rsp, rcx
  5521 000043A9 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
  5522                                  .L_if_end_000b:
  5523 000043AC C9                      	leave
  5524 000043AD C22000                  	ret 8 * (2 + 2)
  5525                                  .L_lambda_simple_end_002c:	; new closure is in rax
  5526 000043B0 50                      	push rax
  5527 000043B1 488B4520                	mov rax, qword [rbp + 8 * (4 + 0)]
  5528 000043B5 8F00                    	pop qword [rax]
  5529 000043B7 48B8-                   	mov rax, sob_void
  5529 000043B9 [0000000000000000] 
  5530                                  
  5531 000043C1 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  5532 000043C6 E8C6B90000              	call malloc
  5533 000043CB 50                      	push rax
  5534 000043CC BF08000000              	mov rdi, 8 * 1	; new rib
  5535 000043D1 E8BBB90000              	call malloc
  5536 000043D6 50                      	push rax
  5537 000043D7 BF10000000              	mov rdi, 8 * 2	; extended env
  5538 000043DC E8B0B90000              	call malloc
  5539 000043E1 488B7D10                	mov rdi, ENV
  5540 000043E5 BE00000000              	mov rsi, 0
  5541 000043EA BA01000000              	mov rdx, 1
  5542                                  .L_lambda_simple_env_loop_002d:	; ext_env[i + 1] <-- env[i]
  5543 000043EF 4883FE01                	cmp rsi, 1
  5544 000043F3 7410                    	je .L_lambda_simple_env_end_002d
  5545 000043F5 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  5546 000043F9 48890CD0                	mov qword [rax + 8 * rdx], rcx
  5547 000043FD 48FFC6                  	inc rsi
  5548 00004400 48FFC2                  	inc rdx
  5549 00004403 EBEA                    	jmp .L_lambda_simple_env_loop_002d
  5550                                  .L_lambda_simple_env_end_002d:
  5551 00004405 5B                      	pop rbx
  5552 00004406 BE00000000              	mov rsi, 0
  5553                                  .L_lambda_simple_params_loop_002d:	; copy params
  5554 0000440B 4883FE01                	cmp rsi, 1
  5555 0000440F 740E                    	je .L_lambda_simple_params_end_002d
  5556 00004411 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  5557 00004416 488914F3                	mov qword [rbx + 8 * rsi], rdx
  5558 0000441A 48FFC6                  	inc rsi
  5559 0000441D EBEC                    	jmp .L_lambda_simple_params_loop_002d
  5560                                  .L_lambda_simple_params_end_002d:
  5561 0000441F 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  5562 00004422 4889C3                  	mov rbx, rax
  5563 00004425 58                      	pop rax
  5564 00004426 C60005                  	mov byte [rax], T_closure
  5565 00004429 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  5566 0000442D 48C74009[3A440000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_002d
  5567 00004435 E97D000000              	jmp .L_lambda_simple_end_002d
  5568                                  .L_lambda_simple_code_002d:	; lambda-simple body
  5569 0000443A 48837C241001            	cmp qword [rsp + 8 * 2], 1
  5570 00004440 740B                    	je .L_lambda_simple_arity_check_ok_002d
  5571 00004442 FF742410                	push qword [rsp + 8 * 2]
  5572 00004446 6A01                    	push 1
  5573 00004448 E9FDB80000              	jmp L_error_incorrect_arity_simple
  5574                                  .L_lambda_simple_arity_check_ok_002d:
  5575 0000444D C8000000                	enter 0, 0
  5576 00004451 48B8-                   	mov rax, L_constants + 1
  5576 00004453 [0100000000000000] 
  5577 0000445B 50                      	push rax
  5578 0000445C 488B4520                	mov rax, qword [rbp + 8 * (4 + 0)]
  5579 00004460 50                      	push rax
  5580 00004461 6A02                    	push 2
  5581 00004463 488B4510                	mov rax, qword [rbp + 8 * 2]
  5582 00004467 488B00                  	mov rax, qword [rax + 8 * 0]
  5583 0000446A 488B00                  	mov rax, qword [rax + 8 * 0]
  5584 0000446D 488B00                  	mov rax, qword [rax]
  5585                                  	assert_closure(rax)
    42 00004470 803805              <1>  cmp byte [%1], %2
    43 00004473 0F8511D10000        <1>  jne L_error_incorrect_type
  5586 00004479 FF7001                  	push SOB_CLOSURE_ENV(rax)
  5587 0000447C FF7508                  	push qword [rbp + 8 * 1] ; old ret addr
  5588 0000447F FF7500                  	push qword [rbp] ; same the old rbp
  5589 00004482 BA05000000              	mov rdx, 2 + 3
  5590 00004487 488B4D18                	mov rcx, COUNT
  5591 0000448B 488D4CCD20              	lea rcx, [rbp + 8*4 + rcx * 8]
  5592 00004490 4889EF                  	mov rdi, rbp
  5593                                  .L_tc_recycle_frame_loop_002d:
  5594 00004493 4883FA00                	cmp rdx, 0
  5595 00004497 7413                    	je .L_tc_recycle_frame_done_002d
  5596 00004499 4883E908                	sub rcx, 8
  5597 0000449D 4883EF08                	sub rdi, 8
  5598 000044A1 488B37                  	mov rsi, [rdi]
  5599 000044A4 488931                  	mov qword [rcx], rsi
  5600 000044A7 48FFCA                  	dec rdx
  5601 000044AA EBE7                    	jmp .L_tc_recycle_frame_loop_002d
  5602                                  .L_tc_recycle_frame_done_002d:
  5603 000044AC 5D                      	pop rbp ; restore the old rbp
  5604 000044AD 4889CC                  	mov rsp, rcx
  5605 000044B0 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
  5606 000044B3 C9                      	leave
  5607 000044B4 C21800                  	ret 8 * (2 + 1)
  5608                                  .L_lambda_simple_end_002d:	; new closure is in rax
  5609 000044B7 C9                      	leave
  5610 000044B8 C21800                  	ret 8 * (2 + 1)
  5611                                  .L_lambda_simple_end_002b:	; new closure is in rax
  5612                                  	assert_closure(rax)
    42 000044BB 803805              <1>  cmp byte [%1], %2
    43 000044BE 0F85C6D00000        <1>  jne L_error_incorrect_type
  5613 000044C4 FF7001                  	push SOB_CLOSURE_ENV(rax)
  5614 000044C7 FF5009                  	call SOB_CLOSURE_CODE(rax)
  5615 000044CA 48890425[E8020000]      	mov qword [free_var_93], rax
  5616 000044D2 48B8-                   	mov rax, sob_void
  5616 000044D4 [0000000000000000] 
  5617                                  
  5618 000044DC 4889C7                  	mov rdi, rax
  5619 000044DF E8BEB80000              	call print_sexpr_if_not_void
  5620                                  
  5621 000044E4 48B8-                   	mov rax, L_constants + 23
  5621 000044E6 [1700000000000000] 
  5622 000044EE 50                      	push rax
  5623 000044EF 48B8-                   	mov rax, L_constants + 23
  5623 000044F1 [1700000000000000] 
  5624 000044F9 50                      	push rax
  5625 000044FA 6A02                    	push 2
  5626 000044FC BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  5627 00004501 E88BB80000              	call malloc
  5628 00004506 50                      	push rax
  5629 00004507 BF00000000              	mov rdi, 8 * 0	; new rib
  5630 0000450C E880B80000              	call malloc
  5631 00004511 50                      	push rax
  5632 00004512 BF08000000              	mov rdi, 8 * 1	; extended env
  5633 00004517 E875B80000              	call malloc
  5634 0000451C 488B7D10                	mov rdi, ENV
  5635 00004520 BE00000000              	mov rsi, 0
  5636 00004525 BA01000000              	mov rdx, 1
  5637                                  .L_lambda_simple_env_loop_002e:	; ext_env[i + 1] <-- env[i]
  5638 0000452A 4883FE00                	cmp rsi, 0
  5639 0000452E 7410                    	je .L_lambda_simple_env_end_002e
  5640 00004530 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  5641 00004534 48890CD0                	mov qword [rax + 8 * rdx], rcx
  5642 00004538 48FFC6                  	inc rsi
  5643 0000453B 48FFC2                  	inc rdx
  5644 0000453E EBEA                    	jmp .L_lambda_simple_env_loop_002e
  5645                                  .L_lambda_simple_env_end_002e:
  5646 00004540 5B                      	pop rbx
  5647 00004541 BE00000000              	mov rsi, 0
  5648                                  .L_lambda_simple_params_loop_002e:	; copy params
  5649 00004546 4883FE00                	cmp rsi, 0
  5650 0000454A 740E                    	je .L_lambda_simple_params_end_002e
  5651 0000454C 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  5652 00004551 488914F3                	mov qword [rbx + 8 * rsi], rdx
  5653 00004555 48FFC6                  	inc rsi
  5654 00004558 EBEC                    	jmp .L_lambda_simple_params_loop_002e
  5655                                  .L_lambda_simple_params_end_002e:
  5656 0000455A 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  5657 0000455D 4889C3                  	mov rbx, rax
  5658 00004560 58                      	pop rax
  5659 00004561 C60005                  	mov byte [rax], T_closure
  5660 00004564 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  5661 00004568 48C74009[75450000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_002e
  5662 00004570 E984050000              	jmp .L_lambda_simple_end_002e
  5663                                  .L_lambda_simple_code_002e:	; lambda-simple body
  5664 00004575 48837C241002            	cmp qword [rsp + 8 * 2], 2
  5665 0000457B 740B                    	je .L_lambda_simple_arity_check_ok_002e
  5666 0000457D FF742410                	push qword [rsp + 8 * 2]
  5667 00004581 6A02                    	push 2
  5668 00004583 E9C2B70000              	jmp L_error_incorrect_arity_simple
  5669                                  .L_lambda_simple_arity_check_ok_002e:
  5670 00004588 C8000000                	enter 0, 0
  5671 0000458C 488B4520                	mov rax, qword [rbp + 8 * (4 + 0)]
  5672 00004590 4889C2                  	mov rdx, rax
  5673 00004593 BF08000000              	mov rdi, 8
  5674 00004598 E8F4B70000              	call malloc
  5675 0000459D 488910                  	mov qword[rax], rdx
  5676 000045A0 48894520                	mov qword [rbp + 8 * (4 + 0)], rax
  5677 000045A4 48B8-                   	mov rax, sob_void
  5677 000045A6 [0000000000000000] 
  5678                                  
  5679 000045AE 488B4528                	mov rax, qword [rbp + 8 * (4 + 1)]
  5680 000045B2 4889C2                  	mov rdx, rax
  5681 000045B5 BF08000000              	mov rdi, 8
  5682 000045BA E8D2B70000              	call malloc
  5683 000045BF 488910                  	mov qword[rax], rdx
  5684 000045C2 48894528                	mov qword [rbp + 8 * (4 + 1)], rax
  5685 000045C6 48B8-                   	mov rax, sob_void
  5685 000045C8 [0000000000000000] 
  5686                                  
  5687 000045D0 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  5688 000045D5 E8B7B70000              	call malloc
  5689 000045DA 50                      	push rax
  5690 000045DB BF10000000              	mov rdi, 8 * 2	; new rib
  5691 000045E0 E8ACB70000              	call malloc
  5692 000045E5 50                      	push rax
  5693 000045E6 BF10000000              	mov rdi, 8 * 2	; extended env
  5694 000045EB E8A1B70000              	call malloc
  5695 000045F0 488B7D10                	mov rdi, ENV
  5696 000045F4 BE00000000              	mov rsi, 0
  5697 000045F9 BA01000000              	mov rdx, 1
  5698                                  .L_lambda_simple_env_loop_002f:	; ext_env[i + 1] <-- env[i]
  5699 000045FE 4883FE01                	cmp rsi, 1
  5700 00004602 7410                    	je .L_lambda_simple_env_end_002f
  5701 00004604 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  5702 00004608 48890CD0                	mov qword [rax + 8 * rdx], rcx
  5703 0000460C 48FFC6                  	inc rsi
  5704 0000460F 48FFC2                  	inc rdx
  5705 00004612 EBEA                    	jmp .L_lambda_simple_env_loop_002f
  5706                                  .L_lambda_simple_env_end_002f:
  5707 00004614 5B                      	pop rbx
  5708 00004615 BE00000000              	mov rsi, 0
  5709                                  .L_lambda_simple_params_loop_002f:	; copy params
  5710 0000461A 4883FE02                	cmp rsi, 2
  5711 0000461E 740E                    	je .L_lambda_simple_params_end_002f
  5712 00004620 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  5713 00004625 488914F3                	mov qword [rbx + 8 * rsi], rdx
  5714 00004629 48FFC6                  	inc rsi
  5715 0000462C EBEC                    	jmp .L_lambda_simple_params_loop_002f
  5716                                  .L_lambda_simple_params_end_002f:
  5717 0000462E 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  5718 00004631 4889C3                  	mov rbx, rax
  5719 00004634 58                      	pop rax
  5720 00004635 C60005                  	mov byte [rax], T_closure
  5721 00004638 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  5722 0000463C 48C74009[49460000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_002f
  5723 00004644 E9FF000000              	jmp .L_lambda_simple_end_002f
  5724                                  .L_lambda_simple_code_002f:	; lambda-simple body
  5725 00004649 48837C241002            	cmp qword [rsp + 8 * 2], 2
  5726 0000464F 740B                    	je .L_lambda_simple_arity_check_ok_002f
  5727 00004651 FF742410                	push qword [rsp + 8 * 2]
  5728 00004655 6A02                    	push 2
  5729 00004657 E9EEB60000              	jmp L_error_incorrect_arity_simple
  5730                                  .L_lambda_simple_arity_check_ok_002f:
  5731 0000465C C8000000                	enter 0, 0
  5732 00004660 488B4528                	mov rax, qword [rbp + 8 * (4 + 1)]
  5733 00004664 50                      	push rax
  5734 00004665 6A01                    	push 1
  5735 00004667 488B0425[00000000]      	mov rax, qword [free_var_0]
  5736                                  	assert_closure(rax)
    42 0000466F 803805              <1>  cmp byte [%1], %2
    43 00004672 0F8512CF0000        <1>  jne L_error_incorrect_type
  5737 00004678 FF7001                  	push SOB_CLOSURE_ENV(rax)
  5738 0000467B FF5009                  	call SOB_CLOSURE_CODE(rax)
  5739 0000467E 483D[02000000]          	cmp rax, sob_boolean_false
  5740 00004684 7409                              	je .L_if_else_000c
  5741 00004686 488B4520                          	mov rax, qword [rbp + 8 * (4 + 0)]
  5742 0000468A E9B5000000              	jmp .L_if_end_000c
  5743                                            .L_if_else_000c:
  5744 0000468F 488B4528                          	mov rax, qword [rbp + 8 * (4 + 1)]
  5745 00004693 50                      	push rax
  5746 00004694 6A01                    	push 1
  5747 00004696 488B0425[88000000]      	mov rax, qword [free_var_17]
  5748                                  	assert_closure(rax)
    42 0000469E 803805              <1>  cmp byte [%1], %2
    43 000046A1 0F85E3CE0000        <1>  jne L_error_incorrect_type
  5749 000046A7 FF7001                  	push SOB_CLOSURE_ENV(rax)
  5750 000046AA FF5009                  	call SOB_CLOSURE_CODE(rax)
  5751 000046AD 50                      	push rax
  5752 000046AE 488B4528                	mov rax, qword [rbp + 8 * (4 + 1)]
  5753 000046B2 50                      	push rax
  5754 000046B3 6A01                    	push 1
  5755 000046B5 488B0425[80000000]      	mov rax, qword [free_var_16]
  5756                                  	assert_closure(rax)
    42 000046BD 803805              <1>  cmp byte [%1], %2
    43 000046C0 0F85C4CE0000        <1>  jne L_error_incorrect_type
  5757 000046C6 FF7001                  	push SOB_CLOSURE_ENV(rax)
  5758 000046C9 FF5009                  	call SOB_CLOSURE_CODE(rax)
  5759 000046CC 50                      	push rax
  5760 000046CD 6A02                    	push 2
  5761 000046CF 488B4510                	mov rax, qword [rbp + 8 * 2]
  5762 000046D3 488B00                  	mov rax, qword [rax + 8 * 0]
  5763 000046D6 488B00                  	mov rax, qword [rax + 8 * 0]
  5764 000046D9 488B00                  	mov rax, qword [rax]
  5765                                  	assert_closure(rax)
    42 000046DC 803805              <1>  cmp byte [%1], %2
    43 000046DF 0F85A5CE0000        <1>  jne L_error_incorrect_type
  5766 000046E5 FF7001                  	push SOB_CLOSURE_ENV(rax)
  5767 000046E8 FF5009                  	call SOB_CLOSURE_CODE(rax)
  5768 000046EB 50                      	push rax
  5769 000046EC 488B4520                	mov rax, qword [rbp + 8 * (4 + 0)]
  5770 000046F0 50                      	push rax
  5771 000046F1 6A02                    	push 2
  5772 000046F3 488B4510                	mov rax, qword [rbp + 8 * 2]
  5773 000046F7 488B00                  	mov rax, qword [rax + 8 * 0]
  5774 000046FA 488B4008                	mov rax, qword [rax + 8 * 1]
  5775 000046FE 488B00                  	mov rax, qword [rax]
  5776                                  	assert_closure(rax)
    42 00004701 803805              <1>  cmp byte [%1], %2
    43 00004704 0F8580CE0000        <1>  jne L_error_incorrect_type
  5777 0000470A FF7001                  	push SOB_CLOSURE_ENV(rax)
  5778 0000470D FF7508                  	push qword [rbp + 8 * 1] ; old ret addr
  5779 00004710 FF7500                  	push qword [rbp] ; same the old rbp
  5780 00004713 BA05000000              	mov rdx, 2 + 3
  5781 00004718 488B4D18                	mov rcx, COUNT
  5782 0000471C 488D4CCD20              	lea rcx, [rbp + 8*4 + rcx * 8]
  5783 00004721 4889EF                  	mov rdi, rbp
  5784                                  .L_tc_recycle_frame_loop_002e:
  5785 00004724 4883FA00                	cmp rdx, 0
  5786 00004728 7413                    	je .L_tc_recycle_frame_done_002e
  5787 0000472A 4883E908                	sub rcx, 8
  5788 0000472E 4883EF08                	sub rdi, 8
  5789 00004732 488B37                  	mov rsi, [rdi]
  5790 00004735 488931                  	mov qword [rcx], rsi
  5791 00004738 48FFCA                  	dec rdx
  5792 0000473B EBE7                    	jmp .L_tc_recycle_frame_loop_002e
  5793                                  .L_tc_recycle_frame_done_002e:
  5794 0000473D 5D                      	pop rbp ; restore the old rbp
  5795 0000473E 4889CC                  	mov rsp, rcx
  5796 00004741 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
  5797                                  .L_if_end_000c:
  5798 00004744 C9                      	leave
  5799 00004745 C22000                  	ret 8 * (2 + 2)
  5800                                  .L_lambda_simple_end_002f:	; new closure is in rax
  5801 00004748 50                      	push rax
  5802 00004749 488B4520                	mov rax, qword [rbp + 8 * (4 + 0)]
  5803 0000474D 8F00                    	pop qword [rax]
  5804 0000474F 48B8-                   	mov rax, sob_void
  5804 00004751 [0000000000000000] 
  5805                                  
  5806 00004759 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  5807 0000475E E82EB60000              	call malloc
  5808 00004763 50                      	push rax
  5809 00004764 BF10000000              	mov rdi, 8 * 2	; new rib
  5810 00004769 E823B60000              	call malloc
  5811 0000476E 50                      	push rax
  5812 0000476F BF10000000              	mov rdi, 8 * 2	; extended env
  5813 00004774 E818B60000              	call malloc
  5814 00004779 488B7D10                	mov rdi, ENV
  5815 0000477D BE00000000              	mov rsi, 0
  5816 00004782 BA01000000              	mov rdx, 1
  5817                                  .L_lambda_simple_env_loop_0030:	; ext_env[i + 1] <-- env[i]
  5818 00004787 4883FE01                	cmp rsi, 1
  5819 0000478B 7410                    	je .L_lambda_simple_env_end_0030
  5820 0000478D 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  5821 00004791 48890CD0                	mov qword [rax + 8 * rdx], rcx
  5822 00004795 48FFC6                  	inc rsi
  5823 00004798 48FFC2                  	inc rdx
  5824 0000479B EBEA                    	jmp .L_lambda_simple_env_loop_0030
  5825                                  .L_lambda_simple_env_end_0030:
  5826 0000479D 5B                      	pop rbx
  5827 0000479E BE00000000              	mov rsi, 0
  5828                                  .L_lambda_simple_params_loop_0030:	; copy params
  5829 000047A3 4883FE02                	cmp rsi, 2
  5830 000047A7 740E                    	je .L_lambda_simple_params_end_0030
  5831 000047A9 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  5832 000047AE 488914F3                	mov qword [rbx + 8 * rsi], rdx
  5833 000047B2 48FFC6                  	inc rsi
  5834 000047B5 EBEC                    	jmp .L_lambda_simple_params_loop_0030
  5835                                  .L_lambda_simple_params_end_0030:
  5836 000047B7 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  5837 000047BA 4889C3                  	mov rbx, rax
  5838 000047BD 58                      	pop rax
  5839 000047BE C60005                  	mov byte [rax], T_closure
  5840 000047C1 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  5841 000047C5 48C74009[D2470000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0030
  5842 000047CD E9FA000000              	jmp .L_lambda_simple_end_0030
  5843                                  .L_lambda_simple_code_0030:	; lambda-simple body
  5844 000047D2 48837C241002            	cmp qword [rsp + 8 * 2], 2
  5845 000047D8 740B                    	je .L_lambda_simple_arity_check_ok_0030
  5846 000047DA FF742410                	push qword [rsp + 8 * 2]
  5847 000047DE 6A02                    	push 2
  5848 000047E0 E965B50000              	jmp L_error_incorrect_arity_simple
  5849                                  .L_lambda_simple_arity_check_ok_0030:
  5850 000047E5 C8000000                	enter 0, 0
  5851 000047E9 488B4520                	mov rax, qword [rbp + 8 * (4 + 0)]
  5852 000047ED 50                      	push rax
  5853 000047EE 6A01                    	push 1
  5854 000047F0 488B0425[00000000]      	mov rax, qword [free_var_0]
  5855                                  	assert_closure(rax)
    42 000047F8 803805              <1>  cmp byte [%1], %2
    43 000047FB 0F8589CD0000        <1>  jne L_error_incorrect_type
  5856 00004801 FF7001                  	push SOB_CLOSURE_ENV(rax)
  5857 00004804 FF5009                  	call SOB_CLOSURE_CODE(rax)
  5858 00004807 483D[02000000]          	cmp rax, sob_boolean_false
  5859 0000480D 7409                              	je .L_if_else_000d
  5860 0000480F 488B4528                          	mov rax, qword [rbp + 8 * (4 + 1)]
  5861 00004813 E9B0000000              	jmp .L_if_end_000d
  5862                                            .L_if_else_000d:
  5863 00004818 488B4528                          	mov rax, qword [rbp + 8 * (4 + 1)]
  5864 0000481C 50                      	push rax
  5865 0000481D 488B4520                	mov rax, qword [rbp + 8 * (4 + 0)]
  5866 00004821 50                      	push rax
  5867 00004822 6A01                    	push 1
  5868 00004824 488B0425[88000000]      	mov rax, qword [free_var_17]
  5869                                  	assert_closure(rax)
    42 0000482C 803805              <1>  cmp byte [%1], %2
    43 0000482F 0F8555CD0000        <1>  jne L_error_incorrect_type
  5870 00004835 FF7001                  	push SOB_CLOSURE_ENV(rax)
  5871 00004838 FF5009                  	call SOB_CLOSURE_CODE(rax)
  5872 0000483B 50                      	push rax
  5873 0000483C 6A02                    	push 2
  5874 0000483E 488B4510                	mov rax, qword [rbp + 8 * 2]
  5875 00004842 488B00                  	mov rax, qword [rax + 8 * 0]
  5876 00004845 488B4008                	mov rax, qword [rax + 8 * 1]
  5877 00004849 488B00                  	mov rax, qword [rax]
  5878                                  	assert_closure(rax)
    42 0000484C 803805              <1>  cmp byte [%1], %2
    43 0000484F 0F8535CD0000        <1>  jne L_error_incorrect_type
  5879 00004855 FF7001                  	push SOB_CLOSURE_ENV(rax)
  5880 00004858 FF5009                  	call SOB_CLOSURE_CODE(rax)
  5881 0000485B 50                      	push rax
  5882 0000485C 488B4520                	mov rax, qword [rbp + 8 * (4 + 0)]
  5883 00004860 50                      	push rax
  5884 00004861 6A01                    	push 1
  5885 00004863 488B0425[80000000]      	mov rax, qword [free_var_16]
  5886                                  	assert_closure(rax)
    42 0000486B 803805              <1>  cmp byte [%1], %2
    43 0000486E 0F8516CD0000        <1>  jne L_error_incorrect_type
  5887 00004874 FF7001                  	push SOB_CLOSURE_ENV(rax)
  5888 00004877 FF5009                  	call SOB_CLOSURE_CODE(rax)
  5889 0000487A 50                      	push rax
  5890 0000487B 6A02                    	push 2
  5891 0000487D 488B0425[68000000]      	mov rax, qword [free_var_13]
  5892                                  	assert_closure(rax)
    42 00004885 803805              <1>  cmp byte [%1], %2
    43 00004888 0F85FCCC0000        <1>  jne L_error_incorrect_type
  5893 0000488E FF7001                  	push SOB_CLOSURE_ENV(rax)
  5894 00004891 FF7508                  	push qword [rbp + 8 * 1] ; old ret addr
  5895 00004894 FF7500                  	push qword [rbp] ; same the old rbp
  5896 00004897 BA05000000              	mov rdx, 2 + 3
  5897 0000489C 488B4D18                	mov rcx, COUNT
  5898 000048A0 488D4CCD20              	lea rcx, [rbp + 8*4 + rcx * 8]
  5899 000048A5 4889EF                  	mov rdi, rbp
  5900                                  .L_tc_recycle_frame_loop_002f:
  5901 000048A8 4883FA00                	cmp rdx, 0
  5902 000048AC 7413                    	je .L_tc_recycle_frame_done_002f
  5903 000048AE 4883E908                	sub rcx, 8
  5904 000048B2 4883EF08                	sub rdi, 8
  5905 000048B6 488B37                  	mov rsi, [rdi]
  5906 000048B9 488931                  	mov qword [rcx], rsi
  5907 000048BC 48FFCA                  	dec rdx
  5908 000048BF EBE7                    	jmp .L_tc_recycle_frame_loop_002f
  5909                                  .L_tc_recycle_frame_done_002f:
  5910 000048C1 5D                      	pop rbp ; restore the old rbp
  5911 000048C2 4889CC                  	mov rsp, rcx
  5912 000048C5 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
  5913                                  .L_if_end_000d:
  5914 000048C8 C9                      	leave
  5915 000048C9 C22000                  	ret 8 * (2 + 2)
  5916                                  .L_lambda_simple_end_0030:	; new closure is in rax
  5917 000048CC 50                      	push rax
  5918 000048CD 488B4528                	mov rax, qword [rbp + 8 * (4 + 1)]
  5919 000048D1 8F00                    	pop qword [rax]
  5920 000048D3 48B8-                   	mov rax, sob_void
  5920 000048D5 [0000000000000000] 
  5921                                  
  5922 000048DD BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  5923 000048E2 E8AAB40000              	call malloc
  5924 000048E7 50                      	push rax
  5925 000048E8 BF10000000              	mov rdi, 8 * 2	; new rib
  5926 000048ED E89FB40000              	call malloc
  5927 000048F2 50                      	push rax
  5928 000048F3 BF10000000              	mov rdi, 8 * 2	; extended env
  5929 000048F8 E894B40000              	call malloc
  5930 000048FD 488B7D10                	mov rdi, ENV
  5931 00004901 BE00000000              	mov rsi, 0
  5932 00004906 BA01000000              	mov rdx, 1
  5933                                  .L_lambda_opt_env_loop_0007:	; ext_env[i + 1] <-- env[i]
  5934 0000490B 4883FE01                	cmp rsi, 1
  5935 0000490F 7410                    	je .L_lambda_opt_env_end_0007
  5936 00004911 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  5937 00004915 48890CD0                	mov qword [rax + 8 * rdx], rcx
  5938 00004919 48FFC6                  	inc rsi
  5939 0000491C 48FFC2                  	inc rdx
  5940 0000491F EBEA                    	jmp .L_lambda_opt_env_loop_0007
  5941                                  .L_lambda_opt_env_end_0007:
  5942 00004921 5B                      	pop rbx
  5943 00004922 BE00000000              	mov rsi, 0
  5944                                  .L_lambda_opt_params_loop_0007:	; copy params
  5945 00004927 4883FE02                	cmp rsi, 2
  5946 0000492B 740E                    	je .L_lambda_opt_params_end_0007
  5947 0000492D 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  5948 00004932 488914F3                	mov qword [rbx + 8 * rsi], rdx
  5949 00004936 48FFC6                  	inc rsi
  5950 00004939 EBEC                    	jmp .L_lambda_opt_params_loop_0007
  5951                                  .L_lambda_opt_params_end_0007:
  5952 0000493B 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  5953 0000493E 4889C3                  	mov rbx, rax
  5954 00004941 58                      	pop rax
  5955 00004942 C60005                  	mov byte [rax], T_closure
  5956 00004945 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  5957 00004949 48C74009[56490000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_opt_code_0007
  5958 00004951 E99F010000              	jmp .L_lambda_opt_end_0007
  5959                                  .L_lambda_opt_code_0007:	; lambda-opt body
  5960 00004956 48837C241000            	cmp qword [rsp + 8 * 2], 0
  5961 0000495C 740D                    	je .L_lambda_opt_arity_check_exact_0007
  5962 0000495E 7F43                    	jg .L_lambda_opt_arity_check_more_0007
  5963 00004960 FF742410                	push qword [rsp + 8 * 2]
  5964 00004964 6A00                    	push 0
  5965 00004966 E9F3B30000              	jmp L_error_incorrect_arity_opt
  5966                                  .L_lambda_opt_arity_check_exact_0007:
  5967 0000496B 48C744241001000000      	mov qword [rsp + 8 * 2], 1
  5968 00004974 BA03000000              	mov rdx, 3
  5969 00004979 FF3424                  	push qword [rsp]
  5970 0000497C BE01000000              	mov rsi, 1
  5971                                  .L_lambda_opt_stack_shrink_loop_0013:
  5972 00004981 4839D6                  	cmp rsi, rdx
  5973 00004984 7411                    	je .L_lambda_opt_stack_shrink_loop_exit_0013
  5974 00004986 488D5CF408              	lea rbx, [rsp + 8 + rsi * 8]
  5975 0000498B 488B0B                  	mov rcx, [rbx]
  5976 0000498E 48894BF8                	mov qword [rbx - 8], rcx
  5977 00004992 48FFC6                  	inc rsi
  5978 00004995 EBEA                    	jmp .L_lambda_opt_stack_shrink_loop_0013
  5979                                  .L_lambda_opt_stack_shrink_loop_exit_0013:
  5980 00004997 48C703[01000000]        	mov qword [rbx], sob_nil
  5981 0000499E E985000000              	jmp .L_lambda_opt_stack_adjusted_0007
  5982                                  .L_lambda_opt_arity_check_more_0007:
  5983 000049A3 488B542410              	mov rdx, qword [rsp + 8 * 2]
  5984 000049A8 4883EA00                	sub rdx, 0
  5985 000049AC 48C744241001000000      	mov qword [rsp + 8 * 2], 1
  5986 000049B5 BE00000000              	mov rsi, 0
  5987 000049BA 488D5CD410              	lea rbx, [rsp + 2 * 8 + 0 * 8 + rdx * 8]
  5988 000049BF 48B9-                   	mov rcx, sob_nil
  5988 000049C1 [0100000000000000] 
  5989                                  .L_lambda_opt_stack_shrink_loop_0014:
  5990 000049C9 4839D6                  	cmp rsi, rdx
  5991 000049CC 7427                    je .L_lambda_opt_stack_shrink_loop_exit_0014
  5992 000049CE BF11000000              	mov rdi, 17 ; 1+8+8
  5993 000049D3 E8B9B30000              	call malloc
  5994 000049D8 48894809                	mov SOB_PAIR_CDR(rax), rcx
  5995 000049DC 48F7DE                  	neg rsi
  5996 000049DF 488B0CF3                	mov rcx, qword [rbx + rsi * 8]
  5997 000049E3 48F7DE                  	neg rsi
  5998 000049E6 48894801                	mov SOB_PAIR_CAR(rax), rcx
  5999 000049EA C60021                  	mov byte [rax], T_pair
  6000 000049ED 4889C1                  	mov rcx, rax
  6001 000049F0 48FFC6                  	inc rsi
  6002 000049F3 EBD4                    	jmp .L_lambda_opt_stack_shrink_loop_0014
  6003                                  .L_lambda_opt_stack_shrink_loop_exit_0014:
  6004 000049F5 48890B                  	mov qword [rbx], rcx
  6005 000049F8 4883EB08                	sub rbx, 8
  6006 000049FC 4889E7                  	mov rdi, rsp
  6007 000049FF 4883C710                	add rdi, 16
  6008 00004A03 BE03000000              	mov rsi, 3
  6009                                  .L_lambda_opt_stack_shrink_loop_0015:
  6010 00004A08 4883FE00                	cmp rsi,0
  6011 00004A0C 7413                    	je .L_lambda_opt_stack_shrink_loop_exit_0015
  6012 00004A0E 488B0F                  	mov rcx, qword [rdi]
  6013 00004A11 48890B                  	mov [rbx], rcx
  6014 00004A14 48FFCE                  	dec rsi
  6015 00004A17 4883EB08                	sub rbx, 8
  6016 00004A1B 4883EF08                	sub rdi, 8
  6017 00004A1F EBE7                    	jmp .L_lambda_opt_stack_shrink_loop_0015
  6018                                  .L_lambda_opt_stack_shrink_loop_exit_0015:
  6019 00004A21 4883C308                	add rbx, 8
  6020 00004A25 4889DC                  	mov rsp, rbx
  6021                                  .L_lambda_opt_stack_adjusted_0007:
  6022 00004A28 C8000000                	enter 0, 0
  6023 00004A2C 488B4520                	mov rax, qword [rbp + 8 * (4 + 0)]
  6024 00004A30 50                      	push rax
  6025 00004A31 6A01                    	push 1
  6026 00004A33 488B0425[00000000]      	mov rax, qword [free_var_0]
  6027                                  	assert_closure(rax)
    42 00004A3B 803805              <1>  cmp byte [%1], %2
    43 00004A3E 0F8546CB0000        <1>  jne L_error_incorrect_type
  6028 00004A44 FF7001                  	push SOB_CLOSURE_ENV(rax)
  6029 00004A47 FF5009                  	call SOB_CLOSURE_CODE(rax)
  6030 00004A4A 483D[02000000]          	cmp rax, sob_boolean_false
  6031 00004A50 740F                              	je .L_if_else_000e
  6032 00004A52 48B8-                             	mov rax, L_constants + 1
  6032 00004A54 [0100000000000000] 
  6033 00004A5C E990000000              	jmp .L_if_end_000e
  6034                                            .L_if_else_000e:
  6035 00004A61 488B4520                          	mov rax, qword [rbp + 8 * (4 + 0)]
  6036 00004A65 50                      	push rax
  6037 00004A66 6A01                    	push 1
  6038 00004A68 488B0425[88000000]      	mov rax, qword [free_var_17]
  6039                                  	assert_closure(rax)
    42 00004A70 803805              <1>  cmp byte [%1], %2
    43 00004A73 0F8511CB0000        <1>  jne L_error_incorrect_type
  6040 00004A79 FF7001                  	push SOB_CLOSURE_ENV(rax)
  6041 00004A7C FF5009                  	call SOB_CLOSURE_CODE(rax)
  6042 00004A7F 50                      	push rax
  6043 00004A80 488B4520                	mov rax, qword [rbp + 8 * (4 + 0)]
  6044 00004A84 50                      	push rax
  6045 00004A85 6A01                    	push 1
  6046 00004A87 488B0425[80000000]      	mov rax, qword [free_var_16]
  6047                                  	assert_closure(rax)
    42 00004A8F 803805              <1>  cmp byte [%1], %2
    43 00004A92 0F85F2CA0000        <1>  jne L_error_incorrect_type
  6048 00004A98 FF7001                  	push SOB_CLOSURE_ENV(rax)
  6049 00004A9B FF5009                  	call SOB_CLOSURE_CODE(rax)
  6050 00004A9E 50                      	push rax
  6051 00004A9F 6A02                    	push 2
  6052 00004AA1 488B4510                	mov rax, qword [rbp + 8 * 2]
  6053 00004AA5 488B00                  	mov rax, qword [rax + 8 * 0]
  6054 00004AA8 488B00                  	mov rax, qword [rax + 8 * 0]
  6055 00004AAB 488B00                  	mov rax, qword [rax]
  6056                                  	assert_closure(rax)
    42 00004AAE 803805              <1>  cmp byte [%1], %2
    43 00004AB1 0F85D3CA0000        <1>  jne L_error_incorrect_type
  6057 00004AB7 FF7001                  	push SOB_CLOSURE_ENV(rax)
  6058 00004ABA FF7508                  	push qword [rbp + 8 * 1] ; old ret addr
  6059 00004ABD FF7500                  	push qword [rbp] ; same the old rbp
  6060 00004AC0 BA05000000              	mov rdx, 2 + 3
  6061 00004AC5 488B4D18                	mov rcx, COUNT
  6062 00004AC9 488D4CCD20              	lea rcx, [rbp + 8*4 + rcx * 8]
  6063 00004ACE 4889EF                  	mov rdi, rbp
  6064                                  .L_tc_recycle_frame_loop_0030:
  6065 00004AD1 4883FA00                	cmp rdx, 0
  6066 00004AD5 7413                    	je .L_tc_recycle_frame_done_0030
  6067 00004AD7 4883E908                	sub rcx, 8
  6068 00004ADB 4883EF08                	sub rdi, 8
  6069 00004ADF 488B37                  	mov rsi, [rdi]
  6070 00004AE2 488931                  	mov qword [rcx], rsi
  6071 00004AE5 48FFCA                  	dec rdx
  6072 00004AE8 EBE7                    	jmp .L_tc_recycle_frame_loop_0030
  6073                                  .L_tc_recycle_frame_done_0030:
  6074 00004AEA 5D                      	pop rbp ; restore the old rbp
  6075 00004AEB 4889CC                  	mov rsp, rcx
  6076 00004AEE FF6009                  	jmp SOB_CLOSURE_CODE(rax)
  6077                                  .L_if_end_000e:
  6078 00004AF1 C9                      	leave
  6079 00004AF2 C21800                  	ret 8 * (2 + 1)
  6080                                  .L_lambda_opt_end_0007:	; new closure is in rax
  6081 00004AF5 C9                      	leave
  6082 00004AF6 C22000                  	ret 8 * (2 + 2)
  6083                                  .L_lambda_simple_end_002e:	; new closure is in rax
  6084                                  	assert_closure(rax)
    42 00004AF9 803805              <1>  cmp byte [%1], %2
    43 00004AFC 0F8588CA0000        <1>  jne L_error_incorrect_type
  6085 00004B02 FF7001                  	push SOB_CLOSURE_ENV(rax)
  6086 00004B05 FF5009                  	call SOB_CLOSURE_CODE(rax)
  6087 00004B08 48890425[F0020000]      	mov qword [free_var_94], rax
  6088 00004B10 48B8-                   	mov rax, sob_void
  6088 00004B12 [0000000000000000] 
  6089                                  
  6090 00004B1A 4889C7                  	mov rdi, rax
  6091 00004B1D E880B20000              	call print_sexpr_if_not_void
  6092                                  
  6093 00004B22 48B8-                   	mov rax, L_constants + 23
  6093 00004B24 [1700000000000000] 
  6094 00004B2C 50                      	push rax
  6095 00004B2D 6A01                    	push 1
  6096 00004B2F BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  6097 00004B34 E858B20000              	call malloc
  6098 00004B39 50                      	push rax
  6099 00004B3A BF00000000              	mov rdi, 8 * 0	; new rib
  6100 00004B3F E84DB20000              	call malloc
  6101 00004B44 50                      	push rax
  6102 00004B45 BF08000000              	mov rdi, 8 * 1	; extended env
  6103 00004B4A E842B20000              	call malloc
  6104 00004B4F 488B7D10                	mov rdi, ENV
  6105 00004B53 BE00000000              	mov rsi, 0
  6106 00004B58 BA01000000              	mov rdx, 1
  6107                                  .L_lambda_simple_env_loop_0031:	; ext_env[i + 1] <-- env[i]
  6108 00004B5D 4883FE00                	cmp rsi, 0
  6109 00004B61 7410                    	je .L_lambda_simple_env_end_0031
  6110 00004B63 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  6111 00004B67 48890CD0                	mov qword [rax + 8 * rdx], rcx
  6112 00004B6B 48FFC6                  	inc rsi
  6113 00004B6E 48FFC2                  	inc rdx
  6114 00004B71 EBEA                    	jmp .L_lambda_simple_env_loop_0031
  6115                                  .L_lambda_simple_env_end_0031:
  6116 00004B73 5B                      	pop rbx
  6117 00004B74 BE00000000              	mov rsi, 0
  6118                                  .L_lambda_simple_params_loop_0031:	; copy params
  6119 00004B79 4883FE00                	cmp rsi, 0
  6120 00004B7D 740E                    	je .L_lambda_simple_params_end_0031
  6121 00004B7F 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  6122 00004B84 488914F3                	mov qword [rbx + 8 * rsi], rdx
  6123 00004B88 48FFC6                  	inc rsi
  6124 00004B8B EBEC                    	jmp .L_lambda_simple_params_loop_0031
  6125                                  .L_lambda_simple_params_end_0031:
  6126 00004B8D 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  6127 00004B90 4889C3                  	mov rbx, rax
  6128 00004B93 58                      	pop rax
  6129 00004B94 C60005                  	mov byte [rax], T_closure
  6130 00004B97 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  6131 00004B9B 48C74009[A84B0000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0031
  6132 00004BA3 E999030000              	jmp .L_lambda_simple_end_0031
  6133                                  .L_lambda_simple_code_0031:	; lambda-simple body
  6134 00004BA8 48837C241001            	cmp qword [rsp + 8 * 2], 1
  6135 00004BAE 740B                    	je .L_lambda_simple_arity_check_ok_0031
  6136 00004BB0 FF742410                	push qword [rsp + 8 * 2]
  6137 00004BB4 6A01                    	push 1
  6138 00004BB6 E98FB10000              	jmp L_error_incorrect_arity_simple
  6139                                  .L_lambda_simple_arity_check_ok_0031:
  6140 00004BBB C8000000                	enter 0, 0
  6141 00004BBF 488B4520                	mov rax, qword [rbp + 8 * (4 + 0)]
  6142 00004BC3 4889C2                  	mov rdx, rax
  6143 00004BC6 BF08000000              	mov rdi, 8
  6144 00004BCB E8C1B10000              	call malloc
  6145 00004BD0 488910                  	mov qword[rax], rdx
  6146 00004BD3 48894520                	mov qword [rbp + 8 * (4 + 0)], rax
  6147 00004BD7 48B8-                   	mov rax, sob_void
  6147 00004BD9 [0000000000000000] 
  6148                                  
  6149 00004BE1 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  6150 00004BE6 E8A6B10000              	call malloc
  6151 00004BEB 50                      	push rax
  6152 00004BEC BF08000000              	mov rdi, 8 * 1	; new rib
  6153 00004BF1 E89BB10000              	call malloc
  6154 00004BF6 50                      	push rax
  6155 00004BF7 BF10000000              	mov rdi, 8 * 2	; extended env
  6156 00004BFC E890B10000              	call malloc
  6157 00004C01 488B7D10                	mov rdi, ENV
  6158 00004C05 BE00000000              	mov rsi, 0
  6159 00004C0A BA01000000              	mov rdx, 1
  6160                                  .L_lambda_simple_env_loop_0032:	; ext_env[i + 1] <-- env[i]
  6161 00004C0F 4883FE01                	cmp rsi, 1
  6162 00004C13 7410                    	je .L_lambda_simple_env_end_0032
  6163 00004C15 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  6164 00004C19 48890CD0                	mov qword [rax + 8 * rdx], rcx
  6165 00004C1D 48FFC6                  	inc rsi
  6166 00004C20 48FFC2                  	inc rdx
  6167 00004C23 EBEA                    	jmp .L_lambda_simple_env_loop_0032
  6168                                  .L_lambda_simple_env_end_0032:
  6169 00004C25 5B                      	pop rbx
  6170 00004C26 BE00000000              	mov rsi, 0
  6171                                  .L_lambda_simple_params_loop_0032:	; copy params
  6172 00004C2B 4883FE01                	cmp rsi, 1
  6173 00004C2F 740E                    	je .L_lambda_simple_params_end_0032
  6174 00004C31 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  6175 00004C36 488914F3                	mov qword [rbx + 8 * rsi], rdx
  6176 00004C3A 48FFC6                  	inc rsi
  6177 00004C3D EBEC                    	jmp .L_lambda_simple_params_loop_0032
  6178                                  .L_lambda_simple_params_end_0032:
  6179 00004C3F 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  6180 00004C42 4889C3                  	mov rbx, rax
  6181 00004C45 58                      	pop rax
  6182 00004C46 C60005                  	mov byte [rax], T_closure
  6183 00004C49 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  6184 00004C4D 48C74009[5A4C0000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0032
  6185 00004C55 E91E010000              	jmp .L_lambda_simple_end_0032
  6186                                  .L_lambda_simple_code_0032:	; lambda-simple body
  6187 00004C5A 48837C241003            	cmp qword [rsp + 8 * 2], 3
  6188 00004C60 740B                    	je .L_lambda_simple_arity_check_ok_0032
  6189 00004C62 FF742410                	push qword [rsp + 8 * 2]
  6190 00004C66 6A03                    	push 3
  6191 00004C68 E9DDB00000              	jmp L_error_incorrect_arity_simple
  6192                                  .L_lambda_simple_arity_check_ok_0032:
  6193 00004C6D C8000000                	enter 0, 0
  6194 00004C71 488B4530                	mov rax, qword [rbp + 8 * (4 + 2)]
  6195 00004C75 50                      	push rax
  6196 00004C76 488B0425[00000000]      	mov rax, qword [free_var_0]
  6197 00004C7E 50                      	push rax
  6198 00004C7F 6A02                    	push 2
  6199 00004C81 488B0425[D0020000]      	mov rax, qword [free_var_90]
  6200                                  	assert_closure(rax)
    42 00004C89 803805              <1>  cmp byte [%1], %2
    43 00004C8C 0F85F8C80000        <1>  jne L_error_incorrect_type
  6201 00004C92 FF7001                  	push SOB_CLOSURE_ENV(rax)
  6202 00004C95 FF5009                  	call SOB_CLOSURE_CODE(rax)
  6203 00004C98 483D[02000000]          	cmp rax, sob_boolean_false
  6204 00004C9E 7409                              	je .L_if_else_000f
  6205 00004CA0 488B4528                          	mov rax, qword [rbp + 8 * (4 + 1)]
  6206 00004CA4 E9CB000000              	jmp .L_if_end_000f
  6207                                            .L_if_else_000f:
  6208 00004CA9 488B4530                          	mov rax, qword [rbp + 8 * (4 + 2)]
  6209 00004CAD 50                      	push rax
  6210 00004CAE 488B0425[88000000]      	mov rax, qword [free_var_17]
  6211 00004CB6 50                      	push rax
  6212 00004CB7 6A02                    	push 2
  6213 00004CB9 488B0425[D8020000]      	mov rax, qword [free_var_91]
  6214                                  	assert_closure(rax)
    42 00004CC1 803805              <1>  cmp byte [%1], %2
    43 00004CC4 0F85C0C80000        <1>  jne L_error_incorrect_type
  6215 00004CCA FF7001                  	push SOB_CLOSURE_ENV(rax)
  6216 00004CCD FF5009                  	call SOB_CLOSURE_CODE(rax)
  6217 00004CD0 50                      	push rax
  6218 00004CD1 488B4530                	mov rax, qword [rbp + 8 * (4 + 2)]
  6219 00004CD5 50                      	push rax
  6220 00004CD6 488B0425[80000000]      	mov rax, qword [free_var_16]
  6221 00004CDE 50                      	push rax
  6222 00004CDF 6A02                    	push 2
  6223 00004CE1 488B0425[D8020000]      	mov rax, qword [free_var_91]
  6224                                  	assert_closure(rax)
    42 00004CE9 803805              <1>  cmp byte [%1], %2
    43 00004CEC 0F8598C80000        <1>  jne L_error_incorrect_type
  6225 00004CF2 FF7001                  	push SOB_CLOSURE_ENV(rax)
  6226 00004CF5 FF5009                  	call SOB_CLOSURE_CODE(rax)
  6227 00004CF8 50                      	push rax
  6228 00004CF9 488B4528                	mov rax, qword [rbp + 8 * (4 + 1)]
  6229 00004CFD 50                      	push rax
  6230 00004CFE 488B4520                	mov rax, qword [rbp + 8 * (4 + 0)]
  6231 00004D02 50                      	push rax
  6232 00004D03 6A03                    	push 3
  6233 00004D05 488B0425[C8020000]      	mov rax, qword [free_var_89]
  6234                                  	assert_closure(rax)
    42 00004D0D 803805              <1>  cmp byte [%1], %2
    43 00004D10 0F8574C80000        <1>  jne L_error_incorrect_type
  6235 00004D16 FF7001                  	push SOB_CLOSURE_ENV(rax)
  6236 00004D19 FF5009                  	call SOB_CLOSURE_CODE(rax)
  6237 00004D1C 50                      	push rax
  6238 00004D1D 488B4520                	mov rax, qword [rbp + 8 * (4 + 0)]
  6239 00004D21 50                      	push rax
  6240 00004D22 6A03                    	push 3
  6241 00004D24 488B4510                	mov rax, qword [rbp + 8 * 2]
  6242 00004D28 488B00                  	mov rax, qword [rax + 8 * 0]
  6243 00004D2B 488B00                  	mov rax, qword [rax + 8 * 0]
  6244 00004D2E 488B00                  	mov rax, qword [rax]
  6245                                  	assert_closure(rax)
    42 00004D31 803805              <1>  cmp byte [%1], %2
    43 00004D34 0F8550C80000        <1>  jne L_error_incorrect_type
  6246 00004D3A FF7001                  	push SOB_CLOSURE_ENV(rax)
  6247 00004D3D FF7508                  	push qword [rbp + 8 * 1] ; old ret addr
  6248 00004D40 FF7500                  	push qword [rbp] ; same the old rbp
  6249 00004D43 BA06000000              	mov rdx, 3 + 3
  6250 00004D48 488B4D18                	mov rcx, COUNT
  6251 00004D4C 488D4CCD20              	lea rcx, [rbp + 8*4 + rcx * 8]
  6252 00004D51 4889EF                  	mov rdi, rbp
  6253                                  .L_tc_recycle_frame_loop_0031:
  6254 00004D54 4883FA00                	cmp rdx, 0
  6255 00004D58 7413                    	je .L_tc_recycle_frame_done_0031
  6256 00004D5A 4883E908                	sub rcx, 8
  6257 00004D5E 4883EF08                	sub rdi, 8
  6258 00004D62 488B37                  	mov rsi, [rdi]
  6259 00004D65 488931                  	mov qword [rcx], rsi
  6260 00004D68 48FFCA                  	dec rdx
  6261 00004D6B EBE7                    	jmp .L_tc_recycle_frame_loop_0031
  6262                                  .L_tc_recycle_frame_done_0031:
  6263 00004D6D 5D                      	pop rbp ; restore the old rbp
  6264 00004D6E 4889CC                  	mov rsp, rcx
  6265 00004D71 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
  6266                                  .L_if_end_000f:
  6267 00004D74 C9                      	leave
  6268 00004D75 C22800                  	ret 8 * (2 + 3)
  6269                                  .L_lambda_simple_end_0032:	; new closure is in rax
  6270 00004D78 50                      	push rax
  6271 00004D79 488B4520                	mov rax, qword [rbp + 8 * (4 + 0)]
  6272 00004D7D 8F00                    	pop qword [rax]
  6273 00004D7F 48B8-                   	mov rax, sob_void
  6273 00004D81 [0000000000000000] 
  6274                                  
  6275 00004D89 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  6276 00004D8E E8FEAF0000              	call malloc
  6277 00004D93 50                      	push rax
  6278 00004D94 BF08000000              	mov rdi, 8 * 1	; new rib
  6279 00004D99 E8F3AF0000              	call malloc
  6280 00004D9E 50                      	push rax
  6281 00004D9F BF10000000              	mov rdi, 8 * 2	; extended env
  6282 00004DA4 E8E8AF0000              	call malloc
  6283 00004DA9 488B7D10                	mov rdi, ENV
  6284 00004DAD BE00000000              	mov rsi, 0
  6285 00004DB2 BA01000000              	mov rdx, 1
  6286                                  .L_lambda_opt_env_loop_0008:	; ext_env[i + 1] <-- env[i]
  6287 00004DB7 4883FE01                	cmp rsi, 1
  6288 00004DBB 7410                    	je .L_lambda_opt_env_end_0008
  6289 00004DBD 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  6290 00004DC1 48890CD0                	mov qword [rax + 8 * rdx], rcx
  6291 00004DC5 48FFC6                  	inc rsi
  6292 00004DC8 48FFC2                  	inc rdx
  6293 00004DCB EBEA                    	jmp .L_lambda_opt_env_loop_0008
  6294                                  .L_lambda_opt_env_end_0008:
  6295 00004DCD 5B                      	pop rbx
  6296 00004DCE BE00000000              	mov rsi, 0
  6297                                  .L_lambda_opt_params_loop_0008:	; copy params
  6298 00004DD3 4883FE01                	cmp rsi, 1
  6299 00004DD7 740E                    	je .L_lambda_opt_params_end_0008
  6300 00004DD9 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  6301 00004DDE 488914F3                	mov qword [rbx + 8 * rsi], rdx
  6302 00004DE2 48FFC6                  	inc rsi
  6303 00004DE5 EBEC                    	jmp .L_lambda_opt_params_loop_0008
  6304                                  .L_lambda_opt_params_end_0008:
  6305 00004DE7 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  6306 00004DEA 4889C3                  	mov rbx, rax
  6307 00004DED 58                      	pop rax
  6308 00004DEE C60005                  	mov byte [rax], T_closure
  6309 00004DF1 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  6310 00004DF5 48C74009[024E0000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_opt_code_0008
  6311 00004DFD E93B010000              	jmp .L_lambda_opt_end_0008
  6312                                  .L_lambda_opt_code_0008:	; lambda-opt body
  6313 00004E02 48837C241002            	cmp qword [rsp + 8 * 2], 2
  6314 00004E08 740D                    	je .L_lambda_opt_arity_check_exact_0008
  6315 00004E0A 7F43                    	jg .L_lambda_opt_arity_check_more_0008
  6316 00004E0C FF742410                	push qword [rsp + 8 * 2]
  6317 00004E10 6A02                    	push 2
  6318 00004E12 E947AF0000              	jmp L_error_incorrect_arity_opt
  6319                                  .L_lambda_opt_arity_check_exact_0008:
  6320 00004E17 48C744241003000000      	mov qword [rsp + 8 * 2], 3
  6321 00004E20 BA05000000              	mov rdx, 5
  6322 00004E25 FF3424                  	push qword [rsp]
  6323 00004E28 BE01000000              	mov rsi, 1
  6324                                  .L_lambda_opt_stack_shrink_loop_0016:
  6325 00004E2D 4839D6                  	cmp rsi, rdx
  6326 00004E30 7411                    	je .L_lambda_opt_stack_shrink_loop_exit_0016
  6327 00004E32 488D5CF408              	lea rbx, [rsp + 8 + rsi * 8]
  6328 00004E37 488B0B                  	mov rcx, [rbx]
  6329 00004E3A 48894BF8                	mov qword [rbx - 8], rcx
  6330 00004E3E 48FFC6                  	inc rsi
  6331 00004E41 EBEA                    	jmp .L_lambda_opt_stack_shrink_loop_0016
  6332                                  .L_lambda_opt_stack_shrink_loop_exit_0016:
  6333 00004E43 48C703[01000000]        	mov qword [rbx], sob_nil
  6334 00004E4A E985000000              	jmp .L_lambda_opt_stack_adjusted_0008
  6335                                  .L_lambda_opt_arity_check_more_0008:
  6336 00004E4F 488B542410              	mov rdx, qword [rsp + 8 * 2]
  6337 00004E54 4883EA02                	sub rdx, 2
  6338 00004E58 48C744241003000000      	mov qword [rsp + 8 * 2], 3
  6339 00004E61 BE00000000              	mov rsi, 0
  6340 00004E66 488D5CD420              	lea rbx, [rsp + 2 * 8 + 2 * 8 + rdx * 8]
  6341 00004E6B 48B9-                   	mov rcx, sob_nil
  6341 00004E6D [0100000000000000] 
  6342                                  .L_lambda_opt_stack_shrink_loop_0017:
  6343 00004E75 4839D6                  	cmp rsi, rdx
  6344 00004E78 7427                    je .L_lambda_opt_stack_shrink_loop_exit_0017
  6345 00004E7A BF11000000              	mov rdi, 17 ; 1+8+8
  6346 00004E7F E80DAF0000              	call malloc
  6347 00004E84 48894809                	mov SOB_PAIR_CDR(rax), rcx
  6348 00004E88 48F7DE                  	neg rsi
  6349 00004E8B 488B0CF3                	mov rcx, qword [rbx + rsi * 8]
  6350 00004E8F 48F7DE                  	neg rsi
  6351 00004E92 48894801                	mov SOB_PAIR_CAR(rax), rcx
  6352 00004E96 C60021                  	mov byte [rax], T_pair
  6353 00004E99 4889C1                  	mov rcx, rax
  6354 00004E9C 48FFC6                  	inc rsi
  6355 00004E9F EBD4                    	jmp .L_lambda_opt_stack_shrink_loop_0017
  6356                                  .L_lambda_opt_stack_shrink_loop_exit_0017:
  6357 00004EA1 48890B                  	mov qword [rbx], rcx
  6358 00004EA4 4883EB08                	sub rbx, 8
  6359 00004EA8 4889E7                  	mov rdi, rsp
  6360 00004EAB 4883C720                	add rdi, 32
  6361 00004EAF BE05000000              	mov rsi, 5
  6362                                  .L_lambda_opt_stack_shrink_loop_0018:
  6363 00004EB4 4883FE00                	cmp rsi,0
  6364 00004EB8 7413                    	je .L_lambda_opt_stack_shrink_loop_exit_0018
  6365 00004EBA 488B0F                  	mov rcx, qword [rdi]
  6366 00004EBD 48890B                  	mov [rbx], rcx
  6367 00004EC0 48FFCE                  	dec rsi
  6368 00004EC3 4883EB08                	sub rbx, 8
  6369 00004EC7 4883EF08                	sub rdi, 8
  6370 00004ECB EBE7                    	jmp .L_lambda_opt_stack_shrink_loop_0018
  6371                                  .L_lambda_opt_stack_shrink_loop_exit_0018:
  6372 00004ECD 4883C308                	add rbx, 8
  6373 00004ED1 4889DC                  	mov rsp, rbx
  6374                                  .L_lambda_opt_stack_adjusted_0008:
  6375 00004ED4 C8000000                	enter 0, 0
  6376 00004ED8 488B4530                	mov rax, qword [rbp + 8 * (4 + 2)]
  6377 00004EDC 50                      	push rax
  6378 00004EDD 488B4528                	mov rax, qword [rbp + 8 * (4 + 1)]
  6379 00004EE1 50                      	push rax
  6380 00004EE2 488B4520                	mov rax, qword [rbp + 8 * (4 + 0)]
  6381 00004EE6 50                      	push rax
  6382 00004EE7 6A03                    	push 3
  6383 00004EE9 488B4510                	mov rax, qword [rbp + 8 * 2]
  6384 00004EED 488B00                  	mov rax, qword [rax + 8 * 0]
  6385 00004EF0 488B00                  	mov rax, qword [rax + 8 * 0]
  6386 00004EF3 488B00                  	mov rax, qword [rax]
  6387                                  	assert_closure(rax)
    42 00004EF6 803805              <1>  cmp byte [%1], %2
    43 00004EF9 0F858BC60000        <1>  jne L_error_incorrect_type
  6388 00004EFF FF7001                  	push SOB_CLOSURE_ENV(rax)
  6389 00004F02 FF7508                  	push qword [rbp + 8 * 1] ; old ret addr
  6390 00004F05 FF7500                  	push qword [rbp] ; same the old rbp
  6391 00004F08 BA06000000              	mov rdx, 3 + 3
  6392 00004F0D 488B4D18                	mov rcx, COUNT
  6393 00004F11 488D4CCD20              	lea rcx, [rbp + 8*4 + rcx * 8]
  6394 00004F16 4889EF                  	mov rdi, rbp
  6395                                  .L_tc_recycle_frame_loop_0032:
  6396 00004F19 4883FA00                	cmp rdx, 0
  6397 00004F1D 7413                    	je .L_tc_recycle_frame_done_0032
  6398 00004F1F 4883E908                	sub rcx, 8
  6399 00004F23 4883EF08                	sub rdi, 8
  6400 00004F27 488B37                  	mov rsi, [rdi]
  6401 00004F2A 488931                  	mov qword [rcx], rsi
  6402 00004F2D 48FFCA                  	dec rdx
  6403 00004F30 EBE7                    	jmp .L_tc_recycle_frame_loop_0032
  6404                                  .L_tc_recycle_frame_done_0032:
  6405 00004F32 5D                      	pop rbp ; restore the old rbp
  6406 00004F33 4889CC                  	mov rsp, rcx
  6407 00004F36 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
  6408 00004F39 C9                      	leave
  6409 00004F3A C22800                  	ret 8 * (2 + 3)
  6410                                  .L_lambda_opt_end_0008:	; new closure is in rax
  6411 00004F3D C9                      	leave
  6412 00004F3E C21800                  	ret 8 * (2 + 1)
  6413                                  .L_lambda_simple_end_0031:	; new closure is in rax
  6414                                  	assert_closure(rax)
    42 00004F41 803805              <1>  cmp byte [%1], %2
    43 00004F44 0F8540C60000        <1>  jne L_error_incorrect_type
  6415 00004F4A FF7001                  	push SOB_CLOSURE_ENV(rax)
  6416 00004F4D FF5009                  	call SOB_CLOSURE_CODE(rax)
  6417 00004F50 48890425[F8020000]      	mov qword [free_var_95], rax
  6418 00004F58 48B8-                   	mov rax, sob_void
  6418 00004F5A [0000000000000000] 
  6419                                  
  6420 00004F62 4889C7                  	mov rdi, rax
  6421 00004F65 E838AE0000              	call print_sexpr_if_not_void
  6422                                  
  6423 00004F6A 48B8-                   	mov rax, L_constants + 23
  6423 00004F6C [1700000000000000] 
  6424 00004F74 50                      	push rax
  6425 00004F75 6A01                    	push 1
  6426 00004F77 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  6427 00004F7C E810AE0000              	call malloc
  6428 00004F81 50                      	push rax
  6429 00004F82 BF00000000              	mov rdi, 8 * 0	; new rib
  6430 00004F87 E805AE0000              	call malloc
  6431 00004F8C 50                      	push rax
  6432 00004F8D BF08000000              	mov rdi, 8 * 1	; extended env
  6433 00004F92 E8FAAD0000              	call malloc
  6434 00004F97 488B7D10                	mov rdi, ENV
  6435 00004F9B BE00000000              	mov rsi, 0
  6436 00004FA0 BA01000000              	mov rdx, 1
  6437                                  .L_lambda_simple_env_loop_0033:	; ext_env[i + 1] <-- env[i]
  6438 00004FA5 4883FE00                	cmp rsi, 0
  6439 00004FA9 7410                    	je .L_lambda_simple_env_end_0033
  6440 00004FAB 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  6441 00004FAF 48890CD0                	mov qword [rax + 8 * rdx], rcx
  6442 00004FB3 48FFC6                  	inc rsi
  6443 00004FB6 48FFC2                  	inc rdx
  6444 00004FB9 EBEA                    	jmp .L_lambda_simple_env_loop_0033
  6445                                  .L_lambda_simple_env_end_0033:
  6446 00004FBB 5B                      	pop rbx
  6447 00004FBC BE00000000              	mov rsi, 0
  6448                                  .L_lambda_simple_params_loop_0033:	; copy params
  6449 00004FC1 4883FE00                	cmp rsi, 0
  6450 00004FC5 740E                    	je .L_lambda_simple_params_end_0033
  6451 00004FC7 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  6452 00004FCC 488914F3                	mov qword [rbx + 8 * rsi], rdx
  6453 00004FD0 48FFC6                  	inc rsi
  6454 00004FD3 EBEC                    	jmp .L_lambda_simple_params_loop_0033
  6455                                  .L_lambda_simple_params_end_0033:
  6456 00004FD5 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  6457 00004FD8 4889C3                  	mov rbx, rax
  6458 00004FDB 58                      	pop rax
  6459 00004FDC C60005                  	mov byte [rax], T_closure
  6460 00004FDF 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  6461 00004FE3 48C74009[F04F0000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0033
  6462 00004FEB E9D8030000              	jmp .L_lambda_simple_end_0033
  6463                                  .L_lambda_simple_code_0033:	; lambda-simple body
  6464 00004FF0 48837C241001            	cmp qword [rsp + 8 * 2], 1
  6465 00004FF6 740B                    	je .L_lambda_simple_arity_check_ok_0033
  6466 00004FF8 FF742410                	push qword [rsp + 8 * 2]
  6467 00004FFC 6A01                    	push 1
  6468 00004FFE E947AD0000              	jmp L_error_incorrect_arity_simple
  6469                                  .L_lambda_simple_arity_check_ok_0033:
  6470 00005003 C8000000                	enter 0, 0
  6471 00005007 488B4520                	mov rax, qword [rbp + 8 * (4 + 0)]
  6472 0000500B 4889C2                  	mov rdx, rax
  6473 0000500E BF08000000              	mov rdi, 8
  6474 00005013 E879AD0000              	call malloc
  6475 00005018 488910                  	mov qword[rax], rdx
  6476 0000501B 48894520                	mov qword [rbp + 8 * (4 + 0)], rax
  6477 0000501F 48B8-                   	mov rax, sob_void
  6477 00005021 [0000000000000000] 
  6478                                  
  6479 00005029 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  6480 0000502E E85EAD0000              	call malloc
  6481 00005033 50                      	push rax
  6482 00005034 BF08000000              	mov rdi, 8 * 1	; new rib
  6483 00005039 E853AD0000              	call malloc
  6484 0000503E 50                      	push rax
  6485 0000503F BF10000000              	mov rdi, 8 * 2	; extended env
  6486 00005044 E848AD0000              	call malloc
  6487 00005049 488B7D10                	mov rdi, ENV
  6488 0000504D BE00000000              	mov rsi, 0
  6489 00005052 BA01000000              	mov rdx, 1
  6490                                  .L_lambda_simple_env_loop_0034:	; ext_env[i + 1] <-- env[i]
  6491 00005057 4883FE01                	cmp rsi, 1
  6492 0000505B 7410                    	je .L_lambda_simple_env_end_0034
  6493 0000505D 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  6494 00005061 48890CD0                	mov qword [rax + 8 * rdx], rcx
  6495 00005065 48FFC6                  	inc rsi
  6496 00005068 48FFC2                  	inc rdx
  6497 0000506B EBEA                    	jmp .L_lambda_simple_env_loop_0034
  6498                                  .L_lambda_simple_env_end_0034:
  6499 0000506D 5B                      	pop rbx
  6500 0000506E BE00000000              	mov rsi, 0
  6501                                  .L_lambda_simple_params_loop_0034:	; copy params
  6502 00005073 4883FE01                	cmp rsi, 1
  6503 00005077 740E                    	je .L_lambda_simple_params_end_0034
  6504 00005079 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  6505 0000507E 488914F3                	mov qword [rbx + 8 * rsi], rdx
  6506 00005082 48FFC6                  	inc rsi
  6507 00005085 EBEC                    	jmp .L_lambda_simple_params_loop_0034
  6508                                  .L_lambda_simple_params_end_0034:
  6509 00005087 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  6510 0000508A 4889C3                  	mov rbx, rax
  6511 0000508D 58                      	pop rax
  6512 0000508E C60005                  	mov byte [rax], T_closure
  6513 00005091 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  6514 00005095 48C74009[A2500000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0034
  6515 0000509D E95D010000              	jmp .L_lambda_simple_end_0034
  6516                                  .L_lambda_simple_code_0034:	; lambda-simple body
  6517 000050A2 48837C241003            	cmp qword [rsp + 8 * 2], 3
  6518 000050A8 740B                    	je .L_lambda_simple_arity_check_ok_0034
  6519 000050AA FF742410                	push qword [rsp + 8 * 2]
  6520 000050AE 6A03                    	push 3
  6521 000050B0 E995AC0000              	jmp L_error_incorrect_arity_simple
  6522                                  .L_lambda_simple_arity_check_ok_0034:
  6523 000050B5 C8000000                	enter 0, 0
  6524 000050B9 488B4530                	mov rax, qword [rbp + 8 * (4 + 2)]
  6525 000050BD 50                      	push rax
  6526 000050BE 488B0425[00000000]      	mov rax, qword [free_var_0]
  6527 000050C6 50                      	push rax
  6528 000050C7 6A02                    	push 2
  6529 000050C9 488B0425[D0020000]      	mov rax, qword [free_var_90]
  6530                                  	assert_closure(rax)
    42 000050D1 803805              <1>  cmp byte [%1], %2
    43 000050D4 0F85B0C40000        <1>  jne L_error_incorrect_type
  6531 000050DA FF7001                  	push SOB_CLOSURE_ENV(rax)
  6532 000050DD FF5009                  	call SOB_CLOSURE_CODE(rax)
  6533 000050E0 483D[02000000]          	cmp rax, sob_boolean_false
  6534 000050E6 7409                              	je .L_if_else_0010
  6535 000050E8 488B4528                          	mov rax, qword [rbp + 8 * (4 + 1)]
  6536 000050EC E90A010000              	jmp .L_if_end_0010
  6537                                            .L_if_else_0010:
  6538 000050F1 48B8-                             	mov rax, L_constants + 1
  6538 000050F3 [0100000000000000] 
  6539 000050FB 50                      	push rax
  6540 000050FC 488B4530                	mov rax, qword [rbp + 8 * (4 + 2)]
  6541 00005100 50                      	push rax
  6542 00005101 488B0425[88000000]      	mov rax, qword [free_var_17]
  6543 00005109 50                      	push rax
  6544 0000510A 6A02                    	push 2
  6545 0000510C 488B0425[D8020000]      	mov rax, qword [free_var_91]
  6546                                  	assert_closure(rax)
    42 00005114 803805              <1>  cmp byte [%1], %2
    43 00005117 0F856DC40000        <1>  jne L_error_incorrect_type
  6547 0000511D FF7001                  	push SOB_CLOSURE_ENV(rax)
  6548 00005120 FF5009                  	call SOB_CLOSURE_CODE(rax)
  6549 00005123 50                      	push rax
  6550 00005124 488B4528                	mov rax, qword [rbp + 8 * (4 + 1)]
  6551 00005128 50                      	push rax
  6552 00005129 488B4520                	mov rax, qword [rbp + 8 * (4 + 0)]
  6553 0000512D 50                      	push rax
  6554 0000512E 6A03                    	push 3
  6555 00005130 488B4510                	mov rax, qword [rbp + 8 * 2]
  6556 00005134 488B00                  	mov rax, qword [rax + 8 * 0]
  6557 00005137 488B00                  	mov rax, qword [rax + 8 * 0]
  6558 0000513A 488B00                  	mov rax, qword [rax]
  6559                                  	assert_closure(rax)
    42 0000513D 803805              <1>  cmp byte [%1], %2
    43 00005140 0F8544C40000        <1>  jne L_error_incorrect_type
  6560 00005146 FF7001                  	push SOB_CLOSURE_ENV(rax)
  6561 00005149 FF5009                  	call SOB_CLOSURE_CODE(rax)
  6562 0000514C 50                      	push rax
  6563 0000514D 6A02                    	push 2
  6564 0000514F 488B0425[68000000]      	mov rax, qword [free_var_13]
  6565                                  	assert_closure(rax)
    42 00005157 803805              <1>  cmp byte [%1], %2
    43 0000515A 0F852AC40000        <1>  jne L_error_incorrect_type
  6566 00005160 FF7001                  	push SOB_CLOSURE_ENV(rax)
  6567 00005163 FF5009                  	call SOB_CLOSURE_CODE(rax)
  6568 00005166 50                      	push rax
  6569 00005167 488B4530                	mov rax, qword [rbp + 8 * (4 + 2)]
  6570 0000516B 50                      	push rax
  6571 0000516C 488B0425[80000000]      	mov rax, qword [free_var_16]
  6572 00005174 50                      	push rax
  6573 00005175 6A02                    	push 2
  6574 00005177 488B0425[D8020000]      	mov rax, qword [free_var_91]
  6575                                  	assert_closure(rax)
    42 0000517F 803805              <1>  cmp byte [%1], %2
    43 00005182 0F8502C40000        <1>  jne L_error_incorrect_type
  6576 00005188 FF7001                  	push SOB_CLOSURE_ENV(rax)
  6577 0000518B FF5009                  	call SOB_CLOSURE_CODE(rax)
  6578 0000518E 50                      	push rax
  6579 0000518F 6A02                    	push 2
  6580 00005191 488B0425[F0020000]      	mov rax, qword [free_var_94]
  6581                                  	assert_closure(rax)
    42 00005199 803805              <1>  cmp byte [%1], %2
    43 0000519C 0F85E8C30000        <1>  jne L_error_incorrect_type
  6582 000051A2 FF7001                  	push SOB_CLOSURE_ENV(rax)
  6583 000051A5 FF5009                  	call SOB_CLOSURE_CODE(rax)
  6584 000051A8 50                      	push rax
  6585 000051A9 488B4520                	mov rax, qword [rbp + 8 * (4 + 0)]
  6586 000051AD 50                      	push rax
  6587 000051AE 6A02                    	push 2
  6588 000051B0 488B0425[C8020000]      	mov rax, qword [free_var_89]
  6589                                  	assert_closure(rax)
    42 000051B8 803805              <1>  cmp byte [%1], %2
    43 000051BB 0F85C9C30000        <1>  jne L_error_incorrect_type
  6590 000051C1 FF7001                  	push SOB_CLOSURE_ENV(rax)
  6591 000051C4 FF7508                  	push qword [rbp + 8 * 1] ; old ret addr
  6592 000051C7 FF7500                  	push qword [rbp] ; same the old rbp
  6593 000051CA BA05000000              	mov rdx, 2 + 3
  6594 000051CF 488B4D18                	mov rcx, COUNT
  6595 000051D3 488D4CCD20              	lea rcx, [rbp + 8*4 + rcx * 8]
  6596 000051D8 4889EF                  	mov rdi, rbp
  6597                                  .L_tc_recycle_frame_loop_0033:
  6598 000051DB 4883FA00                	cmp rdx, 0
  6599 000051DF 7413                    	je .L_tc_recycle_frame_done_0033
  6600 000051E1 4883E908                	sub rcx, 8
  6601 000051E5 4883EF08                	sub rdi, 8
  6602 000051E9 488B37                  	mov rsi, [rdi]
  6603 000051EC 488931                  	mov qword [rcx], rsi
  6604 000051EF 48FFCA                  	dec rdx
  6605 000051F2 EBE7                    	jmp .L_tc_recycle_frame_loop_0033
  6606                                  .L_tc_recycle_frame_done_0033:
  6607 000051F4 5D                      	pop rbp ; restore the old rbp
  6608 000051F5 4889CC                  	mov rsp, rcx
  6609 000051F8 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
  6610                                  .L_if_end_0010:
  6611 000051FB C9                      	leave
  6612 000051FC C22800                  	ret 8 * (2 + 3)
  6613                                  .L_lambda_simple_end_0034:	; new closure is in rax
  6614 000051FF 50                      	push rax
  6615 00005200 488B4520                	mov rax, qword [rbp + 8 * (4 + 0)]
  6616 00005204 8F00                    	pop qword [rax]
  6617 00005206 48B8-                   	mov rax, sob_void
  6617 00005208 [0000000000000000] 
  6618                                  
  6619 00005210 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  6620 00005215 E877AB0000              	call malloc
  6621 0000521A 50                      	push rax
  6622 0000521B BF08000000              	mov rdi, 8 * 1	; new rib
  6623 00005220 E86CAB0000              	call malloc
  6624 00005225 50                      	push rax
  6625 00005226 BF10000000              	mov rdi, 8 * 2	; extended env
  6626 0000522B E861AB0000              	call malloc
  6627 00005230 488B7D10                	mov rdi, ENV
  6628 00005234 BE00000000              	mov rsi, 0
  6629 00005239 BA01000000              	mov rdx, 1
  6630                                  .L_lambda_opt_env_loop_0009:	; ext_env[i + 1] <-- env[i]
  6631 0000523E 4883FE01                	cmp rsi, 1
  6632 00005242 7410                    	je .L_lambda_opt_env_end_0009
  6633 00005244 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  6634 00005248 48890CD0                	mov qword [rax + 8 * rdx], rcx
  6635 0000524C 48FFC6                  	inc rsi
  6636 0000524F 48FFC2                  	inc rdx
  6637 00005252 EBEA                    	jmp .L_lambda_opt_env_loop_0009
  6638                                  .L_lambda_opt_env_end_0009:
  6639 00005254 5B                      	pop rbx
  6640 00005255 BE00000000              	mov rsi, 0
  6641                                  .L_lambda_opt_params_loop_0009:	; copy params
  6642 0000525A 4883FE01                	cmp rsi, 1
  6643 0000525E 740E                    	je .L_lambda_opt_params_end_0009
  6644 00005260 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  6645 00005265 488914F3                	mov qword [rbx + 8 * rsi], rdx
  6646 00005269 48FFC6                  	inc rsi
  6647 0000526C EBEC                    	jmp .L_lambda_opt_params_loop_0009
  6648                                  .L_lambda_opt_params_end_0009:
  6649 0000526E 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  6650 00005271 4889C3                  	mov rbx, rax
  6651 00005274 58                      	pop rax
  6652 00005275 C60005                  	mov byte [rax], T_closure
  6653 00005278 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  6654 0000527C 48C74009[89520000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_opt_code_0009
  6655 00005284 E93B010000              	jmp .L_lambda_opt_end_0009
  6656                                  .L_lambda_opt_code_0009:	; lambda-opt body
  6657 00005289 48837C241002            	cmp qword [rsp + 8 * 2], 2
  6658 0000528F 740D                    	je .L_lambda_opt_arity_check_exact_0009
  6659 00005291 7F43                    	jg .L_lambda_opt_arity_check_more_0009
  6660 00005293 FF742410                	push qword [rsp + 8 * 2]
  6661 00005297 6A02                    	push 2
  6662 00005299 E9C0AA0000              	jmp L_error_incorrect_arity_opt
  6663                                  .L_lambda_opt_arity_check_exact_0009:
  6664 0000529E 48C744241003000000      	mov qword [rsp + 8 * 2], 3
  6665 000052A7 BA05000000              	mov rdx, 5
  6666 000052AC FF3424                  	push qword [rsp]
  6667 000052AF BE01000000              	mov rsi, 1
  6668                                  .L_lambda_opt_stack_shrink_loop_0019:
  6669 000052B4 4839D6                  	cmp rsi, rdx
  6670 000052B7 7411                    	je .L_lambda_opt_stack_shrink_loop_exit_0019
  6671 000052B9 488D5CF408              	lea rbx, [rsp + 8 + rsi * 8]
  6672 000052BE 488B0B                  	mov rcx, [rbx]
  6673 000052C1 48894BF8                	mov qword [rbx - 8], rcx
  6674 000052C5 48FFC6                  	inc rsi
  6675 000052C8 EBEA                    	jmp .L_lambda_opt_stack_shrink_loop_0019
  6676                                  .L_lambda_opt_stack_shrink_loop_exit_0019:
  6677 000052CA 48C703[01000000]        	mov qword [rbx], sob_nil
  6678 000052D1 E985000000              	jmp .L_lambda_opt_stack_adjusted_0009
  6679                                  .L_lambda_opt_arity_check_more_0009:
  6680 000052D6 488B542410              	mov rdx, qword [rsp + 8 * 2]
  6681 000052DB 4883EA02                	sub rdx, 2
  6682 000052DF 48C744241003000000      	mov qword [rsp + 8 * 2], 3
  6683 000052E8 BE00000000              	mov rsi, 0
  6684 000052ED 488D5CD420              	lea rbx, [rsp + 2 * 8 + 2 * 8 + rdx * 8]
  6685 000052F2 48B9-                   	mov rcx, sob_nil
  6685 000052F4 [0100000000000000] 
  6686                                  .L_lambda_opt_stack_shrink_loop_001a:
  6687 000052FC 4839D6                  	cmp rsi, rdx
  6688 000052FF 7427                    je .L_lambda_opt_stack_shrink_loop_exit_001a
  6689 00005301 BF11000000              	mov rdi, 17 ; 1+8+8
  6690 00005306 E886AA0000              	call malloc
  6691 0000530B 48894809                	mov SOB_PAIR_CDR(rax), rcx
  6692 0000530F 48F7DE                  	neg rsi
  6693 00005312 488B0CF3                	mov rcx, qword [rbx + rsi * 8]
  6694 00005316 48F7DE                  	neg rsi
  6695 00005319 48894801                	mov SOB_PAIR_CAR(rax), rcx
  6696 0000531D C60021                  	mov byte [rax], T_pair
  6697 00005320 4889C1                  	mov rcx, rax
  6698 00005323 48FFC6                  	inc rsi
  6699 00005326 EBD4                    	jmp .L_lambda_opt_stack_shrink_loop_001a
  6700                                  .L_lambda_opt_stack_shrink_loop_exit_001a:
  6701 00005328 48890B                  	mov qword [rbx], rcx
  6702 0000532B 4883EB08                	sub rbx, 8
  6703 0000532F 4889E7                  	mov rdi, rsp
  6704 00005332 4883C720                	add rdi, 32
  6705 00005336 BE05000000              	mov rsi, 5
  6706                                  .L_lambda_opt_stack_shrink_loop_001b:
  6707 0000533B 4883FE00                	cmp rsi,0
  6708 0000533F 7413                    	je .L_lambda_opt_stack_shrink_loop_exit_001b
  6709 00005341 488B0F                  	mov rcx, qword [rdi]
  6710 00005344 48890B                  	mov [rbx], rcx
  6711 00005347 48FFCE                  	dec rsi
  6712 0000534A 4883EB08                	sub rbx, 8
  6713 0000534E 4883EF08                	sub rdi, 8
  6714 00005352 EBE7                    	jmp .L_lambda_opt_stack_shrink_loop_001b
  6715                                  .L_lambda_opt_stack_shrink_loop_exit_001b:
  6716 00005354 4883C308                	add rbx, 8
  6717 00005358 4889DC                  	mov rsp, rbx
  6718                                  .L_lambda_opt_stack_adjusted_0009:
  6719 0000535B C8000000                	enter 0, 0
  6720 0000535F 488B4530                	mov rax, qword [rbp + 8 * (4 + 2)]
  6721 00005363 50                      	push rax
  6722 00005364 488B4528                	mov rax, qword [rbp + 8 * (4 + 1)]
  6723 00005368 50                      	push rax
  6724 00005369 488B4520                	mov rax, qword [rbp + 8 * (4 + 0)]
  6725 0000536D 50                      	push rax
  6726 0000536E 6A03                    	push 3
  6727 00005370 488B4510                	mov rax, qword [rbp + 8 * 2]
  6728 00005374 488B00                  	mov rax, qword [rax + 8 * 0]
  6729 00005377 488B00                  	mov rax, qword [rax + 8 * 0]
  6730 0000537A 488B00                  	mov rax, qword [rax]
  6731                                  	assert_closure(rax)
    42 0000537D 803805              <1>  cmp byte [%1], %2
    43 00005380 0F8504C20000        <1>  jne L_error_incorrect_type
  6732 00005386 FF7001                  	push SOB_CLOSURE_ENV(rax)
  6733 00005389 FF7508                  	push qword [rbp + 8 * 1] ; old ret addr
  6734 0000538C FF7500                  	push qword [rbp] ; same the old rbp
  6735 0000538F BA06000000              	mov rdx, 3 + 3
  6736 00005394 488B4D18                	mov rcx, COUNT
  6737 00005398 488D4CCD20              	lea rcx, [rbp + 8*4 + rcx * 8]
  6738 0000539D 4889EF                  	mov rdi, rbp
  6739                                  .L_tc_recycle_frame_loop_0034:
  6740 000053A0 4883FA00                	cmp rdx, 0
  6741 000053A4 7413                    	je .L_tc_recycle_frame_done_0034
  6742 000053A6 4883E908                	sub rcx, 8
  6743 000053AA 4883EF08                	sub rdi, 8
  6744 000053AE 488B37                  	mov rsi, [rdi]
  6745 000053B1 488931                  	mov qword [rcx], rsi
  6746 000053B4 48FFCA                  	dec rdx
  6747 000053B7 EBE7                    	jmp .L_tc_recycle_frame_loop_0034
  6748                                  .L_tc_recycle_frame_done_0034:
  6749 000053B9 5D                      	pop rbp ; restore the old rbp
  6750 000053BA 4889CC                  	mov rsp, rcx
  6751 000053BD FF6009                  	jmp SOB_CLOSURE_CODE(rax)
  6752 000053C0 C9                      	leave
  6753 000053C1 C22800                  	ret 8 * (2 + 3)
  6754                                  .L_lambda_opt_end_0009:	; new closure is in rax
  6755 000053C4 C9                      	leave
  6756 000053C5 C21800                  	ret 8 * (2 + 1)
  6757                                  .L_lambda_simple_end_0033:	; new closure is in rax
  6758                                  	assert_closure(rax)
    42 000053C8 803805              <1>  cmp byte [%1], %2
    43 000053CB 0F85B9C10000        <1>  jne L_error_incorrect_type
  6759 000053D1 FF7001                  	push SOB_CLOSURE_ENV(rax)
  6760 000053D4 FF5009                  	call SOB_CLOSURE_CODE(rax)
  6761 000053D7 48890425[00030000]      	mov qword [free_var_96], rax
  6762 000053DF 48B8-                   	mov rax, sob_void
  6762 000053E1 [0000000000000000] 
  6763                                  
  6764 000053E9 4889C7                  	mov rdi, rax
  6765 000053EC E8B1A90000              	call print_sexpr_if_not_void
  6766                                  
  6767 000053F1 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  6768 000053F6 E896A90000              	call malloc
  6769 000053FB 50                      	push rax
  6770 000053FC BF00000000              	mov rdi, 8 * 0	; new rib
  6771 00005401 E88BA90000              	call malloc
  6772 00005406 50                      	push rax
  6773 00005407 BF08000000              	mov rdi, 8 * 1	; extended env
  6774 0000540C E880A90000              	call malloc
  6775 00005411 488B7D10                	mov rdi, ENV
  6776 00005415 BE00000000              	mov rsi, 0
  6777 0000541A BA01000000              	mov rdx, 1
  6778                                  .L_lambda_simple_env_loop_0038:	; ext_env[i + 1] <-- env[i]
  6779 0000541F 4883FE00                	cmp rsi, 0
  6780 00005423 7410                    	je .L_lambda_simple_env_end_0038
  6781 00005425 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  6782 00005429 48890CD0                	mov qword [rax + 8 * rdx], rcx
  6783 0000542D 48FFC6                  	inc rsi
  6784 00005430 48FFC2                  	inc rdx
  6785 00005433 EBEA                    	jmp .L_lambda_simple_env_loop_0038
  6786                                  .L_lambda_simple_env_end_0038:
  6787 00005435 5B                      	pop rbx
  6788 00005436 BE00000000              	mov rsi, 0
  6789                                  .L_lambda_simple_params_loop_0038:	; copy params
  6790 0000543B 4883FE00                	cmp rsi, 0
  6791 0000543F 740E                    	je .L_lambda_simple_params_end_0038
  6792 00005441 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  6793 00005446 488914F3                	mov qword [rbx + 8 * rsi], rdx
  6794 0000544A 48FFC6                  	inc rsi
  6795 0000544D EBEC                    	jmp .L_lambda_simple_params_loop_0038
  6796                                  .L_lambda_simple_params_end_0038:
  6797 0000544F 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  6798 00005452 4889C3                  	mov rbx, rax
  6799 00005455 58                      	pop rax
  6800 00005456 C60005                  	mov byte [rax], T_closure
  6801 00005459 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  6802 0000545D 48C74009[6A540000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0038
  6803 00005465 E97E000000              	jmp .L_lambda_simple_end_0038
  6804                                  .L_lambda_simple_code_0038:	; lambda-simple body
  6805 0000546A 48837C241000            	cmp qword [rsp + 8 * 2], 0
  6806 00005470 740B                    	je .L_lambda_simple_arity_check_ok_0038
  6807 00005472 FF742410                	push qword [rsp + 8 * 2]
  6808 00005476 6A00                    	push 0
  6809 00005478 E9CDA80000              	jmp L_error_incorrect_arity_simple
  6810                                  .L_lambda_simple_arity_check_ok_0038:
  6811 0000547D C8000000                	enter 0, 0
  6812 00005481 48B8-                   	mov rax, L_constants + 68
  6812 00005483 [4400000000000000] 
  6813 0000548B 50                      	push rax
  6814 0000548C 48B8-                   	mov rax, L_constants + 59
  6814 0000548E [3B00000000000000] 
  6815 00005496 50                      	push rax
  6816 00005497 6A02                    	push 2
  6817 00005499 488B0425[30010000]      	mov rax, qword [free_var_38]
  6818                                  	assert_closure(rax)
    42 000054A1 803805              <1>  cmp byte [%1], %2
    43 000054A4 0F85E0C00000        <1>  jne L_error_incorrect_type
  6819 000054AA FF7001                  	push SOB_CLOSURE_ENV(rax)
  6820 000054AD FF7508                  	push qword [rbp + 8 * 1] ; old ret addr
  6821 000054B0 FF7500                  	push qword [rbp] ; same the old rbp
  6822 000054B3 BA05000000              	mov rdx, 2 + 3
  6823 000054B8 488B4D18                	mov rcx, COUNT
  6824 000054BC 488D4CCD20              	lea rcx, [rbp + 8*4 + rcx * 8]
  6825 000054C1 4889EF                  	mov rdi, rbp
  6826                                  .L_tc_recycle_frame_loop_003e:
  6827 000054C4 4883FA00                	cmp rdx, 0
  6828 000054C8 7413                    	je .L_tc_recycle_frame_done_003e
  6829 000054CA 4883E908                	sub rcx, 8
  6830 000054CE 4883EF08                	sub rdi, 8
  6831 000054D2 488B37                  	mov rsi, [rdi]
  6832 000054D5 488931                  	mov qword [rcx], rsi
  6833 000054D8 48FFCA                  	dec rdx
  6834 000054DB EBE7                    	jmp .L_tc_recycle_frame_loop_003e
  6835                                  .L_tc_recycle_frame_done_003e:
  6836 000054DD 5D                      	pop rbp ; restore the old rbp
  6837 000054DE 4889CC                  	mov rsp, rcx
  6838 000054E1 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
  6839 000054E4 C9                      	leave
  6840 000054E5 C21000                  	ret 8 * (2 + 0)
  6841                                  .L_lambda_simple_end_0038:	; new closure is in rax
  6842 000054E8 50                      	push rax
  6843 000054E9 6A01                    	push 1
  6844 000054EB BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  6845 000054F0 E89CA80000              	call malloc
  6846 000054F5 50                      	push rax
  6847 000054F6 BF00000000              	mov rdi, 8 * 0	; new rib
  6848 000054FB E891A80000              	call malloc
  6849 00005500 50                      	push rax
  6850 00005501 BF08000000              	mov rdi, 8 * 1	; extended env
  6851 00005506 E886A80000              	call malloc
  6852 0000550B 488B7D10                	mov rdi, ENV
  6853 0000550F BE00000000              	mov rsi, 0
  6854 00005514 BA01000000              	mov rdx, 1
  6855                                  .L_lambda_simple_env_loop_0035:	; ext_env[i + 1] <-- env[i]
  6856 00005519 4883FE00                	cmp rsi, 0
  6857 0000551D 7410                    	je .L_lambda_simple_env_end_0035
  6858 0000551F 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  6859 00005523 48890CD0                	mov qword [rax + 8 * rdx], rcx
  6860 00005527 48FFC6                  	inc rsi
  6861 0000552A 48FFC2                  	inc rdx
  6862 0000552D EBEA                    	jmp .L_lambda_simple_env_loop_0035
  6863                                  .L_lambda_simple_env_end_0035:
  6864 0000552F 5B                      	pop rbx
  6865 00005530 BE00000000              	mov rsi, 0
  6866                                  .L_lambda_simple_params_loop_0035:	; copy params
  6867 00005535 4883FE00                	cmp rsi, 0
  6868 00005539 740E                    	je .L_lambda_simple_params_end_0035
  6869 0000553B 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  6870 00005540 488914F3                	mov qword [rbx + 8 * rsi], rdx
  6871 00005544 48FFC6                  	inc rsi
  6872 00005547 EBEC                    	jmp .L_lambda_simple_params_loop_0035
  6873                                  .L_lambda_simple_params_end_0035:
  6874 00005549 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  6875 0000554C 4889C3                  	mov rbx, rax
  6876 0000554F 58                      	pop rax
  6877 00005550 C60005                  	mov byte [rax], T_closure
  6878 00005553 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  6879 00005557 48C74009[64550000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0035
  6880 0000555F E9C2060000              	jmp .L_lambda_simple_end_0035
  6881                                  .L_lambda_simple_code_0035:	; lambda-simple body
  6882 00005564 48837C241001            	cmp qword [rsp + 8 * 2], 1
  6883 0000556A 740B                    	je .L_lambda_simple_arity_check_ok_0035
  6884 0000556C FF742410                	push qword [rsp + 8 * 2]
  6885 00005570 6A01                    	push 1
  6886 00005572 E9D3A70000              	jmp L_error_incorrect_arity_simple
  6887                                  .L_lambda_simple_arity_check_ok_0035:
  6888 00005577 C8000000                	enter 0, 0
  6889 0000557B BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  6890 00005580 E80CA80000              	call malloc
  6891 00005585 50                      	push rax
  6892 00005586 BF08000000              	mov rdi, 8 * 1	; new rib
  6893 0000558B E801A80000              	call malloc
  6894 00005590 50                      	push rax
  6895 00005591 BF10000000              	mov rdi, 8 * 2	; extended env
  6896 00005596 E8F6A70000              	call malloc
  6897 0000559B 488B7D10                	mov rdi, ENV
  6898 0000559F BE00000000              	mov rsi, 0
  6899 000055A4 BA01000000              	mov rdx, 1
  6900                                  .L_lambda_simple_env_loop_0037:	; ext_env[i + 1] <-- env[i]
  6901 000055A9 4883FE01                	cmp rsi, 1
  6902 000055AD 7410                    	je .L_lambda_simple_env_end_0037
  6903 000055AF 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  6904 000055B3 48890CD0                	mov qword [rax + 8 * rdx], rcx
  6905 000055B7 48FFC6                  	inc rsi
  6906 000055BA 48FFC2                  	inc rdx
  6907 000055BD EBEA                    	jmp .L_lambda_simple_env_loop_0037
  6908                                  .L_lambda_simple_env_end_0037:
  6909 000055BF 5B                      	pop rbx
  6910 000055C0 BE00000000              	mov rsi, 0
  6911                                  .L_lambda_simple_params_loop_0037:	; copy params
  6912 000055C5 4883FE01                	cmp rsi, 1
  6913 000055C9 740E                    	je .L_lambda_simple_params_end_0037
  6914 000055CB 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  6915 000055D0 488914F3                	mov qword [rbx + 8 * rsi], rdx
  6916 000055D4 48FFC6                  	inc rsi
  6917 000055D7 EBEC                    	jmp .L_lambda_simple_params_loop_0037
  6918                                  .L_lambda_simple_params_end_0037:
  6919 000055D9 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  6920 000055DC 4889C3                  	mov rbx, rax
  6921 000055DF 58                      	pop rax
  6922 000055E0 C60005                  	mov byte [rax], T_closure
  6923 000055E3 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  6924 000055E7 48C74009[F4550000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0037
  6925 000055EF E999030000              	jmp .L_lambda_simple_end_0037
  6926                                  .L_lambda_simple_code_0037:	; lambda-simple body
  6927 000055F4 48837C241002            	cmp qword [rsp + 8 * 2], 2
  6928 000055FA 740B                    	je .L_lambda_simple_arity_check_ok_0037
  6929 000055FC FF742410                	push qword [rsp + 8 * 2]
  6930 00005600 6A02                    	push 2
  6931 00005602 E943A70000              	jmp L_error_incorrect_arity_simple
  6932                                  .L_lambda_simple_arity_check_ok_0037:
  6933 00005607 C8000000                	enter 0, 0
  6934 0000560B 488B4520                	mov rax, qword [rbp + 8 * (4 + 0)]
  6935 0000560F 50                      	push rax
  6936 00005610 6A01                    	push 1
  6937 00005612 488B0425[48000000]      	mov rax, qword [free_var_9]
  6938                                  	assert_closure(rax)
    42 0000561A 803805              <1>  cmp byte [%1], %2
    43 0000561D 0F8567BF0000        <1>  jne L_error_incorrect_type
  6939 00005623 FF7001                  	push SOB_CLOSURE_ENV(rax)
  6940 00005626 FF5009                  	call SOB_CLOSURE_CODE(rax)
  6941 00005629 483D[02000000]          	cmp rax, sob_boolean_false
  6942 0000562F 0F846F010000                      	je .L_if_else_0016
  6943 00005635 488B4528                          	mov rax, qword [rbp + 8 * (4 + 1)]
  6944 00005639 50                      	push rax
  6945 0000563A 6A01                    	push 1
  6946 0000563C 488B0425[48000000]      	mov rax, qword [free_var_9]
  6947                                  	assert_closure(rax)
    42 00005644 803805              <1>  cmp byte [%1], %2
    43 00005647 0F853DBF0000        <1>  jne L_error_incorrect_type
  6948 0000564D FF7001                  	push SOB_CLOSURE_ENV(rax)
  6949 00005650 FF5009                  	call SOB_CLOSURE_CODE(rax)
  6950 00005653 483D[02000000]          	cmp rax, sob_boolean_false
  6951 00005659 745C                              	je .L_if_else_0012
  6952 0000565B 488B4528                          	mov rax, qword [rbp + 8 * (4 + 1)]
  6953 0000565F 50                      	push rax
  6954 00005660 488B4520                	mov rax, qword [rbp + 8 * (4 + 0)]
  6955 00005664 50                      	push rax
  6956 00005665 6A02                    	push 2
  6957 00005667 488B0425[10010000]      	mov rax, qword [free_var_34]
  6958                                  	assert_closure(rax)
    42 0000566F 803805              <1>  cmp byte [%1], %2
    43 00005672 0F8512BF0000        <1>  jne L_error_incorrect_type
  6959 00005678 FF7001                  	push SOB_CLOSURE_ENV(rax)
  6960 0000567B FF7508                  	push qword [rbp + 8 * 1] ; old ret addr
  6961 0000567E FF7500                  	push qword [rbp] ; same the old rbp
  6962 00005681 BA05000000              	mov rdx, 2 + 3
  6963 00005686 488B4D18                	mov rcx, COUNT
  6964 0000568A 488D4CCD20              	lea rcx, [rbp + 8*4 + rcx * 8]
  6965 0000568F 4889EF                  	mov rdi, rbp
  6966                                  .L_tc_recycle_frame_loop_0037:
  6967 00005692 4883FA00                	cmp rdx, 0
  6968 00005696 7413                    	je .L_tc_recycle_frame_done_0037
  6969 00005698 4883E908                	sub rcx, 8
  6970 0000569C 4883EF08                	sub rdi, 8
  6971 000056A0 488B37                  	mov rsi, [rdi]
  6972 000056A3 488931                  	mov qword [rcx], rsi
  6973 000056A6 48FFCA                  	dec rdx
  6974 000056A9 EBE7                    	jmp .L_tc_recycle_frame_loop_0037
  6975                                  .L_tc_recycle_frame_done_0037:
  6976 000056AB 5D                      	pop rbp ; restore the old rbp
  6977 000056AC 4889CC                  	mov rsp, rcx
  6978 000056AF FF6009                  	jmp SOB_CLOSURE_CODE(rax)
  6979 000056B2 E9E8000000              	jmp .L_if_end_0012
  6980                                            .L_if_else_0012:
  6981 000056B7 488B4528                          	mov rax, qword [rbp + 8 * (4 + 1)]
  6982 000056BB 50                      	push rax
  6983 000056BC 6A01                    	push 1
  6984 000056BE 488B0425[40000000]      	mov rax, qword [free_var_8]
  6985                                  	assert_closure(rax)
    42 000056C6 803805              <1>  cmp byte [%1], %2
    43 000056C9 0F85BBBE0000        <1>  jne L_error_incorrect_type
  6986 000056CF FF7001                  	push SOB_CLOSURE_ENV(rax)
  6987 000056D2 FF5009                  	call SOB_CLOSURE_CODE(rax)
  6988 000056D5 483D[02000000]          	cmp rax, sob_boolean_false
  6989 000056DB 7473                              	je .L_if_else_0011
  6990 000056DD 488B4528                          	mov rax, qword [rbp + 8 * (4 + 1)]
  6991 000056E1 50                      	push rax
  6992 000056E2 488B4520                	mov rax, qword [rbp + 8 * (4 + 0)]
  6993 000056E6 50                      	push rax
  6994 000056E7 6A01                    	push 1
  6995 000056E9 488B0425[B8000000]      	mov rax, qword [free_var_23]
  6996                                  	assert_closure(rax)
    42 000056F1 803805              <1>  cmp byte [%1], %2
    43 000056F4 0F8590BE0000        <1>  jne L_error_incorrect_type
  6997 000056FA FF7001                  	push SOB_CLOSURE_ENV(rax)
  6998 000056FD FF5009                  	call SOB_CLOSURE_CODE(rax)
  6999 00005700 50                      	push rax
  7000 00005701 6A02                    	push 2
  7001 00005703 488B0425[F0000000]      	mov rax, qword [free_var_30]
  7002                                  	assert_closure(rax)
    42 0000570B 803805              <1>  cmp byte [%1], %2
    43 0000570E 0F8576BE0000        <1>  jne L_error_incorrect_type
  7003 00005714 FF7001                  	push SOB_CLOSURE_ENV(rax)
  7004 00005717 FF7508                  	push qword [rbp + 8 * 1] ; old ret addr
  7005 0000571A FF7500                  	push qword [rbp] ; same the old rbp
  7006 0000571D BA05000000              	mov rdx, 2 + 3
  7007 00005722 488B4D18                	mov rcx, COUNT
  7008 00005726 488D4CCD20              	lea rcx, [rbp + 8*4 + rcx * 8]
  7009 0000572B 4889EF                  	mov rdi, rbp
  7010                                  .L_tc_recycle_frame_loop_0038:
  7011 0000572E 4883FA00                	cmp rdx, 0
  7012 00005732 7413                    	je .L_tc_recycle_frame_done_0038
  7013 00005734 4883E908                	sub rcx, 8
  7014 00005738 4883EF08                	sub rdi, 8
  7015 0000573C 488B37                  	mov rsi, [rdi]
  7016 0000573F 488931                  	mov qword [rcx], rsi
  7017 00005742 48FFCA                  	dec rdx
  7018 00005745 EBE7                    	jmp .L_tc_recycle_frame_loop_0038
  7019                                  .L_tc_recycle_frame_done_0038:
  7020 00005747 5D                      	pop rbp ; restore the old rbp
  7021 00005748 4889CC                  	mov rsp, rcx
  7022 0000574B FF6009                  	jmp SOB_CLOSURE_CODE(rax)
  7023 0000574E EB4F                    	jmp .L_if_end_0011
  7024                                            .L_if_else_0011:
  7025 00005750 6A00                              	push 0
  7026 00005752 488B4510                	mov rax, qword [rbp + 8 * 2]
  7027 00005756 488B00                  	mov rax, qword [rax + 8 * 0]
  7028 00005759 488B00                  	mov rax, qword [rax + 8 * 0]
  7029                                  	assert_closure(rax)
    42 0000575C 803805              <1>  cmp byte [%1], %2
    43 0000575F 0F8525BE0000        <1>  jne L_error_incorrect_type
  7030 00005765 FF7001                  	push SOB_CLOSURE_ENV(rax)
  7031 00005768 FF7508                  	push qword [rbp + 8 * 1] ; old ret addr
  7032 0000576B FF7500                  	push qword [rbp] ; same the old rbp
  7033 0000576E BA03000000              	mov rdx, 0 + 3
  7034 00005773 488B4D18                	mov rcx, COUNT
  7035 00005777 488D4CCD20              	lea rcx, [rbp + 8*4 + rcx * 8]
  7036 0000577C 4889EF                  	mov rdi, rbp
  7037                                  .L_tc_recycle_frame_loop_0039:
  7038 0000577F 4883FA00                	cmp rdx, 0
  7039 00005783 7413                    	je .L_tc_recycle_frame_done_0039
  7040 00005785 4883E908                	sub rcx, 8
  7041 00005789 4883EF08                	sub rdi, 8
  7042 0000578D 488B37                  	mov rsi, [rdi]
  7043 00005790 488931                  	mov qword [rcx], rsi
  7044 00005793 48FFCA                  	dec rdx
  7045 00005796 EBE7                    	jmp .L_tc_recycle_frame_loop_0039
  7046                                  .L_tc_recycle_frame_done_0039:
  7047 00005798 5D                      	pop rbp ; restore the old rbp
  7048 00005799 4889CC                  	mov rsp, rcx
  7049 0000579C FF6009                  	jmp SOB_CLOSURE_CODE(rax)
  7050                                  .L_if_end_0011:
  7051                                  .L_if_end_0012:
  7052 0000579F E9E5010000              	jmp .L_if_end_0016
  7053                                            .L_if_else_0016:
  7054 000057A4 488B4520                          	mov rax, qword [rbp + 8 * (4 + 0)]
  7055 000057A8 50                      	push rax
  7056 000057A9 6A01                    	push 1
  7057 000057AB 488B0425[40000000]      	mov rax, qword [free_var_8]
  7058                                  	assert_closure(rax)
    42 000057B3 803805              <1>  cmp byte [%1], %2
    43 000057B6 0F85CEBD0000        <1>  jne L_error_incorrect_type
  7059 000057BC FF7001                  	push SOB_CLOSURE_ENV(rax)
  7060 000057BF FF5009                  	call SOB_CLOSURE_CODE(rax)
  7061 000057C2 483D[02000000]          	cmp rax, sob_boolean_false
  7062 000057C8 0F846C010000                      	je .L_if_else_0015
  7063 000057CE 488B4528                          	mov rax, qword [rbp + 8 * (4 + 1)]
  7064 000057D2 50                      	push rax
  7065 000057D3 6A01                    	push 1
  7066 000057D5 488B0425[48000000]      	mov rax, qword [free_var_9]
  7067                                  	assert_closure(rax)
    42 000057DD 803805              <1>  cmp byte [%1], %2
    43 000057E0 0F85A4BD0000        <1>  jne L_error_incorrect_type
  7068 000057E6 FF7001                  	push SOB_CLOSURE_ENV(rax)
  7069 000057E9 FF5009                  	call SOB_CLOSURE_CODE(rax)
  7070 000057EC 483D[02000000]          	cmp rax, sob_boolean_false
  7071 000057F2 7476                              	je .L_if_else_0014
  7072 000057F4 488B4528                          	mov rax, qword [rbp + 8 * (4 + 1)]
  7073 000057F8 50                      	push rax
  7074 000057F9 6A01                    	push 1
  7075 000057FB 488B0425[B8000000]      	mov rax, qword [free_var_23]
  7076                                  	assert_closure(rax)
    42 00005803 803805              <1>  cmp byte [%1], %2
    43 00005806 0F857EBD0000        <1>  jne L_error_incorrect_type
  7077 0000580C FF7001                  	push SOB_CLOSURE_ENV(rax)
  7078 0000580F FF5009                  	call SOB_CLOSURE_CODE(rax)
  7079 00005812 50                      	push rax
  7080 00005813 488B4520                	mov rax, qword [rbp + 8 * (4 + 0)]
  7081 00005817 50                      	push rax
  7082 00005818 6A02                    	push 2
  7083 0000581A 488B0425[F0000000]      	mov rax, qword [free_var_30]
  7084                                  	assert_closure(rax)
    42 00005822 803805              <1>  cmp byte [%1], %2
    43 00005825 0F855FBD0000        <1>  jne L_error_incorrect_type
  7085 0000582B FF7001                  	push SOB_CLOSURE_ENV(rax)
  7086 0000582E FF7508                  	push qword [rbp + 8 * 1] ; old ret addr
  7087 00005831 FF7500                  	push qword [rbp] ; same the old rbp
  7088 00005834 BA05000000              	mov rdx, 2 + 3
  7089 00005839 488B4D18                	mov rcx, COUNT
  7090 0000583D 488D4CCD20              	lea rcx, [rbp + 8*4 + rcx * 8]
  7091 00005842 4889EF                  	mov rdi, rbp
  7092                                  .L_tc_recycle_frame_loop_003a:
  7093 00005845 4883FA00                	cmp rdx, 0
  7094 00005849 7413                    	je .L_tc_recycle_frame_done_003a
  7095 0000584B 4883E908                	sub rcx, 8
  7096 0000584F 4883EF08                	sub rdi, 8
  7097 00005853 488B37                  	mov rsi, [rdi]
  7098 00005856 488931                  	mov qword [rcx], rsi
  7099 00005859 48FFCA                  	dec rdx
  7100 0000585C EBE7                    	jmp .L_tc_recycle_frame_loop_003a
  7101                                  .L_tc_recycle_frame_done_003a:
  7102 0000585E 5D                      	pop rbp ; restore the old rbp
  7103 0000585F 4889CC                  	mov rsp, rcx
  7104 00005862 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
  7105 00005865 E9CE000000              	jmp .L_if_end_0014
  7106                                            .L_if_else_0014:
  7107 0000586A 488B4528                          	mov rax, qword [rbp + 8 * (4 + 1)]
  7108 0000586E 50                      	push rax
  7109 0000586F 6A01                    	push 1
  7110 00005871 488B0425[40000000]      	mov rax, qword [free_var_8]
  7111                                  	assert_closure(rax)
    42 00005879 803805              <1>  cmp byte [%1], %2
    43 0000587C 0F8508BD0000        <1>  jne L_error_incorrect_type
  7112 00005882 FF7001                  	push SOB_CLOSURE_ENV(rax)
  7113 00005885 FF5009                  	call SOB_CLOSURE_CODE(rax)
  7114 00005888 483D[02000000]          	cmp rax, sob_boolean_false
  7115 0000588E 7459                              	je .L_if_else_0013
  7116 00005890 488B4528                          	mov rax, qword [rbp + 8 * (4 + 1)]
  7117 00005894 50                      	push rax
  7118 00005895 488B4520                	mov rax, qword [rbp + 8 * (4 + 0)]
  7119 00005899 50                      	push rax
  7120 0000589A 6A02                    	push 2
  7121 0000589C 488B0425[F0000000]      	mov rax, qword [free_var_30]
  7122                                  	assert_closure(rax)
    42 000058A4 803805              <1>  cmp byte [%1], %2
    43 000058A7 0F85DDBC0000        <1>  jne L_error_incorrect_type
  7123 000058AD FF7001                  	push SOB_CLOSURE_ENV(rax)
  7124 000058B0 FF7508                  	push qword [rbp + 8 * 1] ; old ret addr
  7125 000058B3 FF7500                  	push qword [rbp] ; same the old rbp
  7126 000058B6 BA05000000              	mov rdx, 2 + 3
  7127 000058BB 488B4D18                	mov rcx, COUNT
  7128 000058BF 488D4CCD20              	lea rcx, [rbp + 8*4 + rcx * 8]
  7129 000058C4 4889EF                  	mov rdi, rbp
  7130                                  .L_tc_recycle_frame_loop_003b:
  7131 000058C7 4883FA00                	cmp rdx, 0
  7132 000058CB 7413                    	je .L_tc_recycle_frame_done_003b
  7133 000058CD 4883E908                	sub rcx, 8
  7134 000058D1 4883EF08                	sub rdi, 8
  7135 000058D5 488B37                  	mov rsi, [rdi]
  7136 000058D8 488931                  	mov qword [rcx], rsi
  7137 000058DB 48FFCA                  	dec rdx
  7138 000058DE EBE7                    	jmp .L_tc_recycle_frame_loop_003b
  7139                                  .L_tc_recycle_frame_done_003b:
  7140 000058E0 5D                      	pop rbp ; restore the old rbp
  7141 000058E1 4889CC                  	mov rsp, rcx
  7142 000058E4 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
  7143 000058E7 EB4F                    	jmp .L_if_end_0013
  7144                                            .L_if_else_0013:
  7145 000058E9 6A00                              	push 0
  7146 000058EB 488B4510                	mov rax, qword [rbp + 8 * 2]
  7147 000058EF 488B00                  	mov rax, qword [rax + 8 * 0]
  7148 000058F2 488B00                  	mov rax, qword [rax + 8 * 0]
  7149                                  	assert_closure(rax)
    42 000058F5 803805              <1>  cmp byte [%1], %2
    43 000058F8 0F858CBC0000        <1>  jne L_error_incorrect_type
  7150 000058FE FF7001                  	push SOB_CLOSURE_ENV(rax)
  7151 00005901 FF7508                  	push qword [rbp + 8 * 1] ; old ret addr
  7152 00005904 FF7500                  	push qword [rbp] ; same the old rbp
  7153 00005907 BA03000000              	mov rdx, 0 + 3
  7154 0000590C 488B4D18                	mov rcx, COUNT
  7155 00005910 488D4CCD20              	lea rcx, [rbp + 8*4 + rcx * 8]
  7156 00005915 4889EF                  	mov rdi, rbp
  7157                                  .L_tc_recycle_frame_loop_003c:
  7158 00005918 4883FA00                	cmp rdx, 0
  7159 0000591C 7413                    	je .L_tc_recycle_frame_done_003c
  7160 0000591E 4883E908                	sub rcx, 8
  7161 00005922 4883EF08                	sub rdi, 8
  7162 00005926 488B37                  	mov rsi, [rdi]
  7163 00005929 488931                  	mov qword [rcx], rsi
  7164 0000592C 48FFCA                  	dec rdx
  7165 0000592F EBE7                    	jmp .L_tc_recycle_frame_loop_003c
  7166                                  .L_tc_recycle_frame_done_003c:
  7167 00005931 5D                      	pop rbp ; restore the old rbp
  7168 00005932 4889CC                  	mov rsp, rcx
  7169 00005935 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
  7170                                  .L_if_end_0013:
  7171                                  .L_if_end_0014:
  7172 00005938 EB4F                    	jmp .L_if_end_0015
  7173                                            .L_if_else_0015:
  7174 0000593A 6A00                              	push 0
  7175 0000593C 488B4510                	mov rax, qword [rbp + 8 * 2]
  7176 00005940 488B00                  	mov rax, qword [rax + 8 * 0]
  7177 00005943 488B00                  	mov rax, qword [rax + 8 * 0]
  7178                                  	assert_closure(rax)
    42 00005946 803805              <1>  cmp byte [%1], %2
    43 00005949 0F853BBC0000        <1>  jne L_error_incorrect_type
  7179 0000594F FF7001                  	push SOB_CLOSURE_ENV(rax)
  7180 00005952 FF7508                  	push qword [rbp + 8 * 1] ; old ret addr
  7181 00005955 FF7500                  	push qword [rbp] ; same the old rbp
  7182 00005958 BA03000000              	mov rdx, 0 + 3
  7183 0000595D 488B4D18                	mov rcx, COUNT
  7184 00005961 488D4CCD20              	lea rcx, [rbp + 8*4 + rcx * 8]
  7185 00005966 4889EF                  	mov rdi, rbp
  7186                                  .L_tc_recycle_frame_loop_003d:
  7187 00005969 4883FA00                	cmp rdx, 0
  7188 0000596D 7413                    	je .L_tc_recycle_frame_done_003d
  7189 0000596F 4883E908                	sub rcx, 8
  7190 00005973 4883EF08                	sub rdi, 8
  7191 00005977 488B37                  	mov rsi, [rdi]
  7192 0000597A 488931                  	mov qword [rcx], rsi
  7193 0000597D 48FFCA                  	dec rdx
  7194 00005980 EBE7                    	jmp .L_tc_recycle_frame_loop_003d
  7195                                  .L_tc_recycle_frame_done_003d:
  7196 00005982 5D                      	pop rbp ; restore the old rbp
  7197 00005983 4889CC                  	mov rsp, rcx
  7198 00005986 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
  7199                                  .L_if_end_0015:
  7200                                  .L_if_end_0016:
  7201 00005989 C9                      	leave
  7202 0000598A C22000                  	ret 8 * (2 + 2)
  7203                                  .L_lambda_simple_end_0037:	; new closure is in rax
  7204 0000598D 50                      	push rax
  7205 0000598E 6A01                    	push 1
  7206 00005990 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  7207 00005995 E8F7A30000              	call malloc
  7208 0000599A 50                      	push rax
  7209 0000599B BF08000000              	mov rdi, 8 * 1	; new rib
  7210 000059A0 E8ECA30000              	call malloc
  7211 000059A5 50                      	push rax
  7212 000059A6 BF10000000              	mov rdi, 8 * 2	; extended env
  7213 000059AB E8E1A30000              	call malloc
  7214 000059B0 488B7D10                	mov rdi, ENV
  7215 000059B4 BE00000000              	mov rsi, 0
  7216 000059B9 BA01000000              	mov rdx, 1
  7217                                  .L_lambda_simple_env_loop_0036:	; ext_env[i + 1] <-- env[i]
  7218 000059BE 4883FE01                	cmp rsi, 1
  7219 000059C2 7410                    	je .L_lambda_simple_env_end_0036
  7220 000059C4 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  7221 000059C8 48890CD0                	mov qword [rax + 8 * rdx], rcx
  7222 000059CC 48FFC6                  	inc rsi
  7223 000059CF 48FFC2                  	inc rdx
  7224 000059D2 EBEA                    	jmp .L_lambda_simple_env_loop_0036
  7225                                  .L_lambda_simple_env_end_0036:
  7226 000059D4 5B                      	pop rbx
  7227 000059D5 BE00000000              	mov rsi, 0
  7228                                  .L_lambda_simple_params_loop_0036:	; copy params
  7229 000059DA 4883FE01                	cmp rsi, 1
  7230 000059DE 740E                    	je .L_lambda_simple_params_end_0036
  7231 000059E0 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  7232 000059E5 488914F3                	mov qword [rbx + 8 * rsi], rdx
  7233 000059E9 48FFC6                  	inc rsi
  7234 000059EC EBEC                    	jmp .L_lambda_simple_params_loop_0036
  7235                                  .L_lambda_simple_params_end_0036:
  7236 000059EE 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  7237 000059F1 4889C3                  	mov rbx, rax
  7238 000059F4 58                      	pop rax
  7239 000059F5 C60005                  	mov byte [rax], T_closure
  7240 000059F8 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  7241 000059FC 48C74009[095A0000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0036
  7242 00005A04 E9D6010000              	jmp .L_lambda_simple_end_0036
  7243                                  .L_lambda_simple_code_0036:	; lambda-simple body
  7244 00005A09 48837C241001            	cmp qword [rsp + 8 * 2], 1
  7245 00005A0F 740B                    	je .L_lambda_simple_arity_check_ok_0036
  7246 00005A11 FF742410                	push qword [rsp + 8 * 2]
  7247 00005A15 6A01                    	push 1
  7248 00005A17 E92EA30000              	jmp L_error_incorrect_arity_simple
  7249                                  .L_lambda_simple_arity_check_ok_0036:
  7250 00005A1C C8000000                	enter 0, 0
  7251 00005A20 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  7252 00005A25 E867A30000              	call malloc
  7253 00005A2A 50                      	push rax
  7254 00005A2B BF08000000              	mov rdi, 8 * 1	; new rib
  7255 00005A30 E85CA30000              	call malloc
  7256 00005A35 50                      	push rax
  7257 00005A36 BF18000000              	mov rdi, 8 * 3	; extended env
  7258 00005A3B E851A30000              	call malloc
  7259 00005A40 488B7D10                	mov rdi, ENV
  7260 00005A44 BE00000000              	mov rsi, 0
  7261 00005A49 BA01000000              	mov rdx, 1
  7262                                  .L_lambda_opt_env_loop_000a:	; ext_env[i + 1] <-- env[i]
  7263 00005A4E 4883FE02                	cmp rsi, 2
  7264 00005A52 7410                    	je .L_lambda_opt_env_end_000a
  7265 00005A54 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  7266 00005A58 48890CD0                	mov qword [rax + 8 * rdx], rcx
  7267 00005A5C 48FFC6                  	inc rsi
  7268 00005A5F 48FFC2                  	inc rdx
  7269 00005A62 EBEA                    	jmp .L_lambda_opt_env_loop_000a
  7270                                  .L_lambda_opt_env_end_000a:
  7271 00005A64 5B                      	pop rbx
  7272 00005A65 BE00000000              	mov rsi, 0
  7273                                  .L_lambda_opt_params_loop_000a:	; copy params
  7274 00005A6A 4883FE01                	cmp rsi, 1
  7275 00005A6E 740E                    	je .L_lambda_opt_params_end_000a
  7276 00005A70 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  7277 00005A75 488914F3                	mov qword [rbx + 8 * rsi], rdx
  7278 00005A79 48FFC6                  	inc rsi
  7279 00005A7C EBEC                    	jmp .L_lambda_opt_params_loop_000a
  7280                                  .L_lambda_opt_params_end_000a:
  7281 00005A7E 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  7282 00005A81 4889C3                  	mov rbx, rax
  7283 00005A84 58                      	pop rax
  7284 00005A85 C60005                  	mov byte [rax], T_closure
  7285 00005A88 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  7286 00005A8C 48C74009[995A0000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_opt_code_000a
  7287 00005A94 E942010000              	jmp .L_lambda_opt_end_000a
  7288                                  .L_lambda_opt_code_000a:	; lambda-opt body
  7289 00005A99 48837C241000            	cmp qword [rsp + 8 * 2], 0
  7290 00005A9F 740D                    	je .L_lambda_opt_arity_check_exact_000a
  7291 00005AA1 7F43                    	jg .L_lambda_opt_arity_check_more_000a
  7292 00005AA3 FF742410                	push qword [rsp + 8 * 2]
  7293 00005AA7 6A00                    	push 0
  7294 00005AA9 E9B0A20000              	jmp L_error_incorrect_arity_opt
  7295                                  .L_lambda_opt_arity_check_exact_000a:
  7296 00005AAE 48C744241001000000      	mov qword [rsp + 8 * 2], 1
  7297 00005AB7 BA03000000              	mov rdx, 3
  7298 00005ABC FF3424                  	push qword [rsp]
  7299 00005ABF BE01000000              	mov rsi, 1
  7300                                  .L_lambda_opt_stack_shrink_loop_001c:
  7301 00005AC4 4839D6                  	cmp rsi, rdx
  7302 00005AC7 7411                    	je .L_lambda_opt_stack_shrink_loop_exit_001c
  7303 00005AC9 488D5CF408              	lea rbx, [rsp + 8 + rsi * 8]
  7304 00005ACE 488B0B                  	mov rcx, [rbx]
  7305 00005AD1 48894BF8                	mov qword [rbx - 8], rcx
  7306 00005AD5 48FFC6                  	inc rsi
  7307 00005AD8 EBEA                    	jmp .L_lambda_opt_stack_shrink_loop_001c
  7308                                  .L_lambda_opt_stack_shrink_loop_exit_001c:
  7309 00005ADA 48C703[01000000]        	mov qword [rbx], sob_nil
  7310 00005AE1 E985000000              	jmp .L_lambda_opt_stack_adjusted_000a
  7311                                  .L_lambda_opt_arity_check_more_000a:
  7312 00005AE6 488B542410              	mov rdx, qword [rsp + 8 * 2]
  7313 00005AEB 4883EA00                	sub rdx, 0
  7314 00005AEF 48C744241001000000      	mov qword [rsp + 8 * 2], 1
  7315 00005AF8 BE00000000              	mov rsi, 0
  7316 00005AFD 488D5CD410              	lea rbx, [rsp + 2 * 8 + 0 * 8 + rdx * 8]
  7317 00005B02 48B9-                   	mov rcx, sob_nil
  7317 00005B04 [0100000000000000] 
  7318                                  .L_lambda_opt_stack_shrink_loop_001d:
  7319 00005B0C 4839D6                  	cmp rsi, rdx
  7320 00005B0F 7427                    je .L_lambda_opt_stack_shrink_loop_exit_001d
  7321 00005B11 BF11000000              	mov rdi, 17 ; 1+8+8
  7322 00005B16 E876A20000              	call malloc
  7323 00005B1B 48894809                	mov SOB_PAIR_CDR(rax), rcx
  7324 00005B1F 48F7DE                  	neg rsi
  7325 00005B22 488B0CF3                	mov rcx, qword [rbx + rsi * 8]
  7326 00005B26 48F7DE                  	neg rsi
  7327 00005B29 48894801                	mov SOB_PAIR_CAR(rax), rcx
  7328 00005B2D C60021                  	mov byte [rax], T_pair
  7329 00005B30 4889C1                  	mov rcx, rax
  7330 00005B33 48FFC6                  	inc rsi
  7331 00005B36 EBD4                    	jmp .L_lambda_opt_stack_shrink_loop_001d
  7332                                  .L_lambda_opt_stack_shrink_loop_exit_001d:
  7333 00005B38 48890B                  	mov qword [rbx], rcx
  7334 00005B3B 4883EB08                	sub rbx, 8
  7335 00005B3F 4889E7                  	mov rdi, rsp
  7336 00005B42 4883C710                	add rdi, 16
  7337 00005B46 BE03000000              	mov rsi, 3
  7338                                  .L_lambda_opt_stack_shrink_loop_001e:
  7339 00005B4B 4883FE00                	cmp rsi,0
  7340 00005B4F 7413                    	je .L_lambda_opt_stack_shrink_loop_exit_001e
  7341 00005B51 488B0F                  	mov rcx, qword [rdi]
  7342 00005B54 48890B                  	mov [rbx], rcx
  7343 00005B57 48FFCE                  	dec rsi
  7344 00005B5A 4883EB08                	sub rbx, 8
  7345 00005B5E 4883EF08                	sub rdi, 8
  7346 00005B62 EBE7                    	jmp .L_lambda_opt_stack_shrink_loop_001e
  7347                                  .L_lambda_opt_stack_shrink_loop_exit_001e:
  7348 00005B64 4883C308                	add rbx, 8
  7349 00005B68 4889DC                  	mov rsp, rbx
  7350                                  .L_lambda_opt_stack_adjusted_000a:
  7351 00005B6B C8000000                	enter 0, 0
  7352 00005B6F 488B4520                	mov rax, qword [rbp + 8 * (4 + 0)]
  7353 00005B73 50                      	push rax
  7354 00005B74 48B8-                   	mov rax, L_constants + 32
  7354 00005B76 [2000000000000000] 
  7355 00005B7E 50                      	push rax
  7356 00005B7F 488B4510                	mov rax, qword [rbp + 8 * 2]
  7357 00005B83 488B00                  	mov rax, qword [rax + 8 * 0]
  7358 00005B86 488B00                  	mov rax, qword [rax + 8 * 0]
  7359 00005B89 50                      	push rax
  7360 00005B8A 6A03                    	push 3
  7361 00005B8C 488B0425[F8020000]      	mov rax, qword [free_var_95]
  7362                                  	assert_closure(rax)
    42 00005B94 803805              <1>  cmp byte [%1], %2
    43 00005B97 0F85EDB90000        <1>  jne L_error_incorrect_type
  7363 00005B9D FF7001                  	push SOB_CLOSURE_ENV(rax)
  7364 00005BA0 FF7508                  	push qword [rbp + 8 * 1] ; old ret addr
  7365 00005BA3 FF7500                  	push qword [rbp] ; same the old rbp
  7366 00005BA6 BA06000000              	mov rdx, 3 + 3
  7367 00005BAB 488B4D18                	mov rcx, COUNT
  7368 00005BAF 488D4CCD20              	lea rcx, [rbp + 8*4 + rcx * 8]
  7369 00005BB4 4889EF                  	mov rdi, rbp
  7370                                  .L_tc_recycle_frame_loop_0036:
  7371 00005BB7 4883FA00                	cmp rdx, 0
  7372 00005BBB 7413                    	je .L_tc_recycle_frame_done_0036
  7373 00005BBD 4883E908                	sub rcx, 8
  7374 00005BC1 4883EF08                	sub rdi, 8
  7375 00005BC5 488B37                  	mov rsi, [rdi]
  7376 00005BC8 488931                  	mov qword [rcx], rsi
  7377 00005BCB 48FFCA                  	dec rdx
  7378 00005BCE EBE7                    	jmp .L_tc_recycle_frame_loop_0036
  7379                                  .L_tc_recycle_frame_done_0036:
  7380 00005BD0 5D                      	pop rbp ; restore the old rbp
  7381 00005BD1 4889CC                  	mov rsp, rcx
  7382 00005BD4 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
  7383 00005BD7 C9                      	leave
  7384 00005BD8 C21800                  	ret 8 * (2 + 1)
  7385                                  .L_lambda_opt_end_000a:	; new closure is in rax
  7386 00005BDB C9                      	leave
  7387 00005BDC C21800                  	ret 8 * (2 + 1)
  7388                                  .L_lambda_simple_end_0036:	; new closure is in rax
  7389                                  	assert_closure(rax)
    42 00005BDF 803805              <1>  cmp byte [%1], %2
    43 00005BE2 0F85A2B90000        <1>  jne L_error_incorrect_type
  7390 00005BE8 FF7001                  	push SOB_CLOSURE_ENV(rax)
  7391 00005BEB FF7508                  	push qword [rbp + 8 * 1] ; old ret addr
  7392 00005BEE FF7500                  	push qword [rbp] ; same the old rbp
  7393 00005BF1 BA04000000              	mov rdx, 1 + 3
  7394 00005BF6 488B4D18                	mov rcx, COUNT
  7395 00005BFA 488D4CCD20              	lea rcx, [rbp + 8*4 + rcx * 8]
  7396 00005BFF 4889EF                  	mov rdi, rbp
  7397                                  .L_tc_recycle_frame_loop_0035:
  7398 00005C02 4883FA00                	cmp rdx, 0
  7399 00005C06 7413                    	je .L_tc_recycle_frame_done_0035
  7400 00005C08 4883E908                	sub rcx, 8
  7401 00005C0C 4883EF08                	sub rdi, 8
  7402 00005C10 488B37                  	mov rsi, [rdi]
  7403 00005C13 488931                  	mov qword [rcx], rsi
  7404 00005C16 48FFCA                  	dec rdx
  7405 00005C19 EBE7                    	jmp .L_tc_recycle_frame_loop_0035
  7406                                  .L_tc_recycle_frame_done_0035:
  7407 00005C1B 5D                      	pop rbp ; restore the old rbp
  7408 00005C1C 4889CC                  	mov rsp, rcx
  7409 00005C1F FF6009                  	jmp SOB_CLOSURE_CODE(rax)
  7410 00005C22 C9                      	leave
  7411 00005C23 C21800                  	ret 8 * (2 + 1)
  7412                                  .L_lambda_simple_end_0035:	; new closure is in rax
  7413                                  	assert_closure(rax)
    42 00005C26 803805              <1>  cmp byte [%1], %2
    43 00005C29 0F855BB90000        <1>  jne L_error_incorrect_type
  7414 00005C2F FF7001                  	push SOB_CLOSURE_ENV(rax)
  7415 00005C32 FF5009                  	call SOB_CLOSURE_CODE(rax)
  7416 00005C35 48890425[08030000]      	mov qword [free_var_97], rax
  7417 00005C3D 48B8-                   	mov rax, sob_void
  7417 00005C3F [0000000000000000] 
  7418                                  
  7419 00005C47 4889C7                  	mov rdi, rax
  7420 00005C4A E853A10000              	call print_sexpr_if_not_void
  7421                                  
  7422 00005C4F BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  7423 00005C54 E838A10000              	call malloc
  7424 00005C59 50                      	push rax
  7425 00005C5A BF00000000              	mov rdi, 8 * 0	; new rib
  7426 00005C5F E82DA10000              	call malloc
  7427 00005C64 50                      	push rax
  7428 00005C65 BF08000000              	mov rdi, 8 * 1	; extended env
  7429 00005C6A E822A10000              	call malloc
  7430 00005C6F 488B7D10                	mov rdi, ENV
  7431 00005C73 BE00000000              	mov rsi, 0
  7432 00005C78 BA01000000              	mov rdx, 1
  7433                                  .L_lambda_simple_env_loop_003d:	; ext_env[i + 1] <-- env[i]
  7434 00005C7D 4883FE00                	cmp rsi, 0
  7435 00005C81 7410                    	je .L_lambda_simple_env_end_003d
  7436 00005C83 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  7437 00005C87 48890CD0                	mov qword [rax + 8 * rdx], rcx
  7438 00005C8B 48FFC6                  	inc rsi
  7439 00005C8E 48FFC2                  	inc rdx
  7440 00005C91 EBEA                    	jmp .L_lambda_simple_env_loop_003d
  7441                                  .L_lambda_simple_env_end_003d:
  7442 00005C93 5B                      	pop rbx
  7443 00005C94 BE00000000              	mov rsi, 0
  7444                                  .L_lambda_simple_params_loop_003d:	; copy params
  7445 00005C99 4883FE00                	cmp rsi, 0
  7446 00005C9D 740E                    	je .L_lambda_simple_params_end_003d
  7447 00005C9F 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  7448 00005CA4 488914F3                	mov qword [rbx + 8 * rsi], rdx
  7449 00005CA8 48FFC6                  	inc rsi
  7450 00005CAB EBEC                    	jmp .L_lambda_simple_params_loop_003d
  7451                                  .L_lambda_simple_params_end_003d:
  7452 00005CAD 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  7453 00005CB0 4889C3                  	mov rbx, rax
  7454 00005CB3 58                      	pop rax
  7455 00005CB4 C60005                  	mov byte [rax], T_closure
  7456 00005CB7 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  7457 00005CBB 48C74009[C85C0000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_003d
  7458 00005CC3 E97E000000              	jmp .L_lambda_simple_end_003d
  7459                                  .L_lambda_simple_code_003d:	; lambda-simple body
  7460 00005CC8 48837C241000            	cmp qword [rsp + 8 * 2], 0
  7461 00005CCE 740B                    	je .L_lambda_simple_arity_check_ok_003d
  7462 00005CD0 FF742410                	push qword [rsp + 8 * 2]
  7463 00005CD4 6A00                    	push 0
  7464 00005CD6 E96FA00000              	jmp L_error_incorrect_arity_simple
  7465                                  .L_lambda_simple_arity_check_ok_003d:
  7466 00005CDB C8000000                	enter 0, 0
  7467 00005CDF 48B8-                   	mov rax, L_constants + 68
  7467 00005CE1 [4400000000000000] 
  7468 00005CE9 50                      	push rax
  7469 00005CEA 48B8-                   	mov rax, L_constants + 119
  7469 00005CEC [7700000000000000] 
  7470 00005CF4 50                      	push rax
  7471 00005CF5 6A02                    	push 2
  7472 00005CF7 488B0425[30010000]      	mov rax, qword [free_var_38]
  7473                                  	assert_closure(rax)
    42 00005CFF 803805              <1>  cmp byte [%1], %2
    43 00005D02 0F8582B80000        <1>  jne L_error_incorrect_type
  7474 00005D08 FF7001                  	push SOB_CLOSURE_ENV(rax)
  7475 00005D0B FF7508                  	push qword [rbp + 8 * 1] ; old ret addr
  7476 00005D0E FF7500                  	push qword [rbp] ; same the old rbp
  7477 00005D11 BA05000000              	mov rdx, 2 + 3
  7478 00005D16 488B4D18                	mov rcx, COUNT
  7479 00005D1A 488D4CCD20              	lea rcx, [rbp + 8*4 + rcx * 8]
  7480 00005D1F 4889EF                  	mov rdi, rbp
  7481                                  .L_tc_recycle_frame_loop_004a:
  7482 00005D22 4883FA00                	cmp rdx, 0
  7483 00005D26 7413                    	je .L_tc_recycle_frame_done_004a
  7484 00005D28 4883E908                	sub rcx, 8
  7485 00005D2C 4883EF08                	sub rdi, 8
  7486 00005D30 488B37                  	mov rsi, [rdi]
  7487 00005D33 488931                  	mov qword [rcx], rsi
  7488 00005D36 48FFCA                  	dec rdx
  7489 00005D39 EBE7                    	jmp .L_tc_recycle_frame_loop_004a
  7490                                  .L_tc_recycle_frame_done_004a:
  7491 00005D3B 5D                      	pop rbp ; restore the old rbp
  7492 00005D3C 4889CC                  	mov rsp, rcx
  7493 00005D3F FF6009                  	jmp SOB_CLOSURE_CODE(rax)
  7494 00005D42 C9                      	leave
  7495 00005D43 C21000                  	ret 8 * (2 + 0)
  7496                                  .L_lambda_simple_end_003d:	; new closure is in rax
  7497 00005D46 50                      	push rax
  7498 00005D47 6A01                    	push 1
  7499 00005D49 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  7500 00005D4E E83EA00000              	call malloc
  7501 00005D53 50                      	push rax
  7502 00005D54 BF00000000              	mov rdi, 8 * 0	; new rib
  7503 00005D59 E833A00000              	call malloc
  7504 00005D5E 50                      	push rax
  7505 00005D5F BF08000000              	mov rdi, 8 * 1	; extended env
  7506 00005D64 E828A00000              	call malloc
  7507 00005D69 488B7D10                	mov rdi, ENV
  7508 00005D6D BE00000000              	mov rsi, 0
  7509 00005D72 BA01000000              	mov rdx, 1
  7510                                  .L_lambda_simple_env_loop_0039:	; ext_env[i + 1] <-- env[i]
  7511 00005D77 4883FE00                	cmp rsi, 0
  7512 00005D7B 7410                    	je .L_lambda_simple_env_end_0039
  7513 00005D7D 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  7514 00005D81 48890CD0                	mov qword [rax + 8 * rdx], rcx
  7515 00005D85 48FFC6                  	inc rsi
  7516 00005D88 48FFC2                  	inc rdx
  7517 00005D8B EBEA                    	jmp .L_lambda_simple_env_loop_0039
  7518                                  .L_lambda_simple_env_end_0039:
  7519 00005D8D 5B                      	pop rbx
  7520 00005D8E BE00000000              	mov rsi, 0
  7521                                  .L_lambda_simple_params_loop_0039:	; copy params
  7522 00005D93 4883FE00                	cmp rsi, 0
  7523 00005D97 740E                    	je .L_lambda_simple_params_end_0039
  7524 00005D99 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  7525 00005D9E 488914F3                	mov qword [rbx + 8 * rsi], rdx
  7526 00005DA2 48FFC6                  	inc rsi
  7527 00005DA5 EBEC                    	jmp .L_lambda_simple_params_loop_0039
  7528                                  .L_lambda_simple_params_end_0039:
  7529 00005DA7 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  7530 00005DAA 4889C3                  	mov rbx, rax
  7531 00005DAD 58                      	pop rax
  7532 00005DAE C60005                  	mov byte [rax], T_closure
  7533 00005DB1 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  7534 00005DB5 48C74009[C25D0000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0039
  7535 00005DBD E94D080000              	jmp .L_lambda_simple_end_0039
  7536                                  .L_lambda_simple_code_0039:	; lambda-simple body
  7537 00005DC2 48837C241001            	cmp qword [rsp + 8 * 2], 1
  7538 00005DC8 740B                    	je .L_lambda_simple_arity_check_ok_0039
  7539 00005DCA FF742410                	push qword [rsp + 8 * 2]
  7540 00005DCE 6A01                    	push 1
  7541 00005DD0 E9759F0000              	jmp L_error_incorrect_arity_simple
  7542                                  .L_lambda_simple_arity_check_ok_0039:
  7543 00005DD5 C8000000                	enter 0, 0
  7544 00005DD9 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  7545 00005DDE E8AE9F0000              	call malloc
  7546 00005DE3 50                      	push rax
  7547 00005DE4 BF08000000              	mov rdi, 8 * 1	; new rib
  7548 00005DE9 E8A39F0000              	call malloc
  7549 00005DEE 50                      	push rax
  7550 00005DEF BF10000000              	mov rdi, 8 * 2	; extended env
  7551 00005DF4 E8989F0000              	call malloc
  7552 00005DF9 488B7D10                	mov rdi, ENV
  7553 00005DFD BE00000000              	mov rsi, 0
  7554 00005E02 BA01000000              	mov rdx, 1
  7555                                  .L_lambda_simple_env_loop_003c:	; ext_env[i + 1] <-- env[i]
  7556 00005E07 4883FE01                	cmp rsi, 1
  7557 00005E0B 7410                    	je .L_lambda_simple_env_end_003c
  7558 00005E0D 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  7559 00005E11 48890CD0                	mov qword [rax + 8 * rdx], rcx
  7560 00005E15 48FFC6                  	inc rsi
  7561 00005E18 48FFC2                  	inc rdx
  7562 00005E1B EBEA                    	jmp .L_lambda_simple_env_loop_003c
  7563                                  .L_lambda_simple_env_end_003c:
  7564 00005E1D 5B                      	pop rbx
  7565 00005E1E BE00000000              	mov rsi, 0
  7566                                  .L_lambda_simple_params_loop_003c:	; copy params
  7567 00005E23 4883FE01                	cmp rsi, 1
  7568 00005E27 740E                    	je .L_lambda_simple_params_end_003c
  7569 00005E29 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  7570 00005E2E 488914F3                	mov qword [rbx + 8 * rsi], rdx
  7571 00005E32 48FFC6                  	inc rsi
  7572 00005E35 EBEC                    	jmp .L_lambda_simple_params_loop_003c
  7573                                  .L_lambda_simple_params_end_003c:
  7574 00005E37 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  7575 00005E3A 4889C3                  	mov rbx, rax
  7576 00005E3D 58                      	pop rax
  7577 00005E3E C60005                  	mov byte [rax], T_closure
  7578 00005E41 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  7579 00005E45 48C74009[525E0000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_003c
  7580 00005E4D E999030000              	jmp .L_lambda_simple_end_003c
  7581                                  .L_lambda_simple_code_003c:	; lambda-simple body
  7582 00005E52 48837C241002            	cmp qword [rsp + 8 * 2], 2
  7583 00005E58 740B                    	je .L_lambda_simple_arity_check_ok_003c
  7584 00005E5A FF742410                	push qword [rsp + 8 * 2]
  7585 00005E5E 6A02                    	push 2
  7586 00005E60 E9E59E0000              	jmp L_error_incorrect_arity_simple
  7587                                  .L_lambda_simple_arity_check_ok_003c:
  7588 00005E65 C8000000                	enter 0, 0
  7589 00005E69 488B4520                	mov rax, qword [rbp + 8 * (4 + 0)]
  7590 00005E6D 50                      	push rax
  7591 00005E6E 6A01                    	push 1
  7592 00005E70 488B0425[48000000]      	mov rax, qword [free_var_9]
  7593                                  	assert_closure(rax)
    42 00005E78 803805              <1>  cmp byte [%1], %2
    43 00005E7B 0F8509B70000        <1>  jne L_error_incorrect_type
  7594 00005E81 FF7001                  	push SOB_CLOSURE_ENV(rax)
  7595 00005E84 FF5009                  	call SOB_CLOSURE_CODE(rax)
  7596 00005E87 483D[02000000]          	cmp rax, sob_boolean_false
  7597 00005E8D 0F846F010000                      	je .L_if_else_001d
  7598 00005E93 488B4528                          	mov rax, qword [rbp + 8 * (4 + 1)]
  7599 00005E97 50                      	push rax
  7600 00005E98 6A01                    	push 1
  7601 00005E9A 488B0425[48000000]      	mov rax, qword [free_var_9]
  7602                                  	assert_closure(rax)
    42 00005EA2 803805              <1>  cmp byte [%1], %2
    43 00005EA5 0F85DFB60000        <1>  jne L_error_incorrect_type
  7603 00005EAB FF7001                  	push SOB_CLOSURE_ENV(rax)
  7604 00005EAE FF5009                  	call SOB_CLOSURE_CODE(rax)
  7605 00005EB1 483D[02000000]          	cmp rax, sob_boolean_false
  7606 00005EB7 745C                              	je .L_if_else_0019
  7607 00005EB9 488B4528                          	mov rax, qword [rbp + 8 * (4 + 1)]
  7608 00005EBD 50                      	push rax
  7609 00005EBE 488B4520                	mov rax, qword [rbp + 8 * (4 + 0)]
  7610 00005EC2 50                      	push rax
  7611 00005EC3 6A02                    	push 2
  7612 00005EC5 488B0425[18010000]      	mov rax, qword [free_var_35]
  7613                                  	assert_closure(rax)
    42 00005ECD 803805              <1>  cmp byte [%1], %2
    43 00005ED0 0F85B4B60000        <1>  jne L_error_incorrect_type
  7614 00005ED6 FF7001                  	push SOB_CLOSURE_ENV(rax)
  7615 00005ED9 FF7508                  	push qword [rbp + 8 * 1] ; old ret addr
  7616 00005EDC FF7500                  	push qword [rbp] ; same the old rbp
  7617 00005EDF BA05000000              	mov rdx, 2 + 3
  7618 00005EE4 488B4D18                	mov rcx, COUNT
  7619 00005EE8 488D4CCD20              	lea rcx, [rbp + 8*4 + rcx * 8]
  7620 00005EED 4889EF                  	mov rdi, rbp
  7621                                  .L_tc_recycle_frame_loop_0043:
  7622 00005EF0 4883FA00                	cmp rdx, 0
  7623 00005EF4 7413                    	je .L_tc_recycle_frame_done_0043
  7624 00005EF6 4883E908                	sub rcx, 8
  7625 00005EFA 4883EF08                	sub rdi, 8
  7626 00005EFE 488B37                  	mov rsi, [rdi]
  7627 00005F01 488931                  	mov qword [rcx], rsi
  7628 00005F04 48FFCA                  	dec rdx
  7629 00005F07 EBE7                    	jmp .L_tc_recycle_frame_loop_0043
  7630                                  .L_tc_recycle_frame_done_0043:
  7631 00005F09 5D                      	pop rbp ; restore the old rbp
  7632 00005F0A 4889CC                  	mov rsp, rcx
  7633 00005F0D FF6009                  	jmp SOB_CLOSURE_CODE(rax)
  7634 00005F10 E9E8000000              	jmp .L_if_end_0019
  7635                                            .L_if_else_0019:
  7636 00005F15 488B4528                          	mov rax, qword [rbp + 8 * (4 + 1)]
  7637 00005F19 50                      	push rax
  7638 00005F1A 6A01                    	push 1
  7639 00005F1C 488B0425[40000000]      	mov rax, qword [free_var_8]
  7640                                  	assert_closure(rax)
    42 00005F24 803805              <1>  cmp byte [%1], %2
    43 00005F27 0F855DB60000        <1>  jne L_error_incorrect_type
  7641 00005F2D FF7001                  	push SOB_CLOSURE_ENV(rax)
  7642 00005F30 FF5009                  	call SOB_CLOSURE_CODE(rax)
  7643 00005F33 483D[02000000]          	cmp rax, sob_boolean_false
  7644 00005F39 7473                              	je .L_if_else_0018
  7645 00005F3B 488B4528                          	mov rax, qword [rbp + 8 * (4 + 1)]
  7646 00005F3F 50                      	push rax
  7647 00005F40 488B4520                	mov rax, qword [rbp + 8 * (4 + 0)]
  7648 00005F44 50                      	push rax
  7649 00005F45 6A01                    	push 1
  7650 00005F47 488B0425[B8000000]      	mov rax, qword [free_var_23]
  7651                                  	assert_closure(rax)
    42 00005F4F 803805              <1>  cmp byte [%1], %2
    43 00005F52 0F8532B60000        <1>  jne L_error_incorrect_type
  7652 00005F58 FF7001                  	push SOB_CLOSURE_ENV(rax)
  7653 00005F5B FF5009                  	call SOB_CLOSURE_CODE(rax)
  7654 00005F5E 50                      	push rax
  7655 00005F5F 6A02                    	push 2
  7656 00005F61 488B0425[F8000000]      	mov rax, qword [free_var_31]
  7657                                  	assert_closure(rax)
    42 00005F69 803805              <1>  cmp byte [%1], %2
    43 00005F6C 0F8518B60000        <1>  jne L_error_incorrect_type
  7658 00005F72 FF7001                  	push SOB_CLOSURE_ENV(rax)
  7659 00005F75 FF7508                  	push qword [rbp + 8 * 1] ; old ret addr
  7660 00005F78 FF7500                  	push qword [rbp] ; same the old rbp
  7661 00005F7B BA05000000              	mov rdx, 2 + 3
  7662 00005F80 488B4D18                	mov rcx, COUNT
  7663 00005F84 488D4CCD20              	lea rcx, [rbp + 8*4 + rcx * 8]
  7664 00005F89 4889EF                  	mov rdi, rbp
  7665                                  .L_tc_recycle_frame_loop_0044:
  7666 00005F8C 4883FA00                	cmp rdx, 0
  7667 00005F90 7413                    	je .L_tc_recycle_frame_done_0044
  7668 00005F92 4883E908                	sub rcx, 8
  7669 00005F96 4883EF08                	sub rdi, 8
  7670 00005F9A 488B37                  	mov rsi, [rdi]
  7671 00005F9D 488931                  	mov qword [rcx], rsi
  7672 00005FA0 48FFCA                  	dec rdx
  7673 00005FA3 EBE7                    	jmp .L_tc_recycle_frame_loop_0044
  7674                                  .L_tc_recycle_frame_done_0044:
  7675 00005FA5 5D                      	pop rbp ; restore the old rbp
  7676 00005FA6 4889CC                  	mov rsp, rcx
  7677 00005FA9 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
  7678 00005FAC EB4F                    	jmp .L_if_end_0018
  7679                                            .L_if_else_0018:
  7680 00005FAE 6A00                              	push 0
  7681 00005FB0 488B4510                	mov rax, qword [rbp + 8 * 2]
  7682 00005FB4 488B00                  	mov rax, qword [rax + 8 * 0]
  7683 00005FB7 488B00                  	mov rax, qword [rax + 8 * 0]
  7684                                  	assert_closure(rax)
    42 00005FBA 803805              <1>  cmp byte [%1], %2
    43 00005FBD 0F85C7B50000        <1>  jne L_error_incorrect_type
  7685 00005FC3 FF7001                  	push SOB_CLOSURE_ENV(rax)
  7686 00005FC6 FF7508                  	push qword [rbp + 8 * 1] ; old ret addr
  7687 00005FC9 FF7500                  	push qword [rbp] ; same the old rbp
  7688 00005FCC BA03000000              	mov rdx, 0 + 3
  7689 00005FD1 488B4D18                	mov rcx, COUNT
  7690 00005FD5 488D4CCD20              	lea rcx, [rbp + 8*4 + rcx * 8]
  7691 00005FDA 4889EF                  	mov rdi, rbp
  7692                                  .L_tc_recycle_frame_loop_0045:
  7693 00005FDD 4883FA00                	cmp rdx, 0
  7694 00005FE1 7413                    	je .L_tc_recycle_frame_done_0045
  7695 00005FE3 4883E908                	sub rcx, 8
  7696 00005FE7 4883EF08                	sub rdi, 8
  7697 00005FEB 488B37                  	mov rsi, [rdi]
  7698 00005FEE 488931                  	mov qword [rcx], rsi
  7699 00005FF1 48FFCA                  	dec rdx
  7700 00005FF4 EBE7                    	jmp .L_tc_recycle_frame_loop_0045
  7701                                  .L_tc_recycle_frame_done_0045:
  7702 00005FF6 5D                      	pop rbp ; restore the old rbp
  7703 00005FF7 4889CC                  	mov rsp, rcx
  7704 00005FFA FF6009                  	jmp SOB_CLOSURE_CODE(rax)
  7705                                  .L_if_end_0018:
  7706                                  .L_if_end_0019:
  7707 00005FFD E9E5010000              	jmp .L_if_end_001d
  7708                                            .L_if_else_001d:
  7709 00006002 488B4520                          	mov rax, qword [rbp + 8 * (4 + 0)]
  7710 00006006 50                      	push rax
  7711 00006007 6A01                    	push 1
  7712 00006009 488B0425[40000000]      	mov rax, qword [free_var_8]
  7713                                  	assert_closure(rax)
    42 00006011 803805              <1>  cmp byte [%1], %2
    43 00006014 0F8570B50000        <1>  jne L_error_incorrect_type
  7714 0000601A FF7001                  	push SOB_CLOSURE_ENV(rax)
  7715 0000601D FF5009                  	call SOB_CLOSURE_CODE(rax)
  7716 00006020 483D[02000000]          	cmp rax, sob_boolean_false
  7717 00006026 0F846C010000                      	je .L_if_else_001c
  7718 0000602C 488B4528                          	mov rax, qword [rbp + 8 * (4 + 1)]
  7719 00006030 50                      	push rax
  7720 00006031 6A01                    	push 1
  7721 00006033 488B0425[48000000]      	mov rax, qword [free_var_9]
  7722                                  	assert_closure(rax)
    42 0000603B 803805              <1>  cmp byte [%1], %2
    43 0000603E 0F8546B50000        <1>  jne L_error_incorrect_type
  7723 00006044 FF7001                  	push SOB_CLOSURE_ENV(rax)
  7724 00006047 FF5009                  	call SOB_CLOSURE_CODE(rax)
  7725 0000604A 483D[02000000]          	cmp rax, sob_boolean_false
  7726 00006050 7476                              	je .L_if_else_001b
  7727 00006052 488B4528                          	mov rax, qword [rbp + 8 * (4 + 1)]
  7728 00006056 50                      	push rax
  7729 00006057 6A01                    	push 1
  7730 00006059 488B0425[B8000000]      	mov rax, qword [free_var_23]
  7731                                  	assert_closure(rax)
    42 00006061 803805              <1>  cmp byte [%1], %2
    43 00006064 0F8520B50000        <1>  jne L_error_incorrect_type
  7732 0000606A FF7001                  	push SOB_CLOSURE_ENV(rax)
  7733 0000606D FF5009                  	call SOB_CLOSURE_CODE(rax)
  7734 00006070 50                      	push rax
  7735 00006071 488B4520                	mov rax, qword [rbp + 8 * (4 + 0)]
  7736 00006075 50                      	push rax
  7737 00006076 6A02                    	push 2
  7738 00006078 488B0425[F8000000]      	mov rax, qword [free_var_31]
  7739                                  	assert_closure(rax)
    42 00006080 803805              <1>  cmp byte [%1], %2
    43 00006083 0F8501B50000        <1>  jne L_error_incorrect_type
  7740 00006089 FF7001                  	push SOB_CLOSURE_ENV(rax)
  7741 0000608C FF7508                  	push qword [rbp + 8 * 1] ; old ret addr
  7742 0000608F FF7500                  	push qword [rbp] ; same the old rbp
  7743 00006092 BA05000000              	mov rdx, 2 + 3
  7744 00006097 488B4D18                	mov rcx, COUNT
  7745 0000609B 488D4CCD20              	lea rcx, [rbp + 8*4 + rcx * 8]
  7746 000060A0 4889EF                  	mov rdi, rbp
  7747                                  .L_tc_recycle_frame_loop_0046:
  7748 000060A3 4883FA00                	cmp rdx, 0
  7749 000060A7 7413                    	je .L_tc_recycle_frame_done_0046
  7750 000060A9 4883E908                	sub rcx, 8
  7751 000060AD 4883EF08                	sub rdi, 8
  7752 000060B1 488B37                  	mov rsi, [rdi]
  7753 000060B4 488931                  	mov qword [rcx], rsi
  7754 000060B7 48FFCA                  	dec rdx
  7755 000060BA EBE7                    	jmp .L_tc_recycle_frame_loop_0046
  7756                                  .L_tc_recycle_frame_done_0046:
  7757 000060BC 5D                      	pop rbp ; restore the old rbp
  7758 000060BD 4889CC                  	mov rsp, rcx
  7759 000060C0 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
  7760 000060C3 E9CE000000              	jmp .L_if_end_001b
  7761                                            .L_if_else_001b:
  7762 000060C8 488B4528                          	mov rax, qword [rbp + 8 * (4 + 1)]
  7763 000060CC 50                      	push rax
  7764 000060CD 6A01                    	push 1
  7765 000060CF 488B0425[40000000]      	mov rax, qword [free_var_8]
  7766                                  	assert_closure(rax)
    42 000060D7 803805              <1>  cmp byte [%1], %2
    43 000060DA 0F85AAB40000        <1>  jne L_error_incorrect_type
  7767 000060E0 FF7001                  	push SOB_CLOSURE_ENV(rax)
  7768 000060E3 FF5009                  	call SOB_CLOSURE_CODE(rax)
  7769 000060E6 483D[02000000]          	cmp rax, sob_boolean_false
  7770 000060EC 7459                              	je .L_if_else_001a
  7771 000060EE 488B4528                          	mov rax, qword [rbp + 8 * (4 + 1)]
  7772 000060F2 50                      	push rax
  7773 000060F3 488B4520                	mov rax, qword [rbp + 8 * (4 + 0)]
  7774 000060F7 50                      	push rax
  7775 000060F8 6A02                    	push 2
  7776 000060FA 488B0425[F8000000]      	mov rax, qword [free_var_31]
  7777                                  	assert_closure(rax)
    42 00006102 803805              <1>  cmp byte [%1], %2
    43 00006105 0F857FB40000        <1>  jne L_error_incorrect_type
  7778 0000610B FF7001                  	push SOB_CLOSURE_ENV(rax)
  7779 0000610E FF7508                  	push qword [rbp + 8 * 1] ; old ret addr
  7780 00006111 FF7500                  	push qword [rbp] ; same the old rbp
  7781 00006114 BA05000000              	mov rdx, 2 + 3
  7782 00006119 488B4D18                	mov rcx, COUNT
  7783 0000611D 488D4CCD20              	lea rcx, [rbp + 8*4 + rcx * 8]
  7784 00006122 4889EF                  	mov rdi, rbp
  7785                                  .L_tc_recycle_frame_loop_0047:
  7786 00006125 4883FA00                	cmp rdx, 0
  7787 00006129 7413                    	je .L_tc_recycle_frame_done_0047
  7788 0000612B 4883E908                	sub rcx, 8
  7789 0000612F 4883EF08                	sub rdi, 8
  7790 00006133 488B37                  	mov rsi, [rdi]
  7791 00006136 488931                  	mov qword [rcx], rsi
  7792 00006139 48FFCA                  	dec rdx
  7793 0000613C EBE7                    	jmp .L_tc_recycle_frame_loop_0047
  7794                                  .L_tc_recycle_frame_done_0047:
  7795 0000613E 5D                      	pop rbp ; restore the old rbp
  7796 0000613F 4889CC                  	mov rsp, rcx
  7797 00006142 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
  7798 00006145 EB4F                    	jmp .L_if_end_001a
  7799                                            .L_if_else_001a:
  7800 00006147 6A00                              	push 0
  7801 00006149 488B4510                	mov rax, qword [rbp + 8 * 2]
  7802 0000614D 488B00                  	mov rax, qword [rax + 8 * 0]
  7803 00006150 488B00                  	mov rax, qword [rax + 8 * 0]
  7804                                  	assert_closure(rax)
    42 00006153 803805              <1>  cmp byte [%1], %2
    43 00006156 0F852EB40000        <1>  jne L_error_incorrect_type
  7805 0000615C FF7001                  	push SOB_CLOSURE_ENV(rax)
  7806 0000615F FF7508                  	push qword [rbp + 8 * 1] ; old ret addr
  7807 00006162 FF7500                  	push qword [rbp] ; same the old rbp
  7808 00006165 BA03000000              	mov rdx, 0 + 3
  7809 0000616A 488B4D18                	mov rcx, COUNT
  7810 0000616E 488D4CCD20              	lea rcx, [rbp + 8*4 + rcx * 8]
  7811 00006173 4889EF                  	mov rdi, rbp
  7812                                  .L_tc_recycle_frame_loop_0048:
  7813 00006176 4883FA00                	cmp rdx, 0
  7814 0000617A 7413                    	je .L_tc_recycle_frame_done_0048
  7815 0000617C 4883E908                	sub rcx, 8
  7816 00006180 4883EF08                	sub rdi, 8
  7817 00006184 488B37                  	mov rsi, [rdi]
  7818 00006187 488931                  	mov qword [rcx], rsi
  7819 0000618A 48FFCA                  	dec rdx
  7820 0000618D EBE7                    	jmp .L_tc_recycle_frame_loop_0048
  7821                                  .L_tc_recycle_frame_done_0048:
  7822 0000618F 5D                      	pop rbp ; restore the old rbp
  7823 00006190 4889CC                  	mov rsp, rcx
  7824 00006193 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
  7825                                  .L_if_end_001a:
  7826                                  .L_if_end_001b:
  7827 00006196 EB4F                    	jmp .L_if_end_001c
  7828                                            .L_if_else_001c:
  7829 00006198 6A00                              	push 0
  7830 0000619A 488B4510                	mov rax, qword [rbp + 8 * 2]
  7831 0000619E 488B00                  	mov rax, qword [rax + 8 * 0]
  7832 000061A1 488B00                  	mov rax, qword [rax + 8 * 0]
  7833                                  	assert_closure(rax)
    42 000061A4 803805              <1>  cmp byte [%1], %2
    43 000061A7 0F85DDB30000        <1>  jne L_error_incorrect_type
  7834 000061AD FF7001                  	push SOB_CLOSURE_ENV(rax)
  7835 000061B0 FF7508                  	push qword [rbp + 8 * 1] ; old ret addr
  7836 000061B3 FF7500                  	push qword [rbp] ; same the old rbp
  7837 000061B6 BA03000000              	mov rdx, 0 + 3
  7838 000061BB 488B4D18                	mov rcx, COUNT
  7839 000061BF 488D4CCD20              	lea rcx, [rbp + 8*4 + rcx * 8]
  7840 000061C4 4889EF                  	mov rdi, rbp
  7841                                  .L_tc_recycle_frame_loop_0049:
  7842 000061C7 4883FA00                	cmp rdx, 0
  7843 000061CB 7413                    	je .L_tc_recycle_frame_done_0049
  7844 000061CD 4883E908                	sub rcx, 8
  7845 000061D1 4883EF08                	sub rdi, 8
  7846 000061D5 488B37                  	mov rsi, [rdi]
  7847 000061D8 488931                  	mov qword [rcx], rsi
  7848 000061DB 48FFCA                  	dec rdx
  7849 000061DE EBE7                    	jmp .L_tc_recycle_frame_loop_0049
  7850                                  .L_tc_recycle_frame_done_0049:
  7851 000061E0 5D                      	pop rbp ; restore the old rbp
  7852 000061E1 4889CC                  	mov rsp, rcx
  7853 000061E4 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
  7854                                  .L_if_end_001c:
  7855                                  .L_if_end_001d:
  7856 000061E7 C9                      	leave
  7857 000061E8 C22000                  	ret 8 * (2 + 2)
  7858                                  .L_lambda_simple_end_003c:	; new closure is in rax
  7859 000061EB 50                      	push rax
  7860 000061EC 6A01                    	push 1
  7861 000061EE BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  7862 000061F3 E8999B0000              	call malloc
  7863 000061F8 50                      	push rax
  7864 000061F9 BF08000000              	mov rdi, 8 * 1	; new rib
  7865 000061FE E88E9B0000              	call malloc
  7866 00006203 50                      	push rax
  7867 00006204 BF10000000              	mov rdi, 8 * 2	; extended env
  7868 00006209 E8839B0000              	call malloc
  7869 0000620E 488B7D10                	mov rdi, ENV
  7870 00006212 BE00000000              	mov rsi, 0
  7871 00006217 BA01000000              	mov rdx, 1
  7872                                  .L_lambda_simple_env_loop_003a:	; ext_env[i + 1] <-- env[i]
  7873 0000621C 4883FE01                	cmp rsi, 1
  7874 00006220 7410                    	je .L_lambda_simple_env_end_003a
  7875 00006222 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  7876 00006226 48890CD0                	mov qword [rax + 8 * rdx], rcx
  7877 0000622A 48FFC6                  	inc rsi
  7878 0000622D 48FFC2                  	inc rdx
  7879 00006230 EBEA                    	jmp .L_lambda_simple_env_loop_003a
  7880                                  .L_lambda_simple_env_end_003a:
  7881 00006232 5B                      	pop rbx
  7882 00006233 BE00000000              	mov rsi, 0
  7883                                  .L_lambda_simple_params_loop_003a:	; copy params
  7884 00006238 4883FE01                	cmp rsi, 1
  7885 0000623C 740E                    	je .L_lambda_simple_params_end_003a
  7886 0000623E 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  7887 00006243 488914F3                	mov qword [rbx + 8 * rsi], rdx
  7888 00006247 48FFC6                  	inc rsi
  7889 0000624A EBEC                    	jmp .L_lambda_simple_params_loop_003a
  7890                                  .L_lambda_simple_params_end_003a:
  7891 0000624C 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  7892 0000624F 4889C3                  	mov rbx, rax
  7893 00006252 58                      	pop rax
  7894 00006253 C60005                  	mov byte [rax], T_closure
  7895 00006256 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  7896 0000625A 48C74009[67620000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_003a
  7897 00006262 E961030000              	jmp .L_lambda_simple_end_003a
  7898                                  .L_lambda_simple_code_003a:	; lambda-simple body
  7899 00006267 48837C241001            	cmp qword [rsp + 8 * 2], 1
  7900 0000626D 740B                    	je .L_lambda_simple_arity_check_ok_003a
  7901 0000626F FF742410                	push qword [rsp + 8 * 2]
  7902 00006273 6A01                    	push 1
  7903 00006275 E9D09A0000              	jmp L_error_incorrect_arity_simple
  7904                                  .L_lambda_simple_arity_check_ok_003a:
  7905 0000627A C8000000                	enter 0, 0
  7906 0000627E BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  7907 00006283 E8099B0000              	call malloc
  7908 00006288 50                      	push rax
  7909 00006289 BF08000000              	mov rdi, 8 * 1	; new rib
  7910 0000628E E8FE9A0000              	call malloc
  7911 00006293 50                      	push rax
  7912 00006294 BF18000000              	mov rdi, 8 * 3	; extended env
  7913 00006299 E8F39A0000              	call malloc
  7914 0000629E 488B7D10                	mov rdi, ENV
  7915 000062A2 BE00000000              	mov rsi, 0
  7916 000062A7 BA01000000              	mov rdx, 1
  7917                                  .L_lambda_opt_env_loop_000b:	; ext_env[i + 1] <-- env[i]
  7918 000062AC 4883FE02                	cmp rsi, 2
  7919 000062B0 7410                    	je .L_lambda_opt_env_end_000b
  7920 000062B2 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  7921 000062B6 48890CD0                	mov qword [rax + 8 * rdx], rcx
  7922 000062BA 48FFC6                  	inc rsi
  7923 000062BD 48FFC2                  	inc rdx
  7924 000062C0 EBEA                    	jmp .L_lambda_opt_env_loop_000b
  7925                                  .L_lambda_opt_env_end_000b:
  7926 000062C2 5B                      	pop rbx
  7927 000062C3 BE00000000              	mov rsi, 0
  7928                                  .L_lambda_opt_params_loop_000b:	; copy params
  7929 000062C8 4883FE01                	cmp rsi, 1
  7930 000062CC 740E                    	je .L_lambda_opt_params_end_000b
  7931 000062CE 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  7932 000062D3 488914F3                	mov qword [rbx + 8 * rsi], rdx
  7933 000062D7 48FFC6                  	inc rsi
  7934 000062DA EBEC                    	jmp .L_lambda_opt_params_loop_000b
  7935                                  .L_lambda_opt_params_end_000b:
  7936 000062DC 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  7937 000062DF 4889C3                  	mov rbx, rax
  7938 000062E2 58                      	pop rax
  7939 000062E3 C60005                  	mov byte [rax], T_closure
  7940 000062E6 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  7941 000062EA 48C74009[F7620000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_opt_code_000b
  7942 000062F2 E9CD020000              	jmp .L_lambda_opt_end_000b
  7943                                  .L_lambda_opt_code_000b:	; lambda-opt body
  7944 000062F7 48837C241001            	cmp qword [rsp + 8 * 2], 1
  7945 000062FD 740D                    	je .L_lambda_opt_arity_check_exact_000b
  7946 000062FF 7F43                    	jg .L_lambda_opt_arity_check_more_000b
  7947 00006301 FF742410                	push qword [rsp + 8 * 2]
  7948 00006305 6A01                    	push 1
  7949 00006307 E9529A0000              	jmp L_error_incorrect_arity_opt
  7950                                  .L_lambda_opt_arity_check_exact_000b:
  7951 0000630C 48C744241002000000      	mov qword [rsp + 8 * 2], 2
  7952 00006315 BA04000000              	mov rdx, 4
  7953 0000631A FF3424                  	push qword [rsp]
  7954 0000631D BE01000000              	mov rsi, 1
  7955                                  .L_lambda_opt_stack_shrink_loop_001f:
  7956 00006322 4839D6                  	cmp rsi, rdx
  7957 00006325 7411                    	je .L_lambda_opt_stack_shrink_loop_exit_001f
  7958 00006327 488D5CF408              	lea rbx, [rsp + 8 + rsi * 8]
  7959 0000632C 488B0B                  	mov rcx, [rbx]
  7960 0000632F 48894BF8                	mov qword [rbx - 8], rcx
  7961 00006333 48FFC6                  	inc rsi
  7962 00006336 EBEA                    	jmp .L_lambda_opt_stack_shrink_loop_001f
  7963                                  .L_lambda_opt_stack_shrink_loop_exit_001f:
  7964 00006338 48C703[01000000]        	mov qword [rbx], sob_nil
  7965 0000633F E985000000              	jmp .L_lambda_opt_stack_adjusted_000b
  7966                                  .L_lambda_opt_arity_check_more_000b:
  7967 00006344 488B542410              	mov rdx, qword [rsp + 8 * 2]
  7968 00006349 4883EA01                	sub rdx, 1
  7969 0000634D 48C744241002000000      	mov qword [rsp + 8 * 2], 2
  7970 00006356 BE00000000              	mov rsi, 0
  7971 0000635B 488D5CD418              	lea rbx, [rsp + 2 * 8 + 1 * 8 + rdx * 8]
  7972 00006360 48B9-                   	mov rcx, sob_nil
  7972 00006362 [0100000000000000] 
  7973                                  .L_lambda_opt_stack_shrink_loop_0020:
  7974 0000636A 4839D6                  	cmp rsi, rdx
  7975 0000636D 7427                    je .L_lambda_opt_stack_shrink_loop_exit_0020
  7976 0000636F BF11000000              	mov rdi, 17 ; 1+8+8
  7977 00006374 E8189A0000              	call malloc
  7978 00006379 48894809                	mov SOB_PAIR_CDR(rax), rcx
  7979 0000637D 48F7DE                  	neg rsi
  7980 00006380 488B0CF3                	mov rcx, qword [rbx + rsi * 8]
  7981 00006384 48F7DE                  	neg rsi
  7982 00006387 48894801                	mov SOB_PAIR_CAR(rax), rcx
  7983 0000638B C60021                  	mov byte [rax], T_pair
  7984 0000638E 4889C1                  	mov rcx, rax
  7985 00006391 48FFC6                  	inc rsi
  7986 00006394 EBD4                    	jmp .L_lambda_opt_stack_shrink_loop_0020
  7987                                  .L_lambda_opt_stack_shrink_loop_exit_0020:
  7988 00006396 48890B                  	mov qword [rbx], rcx
  7989 00006399 4883EB08                	sub rbx, 8
  7990 0000639D 4889E7                  	mov rdi, rsp
  7991 000063A0 4883C718                	add rdi, 24
  7992 000063A4 BE04000000              	mov rsi, 4
  7993                                  .L_lambda_opt_stack_shrink_loop_0021:
  7994 000063A9 4883FE00                	cmp rsi,0
  7995 000063AD 7413                    	je .L_lambda_opt_stack_shrink_loop_exit_0021
  7996 000063AF 488B0F                  	mov rcx, qword [rdi]
  7997 000063B2 48890B                  	mov [rbx], rcx
  7998 000063B5 48FFCE                  	dec rsi
  7999 000063B8 4883EB08                	sub rbx, 8
  8000 000063BC 4883EF08                	sub rdi, 8
  8001 000063C0 EBE7                    	jmp .L_lambda_opt_stack_shrink_loop_0021
  8002                                  .L_lambda_opt_stack_shrink_loop_exit_0021:
  8003 000063C2 4883C308                	add rbx, 8
  8004 000063C6 4889DC                  	mov rsp, rbx
  8005                                  .L_lambda_opt_stack_adjusted_000b:
  8006 000063C9 C8000000                	enter 0, 0
  8007 000063CD 488B4528                	mov rax, qword [rbp + 8 * (4 + 1)]
  8008 000063D1 50                      	push rax
  8009 000063D2 6A01                    	push 1
  8010 000063D4 488B0425[00000000]      	mov rax, qword [free_var_0]
  8011                                  	assert_closure(rax)
    42 000063DC 803805              <1>  cmp byte [%1], %2
    43 000063DF 0F85A5B10000        <1>  jne L_error_incorrect_type
  8012 000063E5 FF7001                  	push SOB_CLOSURE_ENV(rax)
  8013 000063E8 FF5009                  	call SOB_CLOSURE_CODE(rax)
  8014 000063EB 483D[02000000]          	cmp rax, sob_boolean_false
  8015 000063F1 7464                              	je .L_if_else_0017
  8016 000063F3 488B4520                          	mov rax, qword [rbp + 8 * (4 + 0)]
  8017 000063F7 50                      	push rax
  8018 000063F8 48B8-                   	mov rax, L_constants + 32
  8018 000063FA [2000000000000000] 
  8019 00006402 50                      	push rax
  8020 00006403 6A02                    	push 2
  8021 00006405 488B4510                	mov rax, qword [rbp + 8 * 2]
  8022 00006409 488B00                  	mov rax, qword [rax + 8 * 0]
  8023 0000640C 488B00                  	mov rax, qword [rax + 8 * 0]
  8024                                  	assert_closure(rax)
    42 0000640F 803805              <1>  cmp byte [%1], %2
    43 00006412 0F8572B10000        <1>  jne L_error_incorrect_type
  8025 00006418 FF7001                  	push SOB_CLOSURE_ENV(rax)
  8026 0000641B FF7508                  	push qword [rbp + 8 * 1] ; old ret addr
  8027 0000641E FF7500                  	push qword [rbp] ; same the old rbp
  8028 00006421 BA05000000              	mov rdx, 2 + 3
  8029 00006426 488B4D18                	mov rcx, COUNT
  8030 0000642A 488D4CCD20              	lea rcx, [rbp + 8*4 + rcx * 8]
  8031 0000642F 4889EF                  	mov rdi, rbp
  8032                                  .L_tc_recycle_frame_loop_0040:
  8033 00006432 4883FA00                	cmp rdx, 0
  8034 00006436 7413                    	je .L_tc_recycle_frame_done_0040
  8035 00006438 4883E908                	sub rcx, 8
  8036 0000643C 4883EF08                	sub rdi, 8
  8037 00006440 488B37                  	mov rsi, [rdi]
  8038 00006443 488931                  	mov qword [rcx], rsi
  8039 00006446 48FFCA                  	dec rdx
  8040 00006449 EBE7                    	jmp .L_tc_recycle_frame_loop_0040
  8041                                  .L_tc_recycle_frame_done_0040:
  8042 0000644B 5D                      	pop rbp ; restore the old rbp
  8043 0000644C 4889CC                  	mov rsp, rcx
  8044 0000644F FF6009                  	jmp SOB_CLOSURE_CODE(rax)
  8045 00006452 E969010000              	jmp .L_if_end_0017
  8046                                            .L_if_else_0017:
  8047 00006457 488B4528                          	mov rax, qword [rbp + 8 * (4 + 1)]
  8048 0000645B 50                      	push rax
  8049 0000645C 48B8-                   	mov rax, L_constants + 32
  8049 0000645E [2000000000000000] 
  8050 00006466 50                      	push rax
  8051 00006467 488B0425[08030000]      	mov rax, qword [free_var_97]
  8052 0000646F 50                      	push rax
  8053 00006470 6A03                    	push 3
  8054 00006472 488B0425[F8020000]      	mov rax, qword [free_var_95]
  8055                                  	assert_closure(rax)
    42 0000647A 803805              <1>  cmp byte [%1], %2
    43 0000647D 0F8507B10000        <1>  jne L_error_incorrect_type
  8056 00006483 FF7001                  	push SOB_CLOSURE_ENV(rax)
  8057 00006486 FF5009                  	call SOB_CLOSURE_CODE(rax)
  8058 00006489 50                      	push rax
  8059 0000648A 6A01                    	push 1
  8060 0000648C BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  8061 00006491 E8FB980000              	call malloc
  8062 00006496 50                      	push rax
  8063 00006497 BF10000000              	mov rdi, 8 * 2	; new rib
  8064 0000649C E8F0980000              	call malloc
  8065 000064A1 50                      	push rax
  8066 000064A2 BF20000000              	mov rdi, 8 * 4	; extended env
  8067 000064A7 E8E5980000              	call malloc
  8068 000064AC 488B7D10                	mov rdi, ENV
  8069 000064B0 BE00000000              	mov rsi, 0
  8070 000064B5 BA01000000              	mov rdx, 1
  8071                                  .L_lambda_simple_env_loop_003b:	; ext_env[i + 1] <-- env[i]
  8072 000064BA 4883FE03                	cmp rsi, 3
  8073 000064BE 7410                    	je .L_lambda_simple_env_end_003b
  8074 000064C0 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  8075 000064C4 48890CD0                	mov qword [rax + 8 * rdx], rcx
  8076 000064C8 48FFC6                  	inc rsi
  8077 000064CB 48FFC2                  	inc rdx
  8078 000064CE EBEA                    	jmp .L_lambda_simple_env_loop_003b
  8079                                  .L_lambda_simple_env_end_003b:
  8080 000064D0 5B                      	pop rbx
  8081 000064D1 BE00000000              	mov rsi, 0
  8082                                  .L_lambda_simple_params_loop_003b:	; copy params
  8083 000064D6 4883FE02                	cmp rsi, 2
  8084 000064DA 740E                    	je .L_lambda_simple_params_end_003b
  8085 000064DC 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  8086 000064E1 488914F3                	mov qword [rbx + 8 * rsi], rdx
  8087 000064E5 48FFC6                  	inc rsi
  8088 000064E8 EBEC                    	jmp .L_lambda_simple_params_loop_003b
  8089                                  .L_lambda_simple_params_end_003b:
  8090 000064EA 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  8091 000064ED 4889C3                  	mov rbx, rax
  8092 000064F0 58                      	pop rax
  8093 000064F1 C60005                  	mov byte [rax], T_closure
  8094 000064F4 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  8095 000064F8 48C74009[02650000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_003b
  8096 00006500 EB7B                    	jmp .L_lambda_simple_end_003b
  8097                                  .L_lambda_simple_code_003b:	; lambda-simple body
  8098 00006502 48837C241001            	cmp qword [rsp + 8 * 2], 1
  8099 00006508 740B                    	je .L_lambda_simple_arity_check_ok_003b
  8100 0000650A FF742410                	push qword [rsp + 8 * 2]
  8101 0000650E 6A01                    	push 1
  8102 00006510 E935980000              	jmp L_error_incorrect_arity_simple
  8103                                  .L_lambda_simple_arity_check_ok_003b:
  8104 00006515 C8000000                	enter 0, 0
  8105 00006519 488B4520                	mov rax, qword [rbp + 8 * (4 + 0)]
  8106 0000651D 50                      	push rax
  8107 0000651E 488B4510                	mov rax, qword [rbp + 8 * 2]
  8108 00006522 488B00                  	mov rax, qword [rax + 8 * 0]
  8109 00006525 488B00                  	mov rax, qword [rax + 8 * 0]
  8110 00006528 50                      	push rax
  8111 00006529 6A02                    	push 2
  8112 0000652B 488B4510                	mov rax, qword [rbp + 8 * 2]
  8113 0000652F 488B4008                	mov rax, qword [rax + 8 * 1]
  8114 00006533 488B00                  	mov rax, qword [rax + 8 * 0]
  8115                                  	assert_closure(rax)
    42 00006536 803805              <1>  cmp byte [%1], %2
    43 00006539 0F854BB00000        <1>  jne L_error_incorrect_type
  8116 0000653F FF7001                  	push SOB_CLOSURE_ENV(rax)
  8117 00006542 FF7508                  	push qword [rbp + 8 * 1] ; old ret addr
  8118 00006545 FF7500                  	push qword [rbp] ; same the old rbp
  8119 00006548 BA05000000              	mov rdx, 2 + 3
  8120 0000654D 488B4D18                	mov rcx, COUNT
  8121 00006551 488D4CCD20              	lea rcx, [rbp + 8*4 + rcx * 8]
  8122 00006556 4889EF                  	mov rdi, rbp
  8123                                  .L_tc_recycle_frame_loop_0042:
  8124 00006559 4883FA00                	cmp rdx, 0
  8125 0000655D 7413                    	je .L_tc_recycle_frame_done_0042
  8126 0000655F 4883E908                	sub rcx, 8
  8127 00006563 4883EF08                	sub rdi, 8
  8128 00006567 488B37                  	mov rsi, [rdi]
  8129 0000656A 488931                  	mov qword [rcx], rsi
  8130 0000656D 48FFCA                  	dec rdx
  8131 00006570 EBE7                    	jmp .L_tc_recycle_frame_loop_0042
  8132                                  .L_tc_recycle_frame_done_0042:
  8133 00006572 5D                      	pop rbp ; restore the old rbp
  8134 00006573 4889CC                  	mov rsp, rcx
  8135 00006576 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
  8136 00006579 C9                      	leave
  8137 0000657A C21800                  	ret 8 * (2 + 1)
  8138                                  .L_lambda_simple_end_003b:	; new closure is in rax
  8139                                  	assert_closure(rax)
    42 0000657D 803805              <1>  cmp byte [%1], %2
    43 00006580 0F8504B00000        <1>  jne L_error_incorrect_type
  8140 00006586 FF7001                  	push SOB_CLOSURE_ENV(rax)
  8141 00006589 FF7508                  	push qword [rbp + 8 * 1] ; old ret addr
  8142 0000658C FF7500                  	push qword [rbp] ; same the old rbp
  8143 0000658F BA04000000              	mov rdx, 1 + 3
  8144 00006594 488B4D18                	mov rcx, COUNT
  8145 00006598 488D4CCD20              	lea rcx, [rbp + 8*4 + rcx * 8]
  8146 0000659D 4889EF                  	mov rdi, rbp
  8147                                  .L_tc_recycle_frame_loop_0041:
  8148 000065A0 4883FA00                	cmp rdx, 0
  8149 000065A4 7413                    	je .L_tc_recycle_frame_done_0041
  8150 000065A6 4883E908                	sub rcx, 8
  8151 000065AA 4883EF08                	sub rdi, 8
  8152 000065AE 488B37                  	mov rsi, [rdi]
  8153 000065B1 488931                  	mov qword [rcx], rsi
  8154 000065B4 48FFCA                  	dec rdx
  8155 000065B7 EBE7                    	jmp .L_tc_recycle_frame_loop_0041
  8156                                  .L_tc_recycle_frame_done_0041:
  8157 000065B9 5D                      	pop rbp ; restore the old rbp
  8158 000065BA 4889CC                  	mov rsp, rcx
  8159 000065BD FF6009                  	jmp SOB_CLOSURE_CODE(rax)
  8160                                  .L_if_end_0017:
  8161 000065C0 C9                      	leave
  8162 000065C1 C22000                  	ret 8 * (2 + 2)
  8163                                  .L_lambda_opt_end_000b:	; new closure is in rax
  8164 000065C4 C9                      	leave
  8165 000065C5 C21800                  	ret 8 * (2 + 1)
  8166                                  .L_lambda_simple_end_003a:	; new closure is in rax
  8167                                  	assert_closure(rax)
    42 000065C8 803805              <1>  cmp byte [%1], %2
    43 000065CB 0F85B9AF0000        <1>  jne L_error_incorrect_type
  8168 000065D1 FF7001                  	push SOB_CLOSURE_ENV(rax)
  8169 000065D4 FF7508                  	push qword [rbp + 8 * 1] ; old ret addr
  8170 000065D7 FF7500                  	push qword [rbp] ; same the old rbp
  8171 000065DA BA04000000              	mov rdx, 1 + 3
  8172 000065DF 488B4D18                	mov rcx, COUNT
  8173 000065E3 488D4CCD20              	lea rcx, [rbp + 8*4 + rcx * 8]
  8174 000065E8 4889EF                  	mov rdi, rbp
  8175                                  .L_tc_recycle_frame_loop_003f:
  8176 000065EB 4883FA00                	cmp rdx, 0
  8177 000065EF 7413                    	je .L_tc_recycle_frame_done_003f
  8178 000065F1 4883E908                	sub rcx, 8
  8179 000065F5 4883EF08                	sub rdi, 8
  8180 000065F9 488B37                  	mov rsi, [rdi]
  8181 000065FC 488931                  	mov qword [rcx], rsi
  8182 000065FF 48FFCA                  	dec rdx
  8183 00006602 EBE7                    	jmp .L_tc_recycle_frame_loop_003f
  8184                                  .L_tc_recycle_frame_done_003f:
  8185 00006604 5D                      	pop rbp ; restore the old rbp
  8186 00006605 4889CC                  	mov rsp, rcx
  8187 00006608 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
  8188 0000660B C9                      	leave
  8189 0000660C C21800                  	ret 8 * (2 + 1)
  8190                                  .L_lambda_simple_end_0039:	; new closure is in rax
  8191                                  	assert_closure(rax)
    42 0000660F 803805              <1>  cmp byte [%1], %2
    43 00006612 0F8572AF0000        <1>  jne L_error_incorrect_type
  8192 00006618 FF7001                  	push SOB_CLOSURE_ENV(rax)
  8193 0000661B FF5009                  	call SOB_CLOSURE_CODE(rax)
  8194 0000661E 48890425[10030000]      	mov qword [free_var_98], rax
  8195 00006626 48B8-                   	mov rax, sob_void
  8195 00006628 [0000000000000000] 
  8196                                  
  8197 00006630 4889C7                  	mov rdi, rax
  8198 00006633 E86A970000              	call print_sexpr_if_not_void
  8199                                  
  8200 00006638 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  8201 0000663D E84F970000              	call malloc
  8202 00006642 50                      	push rax
  8203 00006643 BF00000000              	mov rdi, 8 * 0	; new rib
  8204 00006648 E844970000              	call malloc
  8205 0000664D 50                      	push rax
  8206 0000664E BF08000000              	mov rdi, 8 * 1	; extended env
  8207 00006653 E839970000              	call malloc
  8208 00006658 488B7D10                	mov rdi, ENV
  8209 0000665C BE00000000              	mov rsi, 0
  8210 00006661 BA01000000              	mov rdx, 1
  8211                                  .L_lambda_simple_env_loop_0041:	; ext_env[i + 1] <-- env[i]
  8212 00006666 4883FE00                	cmp rsi, 0
  8213 0000666A 7410                    	je .L_lambda_simple_env_end_0041
  8214 0000666C 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  8215 00006670 48890CD0                	mov qword [rax + 8 * rdx], rcx
  8216 00006674 48FFC6                  	inc rsi
  8217 00006677 48FFC2                  	inc rdx
  8218 0000667A EBEA                    	jmp .L_lambda_simple_env_loop_0041
  8219                                  .L_lambda_simple_env_end_0041:
  8220 0000667C 5B                      	pop rbx
  8221 0000667D BE00000000              	mov rsi, 0
  8222                                  .L_lambda_simple_params_loop_0041:	; copy params
  8223 00006682 4883FE00                	cmp rsi, 0
  8224 00006686 740E                    	je .L_lambda_simple_params_end_0041
  8225 00006688 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  8226 0000668D 488914F3                	mov qword [rbx + 8 * rsi], rdx
  8227 00006691 48FFC6                  	inc rsi
  8228 00006694 EBEC                    	jmp .L_lambda_simple_params_loop_0041
  8229                                  .L_lambda_simple_params_end_0041:
  8230 00006696 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  8231 00006699 4889C3                  	mov rbx, rax
  8232 0000669C 58                      	pop rax
  8233 0000669D C60005                  	mov byte [rax], T_closure
  8234 000066A0 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  8235 000066A4 48C74009[B1660000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0041
  8236 000066AC E97E000000              	jmp .L_lambda_simple_end_0041
  8237                                  .L_lambda_simple_code_0041:	; lambda-simple body
  8238 000066B1 48837C241000            	cmp qword [rsp + 8 * 2], 0
  8239 000066B7 740B                    	je .L_lambda_simple_arity_check_ok_0041
  8240 000066B9 FF742410                	push qword [rsp + 8 * 2]
  8241 000066BD 6A00                    	push 0
  8242 000066BF E986960000              	jmp L_error_incorrect_arity_simple
  8243                                  .L_lambda_simple_arity_check_ok_0041:
  8244 000066C4 C8000000                	enter 0, 0
  8245 000066C8 48B8-                   	mov rax, L_constants + 68
  8245 000066CA [4400000000000000] 
  8246 000066D2 50                      	push rax
  8247 000066D3 48B8-                   	mov rax, L_constants + 155
  8247 000066D5 [9B00000000000000] 
  8248 000066DD 50                      	push rax
  8249 000066DE 6A02                    	push 2
  8250 000066E0 488B0425[30010000]      	mov rax, qword [free_var_38]
  8251                                  	assert_closure(rax)
    42 000066E8 803805              <1>  cmp byte [%1], %2
    43 000066EB 0F8599AE0000        <1>  jne L_error_incorrect_type
  8252 000066F1 FF7001                  	push SOB_CLOSURE_ENV(rax)
  8253 000066F4 FF7508                  	push qword [rbp + 8 * 1] ; old ret addr
  8254 000066F7 FF7500                  	push qword [rbp] ; same the old rbp
  8255 000066FA BA05000000              	mov rdx, 2 + 3
  8256 000066FF 488B4D18                	mov rcx, COUNT
  8257 00006703 488D4CCD20              	lea rcx, [rbp + 8*4 + rcx * 8]
  8258 00006708 4889EF                  	mov rdi, rbp
  8259                                  .L_tc_recycle_frame_loop_0054:
  8260 0000670B 4883FA00                	cmp rdx, 0
  8261 0000670F 7413                    	je .L_tc_recycle_frame_done_0054
  8262 00006711 4883E908                	sub rcx, 8
  8263 00006715 4883EF08                	sub rdi, 8
  8264 00006719 488B37                  	mov rsi, [rdi]
  8265 0000671C 488931                  	mov qword [rcx], rsi
  8266 0000671F 48FFCA                  	dec rdx
  8267 00006722 EBE7                    	jmp .L_tc_recycle_frame_loop_0054
  8268                                  .L_tc_recycle_frame_done_0054:
  8269 00006724 5D                      	pop rbp ; restore the old rbp
  8270 00006725 4889CC                  	mov rsp, rcx
  8271 00006728 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
  8272 0000672B C9                      	leave
  8273 0000672C C21000                  	ret 8 * (2 + 0)
  8274                                  .L_lambda_simple_end_0041:	; new closure is in rax
  8275 0000672F 50                      	push rax
  8276 00006730 6A01                    	push 1
  8277 00006732 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  8278 00006737 E855960000              	call malloc
  8279 0000673C 50                      	push rax
  8280 0000673D BF00000000              	mov rdi, 8 * 0	; new rib
  8281 00006742 E84A960000              	call malloc
  8282 00006747 50                      	push rax
  8283 00006748 BF08000000              	mov rdi, 8 * 1	; extended env
  8284 0000674D E83F960000              	call malloc
  8285 00006752 488B7D10                	mov rdi, ENV
  8286 00006756 BE00000000              	mov rsi, 0
  8287 0000675B BA01000000              	mov rdx, 1
  8288                                  .L_lambda_simple_env_loop_003e:	; ext_env[i + 1] <-- env[i]
  8289 00006760 4883FE00                	cmp rsi, 0
  8290 00006764 7410                    	je .L_lambda_simple_env_end_003e
  8291 00006766 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  8292 0000676A 48890CD0                	mov qword [rax + 8 * rdx], rcx
  8293 0000676E 48FFC6                  	inc rsi
  8294 00006771 48FFC2                  	inc rdx
  8295 00006774 EBEA                    	jmp .L_lambda_simple_env_loop_003e
  8296                                  .L_lambda_simple_env_end_003e:
  8297 00006776 5B                      	pop rbx
  8298 00006777 BE00000000              	mov rsi, 0
  8299                                  .L_lambda_simple_params_loop_003e:	; copy params
  8300 0000677C 4883FE00                	cmp rsi, 0
  8301 00006780 740E                    	je .L_lambda_simple_params_end_003e
  8302 00006782 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  8303 00006787 488914F3                	mov qword [rbx + 8 * rsi], rdx
  8304 0000678B 48FFC6                  	inc rsi
  8305 0000678E EBEC                    	jmp .L_lambda_simple_params_loop_003e
  8306                                  .L_lambda_simple_params_end_003e:
  8307 00006790 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  8308 00006793 4889C3                  	mov rbx, rax
  8309 00006796 58                      	pop rax
  8310 00006797 C60005                  	mov byte [rax], T_closure
  8311 0000679A 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  8312 0000679E 48C74009[AB670000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_003e
  8313 000067A6 E9C2060000              	jmp .L_lambda_simple_end_003e
  8314                                  .L_lambda_simple_code_003e:	; lambda-simple body
  8315 000067AB 48837C241001            	cmp qword [rsp + 8 * 2], 1
  8316 000067B1 740B                    	je .L_lambda_simple_arity_check_ok_003e
  8317 000067B3 FF742410                	push qword [rsp + 8 * 2]
  8318 000067B7 6A01                    	push 1
  8319 000067B9 E98C950000              	jmp L_error_incorrect_arity_simple
  8320                                  .L_lambda_simple_arity_check_ok_003e:
  8321 000067BE C8000000                	enter 0, 0
  8322 000067C2 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  8323 000067C7 E8C5950000              	call malloc
  8324 000067CC 50                      	push rax
  8325 000067CD BF08000000              	mov rdi, 8 * 1	; new rib
  8326 000067D2 E8BA950000              	call malloc
  8327 000067D7 50                      	push rax
  8328 000067D8 BF10000000              	mov rdi, 8 * 2	; extended env
  8329 000067DD E8AF950000              	call malloc
  8330 000067E2 488B7D10                	mov rdi, ENV
  8331 000067E6 BE00000000              	mov rsi, 0
  8332 000067EB BA01000000              	mov rdx, 1
  8333                                  .L_lambda_simple_env_loop_0040:	; ext_env[i + 1] <-- env[i]
  8334 000067F0 4883FE01                	cmp rsi, 1
  8335 000067F4 7410                    	je .L_lambda_simple_env_end_0040
  8336 000067F6 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  8337 000067FA 48890CD0                	mov qword [rax + 8 * rdx], rcx
  8338 000067FE 48FFC6                  	inc rsi
  8339 00006801 48FFC2                  	inc rdx
  8340 00006804 EBEA                    	jmp .L_lambda_simple_env_loop_0040
  8341                                  .L_lambda_simple_env_end_0040:
  8342 00006806 5B                      	pop rbx
  8343 00006807 BE00000000              	mov rsi, 0
  8344                                  .L_lambda_simple_params_loop_0040:	; copy params
  8345 0000680C 4883FE01                	cmp rsi, 1
  8346 00006810 740E                    	je .L_lambda_simple_params_end_0040
  8347 00006812 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  8348 00006817 488914F3                	mov qword [rbx + 8 * rsi], rdx
  8349 0000681B 48FFC6                  	inc rsi
  8350 0000681E EBEC                    	jmp .L_lambda_simple_params_loop_0040
  8351                                  .L_lambda_simple_params_end_0040:
  8352 00006820 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  8353 00006823 4889C3                  	mov rbx, rax
  8354 00006826 58                      	pop rax
  8355 00006827 C60005                  	mov byte [rax], T_closure
  8356 0000682A 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  8357 0000682E 48C74009[3B680000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0040
  8358 00006836 E999030000              	jmp .L_lambda_simple_end_0040
  8359                                  .L_lambda_simple_code_0040:	; lambda-simple body
  8360 0000683B 48837C241002            	cmp qword [rsp + 8 * 2], 2
  8361 00006841 740B                    	je .L_lambda_simple_arity_check_ok_0040
  8362 00006843 FF742410                	push qword [rsp + 8 * 2]
  8363 00006847 6A02                    	push 2
  8364 00006849 E9FC940000              	jmp L_error_incorrect_arity_simple
  8365                                  .L_lambda_simple_arity_check_ok_0040:
  8366 0000684E C8000000                	enter 0, 0
  8367 00006852 488B4520                	mov rax, qword [rbp + 8 * (4 + 0)]
  8368 00006856 50                      	push rax
  8369 00006857 6A01                    	push 1
  8370 00006859 488B0425[48000000]      	mov rax, qword [free_var_9]
  8371                                  	assert_closure(rax)
    42 00006861 803805              <1>  cmp byte [%1], %2
    43 00006864 0F8520AD0000        <1>  jne L_error_incorrect_type
  8372 0000686A FF7001                  	push SOB_CLOSURE_ENV(rax)
  8373 0000686D FF5009                  	call SOB_CLOSURE_CODE(rax)
  8374 00006870 483D[02000000]          	cmp rax, sob_boolean_false
  8375 00006876 0F846F010000                      	je .L_if_else_0023
  8376 0000687C 488B4528                          	mov rax, qword [rbp + 8 * (4 + 1)]
  8377 00006880 50                      	push rax
  8378 00006881 6A01                    	push 1
  8379 00006883 488B0425[48000000]      	mov rax, qword [free_var_9]
  8380                                  	assert_closure(rax)
    42 0000688B 803805              <1>  cmp byte [%1], %2
    43 0000688E 0F85F6AC0000        <1>  jne L_error_incorrect_type
  8381 00006894 FF7001                  	push SOB_CLOSURE_ENV(rax)
  8382 00006897 FF5009                  	call SOB_CLOSURE_CODE(rax)
  8383 0000689A 483D[02000000]          	cmp rax, sob_boolean_false
  8384 000068A0 745C                              	je .L_if_else_001f
  8385 000068A2 488B4528                          	mov rax, qword [rbp + 8 * (4 + 1)]
  8386 000068A6 50                      	push rax
  8387 000068A7 488B4520                	mov rax, qword [rbp + 8 * (4 + 0)]
  8388 000068AB 50                      	push rax
  8389 000068AC 6A02                    	push 2
  8390 000068AE 488B0425[20010000]      	mov rax, qword [free_var_36]
  8391                                  	assert_closure(rax)
    42 000068B6 803805              <1>  cmp byte [%1], %2
    43 000068B9 0F85CBAC0000        <1>  jne L_error_incorrect_type
  8392 000068BF FF7001                  	push SOB_CLOSURE_ENV(rax)
  8393 000068C2 FF7508                  	push qword [rbp + 8 * 1] ; old ret addr
  8394 000068C5 FF7500                  	push qword [rbp] ; same the old rbp
  8395 000068C8 BA05000000              	mov rdx, 2 + 3
  8396 000068CD 488B4D18                	mov rcx, COUNT
  8397 000068D1 488D4CCD20              	lea rcx, [rbp + 8*4 + rcx * 8]
  8398 000068D6 4889EF                  	mov rdi, rbp
  8399                                  .L_tc_recycle_frame_loop_004d:
  8400 000068D9 4883FA00                	cmp rdx, 0
  8401 000068DD 7413                    	je .L_tc_recycle_frame_done_004d
  8402 000068DF 4883E908                	sub rcx, 8
  8403 000068E3 4883EF08                	sub rdi, 8
  8404 000068E7 488B37                  	mov rsi, [rdi]
  8405 000068EA 488931                  	mov qword [rcx], rsi
  8406 000068ED 48FFCA                  	dec rdx
  8407 000068F0 EBE7                    	jmp .L_tc_recycle_frame_loop_004d
  8408                                  .L_tc_recycle_frame_done_004d:
  8409 000068F2 5D                      	pop rbp ; restore the old rbp
  8410 000068F3 4889CC                  	mov rsp, rcx
  8411 000068F6 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
  8412 000068F9 E9E8000000              	jmp .L_if_end_001f
  8413                                            .L_if_else_001f:
  8414 000068FE 488B4528                          	mov rax, qword [rbp + 8 * (4 + 1)]
  8415 00006902 50                      	push rax
  8416 00006903 6A01                    	push 1
  8417 00006905 488B0425[40000000]      	mov rax, qword [free_var_8]
  8418                                  	assert_closure(rax)
    42 0000690D 803805              <1>  cmp byte [%1], %2
    43 00006910 0F8574AC0000        <1>  jne L_error_incorrect_type
  8419 00006916 FF7001                  	push SOB_CLOSURE_ENV(rax)
  8420 00006919 FF5009                  	call SOB_CLOSURE_CODE(rax)
  8421 0000691C 483D[02000000]          	cmp rax, sob_boolean_false
  8422 00006922 7473                              	je .L_if_else_001e
  8423 00006924 488B4528                          	mov rax, qword [rbp + 8 * (4 + 1)]
  8424 00006928 50                      	push rax
  8425 00006929 488B4520                	mov rax, qword [rbp + 8 * (4 + 0)]
  8426 0000692D 50                      	push rax
  8427 0000692E 6A01                    	push 1
  8428 00006930 488B0425[B8000000]      	mov rax, qword [free_var_23]
  8429                                  	assert_closure(rax)
    42 00006938 803805              <1>  cmp byte [%1], %2
    43 0000693B 0F8549AC0000        <1>  jne L_error_incorrect_type
  8430 00006941 FF7001                  	push SOB_CLOSURE_ENV(rax)
  8431 00006944 FF5009                  	call SOB_CLOSURE_CODE(rax)
  8432 00006947 50                      	push rax
  8433 00006948 6A02                    	push 2
  8434 0000694A 488B0425[00010000]      	mov rax, qword [free_var_32]
  8435                                  	assert_closure(rax)
    42 00006952 803805              <1>  cmp byte [%1], %2
    43 00006955 0F852FAC0000        <1>  jne L_error_incorrect_type
  8436 0000695B FF7001                  	push SOB_CLOSURE_ENV(rax)
  8437 0000695E FF7508                  	push qword [rbp + 8 * 1] ; old ret addr
  8438 00006961 FF7500                  	push qword [rbp] ; same the old rbp
  8439 00006964 BA05000000              	mov rdx, 2 + 3
  8440 00006969 488B4D18                	mov rcx, COUNT
  8441 0000696D 488D4CCD20              	lea rcx, [rbp + 8*4 + rcx * 8]
  8442 00006972 4889EF                  	mov rdi, rbp
  8443                                  .L_tc_recycle_frame_loop_004e:
  8444 00006975 4883FA00                	cmp rdx, 0
  8445 00006979 7413                    	je .L_tc_recycle_frame_done_004e
  8446 0000697B 4883E908                	sub rcx, 8
  8447 0000697F 4883EF08                	sub rdi, 8
  8448 00006983 488B37                  	mov rsi, [rdi]
  8449 00006986 488931                  	mov qword [rcx], rsi
  8450 00006989 48FFCA                  	dec rdx
  8451 0000698C EBE7                    	jmp .L_tc_recycle_frame_loop_004e
  8452                                  .L_tc_recycle_frame_done_004e:
  8453 0000698E 5D                      	pop rbp ; restore the old rbp
  8454 0000698F 4889CC                  	mov rsp, rcx
  8455 00006992 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
  8456 00006995 EB4F                    	jmp .L_if_end_001e
  8457                                            .L_if_else_001e:
  8458 00006997 6A00                              	push 0
  8459 00006999 488B4510                	mov rax, qword [rbp + 8 * 2]
  8460 0000699D 488B00                  	mov rax, qword [rax + 8 * 0]
  8461 000069A0 488B00                  	mov rax, qword [rax + 8 * 0]
  8462                                  	assert_closure(rax)
    42 000069A3 803805              <1>  cmp byte [%1], %2
    43 000069A6 0F85DEAB0000        <1>  jne L_error_incorrect_type
  8463 000069AC FF7001                  	push SOB_CLOSURE_ENV(rax)
  8464 000069AF FF7508                  	push qword [rbp + 8 * 1] ; old ret addr
  8465 000069B2 FF7500                  	push qword [rbp] ; same the old rbp
  8466 000069B5 BA03000000              	mov rdx, 0 + 3
  8467 000069BA 488B4D18                	mov rcx, COUNT
  8468 000069BE 488D4CCD20              	lea rcx, [rbp + 8*4 + rcx * 8]
  8469 000069C3 4889EF                  	mov rdi, rbp
  8470                                  .L_tc_recycle_frame_loop_004f:
  8471 000069C6 4883FA00                	cmp rdx, 0
  8472 000069CA 7413                    	je .L_tc_recycle_frame_done_004f
  8473 000069CC 4883E908                	sub rcx, 8
  8474 000069D0 4883EF08                	sub rdi, 8
  8475 000069D4 488B37                  	mov rsi, [rdi]
  8476 000069D7 488931                  	mov qword [rcx], rsi
  8477 000069DA 48FFCA                  	dec rdx
  8478 000069DD EBE7                    	jmp .L_tc_recycle_frame_loop_004f
  8479                                  .L_tc_recycle_frame_done_004f:
  8480 000069DF 5D                      	pop rbp ; restore the old rbp
  8481 000069E0 4889CC                  	mov rsp, rcx
  8482 000069E3 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
  8483                                  .L_if_end_001e:
  8484                                  .L_if_end_001f:
  8485 000069E6 E9E5010000              	jmp .L_if_end_0023
  8486                                            .L_if_else_0023:
  8487 000069EB 488B4520                          	mov rax, qword [rbp + 8 * (4 + 0)]
  8488 000069EF 50                      	push rax
  8489 000069F0 6A01                    	push 1
  8490 000069F2 488B0425[40000000]      	mov rax, qword [free_var_8]
  8491                                  	assert_closure(rax)
    42 000069FA 803805              <1>  cmp byte [%1], %2
    43 000069FD 0F8587AB0000        <1>  jne L_error_incorrect_type
  8492 00006A03 FF7001                  	push SOB_CLOSURE_ENV(rax)
  8493 00006A06 FF5009                  	call SOB_CLOSURE_CODE(rax)
  8494 00006A09 483D[02000000]          	cmp rax, sob_boolean_false
  8495 00006A0F 0F846C010000                      	je .L_if_else_0022
  8496 00006A15 488B4528                          	mov rax, qword [rbp + 8 * (4 + 1)]
  8497 00006A19 50                      	push rax
  8498 00006A1A 6A01                    	push 1
  8499 00006A1C 488B0425[48000000]      	mov rax, qword [free_var_9]
  8500                                  	assert_closure(rax)
    42 00006A24 803805              <1>  cmp byte [%1], %2
    43 00006A27 0F855DAB0000        <1>  jne L_error_incorrect_type
  8501 00006A2D FF7001                  	push SOB_CLOSURE_ENV(rax)
  8502 00006A30 FF5009                  	call SOB_CLOSURE_CODE(rax)
  8503 00006A33 483D[02000000]          	cmp rax, sob_boolean_false
  8504 00006A39 7476                              	je .L_if_else_0021
  8505 00006A3B 488B4528                          	mov rax, qword [rbp + 8 * (4 + 1)]
  8506 00006A3F 50                      	push rax
  8507 00006A40 6A01                    	push 1
  8508 00006A42 488B0425[B8000000]      	mov rax, qword [free_var_23]
  8509                                  	assert_closure(rax)
    42 00006A4A 803805              <1>  cmp byte [%1], %2
    43 00006A4D 0F8537AB0000        <1>  jne L_error_incorrect_type
  8510 00006A53 FF7001                  	push SOB_CLOSURE_ENV(rax)
  8511 00006A56 FF5009                  	call SOB_CLOSURE_CODE(rax)
  8512 00006A59 50                      	push rax
  8513 00006A5A 488B4520                	mov rax, qword [rbp + 8 * (4 + 0)]
  8514 00006A5E 50                      	push rax
  8515 00006A5F 6A02                    	push 2
  8516 00006A61 488B0425[00010000]      	mov rax, qword [free_var_32]
  8517                                  	assert_closure(rax)
    42 00006A69 803805              <1>  cmp byte [%1], %2
    43 00006A6C 0F8518AB0000        <1>  jne L_error_incorrect_type
  8518 00006A72 FF7001                  	push SOB_CLOSURE_ENV(rax)
  8519 00006A75 FF7508                  	push qword [rbp + 8 * 1] ; old ret addr
  8520 00006A78 FF7500                  	push qword [rbp] ; same the old rbp
  8521 00006A7B BA05000000              	mov rdx, 2 + 3
  8522 00006A80 488B4D18                	mov rcx, COUNT
  8523 00006A84 488D4CCD20              	lea rcx, [rbp + 8*4 + rcx * 8]
  8524 00006A89 4889EF                  	mov rdi, rbp
  8525                                  .L_tc_recycle_frame_loop_0050:
  8526 00006A8C 4883FA00                	cmp rdx, 0
  8527 00006A90 7413                    	je .L_tc_recycle_frame_done_0050
  8528 00006A92 4883E908                	sub rcx, 8
  8529 00006A96 4883EF08                	sub rdi, 8
  8530 00006A9A 488B37                  	mov rsi, [rdi]
  8531 00006A9D 488931                  	mov qword [rcx], rsi
  8532 00006AA0 48FFCA                  	dec rdx
  8533 00006AA3 EBE7                    	jmp .L_tc_recycle_frame_loop_0050
  8534                                  .L_tc_recycle_frame_done_0050:
  8535 00006AA5 5D                      	pop rbp ; restore the old rbp
  8536 00006AA6 4889CC                  	mov rsp, rcx
  8537 00006AA9 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
  8538 00006AAC E9CE000000              	jmp .L_if_end_0021
  8539                                            .L_if_else_0021:
  8540 00006AB1 488B4528                          	mov rax, qword [rbp + 8 * (4 + 1)]
  8541 00006AB5 50                      	push rax
  8542 00006AB6 6A01                    	push 1
  8543 00006AB8 488B0425[40000000]      	mov rax, qword [free_var_8]
  8544                                  	assert_closure(rax)
    42 00006AC0 803805              <1>  cmp byte [%1], %2
    43 00006AC3 0F85C1AA0000        <1>  jne L_error_incorrect_type
  8545 00006AC9 FF7001                  	push SOB_CLOSURE_ENV(rax)
  8546 00006ACC FF5009                  	call SOB_CLOSURE_CODE(rax)
  8547 00006ACF 483D[02000000]          	cmp rax, sob_boolean_false
  8548 00006AD5 7459                              	je .L_if_else_0020
  8549 00006AD7 488B4528                          	mov rax, qword [rbp + 8 * (4 + 1)]
  8550 00006ADB 50                      	push rax
  8551 00006ADC 488B4520                	mov rax, qword [rbp + 8 * (4 + 0)]
  8552 00006AE0 50                      	push rax
  8553 00006AE1 6A02                    	push 2
  8554 00006AE3 488B0425[00010000]      	mov rax, qword [free_var_32]
  8555                                  	assert_closure(rax)
    42 00006AEB 803805              <1>  cmp byte [%1], %2
    43 00006AEE 0F8596AA0000        <1>  jne L_error_incorrect_type
  8556 00006AF4 FF7001                  	push SOB_CLOSURE_ENV(rax)
  8557 00006AF7 FF7508                  	push qword [rbp + 8 * 1] ; old ret addr
  8558 00006AFA FF7500                  	push qword [rbp] ; same the old rbp
  8559 00006AFD BA05000000              	mov rdx, 2 + 3
  8560 00006B02 488B4D18                	mov rcx, COUNT
  8561 00006B06 488D4CCD20              	lea rcx, [rbp + 8*4 + rcx * 8]
  8562 00006B0B 4889EF                  	mov rdi, rbp
  8563                                  .L_tc_recycle_frame_loop_0051:
  8564 00006B0E 4883FA00                	cmp rdx, 0
  8565 00006B12 7413                    	je .L_tc_recycle_frame_done_0051
  8566 00006B14 4883E908                	sub rcx, 8
  8567 00006B18 4883EF08                	sub rdi, 8
  8568 00006B1C 488B37                  	mov rsi, [rdi]
  8569 00006B1F 488931                  	mov qword [rcx], rsi
  8570 00006B22 48FFCA                  	dec rdx
  8571 00006B25 EBE7                    	jmp .L_tc_recycle_frame_loop_0051
  8572                                  .L_tc_recycle_frame_done_0051:
  8573 00006B27 5D                      	pop rbp ; restore the old rbp
  8574 00006B28 4889CC                  	mov rsp, rcx
  8575 00006B2B FF6009                  	jmp SOB_CLOSURE_CODE(rax)
  8576 00006B2E EB4F                    	jmp .L_if_end_0020
  8577                                            .L_if_else_0020:
  8578 00006B30 6A00                              	push 0
  8579 00006B32 488B4510                	mov rax, qword [rbp + 8 * 2]
  8580 00006B36 488B00                  	mov rax, qword [rax + 8 * 0]
  8581 00006B39 488B00                  	mov rax, qword [rax + 8 * 0]
  8582                                  	assert_closure(rax)
    42 00006B3C 803805              <1>  cmp byte [%1], %2
    43 00006B3F 0F8545AA0000        <1>  jne L_error_incorrect_type
  8583 00006B45 FF7001                  	push SOB_CLOSURE_ENV(rax)
  8584 00006B48 FF7508                  	push qword [rbp + 8 * 1] ; old ret addr
  8585 00006B4B FF7500                  	push qword [rbp] ; same the old rbp
  8586 00006B4E BA03000000              	mov rdx, 0 + 3
  8587 00006B53 488B4D18                	mov rcx, COUNT
  8588 00006B57 488D4CCD20              	lea rcx, [rbp + 8*4 + rcx * 8]
  8589 00006B5C 4889EF                  	mov rdi, rbp
  8590                                  .L_tc_recycle_frame_loop_0052:
  8591 00006B5F 4883FA00                	cmp rdx, 0
  8592 00006B63 7413                    	je .L_tc_recycle_frame_done_0052
  8593 00006B65 4883E908                	sub rcx, 8
  8594 00006B69 4883EF08                	sub rdi, 8
  8595 00006B6D 488B37                  	mov rsi, [rdi]
  8596 00006B70 488931                  	mov qword [rcx], rsi
  8597 00006B73 48FFCA                  	dec rdx
  8598 00006B76 EBE7                    	jmp .L_tc_recycle_frame_loop_0052
  8599                                  .L_tc_recycle_frame_done_0052:
  8600 00006B78 5D                      	pop rbp ; restore the old rbp
  8601 00006B79 4889CC                  	mov rsp, rcx
  8602 00006B7C FF6009                  	jmp SOB_CLOSURE_CODE(rax)
  8603                                  .L_if_end_0020:
  8604                                  .L_if_end_0021:
  8605 00006B7F EB4F                    	jmp .L_if_end_0022
  8606                                            .L_if_else_0022:
  8607 00006B81 6A00                              	push 0
  8608 00006B83 488B4510                	mov rax, qword [rbp + 8 * 2]
  8609 00006B87 488B00                  	mov rax, qword [rax + 8 * 0]
  8610 00006B8A 488B00                  	mov rax, qword [rax + 8 * 0]
  8611                                  	assert_closure(rax)
    42 00006B8D 803805              <1>  cmp byte [%1], %2
    43 00006B90 0F85F4A90000        <1>  jne L_error_incorrect_type
  8612 00006B96 FF7001                  	push SOB_CLOSURE_ENV(rax)
  8613 00006B99 FF7508                  	push qword [rbp + 8 * 1] ; old ret addr
  8614 00006B9C FF7500                  	push qword [rbp] ; same the old rbp
  8615 00006B9F BA03000000              	mov rdx, 0 + 3
  8616 00006BA4 488B4D18                	mov rcx, COUNT
  8617 00006BA8 488D4CCD20              	lea rcx, [rbp + 8*4 + rcx * 8]
  8618 00006BAD 4889EF                  	mov rdi, rbp
  8619                                  .L_tc_recycle_frame_loop_0053:
  8620 00006BB0 4883FA00                	cmp rdx, 0
  8621 00006BB4 7413                    	je .L_tc_recycle_frame_done_0053
  8622 00006BB6 4883E908                	sub rcx, 8
  8623 00006BBA 4883EF08                	sub rdi, 8
  8624 00006BBE 488B37                  	mov rsi, [rdi]
  8625 00006BC1 488931                  	mov qword [rcx], rsi
  8626 00006BC4 48FFCA                  	dec rdx
  8627 00006BC7 EBE7                    	jmp .L_tc_recycle_frame_loop_0053
  8628                                  .L_tc_recycle_frame_done_0053:
  8629 00006BC9 5D                      	pop rbp ; restore the old rbp
  8630 00006BCA 4889CC                  	mov rsp, rcx
  8631 00006BCD FF6009                  	jmp SOB_CLOSURE_CODE(rax)
  8632                                  .L_if_end_0022:
  8633                                  .L_if_end_0023:
  8634 00006BD0 C9                      	leave
  8635 00006BD1 C22000                  	ret 8 * (2 + 2)
  8636                                  .L_lambda_simple_end_0040:	; new closure is in rax
  8637 00006BD4 50                      	push rax
  8638 00006BD5 6A01                    	push 1
  8639 00006BD7 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  8640 00006BDC E8B0910000              	call malloc
  8641 00006BE1 50                      	push rax
  8642 00006BE2 BF08000000              	mov rdi, 8 * 1	; new rib
  8643 00006BE7 E8A5910000              	call malloc
  8644 00006BEC 50                      	push rax
  8645 00006BED BF10000000              	mov rdi, 8 * 2	; extended env
  8646 00006BF2 E89A910000              	call malloc
  8647 00006BF7 488B7D10                	mov rdi, ENV
  8648 00006BFB BE00000000              	mov rsi, 0
  8649 00006C00 BA01000000              	mov rdx, 1
  8650                                  .L_lambda_simple_env_loop_003f:	; ext_env[i + 1] <-- env[i]
  8651 00006C05 4883FE01                	cmp rsi, 1
  8652 00006C09 7410                    	je .L_lambda_simple_env_end_003f
  8653 00006C0B 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  8654 00006C0F 48890CD0                	mov qword [rax + 8 * rdx], rcx
  8655 00006C13 48FFC6                  	inc rsi
  8656 00006C16 48FFC2                  	inc rdx
  8657 00006C19 EBEA                    	jmp .L_lambda_simple_env_loop_003f
  8658                                  .L_lambda_simple_env_end_003f:
  8659 00006C1B 5B                      	pop rbx
  8660 00006C1C BE00000000              	mov rsi, 0
  8661                                  .L_lambda_simple_params_loop_003f:	; copy params
  8662 00006C21 4883FE01                	cmp rsi, 1
  8663 00006C25 740E                    	je .L_lambda_simple_params_end_003f
  8664 00006C27 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  8665 00006C2C 488914F3                	mov qword [rbx + 8 * rsi], rdx
  8666 00006C30 48FFC6                  	inc rsi
  8667 00006C33 EBEC                    	jmp .L_lambda_simple_params_loop_003f
  8668                                  .L_lambda_simple_params_end_003f:
  8669 00006C35 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  8670 00006C38 4889C3                  	mov rbx, rax
  8671 00006C3B 58                      	pop rax
  8672 00006C3C C60005                  	mov byte [rax], T_closure
  8673 00006C3F 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  8674 00006C43 48C74009[506C0000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_003f
  8675 00006C4B E9D6010000              	jmp .L_lambda_simple_end_003f
  8676                                  .L_lambda_simple_code_003f:	; lambda-simple body
  8677 00006C50 48837C241001            	cmp qword [rsp + 8 * 2], 1
  8678 00006C56 740B                    	je .L_lambda_simple_arity_check_ok_003f
  8679 00006C58 FF742410                	push qword [rsp + 8 * 2]
  8680 00006C5C 6A01                    	push 1
  8681 00006C5E E9E7900000              	jmp L_error_incorrect_arity_simple
  8682                                  .L_lambda_simple_arity_check_ok_003f:
  8683 00006C63 C8000000                	enter 0, 0
  8684 00006C67 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  8685 00006C6C E820910000              	call malloc
  8686 00006C71 50                      	push rax
  8687 00006C72 BF08000000              	mov rdi, 8 * 1	; new rib
  8688 00006C77 E815910000              	call malloc
  8689 00006C7C 50                      	push rax
  8690 00006C7D BF18000000              	mov rdi, 8 * 3	; extended env
  8691 00006C82 E80A910000              	call malloc
  8692 00006C87 488B7D10                	mov rdi, ENV
  8693 00006C8B BE00000000              	mov rsi, 0
  8694 00006C90 BA01000000              	mov rdx, 1
  8695                                  .L_lambda_opt_env_loop_000c:	; ext_env[i + 1] <-- env[i]
  8696 00006C95 4883FE02                	cmp rsi, 2
  8697 00006C99 7410                    	je .L_lambda_opt_env_end_000c
  8698 00006C9B 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  8699 00006C9F 48890CD0                	mov qword [rax + 8 * rdx], rcx
  8700 00006CA3 48FFC6                  	inc rsi
  8701 00006CA6 48FFC2                  	inc rdx
  8702 00006CA9 EBEA                    	jmp .L_lambda_opt_env_loop_000c
  8703                                  .L_lambda_opt_env_end_000c:
  8704 00006CAB 5B                      	pop rbx
  8705 00006CAC BE00000000              	mov rsi, 0
  8706                                  .L_lambda_opt_params_loop_000c:	; copy params
  8707 00006CB1 4883FE01                	cmp rsi, 1
  8708 00006CB5 740E                    	je .L_lambda_opt_params_end_000c
  8709 00006CB7 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  8710 00006CBC 488914F3                	mov qword [rbx + 8 * rsi], rdx
  8711 00006CC0 48FFC6                  	inc rsi
  8712 00006CC3 EBEC                    	jmp .L_lambda_opt_params_loop_000c
  8713                                  .L_lambda_opt_params_end_000c:
  8714 00006CC5 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  8715 00006CC8 4889C3                  	mov rbx, rax
  8716 00006CCB 58                      	pop rax
  8717 00006CCC C60005                  	mov byte [rax], T_closure
  8718 00006CCF 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  8719 00006CD3 48C74009[E06C0000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_opt_code_000c
  8720 00006CDB E942010000              	jmp .L_lambda_opt_end_000c
  8721                                  .L_lambda_opt_code_000c:	; lambda-opt body
  8722 00006CE0 48837C241000            	cmp qword [rsp + 8 * 2], 0
  8723 00006CE6 740D                    	je .L_lambda_opt_arity_check_exact_000c
  8724 00006CE8 7F43                    	jg .L_lambda_opt_arity_check_more_000c
  8725 00006CEA FF742410                	push qword [rsp + 8 * 2]
  8726 00006CEE 6A00                    	push 0
  8727 00006CF0 E969900000              	jmp L_error_incorrect_arity_opt
  8728                                  .L_lambda_opt_arity_check_exact_000c:
  8729 00006CF5 48C744241001000000      	mov qword [rsp + 8 * 2], 1
  8730 00006CFE BA03000000              	mov rdx, 3
  8731 00006D03 FF3424                  	push qword [rsp]
  8732 00006D06 BE01000000              	mov rsi, 1
  8733                                  .L_lambda_opt_stack_shrink_loop_0022:
  8734 00006D0B 4839D6                  	cmp rsi, rdx
  8735 00006D0E 7411                    	je .L_lambda_opt_stack_shrink_loop_exit_0022
  8736 00006D10 488D5CF408              	lea rbx, [rsp + 8 + rsi * 8]
  8737 00006D15 488B0B                  	mov rcx, [rbx]
  8738 00006D18 48894BF8                	mov qword [rbx - 8], rcx
  8739 00006D1C 48FFC6                  	inc rsi
  8740 00006D1F EBEA                    	jmp .L_lambda_opt_stack_shrink_loop_0022
  8741                                  .L_lambda_opt_stack_shrink_loop_exit_0022:
  8742 00006D21 48C703[01000000]        	mov qword [rbx], sob_nil
  8743 00006D28 E985000000              	jmp .L_lambda_opt_stack_adjusted_000c
  8744                                  .L_lambda_opt_arity_check_more_000c:
  8745 00006D2D 488B542410              	mov rdx, qword [rsp + 8 * 2]
  8746 00006D32 4883EA00                	sub rdx, 0
  8747 00006D36 48C744241001000000      	mov qword [rsp + 8 * 2], 1
  8748 00006D3F BE00000000              	mov rsi, 0
  8749 00006D44 488D5CD410              	lea rbx, [rsp + 2 * 8 + 0 * 8 + rdx * 8]
  8750 00006D49 48B9-                   	mov rcx, sob_nil
  8750 00006D4B [0100000000000000] 
  8751                                  .L_lambda_opt_stack_shrink_loop_0023:
  8752 00006D53 4839D6                  	cmp rsi, rdx
  8753 00006D56 7427                    je .L_lambda_opt_stack_shrink_loop_exit_0023
  8754 00006D58 BF11000000              	mov rdi, 17 ; 1+8+8
  8755 00006D5D E82F900000              	call malloc
  8756 00006D62 48894809                	mov SOB_PAIR_CDR(rax), rcx
  8757 00006D66 48F7DE                  	neg rsi
  8758 00006D69 488B0CF3                	mov rcx, qword [rbx + rsi * 8]
  8759 00006D6D 48F7DE                  	neg rsi
  8760 00006D70 48894801                	mov SOB_PAIR_CAR(rax), rcx
  8761 00006D74 C60021                  	mov byte [rax], T_pair
  8762 00006D77 4889C1                  	mov rcx, rax
  8763 00006D7A 48FFC6                  	inc rsi
  8764 00006D7D EBD4                    	jmp .L_lambda_opt_stack_shrink_loop_0023
  8765                                  .L_lambda_opt_stack_shrink_loop_exit_0023:
  8766 00006D7F 48890B                  	mov qword [rbx], rcx
  8767 00006D82 4883EB08                	sub rbx, 8
  8768 00006D86 4889E7                  	mov rdi, rsp
  8769 00006D89 4883C710                	add rdi, 16
  8770 00006D8D BE03000000              	mov rsi, 3
  8771                                  .L_lambda_opt_stack_shrink_loop_0024:
  8772 00006D92 4883FE00                	cmp rsi,0
  8773 00006D96 7413                    	je .L_lambda_opt_stack_shrink_loop_exit_0024
  8774 00006D98 488B0F                  	mov rcx, qword [rdi]
  8775 00006D9B 48890B                  	mov [rbx], rcx
  8776 00006D9E 48FFCE                  	dec rsi
  8777 00006DA1 4883EB08                	sub rbx, 8
  8778 00006DA5 4883EF08                	sub rdi, 8
  8779 00006DA9 EBE7                    	jmp .L_lambda_opt_stack_shrink_loop_0024
  8780                                  .L_lambda_opt_stack_shrink_loop_exit_0024:
  8781 00006DAB 4883C308                	add rbx, 8
  8782 00006DAF 4889DC                  	mov rsp, rbx
  8783                                  .L_lambda_opt_stack_adjusted_000c:
  8784 00006DB2 C8000000                	enter 0, 0
  8785 00006DB6 488B4520                	mov rax, qword [rbp + 8 * (4 + 0)]
  8786 00006DBA 50                      	push rax
  8787 00006DBB 48B8-                   	mov rax, L_constants + 128
  8787 00006DBD [8000000000000000] 
  8788 00006DC5 50                      	push rax
  8789 00006DC6 488B4510                	mov rax, qword [rbp + 8 * 2]
  8790 00006DCA 488B00                  	mov rax, qword [rax + 8 * 0]
  8791 00006DCD 488B00                  	mov rax, qword [rax + 8 * 0]
  8792 00006DD0 50                      	push rax
  8793 00006DD1 6A03                    	push 3
  8794 00006DD3 488B0425[F8020000]      	mov rax, qword [free_var_95]
  8795                                  	assert_closure(rax)
    42 00006DDB 803805              <1>  cmp byte [%1], %2
    43 00006DDE 0F85A6A70000        <1>  jne L_error_incorrect_type
  8796 00006DE4 FF7001                  	push SOB_CLOSURE_ENV(rax)
  8797 00006DE7 FF7508                  	push qword [rbp + 8 * 1] ; old ret addr
  8798 00006DEA FF7500                  	push qword [rbp] ; same the old rbp
  8799 00006DED BA06000000              	mov rdx, 3 + 3
  8800 00006DF2 488B4D18                	mov rcx, COUNT
  8801 00006DF6 488D4CCD20              	lea rcx, [rbp + 8*4 + rcx * 8]
  8802 00006DFB 4889EF                  	mov rdi, rbp
  8803                                  .L_tc_recycle_frame_loop_004c:
  8804 00006DFE 4883FA00                	cmp rdx, 0
  8805 00006E02 7413                    	je .L_tc_recycle_frame_done_004c
  8806 00006E04 4883E908                	sub rcx, 8
  8807 00006E08 4883EF08                	sub rdi, 8
  8808 00006E0C 488B37                  	mov rsi, [rdi]
  8809 00006E0F 488931                  	mov qword [rcx], rsi
  8810 00006E12 48FFCA                  	dec rdx
  8811 00006E15 EBE7                    	jmp .L_tc_recycle_frame_loop_004c
  8812                                  .L_tc_recycle_frame_done_004c:
  8813 00006E17 5D                      	pop rbp ; restore the old rbp
  8814 00006E18 4889CC                  	mov rsp, rcx
  8815 00006E1B FF6009                  	jmp SOB_CLOSURE_CODE(rax)
  8816 00006E1E C9                      	leave
  8817 00006E1F C21800                  	ret 8 * (2 + 1)
  8818                                  .L_lambda_opt_end_000c:	; new closure is in rax
  8819 00006E22 C9                      	leave
  8820 00006E23 C21800                  	ret 8 * (2 + 1)
  8821                                  .L_lambda_simple_end_003f:	; new closure is in rax
  8822                                  	assert_closure(rax)
    42 00006E26 803805              <1>  cmp byte [%1], %2
    43 00006E29 0F855BA70000        <1>  jne L_error_incorrect_type
  8823 00006E2F FF7001                  	push SOB_CLOSURE_ENV(rax)
  8824 00006E32 FF7508                  	push qword [rbp + 8 * 1] ; old ret addr
  8825 00006E35 FF7500                  	push qword [rbp] ; same the old rbp
  8826 00006E38 BA04000000              	mov rdx, 1 + 3
  8827 00006E3D 488B4D18                	mov rcx, COUNT
  8828 00006E41 488D4CCD20              	lea rcx, [rbp + 8*4 + rcx * 8]
  8829 00006E46 4889EF                  	mov rdi, rbp
  8830                                  .L_tc_recycle_frame_loop_004b:
  8831 00006E49 4883FA00                	cmp rdx, 0
  8832 00006E4D 7413                    	je .L_tc_recycle_frame_done_004b
  8833 00006E4F 4883E908                	sub rcx, 8
  8834 00006E53 4883EF08                	sub rdi, 8
  8835 00006E57 488B37                  	mov rsi, [rdi]
  8836 00006E5A 488931                  	mov qword [rcx], rsi
  8837 00006E5D 48FFCA                  	dec rdx
  8838 00006E60 EBE7                    	jmp .L_tc_recycle_frame_loop_004b
  8839                                  .L_tc_recycle_frame_done_004b:
  8840 00006E62 5D                      	pop rbp ; restore the old rbp
  8841 00006E63 4889CC                  	mov rsp, rcx
  8842 00006E66 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
  8843 00006E69 C9                      	leave
  8844 00006E6A C21800                  	ret 8 * (2 + 1)
  8845                                  .L_lambda_simple_end_003e:	; new closure is in rax
  8846                                  	assert_closure(rax)
    42 00006E6D 803805              <1>  cmp byte [%1], %2
    43 00006E70 0F8514A70000        <1>  jne L_error_incorrect_type
  8847 00006E76 FF7001                  	push SOB_CLOSURE_ENV(rax)
  8848 00006E79 FF5009                  	call SOB_CLOSURE_CODE(rax)
  8849 00006E7C 48890425[18030000]      	mov qword [free_var_99], rax
  8850 00006E84 48B8-                   	mov rax, sob_void
  8850 00006E86 [0000000000000000] 
  8851                                  
  8852 00006E8E 4889C7                  	mov rdi, rax
  8853 00006E91 E80C8F0000              	call print_sexpr_if_not_void
  8854                                  
  8855 00006E96 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  8856 00006E9B E8F18E0000              	call malloc
  8857 00006EA0 50                      	push rax
  8858 00006EA1 BF00000000              	mov rdi, 8 * 0	; new rib
  8859 00006EA6 E8E68E0000              	call malloc
  8860 00006EAB 50                      	push rax
  8861 00006EAC BF08000000              	mov rdi, 8 * 1	; extended env
  8862 00006EB1 E8DB8E0000              	call malloc
  8863 00006EB6 488B7D10                	mov rdi, ENV
  8864 00006EBA BE00000000              	mov rsi, 0
  8865 00006EBF BA01000000              	mov rdx, 1
  8866                                  .L_lambda_simple_env_loop_0046:	; ext_env[i + 1] <-- env[i]
  8867 00006EC4 4883FE00                	cmp rsi, 0
  8868 00006EC8 7410                    	je .L_lambda_simple_env_end_0046
  8869 00006ECA 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  8870 00006ECE 48890CD0                	mov qword [rax + 8 * rdx], rcx
  8871 00006ED2 48FFC6                  	inc rsi
  8872 00006ED5 48FFC2                  	inc rdx
  8873 00006ED8 EBEA                    	jmp .L_lambda_simple_env_loop_0046
  8874                                  .L_lambda_simple_env_end_0046:
  8875 00006EDA 5B                      	pop rbx
  8876 00006EDB BE00000000              	mov rsi, 0
  8877                                  .L_lambda_simple_params_loop_0046:	; copy params
  8878 00006EE0 4883FE00                	cmp rsi, 0
  8879 00006EE4 740E                    	je .L_lambda_simple_params_end_0046
  8880 00006EE6 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  8881 00006EEB 488914F3                	mov qword [rbx + 8 * rsi], rdx
  8882 00006EEF 48FFC6                  	inc rsi
  8883 00006EF2 EBEC                    	jmp .L_lambda_simple_params_loop_0046
  8884                                  .L_lambda_simple_params_end_0046:
  8885 00006EF4 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  8886 00006EF7 4889C3                  	mov rbx, rax
  8887 00006EFA 58                      	pop rax
  8888 00006EFB C60005                  	mov byte [rax], T_closure
  8889 00006EFE 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  8890 00006F02 48C74009[0F6F0000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0046
  8891 00006F0A E97E000000              	jmp .L_lambda_simple_end_0046
  8892                                  .L_lambda_simple_code_0046:	; lambda-simple body
  8893 00006F0F 48837C241000            	cmp qword [rsp + 8 * 2], 0
  8894 00006F15 740B                    	je .L_lambda_simple_arity_check_ok_0046
  8895 00006F17 FF742410                	push qword [rsp + 8 * 2]
  8896 00006F1B 6A00                    	push 0
  8897 00006F1D E9288E0000              	jmp L_error_incorrect_arity_simple
  8898                                  .L_lambda_simple_arity_check_ok_0046:
  8899 00006F22 C8000000                	enter 0, 0
  8900 00006F26 48B8-                   	mov rax, L_constants + 68
  8900 00006F28 [4400000000000000] 
  8901 00006F30 50                      	push rax
  8902 00006F31 48B8-                   	mov rax, L_constants + 174
  8902 00006F33 [AE00000000000000] 
  8903 00006F3B 50                      	push rax
  8904 00006F3C 6A02                    	push 2
  8905 00006F3E 488B0425[30010000]      	mov rax, qword [free_var_38]
  8906                                  	assert_closure(rax)
    42 00006F46 803805              <1>  cmp byte [%1], %2
    43 00006F49 0F853BA60000        <1>  jne L_error_incorrect_type
  8907 00006F4F FF7001                  	push SOB_CLOSURE_ENV(rax)
  8908 00006F52 FF7508                  	push qword [rbp + 8 * 1] ; old ret addr
  8909 00006F55 FF7500                  	push qword [rbp] ; same the old rbp
  8910 00006F58 BA05000000              	mov rdx, 2 + 3
  8911 00006F5D 488B4D18                	mov rcx, COUNT
  8912 00006F61 488D4CCD20              	lea rcx, [rbp + 8*4 + rcx * 8]
  8913 00006F66 4889EF                  	mov rdi, rbp
  8914                                  .L_tc_recycle_frame_loop_0060:
  8915 00006F69 4883FA00                	cmp rdx, 0
  8916 00006F6D 7413                    	je .L_tc_recycle_frame_done_0060
  8917 00006F6F 4883E908                	sub rcx, 8
  8918 00006F73 4883EF08                	sub rdi, 8
  8919 00006F77 488B37                  	mov rsi, [rdi]
  8920 00006F7A 488931                  	mov qword [rcx], rsi
  8921 00006F7D 48FFCA                  	dec rdx
  8922 00006F80 EBE7                    	jmp .L_tc_recycle_frame_loop_0060
  8923                                  .L_tc_recycle_frame_done_0060:
  8924 00006F82 5D                      	pop rbp ; restore the old rbp
  8925 00006F83 4889CC                  	mov rsp, rcx
  8926 00006F86 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
  8927 00006F89 C9                      	leave
  8928 00006F8A C21000                  	ret 8 * (2 + 0)
  8929                                  .L_lambda_simple_end_0046:	; new closure is in rax
  8930 00006F8D 50                      	push rax
  8931 00006F8E 6A01                    	push 1
  8932 00006F90 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  8933 00006F95 E8F78D0000              	call malloc
  8934 00006F9A 50                      	push rax
  8935 00006F9B BF00000000              	mov rdi, 8 * 0	; new rib
  8936 00006FA0 E8EC8D0000              	call malloc
  8937 00006FA5 50                      	push rax
  8938 00006FA6 BF08000000              	mov rdi, 8 * 1	; extended env
  8939 00006FAB E8E18D0000              	call malloc
  8940 00006FB0 488B7D10                	mov rdi, ENV
  8941 00006FB4 BE00000000              	mov rsi, 0
  8942 00006FB9 BA01000000              	mov rdx, 1
  8943                                  .L_lambda_simple_env_loop_0042:	; ext_env[i + 1] <-- env[i]
  8944 00006FBE 4883FE00                	cmp rsi, 0
  8945 00006FC2 7410                    	je .L_lambda_simple_env_end_0042
  8946 00006FC4 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  8947 00006FC8 48890CD0                	mov qword [rax + 8 * rdx], rcx
  8948 00006FCC 48FFC6                  	inc rsi
  8949 00006FCF 48FFC2                  	inc rdx
  8950 00006FD2 EBEA                    	jmp .L_lambda_simple_env_loop_0042
  8951                                  .L_lambda_simple_env_end_0042:
  8952 00006FD4 5B                      	pop rbx
  8953 00006FD5 BE00000000              	mov rsi, 0
  8954                                  .L_lambda_simple_params_loop_0042:	; copy params
  8955 00006FDA 4883FE00                	cmp rsi, 0
  8956 00006FDE 740E                    	je .L_lambda_simple_params_end_0042
  8957 00006FE0 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  8958 00006FE5 488914F3                	mov qword [rbx + 8 * rsi], rdx
  8959 00006FE9 48FFC6                  	inc rsi
  8960 00006FEC EBEC                    	jmp .L_lambda_simple_params_loop_0042
  8961                                  .L_lambda_simple_params_end_0042:
  8962 00006FEE 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  8963 00006FF1 4889C3                  	mov rbx, rax
  8964 00006FF4 58                      	pop rax
  8965 00006FF5 C60005                  	mov byte [rax], T_closure
  8966 00006FF8 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  8967 00006FFC 48C74009[09700000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0042
  8968 00007004 E94D080000              	jmp .L_lambda_simple_end_0042
  8969                                  .L_lambda_simple_code_0042:	; lambda-simple body
  8970 00007009 48837C241001            	cmp qword [rsp + 8 * 2], 1
  8971 0000700F 740B                    	je .L_lambda_simple_arity_check_ok_0042
  8972 00007011 FF742410                	push qword [rsp + 8 * 2]
  8973 00007015 6A01                    	push 1
  8974 00007017 E92E8D0000              	jmp L_error_incorrect_arity_simple
  8975                                  .L_lambda_simple_arity_check_ok_0042:
  8976 0000701C C8000000                	enter 0, 0
  8977 00007020 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  8978 00007025 E8678D0000              	call malloc
  8979 0000702A 50                      	push rax
  8980 0000702B BF08000000              	mov rdi, 8 * 1	; new rib
  8981 00007030 E85C8D0000              	call malloc
  8982 00007035 50                      	push rax
  8983 00007036 BF10000000              	mov rdi, 8 * 2	; extended env
  8984 0000703B E8518D0000              	call malloc
  8985 00007040 488B7D10                	mov rdi, ENV
  8986 00007044 BE00000000              	mov rsi, 0
  8987 00007049 BA01000000              	mov rdx, 1
  8988                                  .L_lambda_simple_env_loop_0045:	; ext_env[i + 1] <-- env[i]
  8989 0000704E 4883FE01                	cmp rsi, 1
  8990 00007052 7410                    	je .L_lambda_simple_env_end_0045
  8991 00007054 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  8992 00007058 48890CD0                	mov qword [rax + 8 * rdx], rcx
  8993 0000705C 48FFC6                  	inc rsi
  8994 0000705F 48FFC2                  	inc rdx
  8995 00007062 EBEA                    	jmp .L_lambda_simple_env_loop_0045
  8996                                  .L_lambda_simple_env_end_0045:
  8997 00007064 5B                      	pop rbx
  8998 00007065 BE00000000              	mov rsi, 0
  8999                                  .L_lambda_simple_params_loop_0045:	; copy params
  9000 0000706A 4883FE01                	cmp rsi, 1
  9001 0000706E 740E                    	je .L_lambda_simple_params_end_0045
  9002 00007070 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  9003 00007075 488914F3                	mov qword [rbx + 8 * rsi], rdx
  9004 00007079 48FFC6                  	inc rsi
  9005 0000707C EBEC                    	jmp .L_lambda_simple_params_loop_0045
  9006                                  .L_lambda_simple_params_end_0045:
  9007 0000707E 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  9008 00007081 4889C3                  	mov rbx, rax
  9009 00007084 58                      	pop rax
  9010 00007085 C60005                  	mov byte [rax], T_closure
  9011 00007088 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  9012 0000708C 48C74009[99700000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0045
  9013 00007094 E999030000              	jmp .L_lambda_simple_end_0045
  9014                                  .L_lambda_simple_code_0045:	; lambda-simple body
  9015 00007099 48837C241002            	cmp qword [rsp + 8 * 2], 2
  9016 0000709F 740B                    	je .L_lambda_simple_arity_check_ok_0045
  9017 000070A1 FF742410                	push qword [rsp + 8 * 2]
  9018 000070A5 6A02                    	push 2
  9019 000070A7 E99E8C0000              	jmp L_error_incorrect_arity_simple
  9020                                  .L_lambda_simple_arity_check_ok_0045:
  9021 000070AC C8000000                	enter 0, 0
  9022 000070B0 488B4520                	mov rax, qword [rbp + 8 * (4 + 0)]
  9023 000070B4 50                      	push rax
  9024 000070B5 6A01                    	push 1
  9025 000070B7 488B0425[48000000]      	mov rax, qword [free_var_9]
  9026                                  	assert_closure(rax)
    42 000070BF 803805              <1>  cmp byte [%1], %2
    43 000070C2 0F85C2A40000        <1>  jne L_error_incorrect_type
  9027 000070C8 FF7001                  	push SOB_CLOSURE_ENV(rax)
  9028 000070CB FF5009                  	call SOB_CLOSURE_CODE(rax)
  9029 000070CE 483D[02000000]          	cmp rax, sob_boolean_false
  9030 000070D4 0F846F010000                      	je .L_if_else_002a
  9031 000070DA 488B4528                          	mov rax, qword [rbp + 8 * (4 + 1)]
  9032 000070DE 50                      	push rax
  9033 000070DF 6A01                    	push 1
  9034 000070E1 488B0425[48000000]      	mov rax, qword [free_var_9]
  9035                                  	assert_closure(rax)
    42 000070E9 803805              <1>  cmp byte [%1], %2
    43 000070EC 0F8598A40000        <1>  jne L_error_incorrect_type
  9036 000070F2 FF7001                  	push SOB_CLOSURE_ENV(rax)
  9037 000070F5 FF5009                  	call SOB_CLOSURE_CODE(rax)
  9038 000070F8 483D[02000000]          	cmp rax, sob_boolean_false
  9039 000070FE 745C                              	je .L_if_else_0026
  9040 00007100 488B4528                          	mov rax, qword [rbp + 8 * (4 + 1)]
  9041 00007104 50                      	push rax
  9042 00007105 488B4520                	mov rax, qword [rbp + 8 * (4 + 0)]
  9043 00007109 50                      	push rax
  9044 0000710A 6A02                    	push 2
  9045 0000710C 488B0425[28010000]      	mov rax, qword [free_var_37]
  9046                                  	assert_closure(rax)
    42 00007114 803805              <1>  cmp byte [%1], %2
    43 00007117 0F856DA40000        <1>  jne L_error_incorrect_type
  9047 0000711D FF7001                  	push SOB_CLOSURE_ENV(rax)
  9048 00007120 FF7508                  	push qword [rbp + 8 * 1] ; old ret addr
  9049 00007123 FF7500                  	push qword [rbp] ; same the old rbp
  9050 00007126 BA05000000              	mov rdx, 2 + 3
  9051 0000712B 488B4D18                	mov rcx, COUNT
  9052 0000712F 488D4CCD20              	lea rcx, [rbp + 8*4 + rcx * 8]
  9053 00007134 4889EF                  	mov rdi, rbp
  9054                                  .L_tc_recycle_frame_loop_0059:
  9055 00007137 4883FA00                	cmp rdx, 0
  9056 0000713B 7413                    	je .L_tc_recycle_frame_done_0059
  9057 0000713D 4883E908                	sub rcx, 8
  9058 00007141 4883EF08                	sub rdi, 8
  9059 00007145 488B37                  	mov rsi, [rdi]
  9060 00007148 488931                  	mov qword [rcx], rsi
  9061 0000714B 48FFCA                  	dec rdx
  9062 0000714E EBE7                    	jmp .L_tc_recycle_frame_loop_0059
  9063                                  .L_tc_recycle_frame_done_0059:
  9064 00007150 5D                      	pop rbp ; restore the old rbp
  9065 00007151 4889CC                  	mov rsp, rcx
  9066 00007154 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
  9067 00007157 E9E8000000              	jmp .L_if_end_0026
  9068                                            .L_if_else_0026:
  9069 0000715C 488B4528                          	mov rax, qword [rbp + 8 * (4 + 1)]
  9070 00007160 50                      	push rax
  9071 00007161 6A01                    	push 1
  9072 00007163 488B0425[40000000]      	mov rax, qword [free_var_8]
  9073                                  	assert_closure(rax)
    42 0000716B 803805              <1>  cmp byte [%1], %2
    43 0000716E 0F8516A40000        <1>  jne L_error_incorrect_type
  9074 00007174 FF7001                  	push SOB_CLOSURE_ENV(rax)
  9075 00007177 FF5009                  	call SOB_CLOSURE_CODE(rax)
  9076 0000717A 483D[02000000]          	cmp rax, sob_boolean_false
  9077 00007180 7473                              	je .L_if_else_0025
  9078 00007182 488B4528                          	mov rax, qword [rbp + 8 * (4 + 1)]
  9079 00007186 50                      	push rax
  9080 00007187 488B4520                	mov rax, qword [rbp + 8 * (4 + 0)]
  9081 0000718B 50                      	push rax
  9082 0000718C 6A01                    	push 1
  9083 0000718E 488B0425[B8000000]      	mov rax, qword [free_var_23]
  9084                                  	assert_closure(rax)
    42 00007196 803805              <1>  cmp byte [%1], %2
    43 00007199 0F85EBA30000        <1>  jne L_error_incorrect_type
  9085 0000719F FF7001                  	push SOB_CLOSURE_ENV(rax)
  9086 000071A2 FF5009                  	call SOB_CLOSURE_CODE(rax)
  9087 000071A5 50                      	push rax
  9088 000071A6 6A02                    	push 2
  9089 000071A8 488B0425[08010000]      	mov rax, qword [free_var_33]
  9090                                  	assert_closure(rax)
    42 000071B0 803805              <1>  cmp byte [%1], %2
    43 000071B3 0F85D1A30000        <1>  jne L_error_incorrect_type
  9091 000071B9 FF7001                  	push SOB_CLOSURE_ENV(rax)
  9092 000071BC FF7508                  	push qword [rbp + 8 * 1] ; old ret addr
  9093 000071BF FF7500                  	push qword [rbp] ; same the old rbp
  9094 000071C2 BA05000000              	mov rdx, 2 + 3
  9095 000071C7 488B4D18                	mov rcx, COUNT
  9096 000071CB 488D4CCD20              	lea rcx, [rbp + 8*4 + rcx * 8]
  9097 000071D0 4889EF                  	mov rdi, rbp
  9098                                  .L_tc_recycle_frame_loop_005a:
  9099 000071D3 4883FA00                	cmp rdx, 0
  9100 000071D7 7413                    	je .L_tc_recycle_frame_done_005a
  9101 000071D9 4883E908                	sub rcx, 8
  9102 000071DD 4883EF08                	sub rdi, 8
  9103 000071E1 488B37                  	mov rsi, [rdi]
  9104 000071E4 488931                  	mov qword [rcx], rsi
  9105 000071E7 48FFCA                  	dec rdx
  9106 000071EA EBE7                    	jmp .L_tc_recycle_frame_loop_005a
  9107                                  .L_tc_recycle_frame_done_005a:
  9108 000071EC 5D                      	pop rbp ; restore the old rbp
  9109 000071ED 4889CC                  	mov rsp, rcx
  9110 000071F0 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
  9111 000071F3 EB4F                    	jmp .L_if_end_0025
  9112                                            .L_if_else_0025:
  9113 000071F5 6A00                              	push 0
  9114 000071F7 488B4510                	mov rax, qword [rbp + 8 * 2]
  9115 000071FB 488B00                  	mov rax, qword [rax + 8 * 0]
  9116 000071FE 488B00                  	mov rax, qword [rax + 8 * 0]
  9117                                  	assert_closure(rax)
    42 00007201 803805              <1>  cmp byte [%1], %2
    43 00007204 0F8580A30000        <1>  jne L_error_incorrect_type
  9118 0000720A FF7001                  	push SOB_CLOSURE_ENV(rax)
  9119 0000720D FF7508                  	push qword [rbp + 8 * 1] ; old ret addr
  9120 00007210 FF7500                  	push qword [rbp] ; same the old rbp
  9121 00007213 BA03000000              	mov rdx, 0 + 3
  9122 00007218 488B4D18                	mov rcx, COUNT
  9123 0000721C 488D4CCD20              	lea rcx, [rbp + 8*4 + rcx * 8]
  9124 00007221 4889EF                  	mov rdi, rbp
  9125                                  .L_tc_recycle_frame_loop_005b:
  9126 00007224 4883FA00                	cmp rdx, 0
  9127 00007228 7413                    	je .L_tc_recycle_frame_done_005b
  9128 0000722A 4883E908                	sub rcx, 8
  9129 0000722E 4883EF08                	sub rdi, 8
  9130 00007232 488B37                  	mov rsi, [rdi]
  9131 00007235 488931                  	mov qword [rcx], rsi
  9132 00007238 48FFCA                  	dec rdx
  9133 0000723B EBE7                    	jmp .L_tc_recycle_frame_loop_005b
  9134                                  .L_tc_recycle_frame_done_005b:
  9135 0000723D 5D                      	pop rbp ; restore the old rbp
  9136 0000723E 4889CC                  	mov rsp, rcx
  9137 00007241 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
  9138                                  .L_if_end_0025:
  9139                                  .L_if_end_0026:
  9140 00007244 E9E5010000              	jmp .L_if_end_002a
  9141                                            .L_if_else_002a:
  9142 00007249 488B4520                          	mov rax, qword [rbp + 8 * (4 + 0)]
  9143 0000724D 50                      	push rax
  9144 0000724E 6A01                    	push 1
  9145 00007250 488B0425[40000000]      	mov rax, qword [free_var_8]
  9146                                  	assert_closure(rax)
    42 00007258 803805              <1>  cmp byte [%1], %2
    43 0000725B 0F8529A30000        <1>  jne L_error_incorrect_type
  9147 00007261 FF7001                  	push SOB_CLOSURE_ENV(rax)
  9148 00007264 FF5009                  	call SOB_CLOSURE_CODE(rax)
  9149 00007267 483D[02000000]          	cmp rax, sob_boolean_false
  9150 0000726D 0F846C010000                      	je .L_if_else_0029
  9151 00007273 488B4528                          	mov rax, qword [rbp + 8 * (4 + 1)]
  9152 00007277 50                      	push rax
  9153 00007278 6A01                    	push 1
  9154 0000727A 488B0425[48000000]      	mov rax, qword [free_var_9]
  9155                                  	assert_closure(rax)
    42 00007282 803805              <1>  cmp byte [%1], %2
    43 00007285 0F85FFA20000        <1>  jne L_error_incorrect_type
  9156 0000728B FF7001                  	push SOB_CLOSURE_ENV(rax)
  9157 0000728E FF5009                  	call SOB_CLOSURE_CODE(rax)
  9158 00007291 483D[02000000]          	cmp rax, sob_boolean_false
  9159 00007297 7476                              	je .L_if_else_0028
  9160 00007299 488B4528                          	mov rax, qword [rbp + 8 * (4 + 1)]
  9161 0000729D 50                      	push rax
  9162 0000729E 6A01                    	push 1
  9163 000072A0 488B0425[B8000000]      	mov rax, qword [free_var_23]
  9164                                  	assert_closure(rax)
    42 000072A8 803805              <1>  cmp byte [%1], %2
    43 000072AB 0F85D9A20000        <1>  jne L_error_incorrect_type
  9165 000072B1 FF7001                  	push SOB_CLOSURE_ENV(rax)
  9166 000072B4 FF5009                  	call SOB_CLOSURE_CODE(rax)
  9167 000072B7 50                      	push rax
  9168 000072B8 488B4520                	mov rax, qword [rbp + 8 * (4 + 0)]
  9169 000072BC 50                      	push rax
  9170 000072BD 6A02                    	push 2
  9171 000072BF 488B0425[08010000]      	mov rax, qword [free_var_33]
  9172                                  	assert_closure(rax)
    42 000072C7 803805              <1>  cmp byte [%1], %2
    43 000072CA 0F85BAA20000        <1>  jne L_error_incorrect_type
  9173 000072D0 FF7001                  	push SOB_CLOSURE_ENV(rax)
  9174 000072D3 FF7508                  	push qword [rbp + 8 * 1] ; old ret addr
  9175 000072D6 FF7500                  	push qword [rbp] ; same the old rbp
  9176 000072D9 BA05000000              	mov rdx, 2 + 3
  9177 000072DE 488B4D18                	mov rcx, COUNT
  9178 000072E2 488D4CCD20              	lea rcx, [rbp + 8*4 + rcx * 8]
  9179 000072E7 4889EF                  	mov rdi, rbp
  9180                                  .L_tc_recycle_frame_loop_005c:
  9181 000072EA 4883FA00                	cmp rdx, 0
  9182 000072EE 7413                    	je .L_tc_recycle_frame_done_005c
  9183 000072F0 4883E908                	sub rcx, 8
  9184 000072F4 4883EF08                	sub rdi, 8
  9185 000072F8 488B37                  	mov rsi, [rdi]
  9186 000072FB 488931                  	mov qword [rcx], rsi
  9187 000072FE 48FFCA                  	dec rdx
  9188 00007301 EBE7                    	jmp .L_tc_recycle_frame_loop_005c
  9189                                  .L_tc_recycle_frame_done_005c:
  9190 00007303 5D                      	pop rbp ; restore the old rbp
  9191 00007304 4889CC                  	mov rsp, rcx
  9192 00007307 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
  9193 0000730A E9CE000000              	jmp .L_if_end_0028
  9194                                            .L_if_else_0028:
  9195 0000730F 488B4528                          	mov rax, qword [rbp + 8 * (4 + 1)]
  9196 00007313 50                      	push rax
  9197 00007314 6A01                    	push 1
  9198 00007316 488B0425[40000000]      	mov rax, qword [free_var_8]
  9199                                  	assert_closure(rax)
    42 0000731E 803805              <1>  cmp byte [%1], %2
    43 00007321 0F8563A20000        <1>  jne L_error_incorrect_type
  9200 00007327 FF7001                  	push SOB_CLOSURE_ENV(rax)
  9201 0000732A FF5009                  	call SOB_CLOSURE_CODE(rax)
  9202 0000732D 483D[02000000]          	cmp rax, sob_boolean_false
  9203 00007333 7459                              	je .L_if_else_0027
  9204 00007335 488B4528                          	mov rax, qword [rbp + 8 * (4 + 1)]
  9205 00007339 50                      	push rax
  9206 0000733A 488B4520                	mov rax, qword [rbp + 8 * (4 + 0)]
  9207 0000733E 50                      	push rax
  9208 0000733F 6A02                    	push 2
  9209 00007341 488B0425[08010000]      	mov rax, qword [free_var_33]
  9210                                  	assert_closure(rax)
    42 00007349 803805              <1>  cmp byte [%1], %2
    43 0000734C 0F8538A20000        <1>  jne L_error_incorrect_type
  9211 00007352 FF7001                  	push SOB_CLOSURE_ENV(rax)
  9212 00007355 FF7508                  	push qword [rbp + 8 * 1] ; old ret addr
  9213 00007358 FF7500                  	push qword [rbp] ; same the old rbp
  9214 0000735B BA05000000              	mov rdx, 2 + 3
  9215 00007360 488B4D18                	mov rcx, COUNT
  9216 00007364 488D4CCD20              	lea rcx, [rbp + 8*4 + rcx * 8]
  9217 00007369 4889EF                  	mov rdi, rbp
  9218                                  .L_tc_recycle_frame_loop_005d:
  9219 0000736C 4883FA00                	cmp rdx, 0
  9220 00007370 7413                    	je .L_tc_recycle_frame_done_005d
  9221 00007372 4883E908                	sub rcx, 8
  9222 00007376 4883EF08                	sub rdi, 8
  9223 0000737A 488B37                  	mov rsi, [rdi]
  9224 0000737D 488931                  	mov qword [rcx], rsi
  9225 00007380 48FFCA                  	dec rdx
  9226 00007383 EBE7                    	jmp .L_tc_recycle_frame_loop_005d
  9227                                  .L_tc_recycle_frame_done_005d:
  9228 00007385 5D                      	pop rbp ; restore the old rbp
  9229 00007386 4889CC                  	mov rsp, rcx
  9230 00007389 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
  9231 0000738C EB4F                    	jmp .L_if_end_0027
  9232                                            .L_if_else_0027:
  9233 0000738E 6A00                              	push 0
  9234 00007390 488B4510                	mov rax, qword [rbp + 8 * 2]
  9235 00007394 488B00                  	mov rax, qword [rax + 8 * 0]
  9236 00007397 488B00                  	mov rax, qword [rax + 8 * 0]
  9237                                  	assert_closure(rax)
    42 0000739A 803805              <1>  cmp byte [%1], %2
    43 0000739D 0F85E7A10000        <1>  jne L_error_incorrect_type
  9238 000073A3 FF7001                  	push SOB_CLOSURE_ENV(rax)
  9239 000073A6 FF7508                  	push qword [rbp + 8 * 1] ; old ret addr
  9240 000073A9 FF7500                  	push qword [rbp] ; same the old rbp
  9241 000073AC BA03000000              	mov rdx, 0 + 3
  9242 000073B1 488B4D18                	mov rcx, COUNT
  9243 000073B5 488D4CCD20              	lea rcx, [rbp + 8*4 + rcx * 8]
  9244 000073BA 4889EF                  	mov rdi, rbp
  9245                                  .L_tc_recycle_frame_loop_005e:
  9246 000073BD 4883FA00                	cmp rdx, 0
  9247 000073C1 7413                    	je .L_tc_recycle_frame_done_005e
  9248 000073C3 4883E908                	sub rcx, 8
  9249 000073C7 4883EF08                	sub rdi, 8
  9250 000073CB 488B37                  	mov rsi, [rdi]
  9251 000073CE 488931                  	mov qword [rcx], rsi
  9252 000073D1 48FFCA                  	dec rdx
  9253 000073D4 EBE7                    	jmp .L_tc_recycle_frame_loop_005e
  9254                                  .L_tc_recycle_frame_done_005e:
  9255 000073D6 5D                      	pop rbp ; restore the old rbp
  9256 000073D7 4889CC                  	mov rsp, rcx
  9257 000073DA FF6009                  	jmp SOB_CLOSURE_CODE(rax)
  9258                                  .L_if_end_0027:
  9259                                  .L_if_end_0028:
  9260 000073DD EB4F                    	jmp .L_if_end_0029
  9261                                            .L_if_else_0029:
  9262 000073DF 6A00                              	push 0
  9263 000073E1 488B4510                	mov rax, qword [rbp + 8 * 2]
  9264 000073E5 488B00                  	mov rax, qword [rax + 8 * 0]
  9265 000073E8 488B00                  	mov rax, qword [rax + 8 * 0]
  9266                                  	assert_closure(rax)
    42 000073EB 803805              <1>  cmp byte [%1], %2
    43 000073EE 0F8596A10000        <1>  jne L_error_incorrect_type
  9267 000073F4 FF7001                  	push SOB_CLOSURE_ENV(rax)
  9268 000073F7 FF7508                  	push qword [rbp + 8 * 1] ; old ret addr
  9269 000073FA FF7500                  	push qword [rbp] ; same the old rbp
  9270 000073FD BA03000000              	mov rdx, 0 + 3
  9271 00007402 488B4D18                	mov rcx, COUNT
  9272 00007406 488D4CCD20              	lea rcx, [rbp + 8*4 + rcx * 8]
  9273 0000740B 4889EF                  	mov rdi, rbp
  9274                                  .L_tc_recycle_frame_loop_005f:
  9275 0000740E 4883FA00                	cmp rdx, 0
  9276 00007412 7413                    	je .L_tc_recycle_frame_done_005f
  9277 00007414 4883E908                	sub rcx, 8
  9278 00007418 4883EF08                	sub rdi, 8
  9279 0000741C 488B37                  	mov rsi, [rdi]
  9280 0000741F 488931                  	mov qword [rcx], rsi
  9281 00007422 48FFCA                  	dec rdx
  9282 00007425 EBE7                    	jmp .L_tc_recycle_frame_loop_005f
  9283                                  .L_tc_recycle_frame_done_005f:
  9284 00007427 5D                      	pop rbp ; restore the old rbp
  9285 00007428 4889CC                  	mov rsp, rcx
  9286 0000742B FF6009                  	jmp SOB_CLOSURE_CODE(rax)
  9287                                  .L_if_end_0029:
  9288                                  .L_if_end_002a:
  9289 0000742E C9                      	leave
  9290 0000742F C22000                  	ret 8 * (2 + 2)
  9291                                  .L_lambda_simple_end_0045:	; new closure is in rax
  9292 00007432 50                      	push rax
  9293 00007433 6A01                    	push 1
  9294 00007435 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  9295 0000743A E852890000              	call malloc
  9296 0000743F 50                      	push rax
  9297 00007440 BF08000000              	mov rdi, 8 * 1	; new rib
  9298 00007445 E847890000              	call malloc
  9299 0000744A 50                      	push rax
  9300 0000744B BF10000000              	mov rdi, 8 * 2	; extended env
  9301 00007450 E83C890000              	call malloc
  9302 00007455 488B7D10                	mov rdi, ENV
  9303 00007459 BE00000000              	mov rsi, 0
  9304 0000745E BA01000000              	mov rdx, 1
  9305                                  .L_lambda_simple_env_loop_0043:	; ext_env[i + 1] <-- env[i]
  9306 00007463 4883FE01                	cmp rsi, 1
  9307 00007467 7410                    	je .L_lambda_simple_env_end_0043
  9308 00007469 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  9309 0000746D 48890CD0                	mov qword [rax + 8 * rdx], rcx
  9310 00007471 48FFC6                  	inc rsi
  9311 00007474 48FFC2                  	inc rdx
  9312 00007477 EBEA                    	jmp .L_lambda_simple_env_loop_0043
  9313                                  .L_lambda_simple_env_end_0043:
  9314 00007479 5B                      	pop rbx
  9315 0000747A BE00000000              	mov rsi, 0
  9316                                  .L_lambda_simple_params_loop_0043:	; copy params
  9317 0000747F 4883FE01                	cmp rsi, 1
  9318 00007483 740E                    	je .L_lambda_simple_params_end_0043
  9319 00007485 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  9320 0000748A 488914F3                	mov qword [rbx + 8 * rsi], rdx
  9321 0000748E 48FFC6                  	inc rsi
  9322 00007491 EBEC                    	jmp .L_lambda_simple_params_loop_0043
  9323                                  .L_lambda_simple_params_end_0043:
  9324 00007493 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  9325 00007496 4889C3                  	mov rbx, rax
  9326 00007499 58                      	pop rax
  9327 0000749A C60005                  	mov byte [rax], T_closure
  9328 0000749D 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  9329 000074A1 48C74009[AE740000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0043
  9330 000074A9 E961030000              	jmp .L_lambda_simple_end_0043
  9331                                  .L_lambda_simple_code_0043:	; lambda-simple body
  9332 000074AE 48837C241001            	cmp qword [rsp + 8 * 2], 1
  9333 000074B4 740B                    	je .L_lambda_simple_arity_check_ok_0043
  9334 000074B6 FF742410                	push qword [rsp + 8 * 2]
  9335 000074BA 6A01                    	push 1
  9336 000074BC E989880000              	jmp L_error_incorrect_arity_simple
  9337                                  .L_lambda_simple_arity_check_ok_0043:
  9338 000074C1 C8000000                	enter 0, 0
  9339 000074C5 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  9340 000074CA E8C2880000              	call malloc
  9341 000074CF 50                      	push rax
  9342 000074D0 BF08000000              	mov rdi, 8 * 1	; new rib
  9343 000074D5 E8B7880000              	call malloc
  9344 000074DA 50                      	push rax
  9345 000074DB BF18000000              	mov rdi, 8 * 3	; extended env
  9346 000074E0 E8AC880000              	call malloc
  9347 000074E5 488B7D10                	mov rdi, ENV
  9348 000074E9 BE00000000              	mov rsi, 0
  9349 000074EE BA01000000              	mov rdx, 1
  9350                                  .L_lambda_opt_env_loop_000d:	; ext_env[i + 1] <-- env[i]
  9351 000074F3 4883FE02                	cmp rsi, 2
  9352 000074F7 7410                    	je .L_lambda_opt_env_end_000d
  9353 000074F9 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  9354 000074FD 48890CD0                	mov qword [rax + 8 * rdx], rcx
  9355 00007501 48FFC6                  	inc rsi
  9356 00007504 48FFC2                  	inc rdx
  9357 00007507 EBEA                    	jmp .L_lambda_opt_env_loop_000d
  9358                                  .L_lambda_opt_env_end_000d:
  9359 00007509 5B                      	pop rbx
  9360 0000750A BE00000000              	mov rsi, 0
  9361                                  .L_lambda_opt_params_loop_000d:	; copy params
  9362 0000750F 4883FE01                	cmp rsi, 1
  9363 00007513 740E                    	je .L_lambda_opt_params_end_000d
  9364 00007515 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  9365 0000751A 488914F3                	mov qword [rbx + 8 * rsi], rdx
  9366 0000751E 48FFC6                  	inc rsi
  9367 00007521 EBEC                    	jmp .L_lambda_opt_params_loop_000d
  9368                                  .L_lambda_opt_params_end_000d:
  9369 00007523 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  9370 00007526 4889C3                  	mov rbx, rax
  9371 00007529 58                      	pop rax
  9372 0000752A C60005                  	mov byte [rax], T_closure
  9373 0000752D 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  9374 00007531 48C74009[3E750000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_opt_code_000d
  9375 00007539 E9CD020000              	jmp .L_lambda_opt_end_000d
  9376                                  .L_lambda_opt_code_000d:	; lambda-opt body
  9377 0000753E 48837C241001            	cmp qword [rsp + 8 * 2], 1
  9378 00007544 740D                    	je .L_lambda_opt_arity_check_exact_000d
  9379 00007546 7F43                    	jg .L_lambda_opt_arity_check_more_000d
  9380 00007548 FF742410                	push qword [rsp + 8 * 2]
  9381 0000754C 6A01                    	push 1
  9382 0000754E E90B880000              	jmp L_error_incorrect_arity_opt
  9383                                  .L_lambda_opt_arity_check_exact_000d:
  9384 00007553 48C744241002000000      	mov qword [rsp + 8 * 2], 2
  9385 0000755C BA04000000              	mov rdx, 4
  9386 00007561 FF3424                  	push qword [rsp]
  9387 00007564 BE01000000              	mov rsi, 1
  9388                                  .L_lambda_opt_stack_shrink_loop_0025:
  9389 00007569 4839D6                  	cmp rsi, rdx
  9390 0000756C 7411                    	je .L_lambda_opt_stack_shrink_loop_exit_0025
  9391 0000756E 488D5CF408              	lea rbx, [rsp + 8 + rsi * 8]
  9392 00007573 488B0B                  	mov rcx, [rbx]
  9393 00007576 48894BF8                	mov qword [rbx - 8], rcx
  9394 0000757A 48FFC6                  	inc rsi
  9395 0000757D EBEA                    	jmp .L_lambda_opt_stack_shrink_loop_0025
  9396                                  .L_lambda_opt_stack_shrink_loop_exit_0025:
  9397 0000757F 48C703[01000000]        	mov qword [rbx], sob_nil
  9398 00007586 E985000000              	jmp .L_lambda_opt_stack_adjusted_000d
  9399                                  .L_lambda_opt_arity_check_more_000d:
  9400 0000758B 488B542410              	mov rdx, qword [rsp + 8 * 2]
  9401 00007590 4883EA01                	sub rdx, 1
  9402 00007594 48C744241002000000      	mov qword [rsp + 8 * 2], 2
  9403 0000759D BE00000000              	mov rsi, 0
  9404 000075A2 488D5CD418              	lea rbx, [rsp + 2 * 8 + 1 * 8 + rdx * 8]
  9405 000075A7 48B9-                   	mov rcx, sob_nil
  9405 000075A9 [0100000000000000] 
  9406                                  .L_lambda_opt_stack_shrink_loop_0026:
  9407 000075B1 4839D6                  	cmp rsi, rdx
  9408 000075B4 7427                    je .L_lambda_opt_stack_shrink_loop_exit_0026
  9409 000075B6 BF11000000              	mov rdi, 17 ; 1+8+8
  9410 000075BB E8D1870000              	call malloc
  9411 000075C0 48894809                	mov SOB_PAIR_CDR(rax), rcx
  9412 000075C4 48F7DE                  	neg rsi
  9413 000075C7 488B0CF3                	mov rcx, qword [rbx + rsi * 8]
  9414 000075CB 48F7DE                  	neg rsi
  9415 000075CE 48894801                	mov SOB_PAIR_CAR(rax), rcx
  9416 000075D2 C60021                  	mov byte [rax], T_pair
  9417 000075D5 4889C1                  	mov rcx, rax
  9418 000075D8 48FFC6                  	inc rsi
  9419 000075DB EBD4                    	jmp .L_lambda_opt_stack_shrink_loop_0026
  9420                                  .L_lambda_opt_stack_shrink_loop_exit_0026:
  9421 000075DD 48890B                  	mov qword [rbx], rcx
  9422 000075E0 4883EB08                	sub rbx, 8
  9423 000075E4 4889E7                  	mov rdi, rsp
  9424 000075E7 4883C718                	add rdi, 24
  9425 000075EB BE04000000              	mov rsi, 4
  9426                                  .L_lambda_opt_stack_shrink_loop_0027:
  9427 000075F0 4883FE00                	cmp rsi,0
  9428 000075F4 7413                    	je .L_lambda_opt_stack_shrink_loop_exit_0027
  9429 000075F6 488B0F                  	mov rcx, qword [rdi]
  9430 000075F9 48890B                  	mov [rbx], rcx
  9431 000075FC 48FFCE                  	dec rsi
  9432 000075FF 4883EB08                	sub rbx, 8
  9433 00007603 4883EF08                	sub rdi, 8
  9434 00007607 EBE7                    	jmp .L_lambda_opt_stack_shrink_loop_0027
  9435                                  .L_lambda_opt_stack_shrink_loop_exit_0027:
  9436 00007609 4883C308                	add rbx, 8
  9437 0000760D 4889DC                  	mov rsp, rbx
  9438                                  .L_lambda_opt_stack_adjusted_000d:
  9439 00007610 C8000000                	enter 0, 0
  9440 00007614 488B4528                	mov rax, qword [rbp + 8 * (4 + 1)]
  9441 00007618 50                      	push rax
  9442 00007619 6A01                    	push 1
  9443 0000761B 488B0425[00000000]      	mov rax, qword [free_var_0]
  9444                                  	assert_closure(rax)
    42 00007623 803805              <1>  cmp byte [%1], %2
    43 00007626 0F855E9F0000        <1>  jne L_error_incorrect_type
  9445 0000762C FF7001                  	push SOB_CLOSURE_ENV(rax)
  9446 0000762F FF5009                  	call SOB_CLOSURE_CODE(rax)
  9447 00007632 483D[02000000]          	cmp rax, sob_boolean_false
  9448 00007638 7464                              	je .L_if_else_0024
  9449 0000763A 488B4520                          	mov rax, qword [rbp + 8 * (4 + 0)]
  9450 0000763E 50                      	push rax
  9451 0000763F 48B8-                   	mov rax, L_constants + 128
  9451 00007641 [8000000000000000] 
  9452 00007649 50                      	push rax
  9453 0000764A 6A02                    	push 2
  9454 0000764C 488B4510                	mov rax, qword [rbp + 8 * 2]
  9455 00007650 488B00                  	mov rax, qword [rax + 8 * 0]
  9456 00007653 488B00                  	mov rax, qword [rax + 8 * 0]
  9457                                  	assert_closure(rax)
    42 00007656 803805              <1>  cmp byte [%1], %2
    43 00007659 0F852B9F0000        <1>  jne L_error_incorrect_type
  9458 0000765F FF7001                  	push SOB_CLOSURE_ENV(rax)
  9459 00007662 FF7508                  	push qword [rbp + 8 * 1] ; old ret addr
  9460 00007665 FF7500                  	push qword [rbp] ; same the old rbp
  9461 00007668 BA05000000              	mov rdx, 2 + 3
  9462 0000766D 488B4D18                	mov rcx, COUNT
  9463 00007671 488D4CCD20              	lea rcx, [rbp + 8*4 + rcx * 8]
  9464 00007676 4889EF                  	mov rdi, rbp
  9465                                  .L_tc_recycle_frame_loop_0056:
  9466 00007679 4883FA00                	cmp rdx, 0
  9467 0000767D 7413                    	je .L_tc_recycle_frame_done_0056
  9468 0000767F 4883E908                	sub rcx, 8
  9469 00007683 4883EF08                	sub rdi, 8
  9470 00007687 488B37                  	mov rsi, [rdi]
  9471 0000768A 488931                  	mov qword [rcx], rsi
  9472 0000768D 48FFCA                  	dec rdx
  9473 00007690 EBE7                    	jmp .L_tc_recycle_frame_loop_0056
  9474                                  .L_tc_recycle_frame_done_0056:
  9475 00007692 5D                      	pop rbp ; restore the old rbp
  9476 00007693 4889CC                  	mov rsp, rcx
  9477 00007696 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
  9478 00007699 E969010000              	jmp .L_if_end_0024
  9479                                            .L_if_else_0024:
  9480 0000769E 488B4528                          	mov rax, qword [rbp + 8 * (4 + 1)]
  9481 000076A2 50                      	push rax
  9482 000076A3 48B8-                   	mov rax, L_constants + 128
  9482 000076A5 [8000000000000000] 
  9483 000076AD 50                      	push rax
  9484 000076AE 488B0425[18030000]      	mov rax, qword [free_var_99]
  9485 000076B6 50                      	push rax
  9486 000076B7 6A03                    	push 3
  9487 000076B9 488B0425[F8020000]      	mov rax, qword [free_var_95]
  9488                                  	assert_closure(rax)
    42 000076C1 803805              <1>  cmp byte [%1], %2
    43 000076C4 0F85C09E0000        <1>  jne L_error_incorrect_type
  9489 000076CA FF7001                  	push SOB_CLOSURE_ENV(rax)
  9490 000076CD FF5009                  	call SOB_CLOSURE_CODE(rax)
  9491 000076D0 50                      	push rax
  9492 000076D1 6A01                    	push 1
  9493 000076D3 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  9494 000076D8 E8B4860000              	call malloc
  9495 000076DD 50                      	push rax
  9496 000076DE BF10000000              	mov rdi, 8 * 2	; new rib
  9497 000076E3 E8A9860000              	call malloc
  9498 000076E8 50                      	push rax
  9499 000076E9 BF20000000              	mov rdi, 8 * 4	; extended env
  9500 000076EE E89E860000              	call malloc
  9501 000076F3 488B7D10                	mov rdi, ENV
  9502 000076F7 BE00000000              	mov rsi, 0
  9503 000076FC BA01000000              	mov rdx, 1
  9504                                  .L_lambda_simple_env_loop_0044:	; ext_env[i + 1] <-- env[i]
  9505 00007701 4883FE03                	cmp rsi, 3
  9506 00007705 7410                    	je .L_lambda_simple_env_end_0044
  9507 00007707 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  9508 0000770B 48890CD0                	mov qword [rax + 8 * rdx], rcx
  9509 0000770F 48FFC6                  	inc rsi
  9510 00007712 48FFC2                  	inc rdx
  9511 00007715 EBEA                    	jmp .L_lambda_simple_env_loop_0044
  9512                                  .L_lambda_simple_env_end_0044:
  9513 00007717 5B                      	pop rbx
  9514 00007718 BE00000000              	mov rsi, 0
  9515                                  .L_lambda_simple_params_loop_0044:	; copy params
  9516 0000771D 4883FE02                	cmp rsi, 2
  9517 00007721 740E                    	je .L_lambda_simple_params_end_0044
  9518 00007723 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  9519 00007728 488914F3                	mov qword [rbx + 8 * rsi], rdx
  9520 0000772C 48FFC6                  	inc rsi
  9521 0000772F EBEC                    	jmp .L_lambda_simple_params_loop_0044
  9522                                  .L_lambda_simple_params_end_0044:
  9523 00007731 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  9524 00007734 4889C3                  	mov rbx, rax
  9525 00007737 58                      	pop rax
  9526 00007738 C60005                  	mov byte [rax], T_closure
  9527 0000773B 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  9528 0000773F 48C74009[49770000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0044
  9529 00007747 EB7B                    	jmp .L_lambda_simple_end_0044
  9530                                  .L_lambda_simple_code_0044:	; lambda-simple body
  9531 00007749 48837C241001            	cmp qword [rsp + 8 * 2], 1
  9532 0000774F 740B                    	je .L_lambda_simple_arity_check_ok_0044
  9533 00007751 FF742410                	push qword [rsp + 8 * 2]
  9534 00007755 6A01                    	push 1
  9535 00007757 E9EE850000              	jmp L_error_incorrect_arity_simple
  9536                                  .L_lambda_simple_arity_check_ok_0044:
  9537 0000775C C8000000                	enter 0, 0
  9538 00007760 488B4520                	mov rax, qword [rbp + 8 * (4 + 0)]
  9539 00007764 50                      	push rax
  9540 00007765 488B4510                	mov rax, qword [rbp + 8 * 2]
  9541 00007769 488B00                  	mov rax, qword [rax + 8 * 0]
  9542 0000776C 488B00                  	mov rax, qword [rax + 8 * 0]
  9543 0000776F 50                      	push rax
  9544 00007770 6A02                    	push 2
  9545 00007772 488B4510                	mov rax, qword [rbp + 8 * 2]
  9546 00007776 488B4008                	mov rax, qword [rax + 8 * 1]
  9547 0000777A 488B00                  	mov rax, qword [rax + 8 * 0]
  9548                                  	assert_closure(rax)
    42 0000777D 803805              <1>  cmp byte [%1], %2
    43 00007780 0F85049E0000        <1>  jne L_error_incorrect_type
  9549 00007786 FF7001                  	push SOB_CLOSURE_ENV(rax)
  9550 00007789 FF7508                  	push qword [rbp + 8 * 1] ; old ret addr
  9551 0000778C FF7500                  	push qword [rbp] ; same the old rbp
  9552 0000778F BA05000000              	mov rdx, 2 + 3
  9553 00007794 488B4D18                	mov rcx, COUNT
  9554 00007798 488D4CCD20              	lea rcx, [rbp + 8*4 + rcx * 8]
  9555 0000779D 4889EF                  	mov rdi, rbp
  9556                                  .L_tc_recycle_frame_loop_0058:
  9557 000077A0 4883FA00                	cmp rdx, 0
  9558 000077A4 7413                    	je .L_tc_recycle_frame_done_0058
  9559 000077A6 4883E908                	sub rcx, 8
  9560 000077AA 4883EF08                	sub rdi, 8
  9561 000077AE 488B37                  	mov rsi, [rdi]
  9562 000077B1 488931                  	mov qword [rcx], rsi
  9563 000077B4 48FFCA                  	dec rdx
  9564 000077B7 EBE7                    	jmp .L_tc_recycle_frame_loop_0058
  9565                                  .L_tc_recycle_frame_done_0058:
  9566 000077B9 5D                      	pop rbp ; restore the old rbp
  9567 000077BA 4889CC                  	mov rsp, rcx
  9568 000077BD FF6009                  	jmp SOB_CLOSURE_CODE(rax)
  9569 000077C0 C9                      	leave
  9570 000077C1 C21800                  	ret 8 * (2 + 1)
  9571                                  .L_lambda_simple_end_0044:	; new closure is in rax
  9572                                  	assert_closure(rax)
    42 000077C4 803805              <1>  cmp byte [%1], %2
    43 000077C7 0F85BD9D0000        <1>  jne L_error_incorrect_type
  9573 000077CD FF7001                  	push SOB_CLOSURE_ENV(rax)
  9574 000077D0 FF7508                  	push qword [rbp + 8 * 1] ; old ret addr
  9575 000077D3 FF7500                  	push qword [rbp] ; same the old rbp
  9576 000077D6 BA04000000              	mov rdx, 1 + 3
  9577 000077DB 488B4D18                	mov rcx, COUNT
  9578 000077DF 488D4CCD20              	lea rcx, [rbp + 8*4 + rcx * 8]
  9579 000077E4 4889EF                  	mov rdi, rbp
  9580                                  .L_tc_recycle_frame_loop_0057:
  9581 000077E7 4883FA00                	cmp rdx, 0
  9582 000077EB 7413                    	je .L_tc_recycle_frame_done_0057
  9583 000077ED 4883E908                	sub rcx, 8
  9584 000077F1 4883EF08                	sub rdi, 8
  9585 000077F5 488B37                  	mov rsi, [rdi]
  9586 000077F8 488931                  	mov qword [rcx], rsi
  9587 000077FB 48FFCA                  	dec rdx
  9588 000077FE EBE7                    	jmp .L_tc_recycle_frame_loop_0057
  9589                                  .L_tc_recycle_frame_done_0057:
  9590 00007800 5D                      	pop rbp ; restore the old rbp
  9591 00007801 4889CC                  	mov rsp, rcx
  9592 00007804 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
  9593                                  .L_if_end_0024:
  9594 00007807 C9                      	leave
  9595 00007808 C22000                  	ret 8 * (2 + 2)
  9596                                  .L_lambda_opt_end_000d:	; new closure is in rax
  9597 0000780B C9                      	leave
  9598 0000780C C21800                  	ret 8 * (2 + 1)
  9599                                  .L_lambda_simple_end_0043:	; new closure is in rax
  9600                                  	assert_closure(rax)
    42 0000780F 803805              <1>  cmp byte [%1], %2
    43 00007812 0F85729D0000        <1>  jne L_error_incorrect_type
  9601 00007818 FF7001                  	push SOB_CLOSURE_ENV(rax)
  9602 0000781B FF7508                  	push qword [rbp + 8 * 1] ; old ret addr
  9603 0000781E FF7500                  	push qword [rbp] ; same the old rbp
  9604 00007821 BA04000000              	mov rdx, 1 + 3
  9605 00007826 488B4D18                	mov rcx, COUNT
  9606 0000782A 488D4CCD20              	lea rcx, [rbp + 8*4 + rcx * 8]
  9607 0000782F 4889EF                  	mov rdi, rbp
  9608                                  .L_tc_recycle_frame_loop_0055:
  9609 00007832 4883FA00                	cmp rdx, 0
  9610 00007836 7413                    	je .L_tc_recycle_frame_done_0055
  9611 00007838 4883E908                	sub rcx, 8
  9612 0000783C 4883EF08                	sub rdi, 8
  9613 00007840 488B37                  	mov rsi, [rdi]
  9614 00007843 488931                  	mov qword [rcx], rsi
  9615 00007846 48FFCA                  	dec rdx
  9616 00007849 EBE7                    	jmp .L_tc_recycle_frame_loop_0055
  9617                                  .L_tc_recycle_frame_done_0055:
  9618 0000784B 5D                      	pop rbp ; restore the old rbp
  9619 0000784C 4889CC                  	mov rsp, rcx
  9620 0000784F FF6009                  	jmp SOB_CLOSURE_CODE(rax)
  9621 00007852 C9                      	leave
  9622 00007853 C21800                  	ret 8 * (2 + 1)
  9623                                  .L_lambda_simple_end_0042:	; new closure is in rax
  9624                                  	assert_closure(rax)
    42 00007856 803805              <1>  cmp byte [%1], %2
    43 00007859 0F852B9D0000        <1>  jne L_error_incorrect_type
  9625 0000785F FF7001                  	push SOB_CLOSURE_ENV(rax)
  9626 00007862 FF5009                  	call SOB_CLOSURE_CODE(rax)
  9627 00007865 48890425[20030000]      	mov qword [free_var_100], rax
  9628 0000786D 48B8-                   	mov rax, sob_void
  9628 0000786F [0000000000000000] 
  9629                                  
  9630 00007877 4889C7                  	mov rdi, rax
  9631 0000787A E823850000              	call print_sexpr_if_not_void
  9632                                  
  9633 0000787F BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  9634 00007884 E808850000              	call malloc
  9635 00007889 50                      	push rax
  9636 0000788A BF00000000              	mov rdi, 8 * 0	; new rib
  9637 0000788F E8FD840000              	call malloc
  9638 00007894 50                      	push rax
  9639 00007895 BF08000000              	mov rdi, 8 * 1	; extended env
  9640 0000789A E8F2840000              	call malloc
  9641 0000789F 488B7D10                	mov rdi, ENV
  9642 000078A3 BE00000000              	mov rsi, 0
  9643 000078A8 BA01000000              	mov rdx, 1
  9644                                  .L_lambda_simple_env_loop_0047:	; ext_env[i + 1] <-- env[i]
  9645 000078AD 4883FE00                	cmp rsi, 0
  9646 000078B1 7410                    	je .L_lambda_simple_env_end_0047
  9647 000078B3 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  9648 000078B7 48890CD0                	mov qword [rax + 8 * rdx], rcx
  9649 000078BB 48FFC6                  	inc rsi
  9650 000078BE 48FFC2                  	inc rdx
  9651 000078C1 EBEA                    	jmp .L_lambda_simple_env_loop_0047
  9652                                  .L_lambda_simple_env_end_0047:
  9653 000078C3 5B                      	pop rbx
  9654 000078C4 BE00000000              	mov rsi, 0
  9655                                  .L_lambda_simple_params_loop_0047:	; copy params
  9656 000078C9 4883FE00                	cmp rsi, 0
  9657 000078CD 740E                    	je .L_lambda_simple_params_end_0047
  9658 000078CF 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  9659 000078D4 488914F3                	mov qword [rbx + 8 * rsi], rdx
  9660 000078D8 48FFC6                  	inc rsi
  9661 000078DB EBEC                    	jmp .L_lambda_simple_params_loop_0047
  9662                                  .L_lambda_simple_params_end_0047:
  9663 000078DD 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  9664 000078E0 4889C3                  	mov rbx, rax
  9665 000078E3 58                      	pop rax
  9666 000078E4 C60005                  	mov byte [rax], T_closure
  9667 000078E7 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  9668 000078EB 48C74009[F8780000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0047
  9669 000078F3 E9E6000000              	jmp .L_lambda_simple_end_0047
  9670                                  .L_lambda_simple_code_0047:	; lambda-simple body
  9671 000078F8 48837C241001            	cmp qword [rsp + 8 * 2], 1
  9672 000078FE 740B                    	je .L_lambda_simple_arity_check_ok_0047
  9673 00007900 FF742410                	push qword [rsp + 8 * 2]
  9674 00007904 6A01                    	push 1
  9675 00007906 E93F840000              	jmp L_error_incorrect_arity_simple
  9676                                  .L_lambda_simple_arity_check_ok_0047:
  9677 0000790B C8000000                	enter 0, 0
  9678 0000790F 488B4520                	mov rax, qword [rbp + 8 * (4 + 0)]
  9679 00007913 50                      	push rax
  9680 00007914 6A01                    	push 1
  9681 00007916 488B0425[D8000000]      	mov rax, qword [free_var_27]
  9682                                  	assert_closure(rax)
    42 0000791E 803805              <1>  cmp byte [%1], %2
    43 00007921 0F85639C0000        <1>  jne L_error_incorrect_type
  9683 00007927 FF7001                  	push SOB_CLOSURE_ENV(rax)
  9684 0000792A FF5009                  	call SOB_CLOSURE_CODE(rax)
  9685 0000792D 483D[02000000]          	cmp rax, sob_boolean_false
  9686 00007933 740F                              	je .L_if_else_002b
  9687 00007935 48B8-                             	mov rax, L_constants + 128
  9687 00007937 [8000000000000000] 
  9688 0000793F E996000000              	jmp .L_if_end_002b
  9689                                            .L_if_else_002b:
  9690 00007944 48B8-                             	mov rax, L_constants + 128
  9690 00007946 [8000000000000000] 
  9691 0000794E 50                      	push rax
  9692 0000794F 488B4520                	mov rax, qword [rbp + 8 * (4 + 0)]
  9693 00007953 50                      	push rax
  9694 00007954 6A02                    	push 2
  9695 00007956 488B0425[10030000]      	mov rax, qword [free_var_98]
  9696                                  	assert_closure(rax)
    42 0000795E 803805              <1>  cmp byte [%1], %2
    43 00007961 0F85239C0000        <1>  jne L_error_incorrect_type
  9697 00007967 FF7001                  	push SOB_CLOSURE_ENV(rax)
  9698 0000796A FF5009                  	call SOB_CLOSURE_CODE(rax)
  9699 0000796D 50                      	push rax
  9700 0000796E 6A01                    	push 1
  9701 00007970 488B0425[28030000]      	mov rax, qword [free_var_101]
  9702                                  	assert_closure(rax)
    42 00007978 803805              <1>  cmp byte [%1], %2
    43 0000797B 0F85099C0000        <1>  jne L_error_incorrect_type
  9703 00007981 FF7001                  	push SOB_CLOSURE_ENV(rax)
  9704 00007984 FF5009                  	call SOB_CLOSURE_CODE(rax)
  9705 00007987 50                      	push rax
  9706 00007988 488B4520                	mov rax, qword [rbp + 8 * (4 + 0)]
  9707 0000798C 50                      	push rax
  9708 0000798D 6A02                    	push 2
  9709 0000798F 488B0425[18030000]      	mov rax, qword [free_var_99]
  9710                                  	assert_closure(rax)
    42 00007997 803805              <1>  cmp byte [%1], %2
    43 0000799A 0F85EA9B0000        <1>  jne L_error_incorrect_type
  9711 000079A0 FF7001                  	push SOB_CLOSURE_ENV(rax)
  9712 000079A3 FF7508                  	push qword [rbp + 8 * 1] ; old ret addr
  9713 000079A6 FF7500                  	push qword [rbp] ; same the old rbp
  9714 000079A9 BA05000000              	mov rdx, 2 + 3
  9715 000079AE 488B4D18                	mov rcx, COUNT
  9716 000079B2 488D4CCD20              	lea rcx, [rbp + 8*4 + rcx * 8]
  9717 000079B7 4889EF                  	mov rdi, rbp
  9718                                  .L_tc_recycle_frame_loop_0061:
  9719 000079BA 4883FA00                	cmp rdx, 0
  9720 000079BE 7413                    	je .L_tc_recycle_frame_done_0061
  9721 000079C0 4883E908                	sub rcx, 8
  9722 000079C4 4883EF08                	sub rdi, 8
  9723 000079C8 488B37                  	mov rsi, [rdi]
  9724 000079CB 488931                  	mov qword [rcx], rsi
  9725 000079CE 48FFCA                  	dec rdx
  9726 000079D1 EBE7                    	jmp .L_tc_recycle_frame_loop_0061
  9727                                  .L_tc_recycle_frame_done_0061:
  9728 000079D3 5D                      	pop rbp ; restore the old rbp
  9729 000079D4 4889CC                  	mov rsp, rcx
  9730 000079D7 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
  9731                                  .L_if_end_002b:
  9732 000079DA C9                      	leave
  9733 000079DB C21800                  	ret 8 * (2 + 1)
  9734                                  .L_lambda_simple_end_0047:	; new closure is in rax
  9735 000079DE 48890425[28030000]      	mov qword [free_var_101], rax
  9736 000079E6 48B8-                   	mov rax, sob_void
  9736 000079E8 [0000000000000000] 
  9737                                  
  9738 000079F0 4889C7                  	mov rdi, rax
  9739 000079F3 E8AA830000              	call print_sexpr_if_not_void
  9740                                  
  9741 000079F8 48B8-                   	mov rax, L_constants + 0
  9741 000079FA [0000000000000000] 
  9742 00007A02 48890425[30030000]      	mov qword [free_var_102], rax
  9743 00007A0A 48B8-                   	mov rax, sob_void
  9743 00007A0C [0000000000000000] 
  9744                                  
  9745 00007A14 4889C7                  	mov rdi, rax
  9746 00007A17 E886830000              	call print_sexpr_if_not_void
  9747                                  
  9748 00007A1C 48B8-                   	mov rax, L_constants + 0
  9748 00007A1E [0000000000000000] 
  9749 00007A26 48890425[38030000]      	mov qword [free_var_103], rax
  9750 00007A2E 48B8-                   	mov rax, sob_void
  9750 00007A30 [0000000000000000] 
  9751                                  
  9752 00007A38 4889C7                  	mov rdi, rax
  9753 00007A3B E862830000              	call print_sexpr_if_not_void
  9754                                  
  9755 00007A40 48B8-                   	mov rax, L_constants + 0
  9755 00007A42 [0000000000000000] 
  9756 00007A4A 48890425[40030000]      	mov qword [free_var_104], rax
  9757 00007A52 48B8-                   	mov rax, sob_void
  9757 00007A54 [0000000000000000] 
  9758                                  
  9759 00007A5C 4889C7                  	mov rdi, rax
  9760 00007A5F E83E830000              	call print_sexpr_if_not_void
  9761                                  
  9762 00007A64 48B8-                   	mov rax, L_constants + 0
  9762 00007A66 [0000000000000000] 
  9763 00007A6E 48890425[48030000]      	mov qword [free_var_105], rax
  9764 00007A76 48B8-                   	mov rax, sob_void
  9764 00007A78 [0000000000000000] 
  9765                                  
  9766 00007A80 4889C7                  	mov rdi, rax
  9767 00007A83 E81A830000              	call print_sexpr_if_not_void
  9768                                  
  9769 00007A88 48B8-                   	mov rax, L_constants + 0
  9769 00007A8A [0000000000000000] 
  9770 00007A92 48890425[50030000]      	mov qword [free_var_106], rax
  9771 00007A9A 48B8-                   	mov rax, sob_void
  9771 00007A9C [0000000000000000] 
  9772                                  
  9773 00007AA4 4889C7                  	mov rdi, rax
  9774 00007AA7 E8F6820000              	call print_sexpr_if_not_void
  9775                                  
  9776 00007AAC BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  9777 00007AB1 E8DB820000              	call malloc
  9778 00007AB6 50                      	push rax
  9779 00007AB7 BF00000000              	mov rdi, 8 * 0	; new rib
  9780 00007ABC E8D0820000              	call malloc
  9781 00007AC1 50                      	push rax
  9782 00007AC2 BF08000000              	mov rdi, 8 * 1	; extended env
  9783 00007AC7 E8C5820000              	call malloc
  9784 00007ACC 488B7D10                	mov rdi, ENV
  9785 00007AD0 BE00000000              	mov rsi, 0
  9786 00007AD5 BA01000000              	mov rdx, 1
  9787                                  .L_lambda_simple_env_loop_0058:	; ext_env[i + 1] <-- env[i]
  9788 00007ADA 4883FE00                	cmp rsi, 0
  9789 00007ADE 7410                    	je .L_lambda_simple_env_end_0058
  9790 00007AE0 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  9791 00007AE4 48890CD0                	mov qword [rax + 8 * rdx], rcx
  9792 00007AE8 48FFC6                  	inc rsi
  9793 00007AEB 48FFC2                  	inc rdx
  9794 00007AEE EBEA                    	jmp .L_lambda_simple_env_loop_0058
  9795                                  .L_lambda_simple_env_end_0058:
  9796 00007AF0 5B                      	pop rbx
  9797 00007AF1 BE00000000              	mov rsi, 0
  9798                                  .L_lambda_simple_params_loop_0058:	; copy params
  9799 00007AF6 4883FE00                	cmp rsi, 0
  9800 00007AFA 740E                    	je .L_lambda_simple_params_end_0058
  9801 00007AFC 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  9802 00007B01 488914F3                	mov qword [rbx + 8 * rsi], rdx
  9803 00007B05 48FFC6                  	inc rsi
  9804 00007B08 EBEC                    	jmp .L_lambda_simple_params_loop_0058
  9805                                  .L_lambda_simple_params_end_0058:
  9806 00007B0A 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  9807 00007B0D 4889C3                  	mov rbx, rax
  9808 00007B10 58                      	pop rax
  9809 00007B11 C60005                  	mov byte [rax], T_closure
  9810 00007B14 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  9811 00007B18 48C74009[257B0000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0058
  9812 00007B20 E97E000000              	jmp .L_lambda_simple_end_0058
  9813                                  .L_lambda_simple_code_0058:	; lambda-simple body
  9814 00007B25 48837C241000            	cmp qword [rsp + 8 * 2], 0
  9815 00007B2B 740B                    	je .L_lambda_simple_arity_check_ok_0058
  9816 00007B2D FF742410                	push qword [rsp + 8 * 2]
  9817 00007B31 6A00                    	push 0
  9818 00007B33 E912820000              	jmp L_error_incorrect_arity_simple
  9819                                  .L_lambda_simple_arity_check_ok_0058:
  9820 00007B38 C8000000                	enter 0, 0
  9821 00007B3C 48B8-                   	mov rax, L_constants + 219
  9821 00007B3E [DB00000000000000] 
  9822 00007B46 50                      	push rax
  9823 00007B47 48B8-                   	mov rax, L_constants + 210
  9823 00007B49 [D200000000000000] 
  9824 00007B51 50                      	push rax
  9825 00007B52 6A02                    	push 2
  9826 00007B54 488B0425[30010000]      	mov rax, qword [free_var_38]
  9827                                  	assert_closure(rax)
    42 00007B5C 803805              <1>  cmp byte [%1], %2
    43 00007B5F 0F85259A0000        <1>  jne L_error_incorrect_type
  9828 00007B65 FF7001                  	push SOB_CLOSURE_ENV(rax)
  9829 00007B68 FF7508                  	push qword [rbp + 8 * 1] ; old ret addr
  9830 00007B6B FF7500                  	push qword [rbp] ; same the old rbp
  9831 00007B6E BA05000000              	mov rdx, 2 + 3
  9832 00007B73 488B4D18                	mov rcx, COUNT
  9833 00007B77 488D4CCD20              	lea rcx, [rbp + 8*4 + rcx * 8]
  9834 00007B7C 4889EF                  	mov rdi, rbp
  9835                                  .L_tc_recycle_frame_loop_0075:
  9836 00007B7F 4883FA00                	cmp rdx, 0
  9837 00007B83 7413                    	je .L_tc_recycle_frame_done_0075
  9838 00007B85 4883E908                	sub rcx, 8
  9839 00007B89 4883EF08                	sub rdi, 8
  9840 00007B8D 488B37                  	mov rsi, [rdi]
  9841 00007B90 488931                  	mov qword [rcx], rsi
  9842 00007B93 48FFCA                  	dec rdx
  9843 00007B96 EBE7                    	jmp .L_tc_recycle_frame_loop_0075
  9844                                  .L_tc_recycle_frame_done_0075:
  9845 00007B98 5D                      	pop rbp ; restore the old rbp
  9846 00007B99 4889CC                  	mov rsp, rcx
  9847 00007B9C FF6009                  	jmp SOB_CLOSURE_CODE(rax)
  9848 00007B9F C9                      	leave
  9849 00007BA0 C21000                  	ret 8 * (2 + 0)
  9850                                  .L_lambda_simple_end_0058:	; new closure is in rax
  9851 00007BA3 50                      	push rax
  9852 00007BA4 6A01                    	push 1
  9853 00007BA6 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  9854 00007BAB E8E1810000              	call malloc
  9855 00007BB0 50                      	push rax
  9856 00007BB1 BF00000000              	mov rdi, 8 * 0	; new rib
  9857 00007BB6 E8D6810000              	call malloc
  9858 00007BBB 50                      	push rax
  9859 00007BBC BF08000000              	mov rdi, 8 * 1	; extended env
  9860 00007BC1 E8CB810000              	call malloc
  9861 00007BC6 488B7D10                	mov rdi, ENV
  9862 00007BCA BE00000000              	mov rsi, 0
  9863 00007BCF BA01000000              	mov rdx, 1
  9864                                  .L_lambda_simple_env_loop_0048:	; ext_env[i + 1] <-- env[i]
  9865 00007BD4 4883FE00                	cmp rsi, 0
  9866 00007BD8 7410                    	je .L_lambda_simple_env_end_0048
  9867 00007BDA 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  9868 00007BDE 48890CD0                	mov qword [rax + 8 * rdx], rcx
  9869 00007BE2 48FFC6                  	inc rsi
  9870 00007BE5 48FFC2                  	inc rdx
  9871 00007BE8 EBEA                    	jmp .L_lambda_simple_env_loop_0048
  9872                                  .L_lambda_simple_env_end_0048:
  9873 00007BEA 5B                      	pop rbx
  9874 00007BEB BE00000000              	mov rsi, 0
  9875                                  .L_lambda_simple_params_loop_0048:	; copy params
  9876 00007BF0 4883FE00                	cmp rsi, 0
  9877 00007BF4 740E                    	je .L_lambda_simple_params_end_0048
  9878 00007BF6 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  9879 00007BFB 488914F3                	mov qword [rbx + 8 * rsi], rdx
  9880 00007BFF 48FFC6                  	inc rsi
  9881 00007C02 EBEC                    	jmp .L_lambda_simple_params_loop_0048
  9882                                  .L_lambda_simple_params_end_0048:
  9883 00007C04 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  9884 00007C07 4889C3                  	mov rbx, rax
  9885 00007C0A 58                      	pop rax
  9886 00007C0B C60005                  	mov byte [rax], T_closure
  9887 00007C0E 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  9888 00007C12 48C74009[1F7C0000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0048
  9889 00007C1A E9CB130000              	jmp .L_lambda_simple_end_0048
  9890                                  .L_lambda_simple_code_0048:	; lambda-simple body
  9891 00007C1F 48837C241001            	cmp qword [rsp + 8 * 2], 1
  9892 00007C25 740B                    	je .L_lambda_simple_arity_check_ok_0048
  9893 00007C27 FF742410                	push qword [rsp + 8 * 2]
  9894 00007C2B 6A01                    	push 1
  9895 00007C2D E918810000              	jmp L_error_incorrect_arity_simple
  9896                                  .L_lambda_simple_arity_check_ok_0048:
  9897 00007C32 C8000000                	enter 0, 0
  9898 00007C36 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  9899 00007C3B E851810000              	call malloc
  9900 00007C40 50                      	push rax
  9901 00007C41 BF08000000              	mov rdi, 8 * 1	; new rib
  9902 00007C46 E846810000              	call malloc
  9903 00007C4B 50                      	push rax
  9904 00007C4C BF10000000              	mov rdi, 8 * 2	; extended env
  9905 00007C51 E83B810000              	call malloc
  9906 00007C56 488B7D10                	mov rdi, ENV
  9907 00007C5A BE00000000              	mov rsi, 0
  9908 00007C5F BA01000000              	mov rdx, 1
  9909                                  .L_lambda_simple_env_loop_0056:	; ext_env[i + 1] <-- env[i]
  9910 00007C64 4883FE01                	cmp rsi, 1
  9911 00007C68 7410                    	je .L_lambda_simple_env_end_0056
  9912 00007C6A 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  9913 00007C6E 48890CD0                	mov qword [rax + 8 * rdx], rcx
  9914 00007C72 48FFC6                  	inc rsi
  9915 00007C75 48FFC2                  	inc rdx
  9916 00007C78 EBEA                    	jmp .L_lambda_simple_env_loop_0056
  9917                                  .L_lambda_simple_env_end_0056:
  9918 00007C7A 5B                      	pop rbx
  9919 00007C7B BE00000000              	mov rsi, 0
  9920                                  .L_lambda_simple_params_loop_0056:	; copy params
  9921 00007C80 4883FE01                	cmp rsi, 1
  9922 00007C84 740E                    	je .L_lambda_simple_params_end_0056
  9923 00007C86 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  9924 00007C8B 488914F3                	mov qword [rbx + 8 * rsi], rdx
  9925 00007C8F 48FFC6                  	inc rsi
  9926 00007C92 EBEC                    	jmp .L_lambda_simple_params_loop_0056
  9927                                  .L_lambda_simple_params_end_0056:
  9928 00007C94 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  9929 00007C97 4889C3                  	mov rbx, rax
  9930 00007C9A 58                      	pop rax
  9931 00007C9B C60005                  	mov byte [rax], T_closure
  9932 00007C9E 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  9933 00007CA2 48C74009[AF7C0000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0056
  9934 00007CAA E9F5030000              	jmp .L_lambda_simple_end_0056
  9935                                  .L_lambda_simple_code_0056:	; lambda-simple body
  9936 00007CAF 48837C241002            	cmp qword [rsp + 8 * 2], 2
  9937 00007CB5 740B                    	je .L_lambda_simple_arity_check_ok_0056
  9938 00007CB7 FF742410                	push qword [rsp + 8 * 2]
  9939 00007CBB 6A02                    	push 2
  9940 00007CBD E988800000              	jmp L_error_incorrect_arity_simple
  9941                                  .L_lambda_simple_arity_check_ok_0056:
  9942 00007CC2 C8000000                	enter 0, 0
  9943 00007CC6 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  9944 00007CCB E8C1800000              	call malloc
  9945 00007CD0 50                      	push rax
  9946 00007CD1 BF10000000              	mov rdi, 8 * 2	; new rib
  9947 00007CD6 E8B6800000              	call malloc
  9948 00007CDB 50                      	push rax
  9949 00007CDC BF18000000              	mov rdi, 8 * 3	; extended env
  9950 00007CE1 E8AB800000              	call malloc
  9951 00007CE6 488B7D10                	mov rdi, ENV
  9952 00007CEA BE00000000              	mov rsi, 0
  9953 00007CEF BA01000000              	mov rdx, 1
  9954                                  .L_lambda_simple_env_loop_0057:	; ext_env[i + 1] <-- env[i]
  9955 00007CF4 4883FE02                	cmp rsi, 2
  9956 00007CF8 7410                    	je .L_lambda_simple_env_end_0057
  9957 00007CFA 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  9958 00007CFE 48890CD0                	mov qword [rax + 8 * rdx], rcx
  9959 00007D02 48FFC6                  	inc rsi
  9960 00007D05 48FFC2                  	inc rdx
  9961 00007D08 EBEA                    	jmp .L_lambda_simple_env_loop_0057
  9962                                  .L_lambda_simple_env_end_0057:
  9963 00007D0A 5B                      	pop rbx
  9964 00007D0B BE00000000              	mov rsi, 0
  9965                                  .L_lambda_simple_params_loop_0057:	; copy params
  9966 00007D10 4883FE02                	cmp rsi, 2
  9967 00007D14 740E                    	je .L_lambda_simple_params_end_0057
  9968 00007D16 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  9969 00007D1B 488914F3                	mov qword [rbx + 8 * rsi], rdx
  9970 00007D1F 48FFC6                  	inc rsi
  9971 00007D22 EBEC                    	jmp .L_lambda_simple_params_loop_0057
  9972                                  .L_lambda_simple_params_end_0057:
  9973 00007D24 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  9974 00007D27 4889C3                  	mov rbx, rax
  9975 00007D2A 58                      	pop rax
  9976 00007D2B C60005                  	mov byte [rax], T_closure
  9977 00007D2E 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  9978 00007D32 48C74009[3F7D0000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0057
  9979 00007D3A E961030000              	jmp .L_lambda_simple_end_0057
  9980                                  .L_lambda_simple_code_0057:	; lambda-simple body
  9981 00007D3F 48837C241002            	cmp qword [rsp + 8 * 2], 2
  9982 00007D45 740B                    	je .L_lambda_simple_arity_check_ok_0057
  9983 00007D47 FF742410                	push qword [rsp + 8 * 2]
  9984 00007D4B 6A02                    	push 2
  9985 00007D4D E9F87F0000              	jmp L_error_incorrect_arity_simple
  9986                                  .L_lambda_simple_arity_check_ok_0057:
  9987 00007D52 C8000000                	enter 0, 0
  9988 00007D56 488B4520                	mov rax, qword [rbp + 8 * (4 + 0)]
  9989 00007D5A 50                      	push rax
  9990 00007D5B 6A01                    	push 1
  9991 00007D5D 488B0425[48000000]      	mov rax, qword [free_var_9]
  9992                                  	assert_closure(rax)
    42 00007D65 803805              <1>  cmp byte [%1], %2
    43 00007D68 0F851C980000        <1>  jne L_error_incorrect_type
  9993 00007D6E FF7001                  	push SOB_CLOSURE_ENV(rax)
  9994 00007D71 FF5009                  	call SOB_CLOSURE_CODE(rax)
  9995 00007D74 483D[02000000]          	cmp rax, sob_boolean_false
  9996 00007D7A 0F8475010000                      	je .L_if_else_0032
  9997 00007D80 488B4528                          	mov rax, qword [rbp + 8 * (4 + 1)]
  9998 00007D84 50                      	push rax
  9999 00007D85 6A01                    	push 1
 10000 00007D87 488B0425[48000000]      	mov rax, qword [free_var_9]
 10001                                  	assert_closure(rax)
    42 00007D8F 803805              <1>  cmp byte [%1], %2
    43 00007D92 0F85F2970000        <1>  jne L_error_incorrect_type
 10002 00007D98 FF7001                  	push SOB_CLOSURE_ENV(rax)
 10003 00007D9B FF5009                  	call SOB_CLOSURE_CODE(rax)
 10004 00007D9E 483D[02000000]          	cmp rax, sob_boolean_false
 10005 00007DA4 745E                              	je .L_if_else_002e
 10006 00007DA6 488B4528                          	mov rax, qword [rbp + 8 * (4 + 1)]
 10007 00007DAA 50                      	push rax
 10008 00007DAB 488B4520                	mov rax, qword [rbp + 8 * (4 + 0)]
 10009 00007DAF 50                      	push rax
 10010 00007DB0 6A02                    	push 2
 10011 00007DB2 488B4510                	mov rax, qword [rbp + 8 * 2]
 10012 00007DB6 488B00                  	mov rax, qword [rax + 8 * 0]
 10013 00007DB9 488B00                  	mov rax, qword [rax + 8 * 0]
 10014                                  	assert_closure(rax)
    42 00007DBC 803805              <1>  cmp byte [%1], %2
    43 00007DBF 0F85C5970000        <1>  jne L_error_incorrect_type
 10015 00007DC5 FF7001                  	push SOB_CLOSURE_ENV(rax)
 10016 00007DC8 FF7508                  	push qword [rbp + 8 * 1] ; old ret addr
 10017 00007DCB FF7500                  	push qword [rbp] ; same the old rbp
 10018 00007DCE BA05000000              	mov rdx, 2 + 3
 10019 00007DD3 488B4D18                	mov rcx, COUNT
 10020 00007DD7 488D4CCD20              	lea rcx, [rbp + 8*4 + rcx * 8]
 10021 00007DDC 4889EF                  	mov rdi, rbp
 10022                                  .L_tc_recycle_frame_loop_006f:
 10023 00007DDF 4883FA00                	cmp rdx, 0
 10024 00007DE3 7413                    	je .L_tc_recycle_frame_done_006f
 10025 00007DE5 4883E908                	sub rcx, 8
 10026 00007DE9 4883EF08                	sub rdi, 8
 10027 00007DED 488B37                  	mov rsi, [rdi]
 10028 00007DF0 488931                  	mov qword [rcx], rsi
 10029 00007DF3 48FFCA                  	dec rdx
 10030 00007DF6 EBE7                    	jmp .L_tc_recycle_frame_loop_006f
 10031                                  .L_tc_recycle_frame_done_006f:
 10032 00007DF8 5D                      	pop rbp ; restore the old rbp
 10033 00007DF9 4889CC                  	mov rsp, rcx
 10034 00007DFC FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 10035 00007DFF E9EC000000              	jmp .L_if_end_002e
 10036                                            .L_if_else_002e:
 10037 00007E04 488B4528                          	mov rax, qword [rbp + 8 * (4 + 1)]
 10038 00007E08 50                      	push rax
 10039 00007E09 6A01                    	push 1
 10040 00007E0B 488B0425[40000000]      	mov rax, qword [free_var_8]
 10041                                  	assert_closure(rax)
    42 00007E13 803805              <1>  cmp byte [%1], %2
    43 00007E16 0F856E970000        <1>  jne L_error_incorrect_type
 10042 00007E1C FF7001                  	push SOB_CLOSURE_ENV(rax)
 10043 00007E1F FF5009                  	call SOB_CLOSURE_CODE(rax)
 10044 00007E22 483D[02000000]          	cmp rax, sob_boolean_false
 10045 00007E28 7476                              	je .L_if_else_002d
 10046 00007E2A 488B4528                          	mov rax, qword [rbp + 8 * (4 + 1)]
 10047 00007E2E 50                      	push rax
 10048 00007E2F 488B4520                	mov rax, qword [rbp + 8 * (4 + 0)]
 10049 00007E33 50                      	push rax
 10050 00007E34 6A01                    	push 1
 10051 00007E36 488B0425[B8000000]      	mov rax, qword [free_var_23]
 10052                                  	assert_closure(rax)
    42 00007E3E 803805              <1>  cmp byte [%1], %2
    43 00007E41 0F8543970000        <1>  jne L_error_incorrect_type
 10053 00007E47 FF7001                  	push SOB_CLOSURE_ENV(rax)
 10054 00007E4A FF5009                  	call SOB_CLOSURE_CODE(rax)
 10055 00007E4D 50                      	push rax
 10056 00007E4E 6A02                    	push 2
 10057 00007E50 488B4510                	mov rax, qword [rbp + 8 * 2]
 10058 00007E54 488B00                  	mov rax, qword [rax + 8 * 0]
 10059 00007E57 488B4008                	mov rax, qword [rax + 8 * 1]
 10060                                  	assert_closure(rax)
    42 00007E5B 803805              <1>  cmp byte [%1], %2
    43 00007E5E 0F8526970000        <1>  jne L_error_incorrect_type
 10061 00007E64 FF7001                  	push SOB_CLOSURE_ENV(rax)
 10062 00007E67 FF7508                  	push qword [rbp + 8 * 1] ; old ret addr
 10063 00007E6A FF7500                  	push qword [rbp] ; same the old rbp
 10064 00007E6D BA05000000              	mov rdx, 2 + 3
 10065 00007E72 488B4D18                	mov rcx, COUNT
 10066 00007E76 488D4CCD20              	lea rcx, [rbp + 8*4 + rcx * 8]
 10067 00007E7B 4889EF                  	mov rdi, rbp
 10068                                  .L_tc_recycle_frame_loop_0070:
 10069 00007E7E 4883FA00                	cmp rdx, 0
 10070 00007E82 7413                    	je .L_tc_recycle_frame_done_0070
 10071 00007E84 4883E908                	sub rcx, 8
 10072 00007E88 4883EF08                	sub rdi, 8
 10073 00007E8C 488B37                  	mov rsi, [rdi]
 10074 00007E8F 488931                  	mov qword [rcx], rsi
 10075 00007E92 48FFCA                  	dec rdx
 10076 00007E95 EBE7                    	jmp .L_tc_recycle_frame_loop_0070
 10077                                  .L_tc_recycle_frame_done_0070:
 10078 00007E97 5D                      	pop rbp ; restore the old rbp
 10079 00007E98 4889CC                  	mov rsp, rcx
 10080 00007E9B FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 10081 00007E9E EB50                    	jmp .L_if_end_002d
 10082                                            .L_if_else_002d:
 10083 00007EA0 6A00                              	push 0
 10084 00007EA2 488B4510                	mov rax, qword [rbp + 8 * 2]
 10085 00007EA6 488B4008                	mov rax, qword [rax + 8 * 1]
 10086 00007EAA 488B00                  	mov rax, qword [rax + 8 * 0]
 10087                                  	assert_closure(rax)
    42 00007EAD 803805              <1>  cmp byte [%1], %2
    43 00007EB0 0F85D4960000        <1>  jne L_error_incorrect_type
 10088 00007EB6 FF7001                  	push SOB_CLOSURE_ENV(rax)
 10089 00007EB9 FF7508                  	push qword [rbp + 8 * 1] ; old ret addr
 10090 00007EBC FF7500                  	push qword [rbp] ; same the old rbp
 10091 00007EBF BA03000000              	mov rdx, 0 + 3
 10092 00007EC4 488B4D18                	mov rcx, COUNT
 10093 00007EC8 488D4CCD20              	lea rcx, [rbp + 8*4 + rcx * 8]
 10094 00007ECD 4889EF                  	mov rdi, rbp
 10095                                  .L_tc_recycle_frame_loop_0071:
 10096 00007ED0 4883FA00                	cmp rdx, 0
 10097 00007ED4 7413                    	je .L_tc_recycle_frame_done_0071
 10098 00007ED6 4883E908                	sub rcx, 8
 10099 00007EDA 4883EF08                	sub rdi, 8
 10100 00007EDE 488B37                  	mov rsi, [rdi]
 10101 00007EE1 488931                  	mov qword [rcx], rsi
 10102 00007EE4 48FFCA                  	dec rdx
 10103 00007EE7 EBE7                    	jmp .L_tc_recycle_frame_loop_0071
 10104                                  .L_tc_recycle_frame_done_0071:
 10105 00007EE9 5D                      	pop rbp ; restore the old rbp
 10106 00007EEA 4889CC                  	mov rsp, rcx
 10107 00007EED FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 10108                                  .L_if_end_002d:
 10109                                  .L_if_end_002e:
 10110 00007EF0 E9A7010000              	jmp .L_if_end_0032
 10111                                            .L_if_else_0032:
 10112 00007EF5 488B4520                          	mov rax, qword [rbp + 8 * (4 + 0)]
 10113 00007EF9 50                      	push rax
 10114 00007EFA 6A01                    	push 1
 10115 00007EFC 488B0425[40000000]      	mov rax, qword [free_var_8]
 10116                                  	assert_closure(rax)
    42 00007F04 803805              <1>  cmp byte [%1], %2
    43 00007F07 0F857D960000        <1>  jne L_error_incorrect_type
 10117 00007F0D FF7001                  	push SOB_CLOSURE_ENV(rax)
 10118 00007F10 FF5009                  	call SOB_CLOSURE_CODE(rax)
 10119 00007F13 483D[02000000]          	cmp rax, sob_boolean_false
 10120 00007F19 0F8473010000                      	je .L_if_else_0031
 10121 00007F1F 488B4528                          	mov rax, qword [rbp + 8 * (4 + 1)]
 10122 00007F23 50                      	push rax
 10123 00007F24 6A01                    	push 1
 10124 00007F26 488B0425[48000000]      	mov rax, qword [free_var_9]
 10125                                  	assert_closure(rax)
    42 00007F2E 803805              <1>  cmp byte [%1], %2
    43 00007F31 0F8553960000        <1>  jne L_error_incorrect_type
 10126 00007F37 FF7001                  	push SOB_CLOSURE_ENV(rax)
 10127 00007F3A FF5009                  	call SOB_CLOSURE_CODE(rax)
 10128 00007F3D 483D[02000000]          	cmp rax, sob_boolean_false
 10129 00007F43 7479                              	je .L_if_else_0030
 10130 00007F45 488B4528                          	mov rax, qword [rbp + 8 * (4 + 1)]
 10131 00007F49 50                      	push rax
 10132 00007F4A 6A01                    	push 1
 10133 00007F4C 488B0425[B8000000]      	mov rax, qword [free_var_23]
 10134                                  	assert_closure(rax)
    42 00007F54 803805              <1>  cmp byte [%1], %2
    43 00007F57 0F852D960000        <1>  jne L_error_incorrect_type
 10135 00007F5D FF7001                  	push SOB_CLOSURE_ENV(rax)
 10136 00007F60 FF5009                  	call SOB_CLOSURE_CODE(rax)
 10137 00007F63 50                      	push rax
 10138 00007F64 488B4520                	mov rax, qword [rbp + 8 * (4 + 0)]
 10139 00007F68 50                      	push rax
 10140 00007F69 6A02                    	push 2
 10141 00007F6B 488B4510                	mov rax, qword [rbp + 8 * 2]
 10142 00007F6F 488B00                  	mov rax, qword [rax + 8 * 0]
 10143 00007F72 488B4008                	mov rax, qword [rax + 8 * 1]
 10144                                  	assert_closure(rax)
    42 00007F76 803805              <1>  cmp byte [%1], %2
    43 00007F79 0F850B960000        <1>  jne L_error_incorrect_type
 10145 00007F7F FF7001                  	push SOB_CLOSURE_ENV(rax)
 10146 00007F82 FF7508                  	push qword [rbp + 8 * 1] ; old ret addr
 10147 00007F85 FF7500                  	push qword [rbp] ; same the old rbp
 10148 00007F88 BA05000000              	mov rdx, 2 + 3
 10149 00007F8D 488B4D18                	mov rcx, COUNT
 10150 00007F91 488D4CCD20              	lea rcx, [rbp + 8*4 + rcx * 8]
 10151 00007F96 4889EF                  	mov rdi, rbp
 10152                                  .L_tc_recycle_frame_loop_0072:
 10153 00007F99 4883FA00                	cmp rdx, 0
 10154 00007F9D 7413                    	je .L_tc_recycle_frame_done_0072
 10155 00007F9F 4883E908                	sub rcx, 8
 10156 00007FA3 4883EF08                	sub rdi, 8
 10157 00007FA7 488B37                  	mov rsi, [rdi]
 10158 00007FAA 488931                  	mov qword [rcx], rsi
 10159 00007FAD 48FFCA                  	dec rdx
 10160 00007FB0 EBE7                    	jmp .L_tc_recycle_frame_loop_0072
 10161                                  .L_tc_recycle_frame_done_0072:
 10162 00007FB2 5D                      	pop rbp ; restore the old rbp
 10163 00007FB3 4889CC                  	mov rsp, rcx
 10164 00007FB6 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 10165 00007FB9 E9D2000000              	jmp .L_if_end_0030
 10166                                            .L_if_else_0030:
 10167 00007FBE 488B4528                          	mov rax, qword [rbp + 8 * (4 + 1)]
 10168 00007FC2 50                      	push rax
 10169 00007FC3 6A01                    	push 1
 10170 00007FC5 488B0425[40000000]      	mov rax, qword [free_var_8]
 10171                                  	assert_closure(rax)
    42 00007FCD 803805              <1>  cmp byte [%1], %2
    43 00007FD0 0F85B4950000        <1>  jne L_error_incorrect_type
 10172 00007FD6 FF7001                  	push SOB_CLOSURE_ENV(rax)
 10173 00007FD9 FF5009                  	call SOB_CLOSURE_CODE(rax)
 10174 00007FDC 483D[02000000]          	cmp rax, sob_boolean_false
 10175 00007FE2 745C                              	je .L_if_else_002f
 10176 00007FE4 488B4528                          	mov rax, qword [rbp + 8 * (4 + 1)]
 10177 00007FE8 50                      	push rax
 10178 00007FE9 488B4520                	mov rax, qword [rbp + 8 * (4 + 0)]
 10179 00007FED 50                      	push rax
 10180 00007FEE 6A02                    	push 2
 10181 00007FF0 488B4510                	mov rax, qword [rbp + 8 * 2]
 10182 00007FF4 488B00                  	mov rax, qword [rax + 8 * 0]
 10183 00007FF7 488B4008                	mov rax, qword [rax + 8 * 1]
 10184                                  	assert_closure(rax)
    42 00007FFB 803805              <1>  cmp byte [%1], %2
    43 00007FFE 0F8586950000        <1>  jne L_error_incorrect_type
 10185 00008004 FF7001                  	push SOB_CLOSURE_ENV(rax)
 10186 00008007 FF7508                  	push qword [rbp + 8 * 1] ; old ret addr
 10187 0000800A FF7500                  	push qword [rbp] ; same the old rbp
 10188 0000800D BA05000000              	mov rdx, 2 + 3
 10189 00008012 488B4D18                	mov rcx, COUNT
 10190 00008016 488D4CCD20              	lea rcx, [rbp + 8*4 + rcx * 8]
 10191 0000801B 4889EF                  	mov rdi, rbp
 10192                                  .L_tc_recycle_frame_loop_0073:
 10193 0000801E 4883FA00                	cmp rdx, 0
 10194 00008022 7413                    	je .L_tc_recycle_frame_done_0073
 10195 00008024 4883E908                	sub rcx, 8
 10196 00008028 4883EF08                	sub rdi, 8
 10197 0000802C 488B37                  	mov rsi, [rdi]
 10198 0000802F 488931                  	mov qword [rcx], rsi
 10199 00008032 48FFCA                  	dec rdx
 10200 00008035 EBE7                    	jmp .L_tc_recycle_frame_loop_0073
 10201                                  .L_tc_recycle_frame_done_0073:
 10202 00008037 5D                      	pop rbp ; restore the old rbp
 10203 00008038 4889CC                  	mov rsp, rcx
 10204 0000803B FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 10205 0000803E EB50                    	jmp .L_if_end_002f
 10206                                            .L_if_else_002f:
 10207 00008040 6A00                              	push 0
 10208 00008042 488B4510                	mov rax, qword [rbp + 8 * 2]
 10209 00008046 488B4008                	mov rax, qword [rax + 8 * 1]
 10210 0000804A 488B00                  	mov rax, qword [rax + 8 * 0]
 10211                                  	assert_closure(rax)
    42 0000804D 803805              <1>  cmp byte [%1], %2
    43 00008050 0F8534950000        <1>  jne L_error_incorrect_type
 10212 00008056 FF7001                  	push SOB_CLOSURE_ENV(rax)
 10213 00008059 FF7508                  	push qword [rbp + 8 * 1] ; old ret addr
 10214 0000805C FF7500                  	push qword [rbp] ; same the old rbp
 10215 0000805F BA03000000              	mov rdx, 0 + 3
 10216 00008064 488B4D18                	mov rcx, COUNT
 10217 00008068 488D4CCD20              	lea rcx, [rbp + 8*4 + rcx * 8]
 10218 0000806D 4889EF                  	mov rdi, rbp
 10219                                  .L_tc_recycle_frame_loop_0074:
 10220 00008070 4883FA00                	cmp rdx, 0
 10221 00008074 7413                    	je .L_tc_recycle_frame_done_0074
 10222 00008076 4883E908                	sub rcx, 8
 10223 0000807A 4883EF08                	sub rdi, 8
 10224 0000807E 488B37                  	mov rsi, [rdi]
 10225 00008081 488931                  	mov qword [rcx], rsi
 10226 00008084 48FFCA                  	dec rdx
 10227 00008087 EBE7                    	jmp .L_tc_recycle_frame_loop_0074
 10228                                  .L_tc_recycle_frame_done_0074:
 10229 00008089 5D                      	pop rbp ; restore the old rbp
 10230 0000808A 4889CC                  	mov rsp, rcx
 10231 0000808D FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 10232                                  .L_if_end_002f:
 10233                                  .L_if_end_0030:
 10234 00008090 EB0A                    	jmp .L_if_end_0031
 10235                                            .L_if_else_0031:
 10236 00008092 48B8-                             	mov rax, L_constants + 0
 10236 00008094 [0000000000000000] 
 10237                                  .L_if_end_0031:
 10238                                  .L_if_end_0032:
 10239 0000809C C9                      	leave
 10240 0000809D C22000                  	ret 8 * (2 + 2)
 10241                                  .L_lambda_simple_end_0057:	; new closure is in rax
 10242 000080A0 C9                      	leave
 10243 000080A1 C22000                  	ret 8 * (2 + 2)
 10244                                  .L_lambda_simple_end_0056:	; new closure is in rax
 10245 000080A4 50                      	push rax
 10246 000080A5 6A01                    	push 1
 10247 000080A7 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 10248 000080AC E8E07C0000              	call malloc
 10249 000080B1 50                      	push rax
 10250 000080B2 BF08000000              	mov rdi, 8 * 1	; new rib
 10251 000080B7 E8D57C0000              	call malloc
 10252 000080BC 50                      	push rax
 10253 000080BD BF10000000              	mov rdi, 8 * 2	; extended env
 10254 000080C2 E8CA7C0000              	call malloc
 10255 000080C7 488B7D10                	mov rdi, ENV
 10256 000080CB BE00000000              	mov rsi, 0
 10257 000080D0 BA01000000              	mov rdx, 1
 10258                                  .L_lambda_simple_env_loop_0049:	; ext_env[i + 1] <-- env[i]
 10259 000080D5 4883FE01                	cmp rsi, 1
 10260 000080D9 7410                    	je .L_lambda_simple_env_end_0049
 10261 000080DB 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 10262 000080DF 48890CD0                	mov qword [rax + 8 * rdx], rcx
 10263 000080E3 48FFC6                  	inc rsi
 10264 000080E6 48FFC2                  	inc rdx
 10265 000080E9 EBEA                    	jmp .L_lambda_simple_env_loop_0049
 10266                                  .L_lambda_simple_env_end_0049:
 10267 000080EB 5B                      	pop rbx
 10268 000080EC BE00000000              	mov rsi, 0
 10269                                  .L_lambda_simple_params_loop_0049:	; copy params
 10270 000080F1 4883FE01                	cmp rsi, 1
 10271 000080F5 740E                    	je .L_lambda_simple_params_end_0049
 10272 000080F7 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 10273 000080FC 488914F3                	mov qword [rbx + 8 * rsi], rdx
 10274 00008100 48FFC6                  	inc rsi
 10275 00008103 EBEC                    	jmp .L_lambda_simple_params_loop_0049
 10276                                  .L_lambda_simple_params_end_0049:
 10277 00008105 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 10278 00008108 4889C3                  	mov rbx, rax
 10279 0000810B 58                      	pop rax
 10280 0000810C C60005                  	mov byte [rax], T_closure
 10281 0000810F 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 10282 00008113 48C74009[20810000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0049
 10283 0000811B E9830E0000              	jmp .L_lambda_simple_end_0049
 10284                                  .L_lambda_simple_code_0049:	; lambda-simple body
 10285 00008120 48837C241001            	cmp qword [rsp + 8 * 2], 1
 10286 00008126 740B                    	je .L_lambda_simple_arity_check_ok_0049
 10287 00008128 FF742410                	push qword [rsp + 8 * 2]
 10288 0000812C 6A01                    	push 1
 10289 0000812E E9177C0000              	jmp L_error_incorrect_arity_simple
 10290                                  .L_lambda_simple_arity_check_ok_0049:
 10291 00008133 C8000000                	enter 0, 0
 10292 00008137 488B0425[38010000]      	mov rax, qword [free_var_39]
 10293 0000813F 50                      	push rax
 10294 00008140 488B0425[40010000]      	mov rax, qword [free_var_40]
 10295 00008148 50                      	push rax
 10296 00008149 6A02                    	push 2
 10297 0000814B 488B4520                	mov rax, qword [rbp + 8 * (4 + 0)]
 10298                                  	assert_closure(rax)
    42 0000814F 803805              <1>  cmp byte [%1], %2
    43 00008152 0F8532940000        <1>  jne L_error_incorrect_type
 10299 00008158 FF7001                  	push SOB_CLOSURE_ENV(rax)
 10300 0000815B FF5009                  	call SOB_CLOSURE_CODE(rax)
 10301 0000815E 50                      	push rax
 10302 0000815F 6A01                    	push 1
 10303 00008161 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 10304 00008166 E8267C0000              	call malloc
 10305 0000816B 50                      	push rax
 10306 0000816C BF08000000              	mov rdi, 8 * 1	; new rib
 10307 00008171 E81B7C0000              	call malloc
 10308 00008176 50                      	push rax
 10309 00008177 BF18000000              	mov rdi, 8 * 3	; extended env
 10310 0000817C E8107C0000              	call malloc
 10311 00008181 488B7D10                	mov rdi, ENV
 10312 00008185 BE00000000              	mov rsi, 0
 10313 0000818A BA01000000              	mov rdx, 1
 10314                                  .L_lambda_simple_env_loop_004a:	; ext_env[i + 1] <-- env[i]
 10315 0000818F 4883FE02                	cmp rsi, 2
 10316 00008193 7410                    	je .L_lambda_simple_env_end_004a
 10317 00008195 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 10318 00008199 48890CD0                	mov qword [rax + 8 * rdx], rcx
 10319 0000819D 48FFC6                  	inc rsi
 10320 000081A0 48FFC2                  	inc rdx
 10321 000081A3 EBEA                    	jmp .L_lambda_simple_env_loop_004a
 10322                                  .L_lambda_simple_env_end_004a:
 10323 000081A5 5B                      	pop rbx
 10324 000081A6 BE00000000              	mov rsi, 0
 10325                                  .L_lambda_simple_params_loop_004a:	; copy params
 10326 000081AB 4883FE01                	cmp rsi, 1
 10327 000081AF 740E                    	je .L_lambda_simple_params_end_004a
 10328 000081B1 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 10329 000081B6 488914F3                	mov qword [rbx + 8 * rsi], rdx
 10330 000081BA 48FFC6                  	inc rsi
 10331 000081BD EBEC                    	jmp .L_lambda_simple_params_loop_004a
 10332                                  .L_lambda_simple_params_end_004a:
 10333 000081BF 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 10334 000081C2 4889C3                  	mov rbx, rax
 10335 000081C5 58                      	pop rax
 10336 000081C6 C60005                  	mov byte [rax], T_closure
 10337 000081C9 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 10338 000081CD 48C74009[DA810000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_004a
 10339 000081D5 E9820D0000              	jmp .L_lambda_simple_end_004a
 10340                                  .L_lambda_simple_code_004a:	; lambda-simple body
 10341 000081DA 48837C241001            	cmp qword [rsp + 8 * 2], 1
 10342 000081E0 740B                    	je .L_lambda_simple_arity_check_ok_004a
 10343 000081E2 FF742410                	push qword [rsp + 8 * 2]
 10344 000081E6 6A01                    	push 1
 10345 000081E8 E95D7B0000              	jmp L_error_incorrect_arity_simple
 10346                                  .L_lambda_simple_arity_check_ok_004a:
 10347 000081ED C8000000                	enter 0, 0
 10348 000081F1 488B0425[48010000]      	mov rax, qword [free_var_41]
 10349 000081F9 50                      	push rax
 10350 000081FA 488B0425[50010000]      	mov rax, qword [free_var_42]
 10351 00008202 50                      	push rax
 10352 00008203 6A02                    	push 2
 10353 00008205 488B4510                	mov rax, qword [rbp + 8 * 2]
 10354 00008209 488B00                  	mov rax, qword [rax + 8 * 0]
 10355 0000820C 488B00                  	mov rax, qword [rax + 8 * 0]
 10356                                  	assert_closure(rax)
    42 0000820F 803805              <1>  cmp byte [%1], %2
    43 00008212 0F8572930000        <1>  jne L_error_incorrect_type
 10357 00008218 FF7001                  	push SOB_CLOSURE_ENV(rax)
 10358 0000821B FF5009                  	call SOB_CLOSURE_CODE(rax)
 10359 0000821E 50                      	push rax
 10360 0000821F 6A01                    	push 1
 10361 00008221 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 10362 00008226 E8667B0000              	call malloc
 10363 0000822B 50                      	push rax
 10364 0000822C BF08000000              	mov rdi, 8 * 1	; new rib
 10365 00008231 E85B7B0000              	call malloc
 10366 00008236 50                      	push rax
 10367 00008237 BF20000000              	mov rdi, 8 * 4	; extended env
 10368 0000823C E8507B0000              	call malloc
 10369 00008241 488B7D10                	mov rdi, ENV
 10370 00008245 BE00000000              	mov rsi, 0
 10371 0000824A BA01000000              	mov rdx, 1
 10372                                  .L_lambda_simple_env_loop_004b:	; ext_env[i + 1] <-- env[i]
 10373 0000824F 4883FE03                	cmp rsi, 3
 10374 00008253 7410                    	je .L_lambda_simple_env_end_004b
 10375 00008255 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 10376 00008259 48890CD0                	mov qword [rax + 8 * rdx], rcx
 10377 0000825D 48FFC6                  	inc rsi
 10378 00008260 48FFC2                  	inc rdx
 10379 00008263 EBEA                    	jmp .L_lambda_simple_env_loop_004b
 10380                                  .L_lambda_simple_env_end_004b:
 10381 00008265 5B                      	pop rbx
 10382 00008266 BE00000000              	mov rsi, 0
 10383                                  .L_lambda_simple_params_loop_004b:	; copy params
 10384 0000826B 4883FE01                	cmp rsi, 1
 10385 0000826F 740E                    	je .L_lambda_simple_params_end_004b
 10386 00008271 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 10387 00008276 488914F3                	mov qword [rbx + 8 * rsi], rdx
 10388 0000827A 48FFC6                  	inc rsi
 10389 0000827D EBEC                    	jmp .L_lambda_simple_params_loop_004b
 10390                                  .L_lambda_simple_params_end_004b:
 10391 0000827F 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 10392 00008282 4889C3                  	mov rbx, rax
 10393 00008285 58                      	pop rax
 10394 00008286 C60005                  	mov byte [rax], T_closure
 10395 00008289 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 10396 0000828D 48C74009[9A820000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_004b
 10397 00008295 E97B0C0000              	jmp .L_lambda_simple_end_004b
 10398                                  .L_lambda_simple_code_004b:	; lambda-simple body
 10399 0000829A 48837C241001            	cmp qword [rsp + 8 * 2], 1
 10400 000082A0 740B                    	je .L_lambda_simple_arity_check_ok_004b
 10401 000082A2 FF742410                	push qword [rsp + 8 * 2]
 10402 000082A6 6A01                    	push 1
 10403 000082A8 E99D7A0000              	jmp L_error_incorrect_arity_simple
 10404                                  .L_lambda_simple_arity_check_ok_004b:
 10405 000082AD C8000000                	enter 0, 0
 10406 000082B1 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 10407 000082B6 E8D67A0000              	call malloc
 10408 000082BB 50                      	push rax
 10409 000082BC BF08000000              	mov rdi, 8 * 1	; new rib
 10410 000082C1 E8CB7A0000              	call malloc
 10411 000082C6 50                      	push rax
 10412 000082C7 BF28000000              	mov rdi, 8 * 5	; extended env
 10413 000082CC E8C07A0000              	call malloc
 10414 000082D1 488B7D10                	mov rdi, ENV
 10415 000082D5 BE00000000              	mov rsi, 0
 10416 000082DA BA01000000              	mov rdx, 1
 10417                                  .L_lambda_simple_env_loop_0055:	; ext_env[i + 1] <-- env[i]
 10418 000082DF 4883FE04                	cmp rsi, 4
 10419 000082E3 7410                    	je .L_lambda_simple_env_end_0055
 10420 000082E5 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 10421 000082E9 48890CD0                	mov qword [rax + 8 * rdx], rcx
 10422 000082ED 48FFC6                  	inc rsi
 10423 000082F0 48FFC2                  	inc rdx
 10424 000082F3 EBEA                    	jmp .L_lambda_simple_env_loop_0055
 10425                                  .L_lambda_simple_env_end_0055:
 10426 000082F5 5B                      	pop rbx
 10427 000082F6 BE00000000              	mov rsi, 0
 10428                                  .L_lambda_simple_params_loop_0055:	; copy params
 10429 000082FB 4883FE01                	cmp rsi, 1
 10430 000082FF 740E                    	je .L_lambda_simple_params_end_0055
 10431 00008301 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 10432 00008306 488914F3                	mov qword [rbx + 8 * rsi], rdx
 10433 0000830A 48FFC6                  	inc rsi
 10434 0000830D EBEC                    	jmp .L_lambda_simple_params_loop_0055
 10435                                  .L_lambda_simple_params_end_0055:
 10436 0000830F 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 10437 00008312 4889C3                  	mov rbx, rax
 10438 00008315 58                      	pop rax
 10439 00008316 C60005                  	mov byte [rax], T_closure
 10440 00008319 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 10441 0000831D 48C74009[2A830000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0055
 10442 00008325 E98F000000              	jmp .L_lambda_simple_end_0055
 10443                                  .L_lambda_simple_code_0055:	; lambda-simple body
 10444 0000832A 48837C241002            	cmp qword [rsp + 8 * 2], 2
 10445 00008330 740B                    	je .L_lambda_simple_arity_check_ok_0055
 10446 00008332 FF742410                	push qword [rsp + 8 * 2]
 10447 00008336 6A02                    	push 2
 10448 00008338 E90D7A0000              	jmp L_error_incorrect_arity_simple
 10449                                  .L_lambda_simple_arity_check_ok_0055:
 10450 0000833D C8000000                	enter 0, 0
 10451 00008341 488B4528                	mov rax, qword [rbp + 8 * (4 + 1)]
 10452 00008345 50                      	push rax
 10453 00008346 488B4520                	mov rax, qword [rbp + 8 * (4 + 0)]
 10454 0000834A 50                      	push rax
 10455 0000834B 6A02                    	push 2
 10456 0000834D 488B4510                	mov rax, qword [rbp + 8 * 2]
 10457 00008351 488B4008                	mov rax, qword [rax + 8 * 1]
 10458 00008355 488B00                  	mov rax, qword [rax + 8 * 0]
 10459                                  	assert_closure(rax)
    42 00008358 803805              <1>  cmp byte [%1], %2
    43 0000835B 0F8529920000        <1>  jne L_error_incorrect_type
 10460 00008361 FF7001                  	push SOB_CLOSURE_ENV(rax)
 10461 00008364 FF5009                  	call SOB_CLOSURE_CODE(rax)
 10462 00008367 50                      	push rax
 10463 00008368 6A01                    	push 1
 10464 0000836A 488B0425[B0020000]      	mov rax, qword [free_var_86]
 10465                                  	assert_closure(rax)
    42 00008372 803805              <1>  cmp byte [%1], %2
    43 00008375 0F850F920000        <1>  jne L_error_incorrect_type
 10466 0000837B FF7001                  	push SOB_CLOSURE_ENV(rax)
 10467 0000837E FF7508                  	push qword [rbp + 8 * 1] ; old ret addr
 10468 00008381 FF7500                  	push qword [rbp] ; same the old rbp
 10469 00008384 BA04000000              	mov rdx, 1 + 3
 10470 00008389 488B4D18                	mov rcx, COUNT
 10471 0000838D 488D4CCD20              	lea rcx, [rbp + 8*4 + rcx * 8]
 10472 00008392 4889EF                  	mov rdi, rbp
 10473                                  .L_tc_recycle_frame_loop_006e:
 10474 00008395 4883FA00                	cmp rdx, 0
 10475 00008399 7413                    	je .L_tc_recycle_frame_done_006e
 10476 0000839B 4883E908                	sub rcx, 8
 10477 0000839F 4883EF08                	sub rdi, 8
 10478 000083A3 488B37                  	mov rsi, [rdi]
 10479 000083A6 488931                  	mov qword [rcx], rsi
 10480 000083A9 48FFCA                  	dec rdx
 10481 000083AC EBE7                    	jmp .L_tc_recycle_frame_loop_006e
 10482                                  .L_tc_recycle_frame_done_006e:
 10483 000083AE 5D                      	pop rbp ; restore the old rbp
 10484 000083AF 4889CC                  	mov rsp, rcx
 10485 000083B2 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 10486 000083B5 C9                      	leave
 10487 000083B6 C22000                  	ret 8 * (2 + 2)
 10488                                  .L_lambda_simple_end_0055:	; new closure is in rax
 10489 000083B9 50                      	push rax
 10490 000083BA 6A01                    	push 1
 10491 000083BC BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 10492 000083C1 E8CB790000              	call malloc
 10493 000083C6 50                      	push rax
 10494 000083C7 BF08000000              	mov rdi, 8 * 1	; new rib
 10495 000083CC E8C0790000              	call malloc
 10496 000083D1 50                      	push rax
 10497 000083D2 BF28000000              	mov rdi, 8 * 5	; extended env
 10498 000083D7 E8B5790000              	call malloc
 10499 000083DC 488B7D10                	mov rdi, ENV
 10500 000083E0 BE00000000              	mov rsi, 0
 10501 000083E5 BA01000000              	mov rdx, 1
 10502                                  .L_lambda_simple_env_loop_004c:	; ext_env[i + 1] <-- env[i]
 10503 000083EA 4883FE04                	cmp rsi, 4
 10504 000083EE 7410                    	je .L_lambda_simple_env_end_004c
 10505 000083F0 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 10506 000083F4 48890CD0                	mov qword [rax + 8 * rdx], rcx
 10507 000083F8 48FFC6                  	inc rsi
 10508 000083FB 48FFC2                  	inc rdx
 10509 000083FE EBEA                    	jmp .L_lambda_simple_env_loop_004c
 10510                                  .L_lambda_simple_env_end_004c:
 10511 00008400 5B                      	pop rbx
 10512 00008401 BE00000000              	mov rsi, 0
 10513                                  .L_lambda_simple_params_loop_004c:	; copy params
 10514 00008406 4883FE01                	cmp rsi, 1
 10515 0000840A 740E                    	je .L_lambda_simple_params_end_004c
 10516 0000840C 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 10517 00008411 488914F3                	mov qword [rbx + 8 * rsi], rdx
 10518 00008415 48FFC6                  	inc rsi
 10519 00008418 EBEC                    	jmp .L_lambda_simple_params_loop_004c
 10520                                  .L_lambda_simple_params_end_004c:
 10521 0000841A 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 10522 0000841D 4889C3                  	mov rbx, rax
 10523 00008420 58                      	pop rax
 10524 00008421 C60005                  	mov byte [rax], T_closure
 10525 00008424 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 10526 00008428 48C74009[35840000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_004c
 10527 00008430 E9990A0000              	jmp .L_lambda_simple_end_004c
 10528                                  .L_lambda_simple_code_004c:	; lambda-simple body
 10529 00008435 48837C241001            	cmp qword [rsp + 8 * 2], 1
 10530 0000843B 740B                    	je .L_lambda_simple_arity_check_ok_004c
 10531 0000843D FF742410                	push qword [rsp + 8 * 2]
 10532 00008441 6A01                    	push 1
 10533 00008443 E902790000              	jmp L_error_incorrect_arity_simple
 10534                                  .L_lambda_simple_arity_check_ok_004c:
 10535 00008448 C8000000                	enter 0, 0
 10536 0000844C BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 10537 00008451 E83B790000              	call malloc
 10538 00008456 50                      	push rax
 10539 00008457 BF08000000              	mov rdi, 8 * 1	; new rib
 10540 0000845C E830790000              	call malloc
 10541 00008461 50                      	push rax
 10542 00008462 BF30000000              	mov rdi, 8 * 6	; extended env
 10543 00008467 E825790000              	call malloc
 10544 0000846C 488B7D10                	mov rdi, ENV
 10545 00008470 BE00000000              	mov rsi, 0
 10546 00008475 BA01000000              	mov rdx, 1
 10547                                  .L_lambda_simple_env_loop_0054:	; ext_env[i + 1] <-- env[i]
 10548 0000847A 4883FE05                	cmp rsi, 5
 10549 0000847E 7410                    	je .L_lambda_simple_env_end_0054
 10550 00008480 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 10551 00008484 48890CD0                	mov qword [rax + 8 * rdx], rcx
 10552 00008488 48FFC6                  	inc rsi
 10553 0000848B 48FFC2                  	inc rdx
 10554 0000848E EBEA                    	jmp .L_lambda_simple_env_loop_0054
 10555                                  .L_lambda_simple_env_end_0054:
 10556 00008490 5B                      	pop rbx
 10557 00008491 BE00000000              	mov rsi, 0
 10558                                  .L_lambda_simple_params_loop_0054:	; copy params
 10559 00008496 4883FE01                	cmp rsi, 1
 10560 0000849A 740E                    	je .L_lambda_simple_params_end_0054
 10561 0000849C 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 10562 000084A1 488914F3                	mov qword [rbx + 8 * rsi], rdx
 10563 000084A5 48FFC6                  	inc rsi
 10564 000084A8 EBEC                    	jmp .L_lambda_simple_params_loop_0054
 10565                                  .L_lambda_simple_params_end_0054:
 10566 000084AA 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 10567 000084AD 4889C3                  	mov rbx, rax
 10568 000084B0 58                      	pop rax
 10569 000084B1 C60005                  	mov byte [rax], T_closure
 10570 000084B4 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 10571 000084B8 48C74009[C2840000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0054
 10572 000084C0 EB75                    	jmp .L_lambda_simple_end_0054
 10573                                  .L_lambda_simple_code_0054:	; lambda-simple body
 10574 000084C2 48837C241002            	cmp qword [rsp + 8 * 2], 2
 10575 000084C8 740B                    	je .L_lambda_simple_arity_check_ok_0054
 10576 000084CA FF742410                	push qword [rsp + 8 * 2]
 10577 000084CE 6A02                    	push 2
 10578 000084D0 E975780000              	jmp L_error_incorrect_arity_simple
 10579                                  .L_lambda_simple_arity_check_ok_0054:
 10580 000084D5 C8000000                	enter 0, 0
 10581 000084D9 488B4520                	mov rax, qword [rbp + 8 * (4 + 0)]
 10582 000084DD 50                      	push rax
 10583 000084DE 488B4528                	mov rax, qword [rbp + 8 * (4 + 1)]
 10584 000084E2 50                      	push rax
 10585 000084E3 6A02                    	push 2
 10586 000084E5 488B4510                	mov rax, qword [rbp + 8 * 2]
 10587 000084E9 488B4010                	mov rax, qword [rax + 8 * 2]
 10588 000084ED 488B00                  	mov rax, qword [rax + 8 * 0]
 10589                                  	assert_closure(rax)
    42 000084F0 803805              <1>  cmp byte [%1], %2
    43 000084F3 0F8591900000        <1>  jne L_error_incorrect_type
 10590 000084F9 FF7001                  	push SOB_CLOSURE_ENV(rax)
 10591 000084FC FF7508                  	push qword [rbp + 8 * 1] ; old ret addr
 10592 000084FF FF7500                  	push qword [rbp] ; same the old rbp
 10593 00008502 BA05000000              	mov rdx, 2 + 3
 10594 00008507 488B4D18                	mov rcx, COUNT
 10595 0000850B 488D4CCD20              	lea rcx, [rbp + 8*4 + rcx * 8]
 10596 00008510 4889EF                  	mov rdi, rbp
 10597                                  .L_tc_recycle_frame_loop_006d:
 10598 00008513 4883FA00                	cmp rdx, 0
 10599 00008517 7413                    	je .L_tc_recycle_frame_done_006d
 10600 00008519 4883E908                	sub rcx, 8
 10601 0000851D 4883EF08                	sub rdi, 8
 10602 00008521 488B37                  	mov rsi, [rdi]
 10603 00008524 488931                  	mov qword [rcx], rsi
 10604 00008527 48FFCA                  	dec rdx
 10605 0000852A EBE7                    	jmp .L_tc_recycle_frame_loop_006d
 10606                                  .L_tc_recycle_frame_done_006d:
 10607 0000852C 5D                      	pop rbp ; restore the old rbp
 10608 0000852D 4889CC                  	mov rsp, rcx
 10609 00008530 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 10610 00008533 C9                      	leave
 10611 00008534 C22000                  	ret 8 * (2 + 2)
 10612                                  .L_lambda_simple_end_0054:	; new closure is in rax
 10613 00008537 50                      	push rax
 10614 00008538 6A01                    	push 1
 10615 0000853A BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 10616 0000853F E84D780000              	call malloc
 10617 00008544 50                      	push rax
 10618 00008545 BF08000000              	mov rdi, 8 * 1	; new rib
 10619 0000854A E842780000              	call malloc
 10620 0000854F 50                      	push rax
 10621 00008550 BF30000000              	mov rdi, 8 * 6	; extended env
 10622 00008555 E837780000              	call malloc
 10623 0000855A 488B7D10                	mov rdi, ENV
 10624 0000855E BE00000000              	mov rsi, 0
 10625 00008563 BA01000000              	mov rdx, 1
 10626                                  .L_lambda_simple_env_loop_004d:	; ext_env[i + 1] <-- env[i]
 10627 00008568 4883FE05                	cmp rsi, 5
 10628 0000856C 7410                    	je .L_lambda_simple_env_end_004d
 10629 0000856E 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 10630 00008572 48890CD0                	mov qword [rax + 8 * rdx], rcx
 10631 00008576 48FFC6                  	inc rsi
 10632 00008579 48FFC2                  	inc rdx
 10633 0000857C EBEA                    	jmp .L_lambda_simple_env_loop_004d
 10634                                  .L_lambda_simple_env_end_004d:
 10635 0000857E 5B                      	pop rbx
 10636 0000857F BE00000000              	mov rsi, 0
 10637                                  .L_lambda_simple_params_loop_004d:	; copy params
 10638 00008584 4883FE01                	cmp rsi, 1
 10639 00008588 740E                    	je .L_lambda_simple_params_end_004d
 10640 0000858A 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 10641 0000858F 488914F3                	mov qword [rbx + 8 * rsi], rdx
 10642 00008593 48FFC6                  	inc rsi
 10643 00008596 EBEC                    	jmp .L_lambda_simple_params_loop_004d
 10644                                  .L_lambda_simple_params_end_004d:
 10645 00008598 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 10646 0000859B 4889C3                  	mov rbx, rax
 10647 0000859E 58                      	pop rax
 10648 0000859F C60005                  	mov byte [rax], T_closure
 10649 000085A2 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 10650 000085A6 48C74009[B3850000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_004d
 10651 000085AE E9D4080000              	jmp .L_lambda_simple_end_004d
 10652                                  .L_lambda_simple_code_004d:	; lambda-simple body
 10653 000085B3 48837C241001            	cmp qword [rsp + 8 * 2], 1
 10654 000085B9 740B                    	je .L_lambda_simple_arity_check_ok_004d
 10655 000085BB FF742410                	push qword [rsp + 8 * 2]
 10656 000085BF 6A01                    	push 1
 10657 000085C1 E984770000              	jmp L_error_incorrect_arity_simple
 10658                                  .L_lambda_simple_arity_check_ok_004d:
 10659 000085C6 C8000000                	enter 0, 0
 10660 000085CA BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 10661 000085CF E8BD770000              	call malloc
 10662 000085D4 50                      	push rax
 10663 000085D5 BF08000000              	mov rdi, 8 * 1	; new rib
 10664 000085DA E8B2770000              	call malloc
 10665 000085DF 50                      	push rax
 10666 000085E0 BF38000000              	mov rdi, 8 * 7	; extended env
 10667 000085E5 E8A7770000              	call malloc
 10668 000085EA 488B7D10                	mov rdi, ENV
 10669 000085EE BE00000000              	mov rsi, 0
 10670 000085F3 BA01000000              	mov rdx, 1
 10671                                  .L_lambda_simple_env_loop_0053:	; ext_env[i + 1] <-- env[i]
 10672 000085F8 4883FE06                	cmp rsi, 6
 10673 000085FC 7410                    	je .L_lambda_simple_env_end_0053
 10674 000085FE 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 10675 00008602 48890CD0                	mov qword [rax + 8 * rdx], rcx
 10676 00008606 48FFC6                  	inc rsi
 10677 00008609 48FFC2                  	inc rdx
 10678 0000860C EBEA                    	jmp .L_lambda_simple_env_loop_0053
 10679                                  .L_lambda_simple_env_end_0053:
 10680 0000860E 5B                      	pop rbx
 10681 0000860F BE00000000              	mov rsi, 0
 10682                                  .L_lambda_simple_params_loop_0053:	; copy params
 10683 00008614 4883FE01                	cmp rsi, 1
 10684 00008618 740E                    	je .L_lambda_simple_params_end_0053
 10685 0000861A 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 10686 0000861F 488914F3                	mov qword [rbx + 8 * rsi], rdx
 10687 00008623 48FFC6                  	inc rsi
 10688 00008626 EBEC                    	jmp .L_lambda_simple_params_loop_0053
 10689                                  .L_lambda_simple_params_end_0053:
 10690 00008628 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 10691 0000862B 4889C3                  	mov rbx, rax
 10692 0000862E 58                      	pop rax
 10693 0000862F C60005                  	mov byte [rax], T_closure
 10694 00008632 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 10695 00008636 48C74009[43860000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0053
 10696 0000863E E98E000000              	jmp .L_lambda_simple_end_0053
 10697                                  .L_lambda_simple_code_0053:	; lambda-simple body
 10698 00008643 48837C241002            	cmp qword [rsp + 8 * 2], 2
 10699 00008649 740B                    	je .L_lambda_simple_arity_check_ok_0053
 10700 0000864B FF742410                	push qword [rsp + 8 * 2]
 10701 0000864F 6A02                    	push 2
 10702 00008651 E9F4760000              	jmp L_error_incorrect_arity_simple
 10703                                  .L_lambda_simple_arity_check_ok_0053:
 10704 00008656 C8000000                	enter 0, 0
 10705 0000865A 488B4528                	mov rax, qword [rbp + 8 * (4 + 1)]
 10706 0000865E 50                      	push rax
 10707 0000865F 488B4520                	mov rax, qword [rbp + 8 * (4 + 0)]
 10708 00008663 50                      	push rax
 10709 00008664 6A02                    	push 2
 10710 00008666 488B4510                	mov rax, qword [rbp + 8 * 2]
 10711 0000866A 488B00                  	mov rax, qword [rax + 8 * 0]
 10712 0000866D 488B00                  	mov rax, qword [rax + 8 * 0]
 10713                                  	assert_closure(rax)
    42 00008670 803805              <1>  cmp byte [%1], %2
    43 00008673 0F85118F0000        <1>  jne L_error_incorrect_type
 10714 00008679 FF7001                  	push SOB_CLOSURE_ENV(rax)
 10715 0000867C FF5009                  	call SOB_CLOSURE_CODE(rax)
 10716 0000867F 50                      	push rax
 10717 00008680 6A01                    	push 1
 10718 00008682 488B0425[B0020000]      	mov rax, qword [free_var_86]
 10719                                  	assert_closure(rax)
    42 0000868A 803805              <1>  cmp byte [%1], %2
    43 0000868D 0F85F78E0000        <1>  jne L_error_incorrect_type
 10720 00008693 FF7001                  	push SOB_CLOSURE_ENV(rax)
 10721 00008696 FF7508                  	push qword [rbp + 8 * 1] ; old ret addr
 10722 00008699 FF7500                  	push qword [rbp] ; same the old rbp
 10723 0000869C BA04000000              	mov rdx, 1 + 3
 10724 000086A1 488B4D18                	mov rcx, COUNT
 10725 000086A5 488D4CCD20              	lea rcx, [rbp + 8*4 + rcx * 8]
 10726 000086AA 4889EF                  	mov rdi, rbp
 10727                                  .L_tc_recycle_frame_loop_006c:
 10728 000086AD 4883FA00                	cmp rdx, 0
 10729 000086B1 7413                    	je .L_tc_recycle_frame_done_006c
 10730 000086B3 4883E908                	sub rcx, 8
 10731 000086B7 4883EF08                	sub rdi, 8
 10732 000086BB 488B37                  	mov rsi, [rdi]
 10733 000086BE 488931                  	mov qword [rcx], rsi
 10734 000086C1 48FFCA                  	dec rdx
 10735 000086C4 EBE7                    	jmp .L_tc_recycle_frame_loop_006c
 10736                                  .L_tc_recycle_frame_done_006c:
 10737 000086C6 5D                      	pop rbp ; restore the old rbp
 10738 000086C7 4889CC                  	mov rsp, rcx
 10739 000086CA FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 10740 000086CD C9                      	leave
 10741 000086CE C22000                  	ret 8 * (2 + 2)
 10742                                  .L_lambda_simple_end_0053:	; new closure is in rax
 10743 000086D1 50                      	push rax
 10744 000086D2 6A01                    	push 1
 10745 000086D4 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 10746 000086D9 E8B3760000              	call malloc
 10747 000086DE 50                      	push rax
 10748 000086DF BF08000000              	mov rdi, 8 * 1	; new rib
 10749 000086E4 E8A8760000              	call malloc
 10750 000086E9 50                      	push rax
 10751 000086EA BF38000000              	mov rdi, 8 * 7	; extended env
 10752 000086EF E89D760000              	call malloc
 10753 000086F4 488B7D10                	mov rdi, ENV
 10754 000086F8 BE00000000              	mov rsi, 0
 10755 000086FD BA01000000              	mov rdx, 1
 10756                                  .L_lambda_simple_env_loop_004e:	; ext_env[i + 1] <-- env[i]
 10757 00008702 4883FE06                	cmp rsi, 6
 10758 00008706 7410                    	je .L_lambda_simple_env_end_004e
 10759 00008708 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 10760 0000870C 48890CD0                	mov qword [rax + 8 * rdx], rcx
 10761 00008710 48FFC6                  	inc rsi
 10762 00008713 48FFC2                  	inc rdx
 10763 00008716 EBEA                    	jmp .L_lambda_simple_env_loop_004e
 10764                                  .L_lambda_simple_env_end_004e:
 10765 00008718 5B                      	pop rbx
 10766 00008719 BE00000000              	mov rsi, 0
 10767                                  .L_lambda_simple_params_loop_004e:	; copy params
 10768 0000871E 4883FE01                	cmp rsi, 1
 10769 00008722 740E                    	je .L_lambda_simple_params_end_004e
 10770 00008724 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 10771 00008729 488914F3                	mov qword [rbx + 8 * rsi], rdx
 10772 0000872D 48FFC6                  	inc rsi
 10773 00008730 EBEC                    	jmp .L_lambda_simple_params_loop_004e
 10774                                  .L_lambda_simple_params_end_004e:
 10775 00008732 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 10776 00008735 4889C3                  	mov rbx, rax
 10777 00008738 58                      	pop rax
 10778 00008739 C60005                  	mov byte [rax], T_closure
 10779 0000873C 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 10780 00008740 48C74009[4D870000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_004e
 10781 00008748 E9F3060000              	jmp .L_lambda_simple_end_004e
 10782                                  .L_lambda_simple_code_004e:	; lambda-simple body
 10783 0000874D 48837C241001            	cmp qword [rsp + 8 * 2], 1
 10784 00008753 740B                    	je .L_lambda_simple_arity_check_ok_004e
 10785 00008755 FF742410                	push qword [rsp + 8 * 2]
 10786 00008759 6A01                    	push 1
 10787 0000875B E9EA750000              	jmp L_error_incorrect_arity_simple
 10788                                  .L_lambda_simple_arity_check_ok_004e:
 10789 00008760 C8000000                	enter 0, 0
 10790 00008764 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 10791 00008769 E823760000              	call malloc
 10792 0000876E 50                      	push rax
 10793 0000876F BF08000000              	mov rdi, 8 * 1	; new rib
 10794 00008774 E818760000              	call malloc
 10795 00008779 50                      	push rax
 10796 0000877A BF40000000              	mov rdi, 8 * 8	; extended env
 10797 0000877F E80D760000              	call malloc
 10798 00008784 488B7D10                	mov rdi, ENV
 10799 00008788 BE00000000              	mov rsi, 0
 10800 0000878D BA01000000              	mov rdx, 1
 10801                                  .L_lambda_simple_env_loop_0050:	; ext_env[i + 1] <-- env[i]
 10802 00008792 4883FE07                	cmp rsi, 7
 10803 00008796 7410                    	je .L_lambda_simple_env_end_0050
 10804 00008798 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 10805 0000879C 48890CD0                	mov qword [rax + 8 * rdx], rcx
 10806 000087A0 48FFC6                  	inc rsi
 10807 000087A3 48FFC2                  	inc rdx
 10808 000087A6 EBEA                    	jmp .L_lambda_simple_env_loop_0050
 10809                                  .L_lambda_simple_env_end_0050:
 10810 000087A8 5B                      	pop rbx
 10811 000087A9 BE00000000              	mov rsi, 0
 10812                                  .L_lambda_simple_params_loop_0050:	; copy params
 10813 000087AE 4883FE01                	cmp rsi, 1
 10814 000087B2 740E                    	je .L_lambda_simple_params_end_0050
 10815 000087B4 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 10816 000087B9 488914F3                	mov qword [rbx + 8 * rsi], rdx
 10817 000087BD 48FFC6                  	inc rsi
 10818 000087C0 EBEC                    	jmp .L_lambda_simple_params_loop_0050
 10819                                  .L_lambda_simple_params_end_0050:
 10820 000087C2 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 10821 000087C5 4889C3                  	mov rbx, rax
 10822 000087C8 58                      	pop rax
 10823 000087C9 C60005                  	mov byte [rax], T_closure
 10824 000087CC 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 10825 000087D0 48C74009[DD870000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0050
 10826 000087D8 E987040000              	jmp .L_lambda_simple_end_0050
 10827                                  .L_lambda_simple_code_0050:	; lambda-simple body
 10828 000087DD 48837C241001            	cmp qword [rsp + 8 * 2], 1
 10829 000087E3 740B                    	je .L_lambda_simple_arity_check_ok_0050
 10830 000087E5 FF742410                	push qword [rsp + 8 * 2]
 10831 000087E9 6A01                    	push 1
 10832 000087EB E95A750000              	jmp L_error_incorrect_arity_simple
 10833                                  .L_lambda_simple_arity_check_ok_0050:
 10834 000087F0 C8000000                	enter 0, 0
 10835 000087F4 48B8-                   	mov rax, L_constants + 23
 10835 000087F6 [1700000000000000] 
 10836 000087FE 50                      	push rax
 10837 000087FF 6A01                    	push 1
 10838 00008801 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 10839 00008806 E886750000              	call malloc
 10840 0000880B 50                      	push rax
 10841 0000880C BF08000000              	mov rdi, 8 * 1	; new rib
 10842 00008811 E87B750000              	call malloc
 10843 00008816 50                      	push rax
 10844 00008817 BF48000000              	mov rdi, 8 * 9	; extended env
 10845 0000881C E870750000              	call malloc
 10846 00008821 488B7D10                	mov rdi, ENV
 10847 00008825 BE00000000              	mov rsi, 0
 10848 0000882A BA01000000              	mov rdx, 1
 10849                                  .L_lambda_simple_env_loop_0051:	; ext_env[i + 1] <-- env[i]
 10850 0000882F 4883FE08                	cmp rsi, 8
 10851 00008833 7410                    	je .L_lambda_simple_env_end_0051
 10852 00008835 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 10853 00008839 48890CD0                	mov qword [rax + 8 * rdx], rcx
 10854 0000883D 48FFC6                  	inc rsi
 10855 00008840 48FFC2                  	inc rdx
 10856 00008843 EBEA                    	jmp .L_lambda_simple_env_loop_0051
 10857                                  .L_lambda_simple_env_end_0051:
 10858 00008845 5B                      	pop rbx
 10859 00008846 BE00000000              	mov rsi, 0
 10860                                  .L_lambda_simple_params_loop_0051:	; copy params
 10861 0000884B 4883FE01                	cmp rsi, 1
 10862 0000884F 740E                    	je .L_lambda_simple_params_end_0051
 10863 00008851 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 10864 00008856 488914F3                	mov qword [rbx + 8 * rsi], rdx
 10865 0000885A 48FFC6                  	inc rsi
 10866 0000885D EBEC                    	jmp .L_lambda_simple_params_loop_0051
 10867                                  .L_lambda_simple_params_end_0051:
 10868 0000885F 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 10869 00008862 4889C3                  	mov rbx, rax
 10870 00008865 58                      	pop rax
 10871 00008866 C60005                  	mov byte [rax], T_closure
 10872 00008869 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 10873 0000886D 48C74009[7A880000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0051
 10874 00008875 E9A3030000              	jmp .L_lambda_simple_end_0051
 10875                                  .L_lambda_simple_code_0051:	; lambda-simple body
 10876 0000887A 48837C241001            	cmp qword [rsp + 8 * 2], 1
 10877 00008880 740B                    	je .L_lambda_simple_arity_check_ok_0051
 10878 00008882 FF742410                	push qword [rsp + 8 * 2]
 10879 00008886 6A01                    	push 1
 10880 00008888 E9BD740000              	jmp L_error_incorrect_arity_simple
 10881                                  .L_lambda_simple_arity_check_ok_0051:
 10882 0000888D C8000000                	enter 0, 0
 10883 00008891 488B4520                	mov rax, qword [rbp + 8 * (4 + 0)]
 10884 00008895 4889C2                  	mov rdx, rax
 10885 00008898 BF08000000              	mov rdi, 8
 10886 0000889D E8EF740000              	call malloc
 10887 000088A2 488910                  	mov qword[rax], rdx
 10888 000088A5 48894520                	mov qword [rbp + 8 * (4 + 0)], rax
 10889 000088A9 48B8-                   	mov rax, sob_void
 10889 000088AB [0000000000000000] 
 10890                                  
 10891 000088B3 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 10892 000088B8 E8D4740000              	call malloc
 10893 000088BD 50                      	push rax
 10894 000088BE BF08000000              	mov rdi, 8 * 1	; new rib
 10895 000088C3 E8C9740000              	call malloc
 10896 000088C8 50                      	push rax
 10897 000088C9 BF50000000              	mov rdi, 8 * 10	; extended env
 10898 000088CE E8BE740000              	call malloc
 10899 000088D3 488B7D10                	mov rdi, ENV
 10900 000088D7 BE00000000              	mov rsi, 0
 10901 000088DC BA01000000              	mov rdx, 1
 10902                                  .L_lambda_simple_env_loop_0052:	; ext_env[i + 1] <-- env[i]
 10903 000088E1 4883FE09                	cmp rsi, 9
 10904 000088E5 7410                    	je .L_lambda_simple_env_end_0052
 10905 000088E7 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 10906 000088EB 48890CD0                	mov qword [rax + 8 * rdx], rcx
 10907 000088EF 48FFC6                  	inc rsi
 10908 000088F2 48FFC2                  	inc rdx
 10909 000088F5 EBEA                    	jmp .L_lambda_simple_env_loop_0052
 10910                                  .L_lambda_simple_env_end_0052:
 10911 000088F7 5B                      	pop rbx
 10912 000088F8 BE00000000              	mov rsi, 0
 10913                                  .L_lambda_simple_params_loop_0052:	; copy params
 10914 000088FD 4883FE01                	cmp rsi, 1
 10915 00008901 740E                    	je .L_lambda_simple_params_end_0052
 10916 00008903 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 10917 00008908 488914F3                	mov qword [rbx + 8 * rsi], rdx
 10918 0000890C 48FFC6                  	inc rsi
 10919 0000890F EBEC                    	jmp .L_lambda_simple_params_loop_0052
 10920                                  .L_lambda_simple_params_end_0052:
 10921 00008911 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 10922 00008914 4889C3                  	mov rbx, rax
 10923 00008917 58                      	pop rax
 10924 00008918 C60005                  	mov byte [rax], T_closure
 10925 0000891B 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 10926 0000891F 48C74009[2C890000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0052
 10927 00008927 E92D010000              	jmp .L_lambda_simple_end_0052
 10928                                  .L_lambda_simple_code_0052:	; lambda-simple body
 10929 0000892C 48837C241002            	cmp qword [rsp + 8 * 2], 2
 10930 00008932 740B                    	je .L_lambda_simple_arity_check_ok_0052
 10931 00008934 FF742410                	push qword [rsp + 8 * 2]
 10932 00008938 6A02                    	push 2
 10933 0000893A E90B740000              	jmp L_error_incorrect_arity_simple
 10934                                  .L_lambda_simple_arity_check_ok_0052:
 10935 0000893F C8000000                	enter 0, 0
 10936 00008943 488B4528                	mov rax, qword [rbp + 8 * (4 + 1)]
 10937 00008947 50                      	push rax
 10938 00008948 6A01                    	push 1
 10939 0000894A 488B0425[00000000]      	mov rax, qword [free_var_0]
 10940                                  	assert_closure(rax)
    42 00008952 803805              <1>  cmp byte [%1], %2
    43 00008955 0F852F8C0000        <1>  jne L_error_incorrect_type
 10941 0000895B FF7001                  	push SOB_CLOSURE_ENV(rax)
 10942 0000895E FF5009                  	call SOB_CLOSURE_CODE(rax)
 10943 00008961 483D[02000000]          	cmp rax, sob_boolean_false
 10944 00008967 0F85E8000000            	jne .L_or_end_0004
 10945 0000896D 488B4528                	mov rax, qword [rbp + 8 * (4 + 1)]
 10946 00008971 50                      	push rax
 10947 00008972 6A01                    	push 1
 10948 00008974 488B0425[80000000]      	mov rax, qword [free_var_16]
 10949                                  	assert_closure(rax)
    42 0000897C 803805              <1>  cmp byte [%1], %2
    43 0000897F 0F85058C0000        <1>  jne L_error_incorrect_type
 10950 00008985 FF7001                  	push SOB_CLOSURE_ENV(rax)
 10951 00008988 FF5009                  	call SOB_CLOSURE_CODE(rax)
 10952 0000898B 50                      	push rax
 10953 0000898C 488B4520                	mov rax, qword [rbp + 8 * (4 + 0)]
 10954 00008990 50                      	push rax
 10955 00008991 6A02                    	push 2
 10956 00008993 488B4510                	mov rax, qword [rbp + 8 * 2]
 10957 00008997 488B4008                	mov rax, qword [rax + 8 * 1]
 10958 0000899B 488B00                  	mov rax, qword [rax + 8 * 0]
 10959                                  	assert_closure(rax)
    42 0000899E 803805              <1>  cmp byte [%1], %2
    43 000089A1 0F85E38B0000        <1>  jne L_error_incorrect_type
 10960 000089A7 FF7001                  	push SOB_CLOSURE_ENV(rax)
 10961 000089AA FF5009                  	call SOB_CLOSURE_CODE(rax)
 10962 000089AD 483D[02000000]          	cmp rax, sob_boolean_false
 10963 000089B3 0F8492000000                      	je .L_if_else_002c
 10964 000089B9 488B4528                          	mov rax, qword [rbp + 8 * (4 + 1)]
 10965 000089BD 50                      	push rax
 10966 000089BE 6A01                    	push 1
 10967 000089C0 488B0425[88000000]      	mov rax, qword [free_var_17]
 10968                                  	assert_closure(rax)
    42 000089C8 803805              <1>  cmp byte [%1], %2
    43 000089CB 0F85B98B0000        <1>  jne L_error_incorrect_type
 10969 000089D1 FF7001                  	push SOB_CLOSURE_ENV(rax)
 10970 000089D4 FF5009                  	call SOB_CLOSURE_CODE(rax)
 10971 000089D7 50                      	push rax
 10972 000089D8 488B4528                	mov rax, qword [rbp + 8 * (4 + 1)]
 10973 000089DC 50                      	push rax
 10974 000089DD 6A01                    	push 1
 10975 000089DF 488B0425[80000000]      	mov rax, qword [free_var_16]
 10976                                  	assert_closure(rax)
    42 000089E7 803805              <1>  cmp byte [%1], %2
    43 000089EA 0F859A8B0000        <1>  jne L_error_incorrect_type
 10977 000089F0 FF7001                  	push SOB_CLOSURE_ENV(rax)
 10978 000089F3 FF5009                  	call SOB_CLOSURE_CODE(rax)
 10979 000089F6 50                      	push rax
 10980 000089F7 6A02                    	push 2
 10981 000089F9 488B4510                	mov rax, qword [rbp + 8 * 2]
 10982 000089FD 488B00                  	mov rax, qword [rax + 8 * 0]
 10983 00008A00 488B00                  	mov rax, qword [rax + 8 * 0]
 10984 00008A03 488B00                  	mov rax, qword [rax]
 10985                                  	assert_closure(rax)
    42 00008A06 803805              <1>  cmp byte [%1], %2
    43 00008A09 0F857B8B0000        <1>  jne L_error_incorrect_type
 10986 00008A0F FF7001                  	push SOB_CLOSURE_ENV(rax)
 10987 00008A12 FF7508                  	push qword [rbp + 8 * 1] ; old ret addr
 10988 00008A15 FF7500                  	push qword [rbp] ; same the old rbp
 10989 00008A18 BA05000000              	mov rdx, 2 + 3
 10990 00008A1D 488B4D18                	mov rcx, COUNT
 10991 00008A21 488D4CCD20              	lea rcx, [rbp + 8*4 + rcx * 8]
 10992 00008A26 4889EF                  	mov rdi, rbp
 10993                                  .L_tc_recycle_frame_loop_006a:
 10994 00008A29 4883FA00                	cmp rdx, 0
 10995 00008A2D 7413                    	je .L_tc_recycle_frame_done_006a
 10996 00008A2F 4883E908                	sub rcx, 8
 10997 00008A33 4883EF08                	sub rdi, 8
 10998 00008A37 488B37                  	mov rsi, [rdi]
 10999 00008A3A 488931                  	mov qword [rcx], rsi
 11000 00008A3D 48FFCA                  	dec rdx
 11001 00008A40 EBE7                    	jmp .L_tc_recycle_frame_loop_006a
 11002                                  .L_tc_recycle_frame_done_006a:
 11003 00008A42 5D                      	pop rbp ; restore the old rbp
 11004 00008A43 4889CC                  	mov rsp, rcx
 11005 00008A46 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 11006 00008A49 EB0A                    	jmp .L_if_end_002c
 11007                                            .L_if_else_002c:
 11008 00008A4B 48B8-                             	mov rax, L_constants + 2
 11008 00008A4D [0200000000000000] 
 11009                                  .L_if_end_002c:
 11010                                  .L_or_end_0004:
 11011 00008A55 C9                      	leave
 11012 00008A56 C22000                  	ret 8 * (2 + 2)
 11013                                  .L_lambda_simple_end_0052:	; new closure is in rax
 11014 00008A59 50                      	push rax
 11015 00008A5A 488B4520                	mov rax, qword [rbp + 8 * (4 + 0)]
 11016 00008A5E 8F00                    	pop qword [rax]
 11017 00008A60 48B8-                   	mov rax, sob_void
 11017 00008A62 [0000000000000000] 
 11018                                  
 11019 00008A6A BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 11020 00008A6F E81D730000              	call malloc
 11021 00008A74 50                      	push rax
 11022 00008A75 BF08000000              	mov rdi, 8 * 1	; new rib
 11023 00008A7A E812730000              	call malloc
 11024 00008A7F 50                      	push rax
 11025 00008A80 BF50000000              	mov rdi, 8 * 10	; extended env
 11026 00008A85 E807730000              	call malloc
 11027 00008A8A 488B7D10                	mov rdi, ENV
 11028 00008A8E BE00000000              	mov rsi, 0
 11029 00008A93 BA01000000              	mov rdx, 1
 11030                                  .L_lambda_opt_env_loop_000e:	; ext_env[i + 1] <-- env[i]
 11031 00008A98 4883FE09                	cmp rsi, 9
 11032 00008A9C 7410                    	je .L_lambda_opt_env_end_000e
 11033 00008A9E 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 11034 00008AA2 48890CD0                	mov qword [rax + 8 * rdx], rcx
 11035 00008AA6 48FFC6                  	inc rsi
 11036 00008AA9 48FFC2                  	inc rdx
 11037 00008AAC EBEA                    	jmp .L_lambda_opt_env_loop_000e
 11038                                  .L_lambda_opt_env_end_000e:
 11039 00008AAE 5B                      	pop rbx
 11040 00008AAF BE00000000              	mov rsi, 0
 11041                                  .L_lambda_opt_params_loop_000e:	; copy params
 11042 00008AB4 4883FE01                	cmp rsi, 1
 11043 00008AB8 740E                    	je .L_lambda_opt_params_end_000e
 11044 00008ABA 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 11045 00008ABF 488914F3                	mov qword [rbx + 8 * rsi], rdx
 11046 00008AC3 48FFC6                  	inc rsi
 11047 00008AC6 EBEC                    	jmp .L_lambda_opt_params_loop_000e
 11048                                  .L_lambda_opt_params_end_000e:
 11049 00008AC8 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 11050 00008ACB 4889C3                  	mov rbx, rax
 11051 00008ACE 58                      	pop rax
 11052 00008ACF C60005                  	mov byte [rax], T_closure
 11053 00008AD2 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 11054 00008AD6 48C74009[E38A0000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_opt_code_000e
 11055 00008ADE E936010000              	jmp .L_lambda_opt_end_000e
 11056                                  .L_lambda_opt_code_000e:	; lambda-opt body
 11057 00008AE3 48837C241001            	cmp qword [rsp + 8 * 2], 1
 11058 00008AE9 740D                    	je .L_lambda_opt_arity_check_exact_000e
 11059 00008AEB 7F43                    	jg .L_lambda_opt_arity_check_more_000e
 11060 00008AED FF742410                	push qword [rsp + 8 * 2]
 11061 00008AF1 6A01                    	push 1
 11062 00008AF3 E966720000              	jmp L_error_incorrect_arity_opt
 11063                                  .L_lambda_opt_arity_check_exact_000e:
 11064 00008AF8 48C744241002000000      	mov qword [rsp + 8 * 2], 2
 11065 00008B01 BA04000000              	mov rdx, 4
 11066 00008B06 FF3424                  	push qword [rsp]
 11067 00008B09 BE01000000              	mov rsi, 1
 11068                                  .L_lambda_opt_stack_shrink_loop_0028:
 11069 00008B0E 4839D6                  	cmp rsi, rdx
 11070 00008B11 7411                    	je .L_lambda_opt_stack_shrink_loop_exit_0028
 11071 00008B13 488D5CF408              	lea rbx, [rsp + 8 + rsi * 8]
 11072 00008B18 488B0B                  	mov rcx, [rbx]
 11073 00008B1B 48894BF8                	mov qword [rbx - 8], rcx
 11074 00008B1F 48FFC6                  	inc rsi
 11075 00008B22 EBEA                    	jmp .L_lambda_opt_stack_shrink_loop_0028
 11076                                  .L_lambda_opt_stack_shrink_loop_exit_0028:
 11077 00008B24 48C703[01000000]        	mov qword [rbx], sob_nil
 11078 00008B2B E985000000              	jmp .L_lambda_opt_stack_adjusted_000e
 11079                                  .L_lambda_opt_arity_check_more_000e:
 11080 00008B30 488B542410              	mov rdx, qword [rsp + 8 * 2]
 11081 00008B35 4883EA01                	sub rdx, 1
 11082 00008B39 48C744241002000000      	mov qword [rsp + 8 * 2], 2
 11083 00008B42 BE00000000              	mov rsi, 0
 11084 00008B47 488D5CD418              	lea rbx, [rsp + 2 * 8 + 1 * 8 + rdx * 8]
 11085 00008B4C 48B9-                   	mov rcx, sob_nil
 11085 00008B4E [0100000000000000] 
 11086                                  .L_lambda_opt_stack_shrink_loop_0029:
 11087 00008B56 4839D6                  	cmp rsi, rdx
 11088 00008B59 7427                    je .L_lambda_opt_stack_shrink_loop_exit_0029
 11089 00008B5B BF11000000              	mov rdi, 17 ; 1+8+8
 11090 00008B60 E82C720000              	call malloc
 11091 00008B65 48894809                	mov SOB_PAIR_CDR(rax), rcx
 11092 00008B69 48F7DE                  	neg rsi
 11093 00008B6C 488B0CF3                	mov rcx, qword [rbx + rsi * 8]
 11094 00008B70 48F7DE                  	neg rsi
 11095 00008B73 48894801                	mov SOB_PAIR_CAR(rax), rcx
 11096 00008B77 C60021                  	mov byte [rax], T_pair
 11097 00008B7A 4889C1                  	mov rcx, rax
 11098 00008B7D 48FFC6                  	inc rsi
 11099 00008B80 EBD4                    	jmp .L_lambda_opt_stack_shrink_loop_0029
 11100                                  .L_lambda_opt_stack_shrink_loop_exit_0029:
 11101 00008B82 48890B                  	mov qword [rbx], rcx
 11102 00008B85 4883EB08                	sub rbx, 8
 11103 00008B89 4889E7                  	mov rdi, rsp
 11104 00008B8C 4883C718                	add rdi, 24
 11105 00008B90 BE04000000              	mov rsi, 4
 11106                                  .L_lambda_opt_stack_shrink_loop_002a:
 11107 00008B95 4883FE00                	cmp rsi,0
 11108 00008B99 7413                    	je .L_lambda_opt_stack_shrink_loop_exit_002a
 11109 00008B9B 488B0F                  	mov rcx, qword [rdi]
 11110 00008B9E 48890B                  	mov [rbx], rcx
 11111 00008BA1 48FFCE                  	dec rsi
 11112 00008BA4 4883EB08                	sub rbx, 8
 11113 00008BA8 4883EF08                	sub rdi, 8
 11114 00008BAC EBE7                    	jmp .L_lambda_opt_stack_shrink_loop_002a
 11115                                  .L_lambda_opt_stack_shrink_loop_exit_002a:
 11116 00008BAE 4883C308                	add rbx, 8
 11117 00008BB2 4889DC                  	mov rsp, rbx
 11118                                  .L_lambda_opt_stack_adjusted_000e:
 11119 00008BB5 C8000000                	enter 0, 0
 11120 00008BB9 488B4528                	mov rax, qword [rbp + 8 * (4 + 1)]
 11121 00008BBD 50                      	push rax
 11122 00008BBE 488B4520                	mov rax, qword [rbp + 8 * (4 + 0)]
 11123 00008BC2 50                      	push rax
 11124 00008BC3 6A02                    	push 2
 11125 00008BC5 488B4510                	mov rax, qword [rbp + 8 * 2]
 11126 00008BC9 488B00                  	mov rax, qword [rax + 8 * 0]
 11127 00008BCC 488B00                  	mov rax, qword [rax + 8 * 0]
 11128 00008BCF 488B00                  	mov rax, qword [rax]
 11129                                  	assert_closure(rax)
    42 00008BD2 803805              <1>  cmp byte [%1], %2
    43 00008BD5 0F85AF890000        <1>  jne L_error_incorrect_type
 11130 00008BDB FF7001                  	push SOB_CLOSURE_ENV(rax)
 11131 00008BDE FF7508                  	push qword [rbp + 8 * 1] ; old ret addr
 11132 00008BE1 FF7500                  	push qword [rbp] ; same the old rbp
 11133 00008BE4 BA05000000              	mov rdx, 2 + 3
 11134 00008BE9 488B4D18                	mov rcx, COUNT
 11135 00008BED 488D4CCD20              	lea rcx, [rbp + 8*4 + rcx * 8]
 11136 00008BF2 4889EF                  	mov rdi, rbp
 11137                                  .L_tc_recycle_frame_loop_006b:
 11138 00008BF5 4883FA00                	cmp rdx, 0
 11139 00008BF9 7413                    	je .L_tc_recycle_frame_done_006b
 11140 00008BFB 4883E908                	sub rcx, 8
 11141 00008BFF 4883EF08                	sub rdi, 8
 11142 00008C03 488B37                  	mov rsi, [rdi]
 11143 00008C06 488931                  	mov qword [rcx], rsi
 11144 00008C09 48FFCA                  	dec rdx
 11145 00008C0C EBE7                    	jmp .L_tc_recycle_frame_loop_006b
 11146                                  .L_tc_recycle_frame_done_006b:
 11147 00008C0E 5D                      	pop rbp ; restore the old rbp
 11148 00008C0F 4889CC                  	mov rsp, rcx
 11149 00008C12 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 11150 00008C15 C9                      	leave
 11151 00008C16 C22000                  	ret 8 * (2 + 2)
 11152                                  .L_lambda_opt_end_000e:	; new closure is in rax
 11153 00008C19 C9                      	leave
 11154 00008C1A C21800                  	ret 8 * (2 + 1)
 11155                                  .L_lambda_simple_end_0051:	; new closure is in rax
 11156                                  	assert_closure(rax)
    42 00008C1D 803805              <1>  cmp byte [%1], %2
    43 00008C20 0F8564890000        <1>  jne L_error_incorrect_type
 11157 00008C26 FF7001                  	push SOB_CLOSURE_ENV(rax)
 11158 00008C29 FF7508                  	push qword [rbp + 8 * 1] ; old ret addr
 11159 00008C2C FF7500                  	push qword [rbp] ; same the old rbp
 11160 00008C2F BA04000000              	mov rdx, 1 + 3
 11161 00008C34 488B4D18                	mov rcx, COUNT
 11162 00008C38 488D4CCD20              	lea rcx, [rbp + 8*4 + rcx * 8]
 11163 00008C3D 4889EF                  	mov rdi, rbp
 11164                                  .L_tc_recycle_frame_loop_0069:
 11165 00008C40 4883FA00                	cmp rdx, 0
 11166 00008C44 7413                    	je .L_tc_recycle_frame_done_0069
 11167 00008C46 4883E908                	sub rcx, 8
 11168 00008C4A 4883EF08                	sub rdi, 8
 11169 00008C4E 488B37                  	mov rsi, [rdi]
 11170 00008C51 488931                  	mov qword [rcx], rsi
 11171 00008C54 48FFCA                  	dec rdx
 11172 00008C57 EBE7                    	jmp .L_tc_recycle_frame_loop_0069
 11173                                  .L_tc_recycle_frame_done_0069:
 11174 00008C59 5D                      	pop rbp ; restore the old rbp
 11175 00008C5A 4889CC                  	mov rsp, rcx
 11176 00008C5D FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 11177 00008C60 C9                      	leave
 11178 00008C61 C21800                  	ret 8 * (2 + 1)
 11179                                  .L_lambda_simple_end_0050:	; new closure is in rax
 11180 00008C64 50                      	push rax
 11181 00008C65 6A01                    	push 1
 11182 00008C67 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 11183 00008C6C E820710000              	call malloc
 11184 00008C71 50                      	push rax
 11185 00008C72 BF08000000              	mov rdi, 8 * 1	; new rib
 11186 00008C77 E815710000              	call malloc
 11187 00008C7C 50                      	push rax
 11188 00008C7D BF40000000              	mov rdi, 8 * 8	; extended env
 11189 00008C82 E80A710000              	call malloc
 11190 00008C87 488B7D10                	mov rdi, ENV
 11191 00008C8B BE00000000              	mov rsi, 0
 11192 00008C90 BA01000000              	mov rdx, 1
 11193                                  .L_lambda_simple_env_loop_004f:	; ext_env[i + 1] <-- env[i]
 11194 00008C95 4883FE07                	cmp rsi, 7
 11195 00008C99 7410                    	je .L_lambda_simple_env_end_004f
 11196 00008C9B 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 11197 00008C9F 48890CD0                	mov qword [rax + 8 * rdx], rcx
 11198 00008CA3 48FFC6                  	inc rsi
 11199 00008CA6 48FFC2                  	inc rdx
 11200 00008CA9 EBEA                    	jmp .L_lambda_simple_env_loop_004f
 11201                                  .L_lambda_simple_env_end_004f:
 11202 00008CAB 5B                      	pop rbx
 11203 00008CAC BE00000000              	mov rsi, 0
 11204                                  .L_lambda_simple_params_loop_004f:	; copy params
 11205 00008CB1 4883FE01                	cmp rsi, 1
 11206 00008CB5 740E                    	je .L_lambda_simple_params_end_004f
 11207 00008CB7 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 11208 00008CBC 488914F3                	mov qword [rbx + 8 * rsi], rdx
 11209 00008CC0 48FFC6                  	inc rsi
 11210 00008CC3 EBEC                    	jmp .L_lambda_simple_params_loop_004f
 11211                                  .L_lambda_simple_params_end_004f:
 11212 00008CC5 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 11213 00008CC8 4889C3                  	mov rbx, rax
 11214 00008CCB 58                      	pop rax
 11215 00008CCC C60005                  	mov byte [rax], T_closure
 11216 00008CCF 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 11217 00008CD3 48C74009[E08C0000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_004f
 11218 00008CDB E919010000              	jmp .L_lambda_simple_end_004f
 11219                                  .L_lambda_simple_code_004f:	; lambda-simple body
 11220 00008CE0 48837C241001            	cmp qword [rsp + 8 * 2], 1
 11221 00008CE6 740B                    	je .L_lambda_simple_arity_check_ok_004f
 11222 00008CE8 FF742410                	push qword [rsp + 8 * 2]
 11223 00008CEC 6A01                    	push 1
 11224 00008CEE E957700000              	jmp L_error_incorrect_arity_simple
 11225                                  .L_lambda_simple_arity_check_ok_004f:
 11226 00008CF3 C8000000                	enter 0, 0
 11227 00008CF7 488B4510                	mov rax, qword [rbp + 8 * 2]
 11228 00008CFB 488B4020                	mov rax, qword [rax + 8 * 4]
 11229 00008CFF 488B00                  	mov rax, qword [rax + 8 * 0]
 11230 00008D02 50                      	push rax
 11231 00008D03 6A01                    	push 1
 11232 00008D05 488B4520                	mov rax, qword [rbp + 8 * (4 + 0)]
 11233                                  	assert_closure(rax)
    42 00008D09 803805              <1>  cmp byte [%1], %2
    43 00008D0C 0F8578880000        <1>  jne L_error_incorrect_type
 11234 00008D12 FF7001                  	push SOB_CLOSURE_ENV(rax)
 11235 00008D15 FF5009                  	call SOB_CLOSURE_CODE(rax)
 11236 00008D18 48890425[30030000]      	mov qword [free_var_102], rax
 11237 00008D20 48B8-                   	mov rax, sob_void
 11237 00008D22 [0000000000000000] 
 11238                                  
 11239 00008D2A 488B4510                	mov rax, qword [rbp + 8 * 2]
 11240 00008D2E 488B00                  	mov rax, qword [rax + 8 * 0]
 11241 00008D31 488B00                  	mov rax, qword [rax + 8 * 0]
 11242 00008D34 50                      	push rax
 11243 00008D35 6A01                    	push 1
 11244 00008D37 488B4520                	mov rax, qword [rbp + 8 * (4 + 0)]
 11245                                  	assert_closure(rax)
    42 00008D3B 803805              <1>  cmp byte [%1], %2
    43 00008D3E 0F8546880000        <1>  jne L_error_incorrect_type
 11246 00008D44 FF7001                  	push SOB_CLOSURE_ENV(rax)
 11247 00008D47 FF5009                  	call SOB_CLOSURE_CODE(rax)
 11248 00008D4A 48890425[38030000]      	mov qword [free_var_103], rax
 11249 00008D52 48B8-                   	mov rax, sob_void
 11249 00008D54 [0000000000000000] 
 11250                                  
 11251 00008D5C 488B4510                	mov rax, qword [rbp + 8 * 2]
 11252 00008D60 488B4008                	mov rax, qword [rax + 8 * 1]
 11253 00008D64 488B00                  	mov rax, qword [rax + 8 * 0]
 11254 00008D67 50                      	push rax
 11255 00008D68 6A01                    	push 1
 11256 00008D6A 488B4520                	mov rax, qword [rbp + 8 * (4 + 0)]
 11257                                  	assert_closure(rax)
    42 00008D6E 803805              <1>  cmp byte [%1], %2
    43 00008D71 0F8513880000        <1>  jne L_error_incorrect_type
 11258 00008D77 FF7001                  	push SOB_CLOSURE_ENV(rax)
 11259 00008D7A FF5009                  	call SOB_CLOSURE_CODE(rax)
 11260 00008D7D 48890425[40030000]      	mov qword [free_var_104], rax
 11261 00008D85 48B8-                   	mov rax, sob_void
 11261 00008D87 [0000000000000000] 
 11262                                  
 11263 00008D8F 488B4510                	mov rax, qword [rbp + 8 * 2]
 11264 00008D93 488B4010                	mov rax, qword [rax + 8 * 2]
 11265 00008D97 488B00                  	mov rax, qword [rax + 8 * 0]
 11266 00008D9A 50                      	push rax
 11267 00008D9B 6A01                    	push 1
 11268 00008D9D 488B4520                	mov rax, qword [rbp + 8 * (4 + 0)]
 11269                                  	assert_closure(rax)
    42 00008DA1 803805              <1>  cmp byte [%1], %2
    43 00008DA4 0F85E0870000        <1>  jne L_error_incorrect_type
 11270 00008DAA FF7001                  	push SOB_CLOSURE_ENV(rax)
 11271 00008DAD FF5009                  	call SOB_CLOSURE_CODE(rax)
 11272 00008DB0 48890425[48030000]      	mov qword [free_var_105], rax
 11273 00008DB8 48B8-                   	mov rax, sob_void
 11273 00008DBA [0000000000000000] 
 11274                                  
 11275 00008DC2 488B4510                	mov rax, qword [rbp + 8 * 2]
 11276 00008DC6 488B4018                	mov rax, qword [rax + 8 * 3]
 11277 00008DCA 488B00                  	mov rax, qword [rax + 8 * 0]
 11278 00008DCD 50                      	push rax
 11279 00008DCE 6A01                    	push 1
 11280 00008DD0 488B4520                	mov rax, qword [rbp + 8 * (4 + 0)]
 11281                                  	assert_closure(rax)
    42 00008DD4 803805              <1>  cmp byte [%1], %2
    43 00008DD7 0F85AD870000        <1>  jne L_error_incorrect_type
 11282 00008DDD FF7001                  	push SOB_CLOSURE_ENV(rax)
 11283 00008DE0 FF5009                  	call SOB_CLOSURE_CODE(rax)
 11284 00008DE3 48890425[50030000]      	mov qword [free_var_106], rax
 11285 00008DEB 48B8-                   	mov rax, sob_void
 11285 00008DED [0000000000000000] 
 11286 00008DF5 C9                      	leave
 11287 00008DF6 C21800                  	ret 8 * (2 + 1)
 11288                                  .L_lambda_simple_end_004f:	; new closure is in rax
 11289                                  	assert_closure(rax)
    42 00008DF9 803805              <1>  cmp byte [%1], %2
    43 00008DFC 0F8588870000        <1>  jne L_error_incorrect_type
 11290 00008E02 FF7001                  	push SOB_CLOSURE_ENV(rax)
 11291 00008E05 FF7508                  	push qword [rbp + 8 * 1] ; old ret addr
 11292 00008E08 FF7500                  	push qword [rbp] ; same the old rbp
 11293 00008E0B BA04000000              	mov rdx, 1 + 3
 11294 00008E10 488B4D18                	mov rcx, COUNT
 11295 00008E14 488D4CCD20              	lea rcx, [rbp + 8*4 + rcx * 8]
 11296 00008E19 4889EF                  	mov rdi, rbp
 11297                                  .L_tc_recycle_frame_loop_0068:
 11298 00008E1C 4883FA00                	cmp rdx, 0
 11299 00008E20 7413                    	je .L_tc_recycle_frame_done_0068
 11300 00008E22 4883E908                	sub rcx, 8
 11301 00008E26 4883EF08                	sub rdi, 8
 11302 00008E2A 488B37                  	mov rsi, [rdi]
 11303 00008E2D 488931                  	mov qword [rcx], rsi
 11304 00008E30 48FFCA                  	dec rdx
 11305 00008E33 EBE7                    	jmp .L_tc_recycle_frame_loop_0068
 11306                                  .L_tc_recycle_frame_done_0068:
 11307 00008E35 5D                      	pop rbp ; restore the old rbp
 11308 00008E36 4889CC                  	mov rsp, rcx
 11309 00008E39 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 11310 00008E3C C9                      	leave
 11311 00008E3D C21800                  	ret 8 * (2 + 1)
 11312                                  .L_lambda_simple_end_004e:	; new closure is in rax
 11313                                  	assert_closure(rax)
    42 00008E40 803805              <1>  cmp byte [%1], %2
    43 00008E43 0F8541870000        <1>  jne L_error_incorrect_type
 11314 00008E49 FF7001                  	push SOB_CLOSURE_ENV(rax)
 11315 00008E4C FF7508                  	push qword [rbp + 8 * 1] ; old ret addr
 11316 00008E4F FF7500                  	push qword [rbp] ; same the old rbp
 11317 00008E52 BA04000000              	mov rdx, 1 + 3
 11318 00008E57 488B4D18                	mov rcx, COUNT
 11319 00008E5B 488D4CCD20              	lea rcx, [rbp + 8*4 + rcx * 8]
 11320 00008E60 4889EF                  	mov rdi, rbp
 11321                                  .L_tc_recycle_frame_loop_0067:
 11322 00008E63 4883FA00                	cmp rdx, 0
 11323 00008E67 7413                    	je .L_tc_recycle_frame_done_0067
 11324 00008E69 4883E908                	sub rcx, 8
 11325 00008E6D 4883EF08                	sub rdi, 8
 11326 00008E71 488B37                  	mov rsi, [rdi]
 11327 00008E74 488931                  	mov qword [rcx], rsi
 11328 00008E77 48FFCA                  	dec rdx
 11329 00008E7A EBE7                    	jmp .L_tc_recycle_frame_loop_0067
 11330                                  .L_tc_recycle_frame_done_0067:
 11331 00008E7C 5D                      	pop rbp ; restore the old rbp
 11332 00008E7D 4889CC                  	mov rsp, rcx
 11333 00008E80 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 11334 00008E83 C9                      	leave
 11335 00008E84 C21800                  	ret 8 * (2 + 1)
 11336                                  .L_lambda_simple_end_004d:	; new closure is in rax
 11337                                  	assert_closure(rax)
    42 00008E87 803805              <1>  cmp byte [%1], %2
    43 00008E8A 0F85FA860000        <1>  jne L_error_incorrect_type
 11338 00008E90 FF7001                  	push SOB_CLOSURE_ENV(rax)
 11339 00008E93 FF7508                  	push qword [rbp + 8 * 1] ; old ret addr
 11340 00008E96 FF7500                  	push qword [rbp] ; same the old rbp
 11341 00008E99 BA04000000              	mov rdx, 1 + 3
 11342 00008E9E 488B4D18                	mov rcx, COUNT
 11343 00008EA2 488D4CCD20              	lea rcx, [rbp + 8*4 + rcx * 8]
 11344 00008EA7 4889EF                  	mov rdi, rbp
 11345                                  .L_tc_recycle_frame_loop_0066:
 11346 00008EAA 4883FA00                	cmp rdx, 0
 11347 00008EAE 7413                    	je .L_tc_recycle_frame_done_0066
 11348 00008EB0 4883E908                	sub rcx, 8
 11349 00008EB4 4883EF08                	sub rdi, 8
 11350 00008EB8 488B37                  	mov rsi, [rdi]
 11351 00008EBB 488931                  	mov qword [rcx], rsi
 11352 00008EBE 48FFCA                  	dec rdx
 11353 00008EC1 EBE7                    	jmp .L_tc_recycle_frame_loop_0066
 11354                                  .L_tc_recycle_frame_done_0066:
 11355 00008EC3 5D                      	pop rbp ; restore the old rbp
 11356 00008EC4 4889CC                  	mov rsp, rcx
 11357 00008EC7 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 11358 00008ECA C9                      	leave
 11359 00008ECB C21800                  	ret 8 * (2 + 1)
 11360                                  .L_lambda_simple_end_004c:	; new closure is in rax
 11361                                  	assert_closure(rax)
    42 00008ECE 803805              <1>  cmp byte [%1], %2
    43 00008ED1 0F85B3860000        <1>  jne L_error_incorrect_type
 11362 00008ED7 FF7001                  	push SOB_CLOSURE_ENV(rax)
 11363 00008EDA FF7508                  	push qword [rbp + 8 * 1] ; old ret addr
 11364 00008EDD FF7500                  	push qword [rbp] ; same the old rbp
 11365 00008EE0 BA04000000              	mov rdx, 1 + 3
 11366 00008EE5 488B4D18                	mov rcx, COUNT
 11367 00008EE9 488D4CCD20              	lea rcx, [rbp + 8*4 + rcx * 8]
 11368 00008EEE 4889EF                  	mov rdi, rbp
 11369                                  .L_tc_recycle_frame_loop_0065:
 11370 00008EF1 4883FA00                	cmp rdx, 0
 11371 00008EF5 7413                    	je .L_tc_recycle_frame_done_0065
 11372 00008EF7 4883E908                	sub rcx, 8
 11373 00008EFB 4883EF08                	sub rdi, 8
 11374 00008EFF 488B37                  	mov rsi, [rdi]
 11375 00008F02 488931                  	mov qword [rcx], rsi
 11376 00008F05 48FFCA                  	dec rdx
 11377 00008F08 EBE7                    	jmp .L_tc_recycle_frame_loop_0065
 11378                                  .L_tc_recycle_frame_done_0065:
 11379 00008F0A 5D                      	pop rbp ; restore the old rbp
 11380 00008F0B 4889CC                  	mov rsp, rcx
 11381 00008F0E FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 11382 00008F11 C9                      	leave
 11383 00008F12 C21800                  	ret 8 * (2 + 1)
 11384                                  .L_lambda_simple_end_004b:	; new closure is in rax
 11385                                  	assert_closure(rax)
    42 00008F15 803805              <1>  cmp byte [%1], %2
    43 00008F18 0F856C860000        <1>  jne L_error_incorrect_type
 11386 00008F1E FF7001                  	push SOB_CLOSURE_ENV(rax)
 11387 00008F21 FF7508                  	push qword [rbp + 8 * 1] ; old ret addr
 11388 00008F24 FF7500                  	push qword [rbp] ; same the old rbp
 11389 00008F27 BA04000000              	mov rdx, 1 + 3
 11390 00008F2C 488B4D18                	mov rcx, COUNT
 11391 00008F30 488D4CCD20              	lea rcx, [rbp + 8*4 + rcx * 8]
 11392 00008F35 4889EF                  	mov rdi, rbp
 11393                                  .L_tc_recycle_frame_loop_0064:
 11394 00008F38 4883FA00                	cmp rdx, 0
 11395 00008F3C 7413                    	je .L_tc_recycle_frame_done_0064
 11396 00008F3E 4883E908                	sub rcx, 8
 11397 00008F42 4883EF08                	sub rdi, 8
 11398 00008F46 488B37                  	mov rsi, [rdi]
 11399 00008F49 488931                  	mov qword [rcx], rsi
 11400 00008F4C 48FFCA                  	dec rdx
 11401 00008F4F EBE7                    	jmp .L_tc_recycle_frame_loop_0064
 11402                                  .L_tc_recycle_frame_done_0064:
 11403 00008F51 5D                      	pop rbp ; restore the old rbp
 11404 00008F52 4889CC                  	mov rsp, rcx
 11405 00008F55 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 11406 00008F58 C9                      	leave
 11407 00008F59 C21800                  	ret 8 * (2 + 1)
 11408                                  .L_lambda_simple_end_004a:	; new closure is in rax
 11409                                  	assert_closure(rax)
    42 00008F5C 803805              <1>  cmp byte [%1], %2
    43 00008F5F 0F8525860000        <1>  jne L_error_incorrect_type
 11410 00008F65 FF7001                  	push SOB_CLOSURE_ENV(rax)
 11411 00008F68 FF7508                  	push qword [rbp + 8 * 1] ; old ret addr
 11412 00008F6B FF7500                  	push qword [rbp] ; same the old rbp
 11413 00008F6E BA04000000              	mov rdx, 1 + 3
 11414 00008F73 488B4D18                	mov rcx, COUNT
 11415 00008F77 488D4CCD20              	lea rcx, [rbp + 8*4 + rcx * 8]
 11416 00008F7C 4889EF                  	mov rdi, rbp
 11417                                  .L_tc_recycle_frame_loop_0063:
 11418 00008F7F 4883FA00                	cmp rdx, 0
 11419 00008F83 7413                    	je .L_tc_recycle_frame_done_0063
 11420 00008F85 4883E908                	sub rcx, 8
 11421 00008F89 4883EF08                	sub rdi, 8
 11422 00008F8D 488B37                  	mov rsi, [rdi]
 11423 00008F90 488931                  	mov qword [rcx], rsi
 11424 00008F93 48FFCA                  	dec rdx
 11425 00008F96 EBE7                    	jmp .L_tc_recycle_frame_loop_0063
 11426                                  .L_tc_recycle_frame_done_0063:
 11427 00008F98 5D                      	pop rbp ; restore the old rbp
 11428 00008F99 4889CC                  	mov rsp, rcx
 11429 00008F9C FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 11430 00008F9F C9                      	leave
 11431 00008FA0 C21800                  	ret 8 * (2 + 1)
 11432                                  .L_lambda_simple_end_0049:	; new closure is in rax
 11433                                  	assert_closure(rax)
    42 00008FA3 803805              <1>  cmp byte [%1], %2
    43 00008FA6 0F85DE850000        <1>  jne L_error_incorrect_type
 11434 00008FAC FF7001                  	push SOB_CLOSURE_ENV(rax)
 11435 00008FAF FF7508                  	push qword [rbp + 8 * 1] ; old ret addr
 11436 00008FB2 FF7500                  	push qword [rbp] ; same the old rbp
 11437 00008FB5 BA04000000              	mov rdx, 1 + 3
 11438 00008FBA 488B4D18                	mov rcx, COUNT
 11439 00008FBE 488D4CCD20              	lea rcx, [rbp + 8*4 + rcx * 8]
 11440 00008FC3 4889EF                  	mov rdi, rbp
 11441                                  .L_tc_recycle_frame_loop_0062:
 11442 00008FC6 4883FA00                	cmp rdx, 0
 11443 00008FCA 7413                    	je .L_tc_recycle_frame_done_0062
 11444 00008FCC 4883E908                	sub rcx, 8
 11445 00008FD0 4883EF08                	sub rdi, 8
 11446 00008FD4 488B37                  	mov rsi, [rdi]
 11447 00008FD7 488931                  	mov qword [rcx], rsi
 11448 00008FDA 48FFCA                  	dec rdx
 11449 00008FDD EBE7                    	jmp .L_tc_recycle_frame_loop_0062
 11450                                  .L_tc_recycle_frame_done_0062:
 11451 00008FDF 5D                      	pop rbp ; restore the old rbp
 11452 00008FE0 4889CC                  	mov rsp, rcx
 11453 00008FE3 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 11454 00008FE6 C9                      	leave
 11455 00008FE7 C21800                  	ret 8 * (2 + 1)
 11456                                  .L_lambda_simple_end_0048:	; new closure is in rax
 11457                                  	assert_closure(rax)
    42 00008FEA 803805              <1>  cmp byte [%1], %2
    43 00008FED 0F8597850000        <1>  jne L_error_incorrect_type
 11458 00008FF3 FF7001                  	push SOB_CLOSURE_ENV(rax)
 11459 00008FF6 FF5009                  	call SOB_CLOSURE_CODE(rax)
 11460                                  
 11461 00008FF9 4889C7                  	mov rdi, rax
 11462 00008FFC E8A16D0000              	call print_sexpr_if_not_void
 11463                                  
 11464 00009001 48B8-                   	mov rax, L_constants + 23
 11464 00009003 [1700000000000000] 
 11465 0000900B 50                      	push rax
 11466 0000900C 6A01                    	push 1
 11467 0000900E BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 11468 00009013 E8796D0000              	call malloc
 11469 00009018 50                      	push rax
 11470 00009019 BF00000000              	mov rdi, 8 * 0	; new rib
 11471 0000901E E86E6D0000              	call malloc
 11472 00009023 50                      	push rax
 11473 00009024 BF08000000              	mov rdi, 8 * 1	; extended env
 11474 00009029 E8636D0000              	call malloc
 11475 0000902E 488B7D10                	mov rdi, ENV
 11476 00009032 BE00000000              	mov rsi, 0
 11477 00009037 BA01000000              	mov rdx, 1
 11478                                  .L_lambda_simple_env_loop_0059:	; ext_env[i + 1] <-- env[i]
 11479 0000903C 4883FE00                	cmp rsi, 0
 11480 00009040 7410                    	je .L_lambda_simple_env_end_0059
 11481 00009042 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 11482 00009046 48890CD0                	mov qword [rax + 8 * rdx], rcx
 11483 0000904A 48FFC6                  	inc rsi
 11484 0000904D 48FFC2                  	inc rdx
 11485 00009050 EBEA                    	jmp .L_lambda_simple_env_loop_0059
 11486                                  .L_lambda_simple_env_end_0059:
 11487 00009052 5B                      	pop rbx
 11488 00009053 BE00000000              	mov rsi, 0
 11489                                  .L_lambda_simple_params_loop_0059:	; copy params
 11490 00009058 4883FE00                	cmp rsi, 0
 11491 0000905C 740E                    	je .L_lambda_simple_params_end_0059
 11492 0000905E 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 11493 00009063 488914F3                	mov qword [rbx + 8 * rsi], rdx
 11494 00009067 48FFC6                  	inc rsi
 11495 0000906A EBEC                    	jmp .L_lambda_simple_params_loop_0059
 11496                                  .L_lambda_simple_params_end_0059:
 11497 0000906C 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 11498 0000906F 4889C3                  	mov rbx, rax
 11499 00009072 58                      	pop rax
 11500 00009073 C60005                  	mov byte [rax], T_closure
 11501 00009076 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 11502 0000907A 48C74009[87900000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0059
 11503 00009082 E934050000              	jmp .L_lambda_simple_end_0059
 11504                                  .L_lambda_simple_code_0059:	; lambda-simple body
 11505 00009087 48837C241001            	cmp qword [rsp + 8 * 2], 1
 11506 0000908D 740B                    	je .L_lambda_simple_arity_check_ok_0059
 11507 0000908F FF742410                	push qword [rsp + 8 * 2]
 11508 00009093 6A01                    	push 1
 11509 00009095 E9B06C0000              	jmp L_error_incorrect_arity_simple
 11510                                  .L_lambda_simple_arity_check_ok_0059:
 11511 0000909A C8000000                	enter 0, 0
 11512 0000909E 488B4520                	mov rax, qword [rbp + 8 * (4 + 0)]
 11513 000090A2 4889C2                  	mov rdx, rax
 11514 000090A5 BF08000000              	mov rdi, 8
 11515 000090AA E8E26C0000              	call malloc
 11516 000090AF 488910                  	mov qword[rax], rdx
 11517 000090B2 48894520                	mov qword [rbp + 8 * (4 + 0)], rax
 11518 000090B6 48B8-                   	mov rax, sob_void
 11518 000090B8 [0000000000000000] 
 11519                                  
 11520 000090C0 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 11521 000090C5 E8C76C0000              	call malloc
 11522 000090CA 50                      	push rax
 11523 000090CB BF08000000              	mov rdi, 8 * 1	; new rib
 11524 000090D0 E8BC6C0000              	call malloc
 11525 000090D5 50                      	push rax
 11526 000090D6 BF10000000              	mov rdi, 8 * 2	; extended env
 11527 000090DB E8B16C0000              	call malloc
 11528 000090E0 488B7D10                	mov rdi, ENV
 11529 000090E4 BE00000000              	mov rsi, 0
 11530 000090E9 BA01000000              	mov rdx, 1
 11531                                  .L_lambda_simple_env_loop_005a:	; ext_env[i + 1] <-- env[i]
 11532 000090EE 4883FE01                	cmp rsi, 1
 11533 000090F2 7410                    	je .L_lambda_simple_env_end_005a
 11534 000090F4 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 11535 000090F8 48890CD0                	mov qword [rax + 8 * rdx], rcx
 11536 000090FC 48FFC6                  	inc rsi
 11537 000090FF 48FFC2                  	inc rdx
 11538 00009102 EBEA                    	jmp .L_lambda_simple_env_loop_005a
 11539                                  .L_lambda_simple_env_end_005a:
 11540 00009104 5B                      	pop rbx
 11541 00009105 BE00000000              	mov rsi, 0
 11542                                  .L_lambda_simple_params_loop_005a:	; copy params
 11543 0000910A 4883FE01                	cmp rsi, 1
 11544 0000910E 740E                    	je .L_lambda_simple_params_end_005a
 11545 00009110 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 11546 00009115 488914F3                	mov qword [rbx + 8 * rsi], rdx
 11547 00009119 48FFC6                  	inc rsi
 11548 0000911C EBEC                    	jmp .L_lambda_simple_params_loop_005a
 11549                                  .L_lambda_simple_params_end_005a:
 11550 0000911E 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 11551 00009121 4889C3                  	mov rbx, rax
 11552 00009124 58                      	pop rax
 11553 00009125 C60005                  	mov byte [rax], T_closure
 11554 00009128 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 11555 0000912C 48C74009[39910000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_005a
 11556 00009134 E9F0000000              	jmp .L_lambda_simple_end_005a
 11557                                  .L_lambda_simple_code_005a:	; lambda-simple body
 11558 00009139 48837C241002            	cmp qword [rsp + 8 * 2], 2
 11559 0000913F 740B                    	je .L_lambda_simple_arity_check_ok_005a
 11560 00009141 FF742410                	push qword [rsp + 8 * 2]
 11561 00009145 6A02                    	push 2
 11562 00009147 E9FE6B0000              	jmp L_error_incorrect_arity_simple
 11563                                  .L_lambda_simple_arity_check_ok_005a:
 11564 0000914C C8000000                	enter 0, 0
 11565 00009150 488B4520                	mov rax, qword [rbp + 8 * (4 + 0)]
 11566 00009154 50                      	push rax
 11567 00009155 6A01                    	push 1
 11568 00009157 488B0425[D8000000]      	mov rax, qword [free_var_27]
 11569                                  	assert_closure(rax)
    42 0000915F 803805              <1>  cmp byte [%1], %2
    43 00009162 0F8522840000        <1>  jne L_error_incorrect_type
 11570 00009168 FF7001                  	push SOB_CLOSURE_ENV(rax)
 11571 0000916B FF5009                  	call SOB_CLOSURE_CODE(rax)
 11572 0000916E 483D[02000000]          	cmp rax, sob_boolean_false
 11573 00009174 740F                              	je .L_if_else_0033
 11574 00009176 48B8-                             	mov rax, L_constants + 1
 11574 00009178 [0100000000000000] 
 11575 00009180 E9A0000000              	jmp .L_if_end_0033
 11576                                            .L_if_else_0033:
 11577 00009185 488B4528                          	mov rax, qword [rbp + 8 * (4 + 1)]
 11578 00009189 50                      	push rax
 11579 0000918A 48B8-                   	mov rax, L_constants + 128
 11579 0000918C [8000000000000000] 
 11580 00009194 50                      	push rax
 11581 00009195 488B4520                	mov rax, qword [rbp + 8 * (4 + 0)]
 11582 00009199 50                      	push rax
 11583 0000919A 6A02                    	push 2
 11584 0000919C 488B0425[10030000]      	mov rax, qword [free_var_98]
 11585                                  	assert_closure(rax)
    42 000091A4 803805              <1>  cmp byte [%1], %2
    43 000091A7 0F85DD830000        <1>  jne L_error_incorrect_type
 11586 000091AD FF7001                  	push SOB_CLOSURE_ENV(rax)
 11587 000091B0 FF5009                  	call SOB_CLOSURE_CODE(rax)
 11588 000091B3 50                      	push rax
 11589 000091B4 6A02                    	push 2
 11590 000091B6 488B4510                	mov rax, qword [rbp + 8 * 2]
 11591 000091BA 488B00                  	mov rax, qword [rax + 8 * 0]
 11592 000091BD 488B00                  	mov rax, qword [rax + 8 * 0]
 11593 000091C0 488B00                  	mov rax, qword [rax]
 11594                                  	assert_closure(rax)
    42 000091C3 803805              <1>  cmp byte [%1], %2
    43 000091C6 0F85BE830000        <1>  jne L_error_incorrect_type
 11595 000091CC FF7001                  	push SOB_CLOSURE_ENV(rax)
 11596 000091CF FF5009                  	call SOB_CLOSURE_CODE(rax)
 11597 000091D2 50                      	push rax
 11598 000091D3 488B4528                	mov rax, qword [rbp + 8 * (4 + 1)]
 11599 000091D7 50                      	push rax
 11600 000091D8 6A02                    	push 2
 11601 000091DA 488B0425[68000000]      	mov rax, qword [free_var_13]
 11602                                  	assert_closure(rax)
    42 000091E2 803805              <1>  cmp byte [%1], %2
    43 000091E5 0F859F830000        <1>  jne L_error_incorrect_type
 11603 000091EB FF7001                  	push SOB_CLOSURE_ENV(rax)
 11604 000091EE FF7508                  	push qword [rbp + 8 * 1] ; old ret addr
 11605 000091F1 FF7500                  	push qword [rbp] ; same the old rbp
 11606 000091F4 BA05000000              	mov rdx, 2 + 3
 11607 000091F9 488B4D18                	mov rcx, COUNT
 11608 000091FD 488D4CCD20              	lea rcx, [rbp + 8*4 + rcx * 8]
 11609 00009202 4889EF                  	mov rdi, rbp
 11610                                  .L_tc_recycle_frame_loop_0076:
 11611 00009205 4883FA00                	cmp rdx, 0
 11612 00009209 7413                    	je .L_tc_recycle_frame_done_0076
 11613 0000920B 4883E908                	sub rcx, 8
 11614 0000920F 4883EF08                	sub rdi, 8
 11615 00009213 488B37                  	mov rsi, [rdi]
 11616 00009216 488931                  	mov qword [rcx], rsi
 11617 00009219 48FFCA                  	dec rdx
 11618 0000921C EBE7                    	jmp .L_tc_recycle_frame_loop_0076
 11619                                  .L_tc_recycle_frame_done_0076:
 11620 0000921E 5D                      	pop rbp ; restore the old rbp
 11621 0000921F 4889CC                  	mov rsp, rcx
 11622 00009222 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 11623                                  .L_if_end_0033:
 11624 00009225 C9                      	leave
 11625 00009226 C22000                  	ret 8 * (2 + 2)
 11626                                  .L_lambda_simple_end_005a:	; new closure is in rax
 11627 00009229 50                      	push rax
 11628 0000922A 488B4520                	mov rax, qword [rbp + 8 * (4 + 0)]
 11629 0000922E 8F00                    	pop qword [rax]
 11630 00009230 48B8-                   	mov rax, sob_void
 11630 00009232 [0000000000000000] 
 11631                                  
 11632 0000923A BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 11633 0000923F E84D6B0000              	call malloc
 11634 00009244 50                      	push rax
 11635 00009245 BF08000000              	mov rdi, 8 * 1	; new rib
 11636 0000924A E8426B0000              	call malloc
 11637 0000924F 50                      	push rax
 11638 00009250 BF10000000              	mov rdi, 8 * 2	; extended env
 11639 00009255 E8376B0000              	call malloc
 11640 0000925A 488B7D10                	mov rdi, ENV
 11641 0000925E BE00000000              	mov rsi, 0
 11642 00009263 BA01000000              	mov rdx, 1
 11643                                  .L_lambda_opt_env_loop_000f:	; ext_env[i + 1] <-- env[i]
 11644 00009268 4883FE01                	cmp rsi, 1
 11645 0000926C 7410                    	je .L_lambda_opt_env_end_000f
 11646 0000926E 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 11647 00009272 48890CD0                	mov qword [rax + 8 * rdx], rcx
 11648 00009276 48FFC6                  	inc rsi
 11649 00009279 48FFC2                  	inc rdx
 11650 0000927C EBEA                    	jmp .L_lambda_opt_env_loop_000f
 11651                                  .L_lambda_opt_env_end_000f:
 11652 0000927E 5B                      	pop rbx
 11653 0000927F BE00000000              	mov rsi, 0
 11654                                  .L_lambda_opt_params_loop_000f:	; copy params
 11655 00009284 4883FE01                	cmp rsi, 1
 11656 00009288 740E                    	je .L_lambda_opt_params_end_000f
 11657 0000928A 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 11658 0000928F 488914F3                	mov qword [rbx + 8 * rsi], rdx
 11659 00009293 48FFC6                  	inc rsi
 11660 00009296 EBEC                    	jmp .L_lambda_opt_params_loop_000f
 11661                                  .L_lambda_opt_params_end_000f:
 11662 00009298 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 11663 0000929B 4889C3                  	mov rbx, rax
 11664 0000929E 58                      	pop rax
 11665 0000929F C60005                  	mov byte [rax], T_closure
 11666 000092A2 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 11667 000092A6 48C74009[B3920000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_opt_code_000f
 11668 000092AE E904030000              	jmp .L_lambda_opt_end_000f
 11669                                  .L_lambda_opt_code_000f:	; lambda-opt body
 11670 000092B3 48837C241001            	cmp qword [rsp + 8 * 2], 1
 11671 000092B9 740D                    	je .L_lambda_opt_arity_check_exact_000f
 11672 000092BB 7F43                    	jg .L_lambda_opt_arity_check_more_000f
 11673 000092BD FF742410                	push qword [rsp + 8 * 2]
 11674 000092C1 6A01                    	push 1
 11675 000092C3 E9966A0000              	jmp L_error_incorrect_arity_opt
 11676                                  .L_lambda_opt_arity_check_exact_000f:
 11677 000092C8 48C744241002000000      	mov qword [rsp + 8 * 2], 2
 11678 000092D1 BA04000000              	mov rdx, 4
 11679 000092D6 FF3424                  	push qword [rsp]
 11680 000092D9 BE01000000              	mov rsi, 1
 11681                                  .L_lambda_opt_stack_shrink_loop_002b:
 11682 000092DE 4839D6                  	cmp rsi, rdx
 11683 000092E1 7411                    	je .L_lambda_opt_stack_shrink_loop_exit_002b
 11684 000092E3 488D5CF408              	lea rbx, [rsp + 8 + rsi * 8]
 11685 000092E8 488B0B                  	mov rcx, [rbx]
 11686 000092EB 48894BF8                	mov qword [rbx - 8], rcx
 11687 000092EF 48FFC6                  	inc rsi
 11688 000092F2 EBEA                    	jmp .L_lambda_opt_stack_shrink_loop_002b
 11689                                  .L_lambda_opt_stack_shrink_loop_exit_002b:
 11690 000092F4 48C703[01000000]        	mov qword [rbx], sob_nil
 11691 000092FB E985000000              	jmp .L_lambda_opt_stack_adjusted_000f
 11692                                  .L_lambda_opt_arity_check_more_000f:
 11693 00009300 488B542410              	mov rdx, qword [rsp + 8 * 2]
 11694 00009305 4883EA01                	sub rdx, 1
 11695 00009309 48C744241002000000      	mov qword [rsp + 8 * 2], 2
 11696 00009312 BE00000000              	mov rsi, 0
 11697 00009317 488D5CD418              	lea rbx, [rsp + 2 * 8 + 1 * 8 + rdx * 8]
 11698 0000931C 48B9-                   	mov rcx, sob_nil
 11698 0000931E [0100000000000000] 
 11699                                  .L_lambda_opt_stack_shrink_loop_002c:
 11700 00009326 4839D6                  	cmp rsi, rdx
 11701 00009329 7427                    je .L_lambda_opt_stack_shrink_loop_exit_002c
 11702 0000932B BF11000000              	mov rdi, 17 ; 1+8+8
 11703 00009330 E85C6A0000              	call malloc
 11704 00009335 48894809                	mov SOB_PAIR_CDR(rax), rcx
 11705 00009339 48F7DE                  	neg rsi
 11706 0000933C 488B0CF3                	mov rcx, qword [rbx + rsi * 8]
 11707 00009340 48F7DE                  	neg rsi
 11708 00009343 48894801                	mov SOB_PAIR_CAR(rax), rcx
 11709 00009347 C60021                  	mov byte [rax], T_pair
 11710 0000934A 4889C1                  	mov rcx, rax
 11711 0000934D 48FFC6                  	inc rsi
 11712 00009350 EBD4                    	jmp .L_lambda_opt_stack_shrink_loop_002c
 11713                                  .L_lambda_opt_stack_shrink_loop_exit_002c:
 11714 00009352 48890B                  	mov qword [rbx], rcx
 11715 00009355 4883EB08                	sub rbx, 8
 11716 00009359 4889E7                  	mov rdi, rsp
 11717 0000935C 4883C718                	add rdi, 24
 11718 00009360 BE04000000              	mov rsi, 4
 11719                                  .L_lambda_opt_stack_shrink_loop_002d:
 11720 00009365 4883FE00                	cmp rsi,0
 11721 00009369 7413                    	je .L_lambda_opt_stack_shrink_loop_exit_002d
 11722 0000936B 488B0F                  	mov rcx, qword [rdi]
 11723 0000936E 48890B                  	mov [rbx], rcx
 11724 00009371 48FFCE                  	dec rsi
 11725 00009374 4883EB08                	sub rbx, 8
 11726 00009378 4883EF08                	sub rdi, 8
 11727 0000937C EBE7                    	jmp .L_lambda_opt_stack_shrink_loop_002d
 11728                                  .L_lambda_opt_stack_shrink_loop_exit_002d:
 11729 0000937E 4883C308                	add rbx, 8
 11730 00009382 4889DC                  	mov rsp, rbx
 11731                                  .L_lambda_opt_stack_adjusted_000f:
 11732 00009385 C8000000                	enter 0, 0
 11733 00009389 488B4528                	mov rax, qword [rbp + 8 * (4 + 1)]
 11734 0000938D 50                      	push rax
 11735 0000938E 6A01                    	push 1
 11736 00009390 488B0425[00000000]      	mov rax, qword [free_var_0]
 11737                                  	assert_closure(rax)
    42 00009398 803805              <1>  cmp byte [%1], %2
    43 0000939B 0F85E9810000        <1>  jne L_error_incorrect_type
 11738 000093A1 FF7001                  	push SOB_CLOSURE_ENV(rax)
 11739 000093A4 FF5009                  	call SOB_CLOSURE_CODE(rax)
 11740 000093A7 483D[02000000]          	cmp rax, sob_boolean_false
 11741 000093AD 7467                              	je .L_if_else_0037
 11742 000093AF 48B8-                             	mov rax, L_constants + 4
 11742 000093B1 [0400000000000000] 
 11743 000093B9 50                      	push rax
 11744 000093BA 488B4520                	mov rax, qword [rbp + 8 * (4 + 0)]
 11745 000093BE 50                      	push rax
 11746 000093BF 6A02                    	push 2
 11747 000093C1 488B4510                	mov rax, qword [rbp + 8 * 2]
 11748 000093C5 488B00                  	mov rax, qword [rax + 8 * 0]
 11749 000093C8 488B00                  	mov rax, qword [rax + 8 * 0]
 11750 000093CB 488B00                  	mov rax, qword [rax]
 11751                                  	assert_closure(rax)
    42 000093CE 803805              <1>  cmp byte [%1], %2
    43 000093D1 0F85B3810000        <1>  jne L_error_incorrect_type
 11752 000093D7 FF7001                  	push SOB_CLOSURE_ENV(rax)
 11753 000093DA FF7508                  	push qword [rbp + 8 * 1] ; old ret addr
 11754 000093DD FF7500                  	push qword [rbp] ; same the old rbp
 11755 000093E0 BA05000000              	mov rdx, 2 + 3
 11756 000093E5 488B4D18                	mov rcx, COUNT
 11757 000093E9 488D4CCD20              	lea rcx, [rbp + 8*4 + rcx * 8]
 11758 000093EE 4889EF                  	mov rdi, rbp
 11759                                  .L_tc_recycle_frame_loop_0077:
 11760 000093F1 4883FA00                	cmp rdx, 0
 11761 000093F5 7413                    	je .L_tc_recycle_frame_done_0077
 11762 000093F7 4883E908                	sub rcx, 8
 11763 000093FB 4883EF08                	sub rdi, 8
 11764 000093FF 488B37                  	mov rsi, [rdi]
 11765 00009402 488931                  	mov qword [rcx], rsi
 11766 00009405 48FFCA                  	dec rdx
 11767 00009408 EBE7                    	jmp .L_tc_recycle_frame_loop_0077
 11768                                  .L_tc_recycle_frame_done_0077:
 11769 0000940A 5D                      	pop rbp ; restore the old rbp
 11770 0000940B 4889CC                  	mov rsp, rcx
 11771 0000940E FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 11772 00009411 E99D010000              	jmp .L_if_end_0037
 11773                                            .L_if_else_0037:
 11774 00009416 488B4528                          	mov rax, qword [rbp + 8 * (4 + 1)]
 11775 0000941A 50                      	push rax
 11776 0000941B 6A01                    	push 1
 11777 0000941D 488B0425[08000000]      	mov rax, qword [free_var_1]
 11778                                  	assert_closure(rax)
    42 00009425 803805              <1>  cmp byte [%1], %2
    43 00009428 0F855C810000        <1>  jne L_error_incorrect_type
 11779 0000942E FF7001                  	push SOB_CLOSURE_ENV(rax)
 11780 00009431 FF5009                  	call SOB_CLOSURE_CODE(rax)
 11781 00009434 483D[02000000]          	cmp rax, sob_boolean_false
 11782 0000943A 0F8486000000                      	je .L_if_else_0035
 11783 00009440 488B4528                          	mov rax, qword [rbp + 8 * (4 + 1)]
 11784 00009444 50                      	push rax
 11785 00009445 6A01                    	push 1
 11786 00009447 488B0425[88000000]      	mov rax, qword [free_var_17]
 11787                                  	assert_closure(rax)
    42 0000944F 803805              <1>  cmp byte [%1], %2
    43 00009452 0F8532810000        <1>  jne L_error_incorrect_type
 11788 00009458 FF7001                  	push SOB_CLOSURE_ENV(rax)
 11789 0000945B FF5009                  	call SOB_CLOSURE_CODE(rax)
 11790 0000945E 50                      	push rax
 11791 0000945F 6A01                    	push 1
 11792 00009461 488B0425[00000000]      	mov rax, qword [free_var_0]
 11793                                  	assert_closure(rax)
    42 00009469 803805              <1>  cmp byte [%1], %2
    43 0000946C 0F8518810000        <1>  jne L_error_incorrect_type
 11794 00009472 FF7001                  	push SOB_CLOSURE_ENV(rax)
 11795 00009475 FF5009                  	call SOB_CLOSURE_CODE(rax)
 11796 00009478 483D[02000000]          	cmp rax, sob_boolean_false
 11797 0000947E 743A                              	je .L_if_else_0034
 11798 00009480 488B4528                          	mov rax, qword [rbp + 8 * (4 + 1)]
 11799 00009484 50                      	push rax
 11800 00009485 6A01                    	push 1
 11801 00009487 488B0425[80000000]      	mov rax, qword [free_var_16]
 11802                                  	assert_closure(rax)
    42 0000948F 803805              <1>  cmp byte [%1], %2
    43 00009492 0F85F2800000        <1>  jne L_error_incorrect_type
 11803 00009498 FF7001                  	push SOB_CLOSURE_ENV(rax)
 11804 0000949B FF5009                  	call SOB_CLOSURE_CODE(rax)
 11805 0000949E 50                      	push rax
 11806 0000949F 6A01                    	push 1
 11807 000094A1 488B0425[18000000]      	mov rax, qword [free_var_3]
 11808                                  	assert_closure(rax)
    42 000094A9 803805              <1>  cmp byte [%1], %2
    43 000094AC 0F85D8800000        <1>  jne L_error_incorrect_type
 11809 000094B2 FF7001                  	push SOB_CLOSURE_ENV(rax)
 11810 000094B5 FF5009                  	call SOB_CLOSURE_CODE(rax)
 11811 000094B8 EB0A                    	jmp .L_if_end_0034
 11812                                            .L_if_else_0034:
 11813 000094BA 48B8-                             	mov rax, L_constants + 2
 11813 000094BC [0200000000000000] 
 11814                                  .L_if_end_0034:
 11815 000094C4 EB0A                    	jmp .L_if_end_0035
 11816                                            .L_if_else_0035:
 11817 000094C6 48B8-                             	mov rax, L_constants + 2
 11817 000094C8 [0200000000000000] 
 11818                                  .L_if_end_0035:
 11819 000094D0 483D[02000000]          	cmp rax, sob_boolean_false
 11820 000094D6 7478                              	je .L_if_else_0036
 11821 000094D8 488B4528                          	mov rax, qword [rbp + 8 * (4 + 1)]
 11822 000094DC 50                      	push rax
 11823 000094DD 6A01                    	push 1
 11824 000094DF 488B0425[80000000]      	mov rax, qword [free_var_16]
 11825                                  	assert_closure(rax)
    42 000094E7 803805              <1>  cmp byte [%1], %2
    43 000094EA 0F859A800000        <1>  jne L_error_incorrect_type
 11826 000094F0 FF7001                  	push SOB_CLOSURE_ENV(rax)
 11827 000094F3 FF5009                  	call SOB_CLOSURE_CODE(rax)
 11828 000094F6 50                      	push rax
 11829 000094F7 488B4520                	mov rax, qword [rbp + 8 * (4 + 0)]
 11830 000094FB 50                      	push rax
 11831 000094FC 6A02                    	push 2
 11832 000094FE 488B4510                	mov rax, qword [rbp + 8 * 2]
 11833 00009502 488B00                  	mov rax, qword [rax + 8 * 0]
 11834 00009505 488B00                  	mov rax, qword [rax + 8 * 0]
 11835 00009508 488B00                  	mov rax, qword [rax]
 11836                                  	assert_closure(rax)
    42 0000950B 803805              <1>  cmp byte [%1], %2
    43 0000950E 0F8576800000        <1>  jne L_error_incorrect_type
 11837 00009514 FF7001                  	push SOB_CLOSURE_ENV(rax)
 11838 00009517 FF7508                  	push qword [rbp + 8 * 1] ; old ret addr
 11839 0000951A FF7500                  	push qword [rbp] ; same the old rbp
 11840 0000951D BA05000000              	mov rdx, 2 + 3
 11841 00009522 488B4D18                	mov rcx, COUNT
 11842 00009526 488D4CCD20              	lea rcx, [rbp + 8*4 + rcx * 8]
 11843 0000952B 4889EF                  	mov rdi, rbp
 11844                                  .L_tc_recycle_frame_loop_0078:
 11845 0000952E 4883FA00                	cmp rdx, 0
 11846 00009532 7413                    	je .L_tc_recycle_frame_done_0078
 11847 00009534 4883E908                	sub rcx, 8
 11848 00009538 4883EF08                	sub rdi, 8
 11849 0000953C 488B37                  	mov rsi, [rdi]
 11850 0000953F 488931                  	mov qword [rcx], rsi
 11851 00009542 48FFCA                  	dec rdx
 11852 00009545 EBE7                    	jmp .L_tc_recycle_frame_loop_0078
 11853                                  .L_tc_recycle_frame_done_0078:
 11854 00009547 5D                      	pop rbp ; restore the old rbp
 11855 00009548 4889CC                  	mov rsp, rcx
 11856 0000954B FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 11857 0000954E EB63                    	jmp .L_if_end_0036
 11858                                            .L_if_else_0036:
 11859 00009550 48B8-                             	mov rax, L_constants + 288
 11859 00009552 [2001000000000000] 
 11860 0000955A 50                      	push rax
 11861 0000955B 48B8-                   	mov rax, L_constants + 279
 11861 0000955D [1701000000000000] 
 11862 00009565 50                      	push rax
 11863 00009566 6A02                    	push 2
 11864 00009568 488B0425[30010000]      	mov rax, qword [free_var_38]
 11865                                  	assert_closure(rax)
    42 00009570 803805              <1>  cmp byte [%1], %2
    43 00009573 0F8511800000        <1>  jne L_error_incorrect_type
 11866 00009579 FF7001                  	push SOB_CLOSURE_ENV(rax)
 11867 0000957C FF7508                  	push qword [rbp + 8 * 1] ; old ret addr
 11868 0000957F FF7500                  	push qword [rbp] ; same the old rbp
 11869 00009582 BA05000000              	mov rdx, 2 + 3
 11870 00009587 488B4D18                	mov rcx, COUNT
 11871 0000958B 488D4CCD20              	lea rcx, [rbp + 8*4 + rcx * 8]
 11872 00009590 4889EF                  	mov rdi, rbp
 11873                                  .L_tc_recycle_frame_loop_0079:
 11874 00009593 4883FA00                	cmp rdx, 0
 11875 00009597 7413                    	je .L_tc_recycle_frame_done_0079
 11876 00009599 4883E908                	sub rcx, 8
 11877 0000959D 4883EF08                	sub rdi, 8
 11878 000095A1 488B37                  	mov rsi, [rdi]
 11879 000095A4 488931                  	mov qword [rcx], rsi
 11880 000095A7 48FFCA                  	dec rdx
 11881 000095AA EBE7                    	jmp .L_tc_recycle_frame_loop_0079
 11882                                  .L_tc_recycle_frame_done_0079:
 11883 000095AC 5D                      	pop rbp ; restore the old rbp
 11884 000095AD 4889CC                  	mov rsp, rcx
 11885 000095B0 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 11886                                  .L_if_end_0036:
 11887                                  .L_if_end_0037:
 11888 000095B3 C9                      	leave
 11889 000095B4 C22000                  	ret 8 * (2 + 2)
 11890                                  .L_lambda_opt_end_000f:	; new closure is in rax
 11891 000095B7 C9                      	leave
 11892 000095B8 C21800                  	ret 8 * (2 + 1)
 11893                                  .L_lambda_simple_end_0059:	; new closure is in rax
 11894                                  	assert_closure(rax)
    42 000095BB 803805              <1>  cmp byte [%1], %2
    43 000095BE 0F85C67F0000        <1>  jne L_error_incorrect_type
 11895 000095C4 FF7001                  	push SOB_CLOSURE_ENV(rax)
 11896 000095C7 FF5009                  	call SOB_CLOSURE_CODE(rax)
 11897 000095CA 48890425[58030000]      	mov qword [free_var_107], rax
 11898 000095D2 48B8-                   	mov rax, sob_void
 11898 000095D4 [0000000000000000] 
 11899                                  
 11900 000095DC 4889C7                  	mov rdi, rax
 11901 000095DF E8BE670000              	call print_sexpr_if_not_void
 11902                                  
 11903 000095E4 48B8-                   	mov rax, L_constants + 0
 11903 000095E6 [0000000000000000] 
 11904 000095EE 48890425[60030000]      	mov qword [free_var_108], rax
 11905 000095F6 48B8-                   	mov rax, sob_void
 11905 000095F8 [0000000000000000] 
 11906                                  
 11907 00009600 4889C7                  	mov rdi, rax
 11908 00009603 E89A670000              	call print_sexpr_if_not_void
 11909                                  
 11910 00009608 48B8-                   	mov rax, L_constants + 0
 11910 0000960A [0000000000000000] 
 11911 00009612 48890425[68030000]      	mov qword [free_var_109], rax
 11912 0000961A 48B8-                   	mov rax, sob_void
 11912 0000961C [0000000000000000] 
 11913                                  
 11914 00009624 4889C7                  	mov rdi, rax
 11915 00009627 E876670000              	call print_sexpr_if_not_void
 11916                                  
 11917 0000962C 48B8-                   	mov rax, L_constants + 0
 11917 0000962E [0000000000000000] 
 11918 00009636 48890425[70030000]      	mov qword [free_var_110], rax
 11919 0000963E 48B8-                   	mov rax, sob_void
 11919 00009640 [0000000000000000] 
 11920                                  
 11921 00009648 4889C7                  	mov rdi, rax
 11922 0000964B E852670000              	call print_sexpr_if_not_void
 11923                                  
 11924 00009650 48B8-                   	mov rax, L_constants + 0
 11924 00009652 [0000000000000000] 
 11925 0000965A 48890425[78030000]      	mov qword [free_var_111], rax
 11926 00009662 48B8-                   	mov rax, sob_void
 11926 00009664 [0000000000000000] 
 11927                                  
 11928 0000966C 4889C7                  	mov rdi, rax
 11929 0000966F E82E670000              	call print_sexpr_if_not_void
 11930                                  
 11931 00009674 48B8-                   	mov rax, L_constants + 0
 11931 00009676 [0000000000000000] 
 11932 0000967E 48890425[80030000]      	mov qword [free_var_112], rax
 11933 00009686 48B8-                   	mov rax, sob_void
 11933 00009688 [0000000000000000] 
 11934                                  
 11935 00009690 4889C7                  	mov rdi, rax
 11936 00009693 E80A670000              	call print_sexpr_if_not_void
 11937                                  
 11938 00009698 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 11939 0000969D E8EF660000              	call malloc
 11940 000096A2 50                      	push rax
 11941 000096A3 BF00000000              	mov rdi, 8 * 0	; new rib
 11942 000096A8 E8E4660000              	call malloc
 11943 000096AD 50                      	push rax
 11944 000096AE BF08000000              	mov rdi, 8 * 1	; extended env
 11945 000096B3 E8D9660000              	call malloc
 11946 000096B8 488B7D10                	mov rdi, ENV
 11947 000096BC BE00000000              	mov rsi, 0
 11948 000096C1 BA01000000              	mov rdx, 1
 11949                                  .L_lambda_simple_env_loop_005c:	; ext_env[i + 1] <-- env[i]
 11950 000096C6 4883FE00                	cmp rsi, 0
 11951 000096CA 7410                    	je .L_lambda_simple_env_end_005c
 11952 000096CC 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 11953 000096D0 48890CD0                	mov qword [rax + 8 * rdx], rcx
 11954 000096D4 48FFC6                  	inc rsi
 11955 000096D7 48FFC2                  	inc rdx
 11956 000096DA EBEA                    	jmp .L_lambda_simple_env_loop_005c
 11957                                  .L_lambda_simple_env_end_005c:
 11958 000096DC 5B                      	pop rbx
 11959 000096DD BE00000000              	mov rsi, 0
 11960                                  .L_lambda_simple_params_loop_005c:	; copy params
 11961 000096E2 4883FE00                	cmp rsi, 0
 11962 000096E6 740E                    	je .L_lambda_simple_params_end_005c
 11963 000096E8 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 11964 000096ED 488914F3                	mov qword [rbx + 8 * rsi], rdx
 11965 000096F1 48FFC6                  	inc rsi
 11966 000096F4 EBEC                    	jmp .L_lambda_simple_params_loop_005c
 11967                                  .L_lambda_simple_params_end_005c:
 11968 000096F6 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 11969 000096F9 4889C3                  	mov rbx, rax
 11970 000096FC 58                      	pop rax
 11971 000096FD C60005                  	mov byte [rax], T_closure
 11972 00009700 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 11973 00009704 48C74009[11970000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_005c
 11974 0000970C E9EE010000              	jmp .L_lambda_simple_end_005c
 11975                                  .L_lambda_simple_code_005c:	; lambda-simple body
 11976 00009711 48837C241001            	cmp qword [rsp + 8 * 2], 1
 11977 00009717 740B                    	je .L_lambda_simple_arity_check_ok_005c
 11978 00009719 FF742410                	push qword [rsp + 8 * 2]
 11979 0000971D 6A01                    	push 1
 11980 0000971F E926660000              	jmp L_error_incorrect_arity_simple
 11981                                  .L_lambda_simple_arity_check_ok_005c:
 11982 00009724 C8000000                	enter 0, 0
 11983 00009728 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 11984 0000972D E85F660000              	call malloc
 11985 00009732 50                      	push rax
 11986 00009733 BF08000000              	mov rdi, 8 * 1	; new rib
 11987 00009738 E854660000              	call malloc
 11988 0000973D 50                      	push rax
 11989 0000973E BF10000000              	mov rdi, 8 * 2	; extended env
 11990 00009743 E849660000              	call malloc
 11991 00009748 488B7D10                	mov rdi, ENV
 11992 0000974C BE00000000              	mov rsi, 0
 11993 00009751 BA01000000              	mov rdx, 1
 11994                                  .L_lambda_opt_env_loop_0010:	; ext_env[i + 1] <-- env[i]
 11995 00009756 4883FE01                	cmp rsi, 1
 11996 0000975A 7410                    	je .L_lambda_opt_env_end_0010
 11997 0000975C 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 11998 00009760 48890CD0                	mov qword [rax + 8 * rdx], rcx
 11999 00009764 48FFC6                  	inc rsi
 12000 00009767 48FFC2                  	inc rdx
 12001 0000976A EBEA                    	jmp .L_lambda_opt_env_loop_0010
 12002                                  .L_lambda_opt_env_end_0010:
 12003 0000976C 5B                      	pop rbx
 12004 0000976D BE00000000              	mov rsi, 0
 12005                                  .L_lambda_opt_params_loop_0010:	; copy params
 12006 00009772 4883FE01                	cmp rsi, 1
 12007 00009776 740E                    	je .L_lambda_opt_params_end_0010
 12008 00009778 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 12009 0000977D 488914F3                	mov qword [rbx + 8 * rsi], rdx
 12010 00009781 48FFC6                  	inc rsi
 12011 00009784 EBEC                    	jmp .L_lambda_opt_params_loop_0010
 12012                                  .L_lambda_opt_params_end_0010:
 12013 00009786 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 12014 00009789 4889C3                  	mov rbx, rax
 12015 0000978C 58                      	pop rax
 12016 0000978D C60005                  	mov byte [rax], T_closure
 12017 00009790 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 12018 00009794 48C74009[A1970000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_opt_code_0010
 12019 0000979C E95A010000              	jmp .L_lambda_opt_end_0010
 12020                                  .L_lambda_opt_code_0010:	; lambda-opt body
 12021 000097A1 48837C241000            	cmp qword [rsp + 8 * 2], 0
 12022 000097A7 740D                    	je .L_lambda_opt_arity_check_exact_0010
 12023 000097A9 7F43                    	jg .L_lambda_opt_arity_check_more_0010
 12024 000097AB FF742410                	push qword [rsp + 8 * 2]
 12025 000097AF 6A00                    	push 0
 12026 000097B1 E9A8650000              	jmp L_error_incorrect_arity_opt
 12027                                  .L_lambda_opt_arity_check_exact_0010:
 12028 000097B6 48C744241001000000      	mov qword [rsp + 8 * 2], 1
 12029 000097BF BA03000000              	mov rdx, 3
 12030 000097C4 FF3424                  	push qword [rsp]
 12031 000097C7 BE01000000              	mov rsi, 1
 12032                                  .L_lambda_opt_stack_shrink_loop_002e:
 12033 000097CC 4839D6                  	cmp rsi, rdx
 12034 000097CF 7411                    	je .L_lambda_opt_stack_shrink_loop_exit_002e
 12035 000097D1 488D5CF408              	lea rbx, [rsp + 8 + rsi * 8]
 12036 000097D6 488B0B                  	mov rcx, [rbx]
 12037 000097D9 48894BF8                	mov qword [rbx - 8], rcx
 12038 000097DD 48FFC6                  	inc rsi
 12039 000097E0 EBEA                    	jmp .L_lambda_opt_stack_shrink_loop_002e
 12040                                  .L_lambda_opt_stack_shrink_loop_exit_002e:
 12041 000097E2 48C703[01000000]        	mov qword [rbx], sob_nil
 12042 000097E9 E985000000              	jmp .L_lambda_opt_stack_adjusted_0010
 12043                                  .L_lambda_opt_arity_check_more_0010:
 12044 000097EE 488B542410              	mov rdx, qword [rsp + 8 * 2]
 12045 000097F3 4883EA00                	sub rdx, 0
 12046 000097F7 48C744241001000000      	mov qword [rsp + 8 * 2], 1
 12047 00009800 BE00000000              	mov rsi, 0
 12048 00009805 488D5CD410              	lea rbx, [rsp + 2 * 8 + 0 * 8 + rdx * 8]
 12049 0000980A 48B9-                   	mov rcx, sob_nil
 12049 0000980C [0100000000000000] 
 12050                                  .L_lambda_opt_stack_shrink_loop_002f:
 12051 00009814 4839D6                  	cmp rsi, rdx
 12052 00009817 7427                    je .L_lambda_opt_stack_shrink_loop_exit_002f
 12053 00009819 BF11000000              	mov rdi, 17 ; 1+8+8
 12054 0000981E E86E650000              	call malloc
 12055 00009823 48894809                	mov SOB_PAIR_CDR(rax), rcx
 12056 00009827 48F7DE                  	neg rsi
 12057 0000982A 488B0CF3                	mov rcx, qword [rbx + rsi * 8]
 12058 0000982E 48F7DE                  	neg rsi
 12059 00009831 48894801                	mov SOB_PAIR_CAR(rax), rcx
 12060 00009835 C60021                  	mov byte [rax], T_pair
 12061 00009838 4889C1                  	mov rcx, rax
 12062 0000983B 48FFC6                  	inc rsi
 12063 0000983E EBD4                    	jmp .L_lambda_opt_stack_shrink_loop_002f
 12064                                  .L_lambda_opt_stack_shrink_loop_exit_002f:
 12065 00009840 48890B                  	mov qword [rbx], rcx
 12066 00009843 4883EB08                	sub rbx, 8
 12067 00009847 4889E7                  	mov rdi, rsp
 12068 0000984A 4883C710                	add rdi, 16
 12069 0000984E BE03000000              	mov rsi, 3
 12070                                  .L_lambda_opt_stack_shrink_loop_0030:
 12071 00009853 4883FE00                	cmp rsi,0
 12072 00009857 7413                    	je .L_lambda_opt_stack_shrink_loop_exit_0030
 12073 00009859 488B0F                  	mov rcx, qword [rdi]
 12074 0000985C 48890B                  	mov [rbx], rcx
 12075 0000985F 48FFCE                  	dec rsi
 12076 00009862 4883EB08                	sub rbx, 8
 12077 00009866 4883EF08                	sub rdi, 8
 12078 0000986A EBE7                    	jmp .L_lambda_opt_stack_shrink_loop_0030
 12079                                  .L_lambda_opt_stack_shrink_loop_exit_0030:
 12080 0000986C 4883C308                	add rbx, 8
 12081 00009870 4889DC                  	mov rsp, rbx
 12082                                  .L_lambda_opt_stack_adjusted_0010:
 12083 00009873 C8000000                	enter 0, 0
 12084 00009877 488B4520                	mov rax, qword [rbp + 8 * (4 + 0)]
 12085 0000987B 50                      	push rax
 12086 0000987C 488B0425[C0000000]      	mov rax, qword [free_var_24]
 12087 00009884 50                      	push rax
 12088 00009885 6A02                    	push 2
 12089 00009887 488B0425[D8020000]      	mov rax, qword [free_var_91]
 12090                                  	assert_closure(rax)
    42 0000988F 803805              <1>  cmp byte [%1], %2
    43 00009892 0F85F27C0000        <1>  jne L_error_incorrect_type
 12091 00009898 FF7001                  	push SOB_CLOSURE_ENV(rax)
 12092 0000989B FF5009                  	call SOB_CLOSURE_CODE(rax)
 12093 0000989E 50                      	push rax
 12094 0000989F 488B4510                	mov rax, qword [rbp + 8 * 2]
 12095 000098A3 488B00                  	mov rax, qword [rax + 8 * 0]
 12096 000098A6 488B00                  	mov rax, qword [rax + 8 * 0]
 12097 000098A9 50                      	push rax
 12098 000098AA 6A02                    	push 2
 12099 000098AC 488B0425[C8020000]      	mov rax, qword [free_var_89]
 12100                                  	assert_closure(rax)
    42 000098B4 803805              <1>  cmp byte [%1], %2
    43 000098B7 0F85CD7C0000        <1>  jne L_error_incorrect_type
 12101 000098BD FF7001                  	push SOB_CLOSURE_ENV(rax)
 12102 000098C0 FF7508                  	push qword [rbp + 8 * 1] ; old ret addr
 12103 000098C3 FF7500                  	push qword [rbp] ; same the old rbp
 12104 000098C6 BA05000000              	mov rdx, 2 + 3
 12105 000098CB 488B4D18                	mov rcx, COUNT
 12106 000098CF 488D4CCD20              	lea rcx, [rbp + 8*4 + rcx * 8]
 12107 000098D4 4889EF                  	mov rdi, rbp
 12108                                  .L_tc_recycle_frame_loop_007a:
 12109 000098D7 4883FA00                	cmp rdx, 0
 12110 000098DB 7413                    	je .L_tc_recycle_frame_done_007a
 12111 000098DD 4883E908                	sub rcx, 8
 12112 000098E1 4883EF08                	sub rdi, 8
 12113 000098E5 488B37                  	mov rsi, [rdi]
 12114 000098E8 488931                  	mov qword [rcx], rsi
 12115 000098EB 48FFCA                  	dec rdx
 12116 000098EE EBE7                    	jmp .L_tc_recycle_frame_loop_007a
 12117                                  .L_tc_recycle_frame_done_007a:
 12118 000098F0 5D                      	pop rbp ; restore the old rbp
 12119 000098F1 4889CC                  	mov rsp, rcx
 12120 000098F4 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 12121 000098F7 C9                      	leave
 12122 000098F8 C21800                  	ret 8 * (2 + 1)
 12123                                  .L_lambda_opt_end_0010:	; new closure is in rax
 12124 000098FB C9                      	leave
 12125 000098FC C21800                  	ret 8 * (2 + 1)
 12126                                  .L_lambda_simple_end_005c:	; new closure is in rax
 12127 000098FF 50                      	push rax
 12128 00009900 6A01                    	push 1
 12129 00009902 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 12130 00009907 E885640000              	call malloc
 12131 0000990C 50                      	push rax
 12132 0000990D BF00000000              	mov rdi, 8 * 0	; new rib
 12133 00009912 E87A640000              	call malloc
 12134 00009917 50                      	push rax
 12135 00009918 BF08000000              	mov rdi, 8 * 1	; extended env
 12136 0000991D E86F640000              	call malloc
 12137 00009922 488B7D10                	mov rdi, ENV
 12138 00009926 BE00000000              	mov rsi, 0
 12139 0000992B BA01000000              	mov rdx, 1
 12140                                  .L_lambda_simple_env_loop_005b:	; ext_env[i + 1] <-- env[i]
 12141 00009930 4883FE00                	cmp rsi, 0
 12142 00009934 7410                    	je .L_lambda_simple_env_end_005b
 12143 00009936 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 12144 0000993A 48890CD0                	mov qword [rax + 8 * rdx], rcx
 12145 0000993E 48FFC6                  	inc rsi
 12146 00009941 48FFC2                  	inc rdx
 12147 00009944 EBEA                    	jmp .L_lambda_simple_env_loop_005b
 12148                                  .L_lambda_simple_env_end_005b:
 12149 00009946 5B                      	pop rbx
 12150 00009947 BE00000000              	mov rsi, 0
 12151                                  .L_lambda_simple_params_loop_005b:	; copy params
 12152 0000994C 4883FE00                	cmp rsi, 0
 12153 00009950 740E                    	je .L_lambda_simple_params_end_005b
 12154 00009952 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 12155 00009957 488914F3                	mov qword [rbx + 8 * rsi], rdx
 12156 0000995B 48FFC6                  	inc rsi
 12157 0000995E EBEC                    	jmp .L_lambda_simple_params_loop_005b
 12158                                  .L_lambda_simple_params_end_005b:
 12159 00009960 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 12160 00009963 4889C3                  	mov rbx, rax
 12161 00009966 58                      	pop rax
 12162 00009967 C60005                  	mov byte [rax], T_closure
 12163 0000996A 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 12164 0000996E 48C74009[7B990000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_005b
 12165 00009976 E90B010000              	jmp .L_lambda_simple_end_005b
 12166                                  .L_lambda_simple_code_005b:	; lambda-simple body
 12167 0000997B 48837C241001            	cmp qword [rsp + 8 * 2], 1
 12168 00009981 740B                    	je .L_lambda_simple_arity_check_ok_005b
 12169 00009983 FF742410                	push qword [rsp + 8 * 2]
 12170 00009987 6A01                    	push 1
 12171 00009989 E9BC630000              	jmp L_error_incorrect_arity_simple
 12172                                  .L_lambda_simple_arity_check_ok_005b:
 12173 0000998E C8000000                	enter 0, 0
 12174 00009992 488B0425[30030000]      	mov rax, qword [free_var_102]
 12175 0000999A 50                      	push rax
 12176 0000999B 6A01                    	push 1
 12177 0000999D 488B4520                	mov rax, qword [rbp + 8 * (4 + 0)]
 12178                                  	assert_closure(rax)
    42 000099A1 803805              <1>  cmp byte [%1], %2
    43 000099A4 0F85E07B0000        <1>  jne L_error_incorrect_type
 12179 000099AA FF7001                  	push SOB_CLOSURE_ENV(rax)
 12180 000099AD FF5009                  	call SOB_CLOSURE_CODE(rax)
 12181 000099B0 48890425[60030000]      	mov qword [free_var_108], rax
 12182 000099B8 48B8-                   	mov rax, sob_void
 12182 000099BA [0000000000000000] 
 12183                                  
 12184 000099C2 488B0425[38030000]      	mov rax, qword [free_var_103]
 12185 000099CA 50                      	push rax
 12186 000099CB 6A01                    	push 1
 12187 000099CD 488B4520                	mov rax, qword [rbp + 8 * (4 + 0)]
 12188                                  	assert_closure(rax)
    42 000099D1 803805              <1>  cmp byte [%1], %2
    43 000099D4 0F85B07B0000        <1>  jne L_error_incorrect_type
 12189 000099DA FF7001                  	push SOB_CLOSURE_ENV(rax)
 12190 000099DD FF5009                  	call SOB_CLOSURE_CODE(rax)
 12191 000099E0 48890425[68030000]      	mov qword [free_var_109], rax
 12192 000099E8 48B8-                   	mov rax, sob_void
 12192 000099EA [0000000000000000] 
 12193                                  
 12194 000099F2 488B0425[50030000]      	mov rax, qword [free_var_106]
 12195 000099FA 50                      	push rax
 12196 000099FB 6A01                    	push 1
 12197 000099FD 488B4520                	mov rax, qword [rbp + 8 * (4 + 0)]
 12198                                  	assert_closure(rax)
    42 00009A01 803805              <1>  cmp byte [%1], %2
    43 00009A04 0F85807B0000        <1>  jne L_error_incorrect_type
 12199 00009A0A FF7001                  	push SOB_CLOSURE_ENV(rax)
 12200 00009A0D FF5009                  	call SOB_CLOSURE_CODE(rax)
 12201 00009A10 48890425[70030000]      	mov qword [free_var_110], rax
 12202 00009A18 48B8-                   	mov rax, sob_void
 12202 00009A1A [0000000000000000] 
 12203                                  
 12204 00009A22 488B0425[40030000]      	mov rax, qword [free_var_104]
 12205 00009A2A 50                      	push rax
 12206 00009A2B 6A01                    	push 1
 12207 00009A2D 488B4520                	mov rax, qword [rbp + 8 * (4 + 0)]
 12208                                  	assert_closure(rax)
    42 00009A31 803805              <1>  cmp byte [%1], %2
    43 00009A34 0F85507B0000        <1>  jne L_error_incorrect_type
 12209 00009A3A FF7001                  	push SOB_CLOSURE_ENV(rax)
 12210 00009A3D FF5009                  	call SOB_CLOSURE_CODE(rax)
 12211 00009A40 48890425[78030000]      	mov qword [free_var_111], rax
 12212 00009A48 48B8-                   	mov rax, sob_void
 12212 00009A4A [0000000000000000] 
 12213                                  
 12214 00009A52 488B0425[48030000]      	mov rax, qword [free_var_105]
 12215 00009A5A 50                      	push rax
 12216 00009A5B 6A01                    	push 1
 12217 00009A5D 488B4520                	mov rax, qword [rbp + 8 * (4 + 0)]
 12218                                  	assert_closure(rax)
    42 00009A61 803805              <1>  cmp byte [%1], %2
    43 00009A64 0F85207B0000        <1>  jne L_error_incorrect_type
 12219 00009A6A FF7001                  	push SOB_CLOSURE_ENV(rax)
 12220 00009A6D FF5009                  	call SOB_CLOSURE_CODE(rax)
 12221 00009A70 48890425[80030000]      	mov qword [free_var_112], rax
 12222 00009A78 48B8-                   	mov rax, sob_void
 12222 00009A7A [0000000000000000] 
 12223 00009A82 C9                      	leave
 12224 00009A83 C21800                  	ret 8 * (2 + 1)
 12225                                  .L_lambda_simple_end_005b:	; new closure is in rax
 12226                                  	assert_closure(rax)
    42 00009A86 803805              <1>  cmp byte [%1], %2
    43 00009A89 0F85FB7A0000        <1>  jne L_error_incorrect_type
 12227 00009A8F FF7001                  	push SOB_CLOSURE_ENV(rax)
 12228 00009A92 FF5009                  	call SOB_CLOSURE_CODE(rax)
 12229                                  
 12230 00009A95 4889C7                  	mov rdi, rax
 12231 00009A98 E805630000              	call print_sexpr_if_not_void
 12232                                  
 12233 00009A9D 48B8-                   	mov rax, L_constants + 0
 12233 00009A9F [0000000000000000] 
 12234 00009AA7 48890425[88030000]      	mov qword [free_var_113], rax
 12235 00009AAF 48B8-                   	mov rax, sob_void
 12235 00009AB1 [0000000000000000] 
 12236                                  
 12237 00009AB9 4889C7                  	mov rdi, rax
 12238 00009ABC E8E1620000              	call print_sexpr_if_not_void
 12239                                  
 12240 00009AC1 48B8-                   	mov rax, L_constants + 0
 12240 00009AC3 [0000000000000000] 
 12241 00009ACB 48890425[90030000]      	mov qword [free_var_114], rax
 12242 00009AD3 48B8-                   	mov rax, sob_void
 12242 00009AD5 [0000000000000000] 
 12243                                  
 12244 00009ADD 4889C7                  	mov rdi, rax
 12245 00009AE0 E8BD620000              	call print_sexpr_if_not_void
 12246                                  
 12247 00009AE5 48B8-                   	mov rax, L_constants + 342
 12247 00009AE7 [5601000000000000] 
 12248 00009AEF 50                      	push rax
 12249 00009AF0 6A01                    	push 1
 12250 00009AF2 488B0425[C0000000]      	mov rax, qword [free_var_24]
 12251                                  	assert_closure(rax)
    42 00009AFA 803805              <1>  cmp byte [%1], %2
    43 00009AFD 0F85877A0000        <1>  jne L_error_incorrect_type
 12252 00009B03 FF7001                  	push SOB_CLOSURE_ENV(rax)
 12253 00009B06 FF5009                  	call SOB_CLOSURE_CODE(rax)
 12254 00009B09 50                      	push rax
 12255 00009B0A 48B8-                   	mov rax, L_constants + 346
 12255 00009B0C [5A01000000000000] 
 12256 00009B14 50                      	push rax
 12257 00009B15 6A01                    	push 1
 12258 00009B17 488B0425[C0000000]      	mov rax, qword [free_var_24]
 12259                                  	assert_closure(rax)
    42 00009B1F 803805              <1>  cmp byte [%1], %2
    43 00009B22 0F85627A0000        <1>  jne L_error_incorrect_type
 12260 00009B28 FF7001                  	push SOB_CLOSURE_ENV(rax)
 12261 00009B2B FF5009                  	call SOB_CLOSURE_CODE(rax)
 12262 00009B2E 50                      	push rax
 12263 00009B2F 6A02                    	push 2
 12264 00009B31 488B0425[10030000]      	mov rax, qword [free_var_98]
 12265                                  	assert_closure(rax)
    42 00009B39 803805              <1>  cmp byte [%1], %2
    43 00009B3C 0F85487A0000        <1>  jne L_error_incorrect_type
 12266 00009B42 FF7001                  	push SOB_CLOSURE_ENV(rax)
 12267 00009B45 FF5009                  	call SOB_CLOSURE_CODE(rax)
 12268 00009B48 50                      	push rax
 12269 00009B49 6A01                    	push 1
 12270 00009B4B BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 12271 00009B50 E83C620000              	call malloc
 12272 00009B55 50                      	push rax
 12273 00009B56 BF00000000              	mov rdi, 8 * 0	; new rib
 12274 00009B5B E831620000              	call malloc
 12275 00009B60 50                      	push rax
 12276 00009B61 BF08000000              	mov rdi, 8 * 1	; extended env
 12277 00009B66 E826620000              	call malloc
 12278 00009B6B 488B7D10                	mov rdi, ENV
 12279 00009B6F BE00000000              	mov rsi, 0
 12280 00009B74 BA01000000              	mov rdx, 1
 12281                                  .L_lambda_simple_env_loop_005d:	; ext_env[i + 1] <-- env[i]
 12282 00009B79 4883FE00                	cmp rsi, 0
 12283 00009B7D 7410                    	je .L_lambda_simple_env_end_005d
 12284 00009B7F 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 12285 00009B83 48890CD0                	mov qword [rax + 8 * rdx], rcx
 12286 00009B87 48FFC6                  	inc rsi
 12287 00009B8A 48FFC2                  	inc rdx
 12288 00009B8D EBEA                    	jmp .L_lambda_simple_env_loop_005d
 12289                                  .L_lambda_simple_env_end_005d:
 12290 00009B8F 5B                      	pop rbx
 12291 00009B90 BE00000000              	mov rsi, 0
 12292                                  .L_lambda_simple_params_loop_005d:	; copy params
 12293 00009B95 4883FE00                	cmp rsi, 0
 12294 00009B99 740E                    	je .L_lambda_simple_params_end_005d
 12295 00009B9B 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 12296 00009BA0 488914F3                	mov qword [rbx + 8 * rsi], rdx
 12297 00009BA4 48FFC6                  	inc rsi
 12298 00009BA7 EBEC                    	jmp .L_lambda_simple_params_loop_005d
 12299                                  .L_lambda_simple_params_end_005d:
 12300 00009BA9 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 12301 00009BAC 4889C3                  	mov rbx, rax
 12302 00009BAF 58                      	pop rax
 12303 00009BB0 C60005                  	mov byte [rax], T_closure
 12304 00009BB3 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 12305 00009BB7 48C74009[C49B0000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_005d
 12306 00009BBF E915030000              	jmp .L_lambda_simple_end_005d
 12307                                  .L_lambda_simple_code_005d:	; lambda-simple body
 12308 00009BC4 48837C241001            	cmp qword [rsp + 8 * 2], 1
 12309 00009BCA 740B                    	je .L_lambda_simple_arity_check_ok_005d
 12310 00009BCC FF742410                	push qword [rsp + 8 * 2]
 12311 00009BD0 6A01                    	push 1
 12312 00009BD2 E973610000              	jmp L_error_incorrect_arity_simple
 12313                                  .L_lambda_simple_arity_check_ok_005d:
 12314 00009BD7 C8000000                	enter 0, 0
 12315 00009BDB BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 12316 00009BE0 E8AC610000              	call malloc
 12317 00009BE5 50                      	push rax
 12318 00009BE6 BF08000000              	mov rdi, 8 * 1	; new rib
 12319 00009BEB E8A1610000              	call malloc
 12320 00009BF0 50                      	push rax
 12321 00009BF1 BF10000000              	mov rdi, 8 * 2	; extended env
 12322 00009BF6 E896610000              	call malloc
 12323 00009BFB 488B7D10                	mov rdi, ENV
 12324 00009BFF BE00000000              	mov rsi, 0
 12325 00009C04 BA01000000              	mov rdx, 1
 12326                                  .L_lambda_simple_env_loop_005e:	; ext_env[i + 1] <-- env[i]
 12327 00009C09 4883FE01                	cmp rsi, 1
 12328 00009C0D 7410                    	je .L_lambda_simple_env_end_005e
 12329 00009C0F 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 12330 00009C13 48890CD0                	mov qword [rax + 8 * rdx], rcx
 12331 00009C17 48FFC6                  	inc rsi
 12332 00009C1A 48FFC2                  	inc rdx
 12333 00009C1D EBEA                    	jmp .L_lambda_simple_env_loop_005e
 12334                                  .L_lambda_simple_env_end_005e:
 12335 00009C1F 5B                      	pop rbx
 12336 00009C20 BE00000000              	mov rsi, 0
 12337                                  .L_lambda_simple_params_loop_005e:	; copy params
 12338 00009C25 4883FE01                	cmp rsi, 1
 12339 00009C29 740E                    	je .L_lambda_simple_params_end_005e
 12340 00009C2B 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 12341 00009C30 488914F3                	mov qword [rbx + 8 * rsi], rdx
 12342 00009C34 48FFC6                  	inc rsi
 12343 00009C37 EBEC                    	jmp .L_lambda_simple_params_loop_005e
 12344                                  .L_lambda_simple_params_end_005e:
 12345 00009C39 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 12346 00009C3C 4889C3                  	mov rbx, rax
 12347 00009C3F 58                      	pop rax
 12348 00009C40 C60005                  	mov byte [rax], T_closure
 12349 00009C43 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 12350 00009C47 48C74009[549C0000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_005e
 12351 00009C4F E9F2000000              	jmp .L_lambda_simple_end_005e
 12352                                  .L_lambda_simple_code_005e:	; lambda-simple body
 12353 00009C54 48837C241001            	cmp qword [rsp + 8 * 2], 1
 12354 00009C5A 740B                    	je .L_lambda_simple_arity_check_ok_005e
 12355 00009C5C FF742410                	push qword [rsp + 8 * 2]
 12356 00009C60 6A01                    	push 1
 12357 00009C62 E9E3600000              	jmp L_error_incorrect_arity_simple
 12358                                  .L_lambda_simple_arity_check_ok_005e:
 12359 00009C67 C8000000                	enter 0, 0
 12360 00009C6B 48B8-                   	mov rax, L_constants + 344
 12360 00009C6D [5801000000000000] 
 12361 00009C75 50                      	push rax
 12362 00009C76 488B4520                	mov rax, qword [rbp + 8 * (4 + 0)]
 12363 00009C7A 50                      	push rax
 12364 00009C7B 48B8-                   	mov rax, L_constants + 342
 12364 00009C7D [5601000000000000] 
 12365 00009C85 50                      	push rax
 12366 00009C86 6A03                    	push 3
 12367 00009C88 488B0425[68030000]      	mov rax, qword [free_var_109]
 12368                                  	assert_closure(rax)
    42 00009C90 803805              <1>  cmp byte [%1], %2
    43 00009C93 0F85F1780000        <1>  jne L_error_incorrect_type
 12369 00009C99 FF7001                  	push SOB_CLOSURE_ENV(rax)
 12370 00009C9C FF5009                  	call SOB_CLOSURE_CODE(rax)
 12371 00009C9F 483D[02000000]          	cmp rax, sob_boolean_false
 12372 00009CA5 0F8493000000                      	je .L_if_else_0038
 12373 00009CAB 488B4510                          	mov rax, qword [rbp + 8 * 2]
 12374 00009CAF 488B00                  	mov rax, qword [rax + 8 * 0]
 12375 00009CB2 488B00                  	mov rax, qword [rax + 8 * 0]
 12376 00009CB5 50                      	push rax
 12377 00009CB6 488B4520                	mov rax, qword [rbp + 8 * (4 + 0)]
 12378 00009CBA 50                      	push rax
 12379 00009CBB 6A01                    	push 1
 12380 00009CBD 488B0425[C0000000]      	mov rax, qword [free_var_24]
 12381                                  	assert_closure(rax)
    42 00009CC5 803805              <1>  cmp byte [%1], %2
    43 00009CC8 0F85BC780000        <1>  jne L_error_incorrect_type
 12382 00009CCE FF7001                  	push SOB_CLOSURE_ENV(rax)
 12383 00009CD1 FF5009                  	call SOB_CLOSURE_CODE(rax)
 12384 00009CD4 50                      	push rax
 12385 00009CD5 6A02                    	push 2
 12386 00009CD7 488B0425[08030000]      	mov rax, qword [free_var_97]
 12387                                  	assert_closure(rax)
    42 00009CDF 803805              <1>  cmp byte [%1], %2
    43 00009CE2 0F85A2780000        <1>  jne L_error_incorrect_type
 12388 00009CE8 FF7001                  	push SOB_CLOSURE_ENV(rax)
 12389 00009CEB FF5009                  	call SOB_CLOSURE_CODE(rax)
 12390 00009CEE 50                      	push rax
 12391 00009CEF 6A01                    	push 1
 12392 00009CF1 488B0425[C8000000]      	mov rax, qword [free_var_25]
 12393                                  	assert_closure(rax)
    42 00009CF9 803805              <1>  cmp byte [%1], %2
    43 00009CFC 0F8588780000        <1>  jne L_error_incorrect_type
 12394 00009D02 FF7001                  	push SOB_CLOSURE_ENV(rax)
 12395 00009D05 FF7508                  	push qword [rbp + 8 * 1] ; old ret addr
 12396 00009D08 FF7500                  	push qword [rbp] ; same the old rbp
 12397 00009D0B BA04000000              	mov rdx, 1 + 3
 12398 00009D10 488B4D18                	mov rcx, COUNT
 12399 00009D14 488D4CCD20              	lea rcx, [rbp + 8*4 + rcx * 8]
 12400 00009D19 4889EF                  	mov rdi, rbp
 12401                                  .L_tc_recycle_frame_loop_007b:
 12402 00009D1C 4883FA00                	cmp rdx, 0
 12403 00009D20 7413                    	je .L_tc_recycle_frame_done_007b
 12404 00009D22 4883E908                	sub rcx, 8
 12405 00009D26 4883EF08                	sub rdi, 8
 12406 00009D2A 488B37                  	mov rsi, [rdi]
 12407 00009D2D 488931                  	mov qword [rcx], rsi
 12408 00009D30 48FFCA                  	dec rdx
 12409 00009D33 EBE7                    	jmp .L_tc_recycle_frame_loop_007b
 12410                                  .L_tc_recycle_frame_done_007b:
 12411 00009D35 5D                      	pop rbp ; restore the old rbp
 12412 00009D36 4889CC                  	mov rsp, rcx
 12413 00009D39 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 12414 00009D3C EB04                    	jmp .L_if_end_0038
 12415                                            .L_if_else_0038:
 12416 00009D3E 488B4520                          	mov rax, qword [rbp + 8 * (4 + 0)]
 12417                                  .L_if_end_0038:
 12418 00009D42 C9                      	leave
 12419 00009D43 C21800                  	ret 8 * (2 + 1)
 12420                                  .L_lambda_simple_end_005e:	; new closure is in rax
 12421 00009D46 48890425[88030000]      	mov qword [free_var_113], rax
 12422 00009D4E 48B8-                   	mov rax, sob_void
 12422 00009D50 [0000000000000000] 
 12423                                  
 12424 00009D58 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 12425 00009D5D E82F600000              	call malloc
 12426 00009D62 50                      	push rax
 12427 00009D63 BF08000000              	mov rdi, 8 * 1	; new rib
 12428 00009D68 E824600000              	call malloc
 12429 00009D6D 50                      	push rax
 12430 00009D6E BF10000000              	mov rdi, 8 * 2	; extended env
 12431 00009D73 E819600000              	call malloc
 12432 00009D78 488B7D10                	mov rdi, ENV
 12433 00009D7C BE00000000              	mov rsi, 0
 12434 00009D81 BA01000000              	mov rdx, 1
 12435                                  .L_lambda_simple_env_loop_005f:	; ext_env[i + 1] <-- env[i]
 12436 00009D86 4883FE01                	cmp rsi, 1
 12437 00009D8A 7410                    	je .L_lambda_simple_env_end_005f
 12438 00009D8C 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 12439 00009D90 48890CD0                	mov qword [rax + 8 * rdx], rcx
 12440 00009D94 48FFC6                  	inc rsi
 12441 00009D97 48FFC2                  	inc rdx
 12442 00009D9A EBEA                    	jmp .L_lambda_simple_env_loop_005f
 12443                                  .L_lambda_simple_env_end_005f:
 12444 00009D9C 5B                      	pop rbx
 12445 00009D9D BE00000000              	mov rsi, 0
 12446                                  .L_lambda_simple_params_loop_005f:	; copy params
 12447 00009DA2 4883FE01                	cmp rsi, 1
 12448 00009DA6 740E                    	je .L_lambda_simple_params_end_005f
 12449 00009DA8 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 12450 00009DAD 488914F3                	mov qword [rbx + 8 * rsi], rdx
 12451 00009DB1 48FFC6                  	inc rsi
 12452 00009DB4 EBEC                    	jmp .L_lambda_simple_params_loop_005f
 12453                                  .L_lambda_simple_params_end_005f:
 12454 00009DB6 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 12455 00009DB9 4889C3                  	mov rbx, rax
 12456 00009DBC 58                      	pop rax
 12457 00009DBD C60005                  	mov byte [rax], T_closure
 12458 00009DC0 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 12459 00009DC4 48C74009[D19D0000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_005f
 12460 00009DCC E9F2000000              	jmp .L_lambda_simple_end_005f
 12461                                  .L_lambda_simple_code_005f:	; lambda-simple body
 12462 00009DD1 48837C241001            	cmp qword [rsp + 8 * 2], 1
 12463 00009DD7 740B                    	je .L_lambda_simple_arity_check_ok_005f
 12464 00009DD9 FF742410                	push qword [rsp + 8 * 2]
 12465 00009DDD 6A01                    	push 1
 12466 00009DDF E9665F0000              	jmp L_error_incorrect_arity_simple
 12467                                  .L_lambda_simple_arity_check_ok_005f:
 12468 00009DE4 C8000000                	enter 0, 0
 12469 00009DE8 48B8-                   	mov rax, L_constants + 348
 12469 00009DEA [5C01000000000000] 
 12470 00009DF2 50                      	push rax
 12471 00009DF3 488B4520                	mov rax, qword [rbp + 8 * (4 + 0)]
 12472 00009DF7 50                      	push rax
 12473 00009DF8 48B8-                   	mov rax, L_constants + 346
 12473 00009DFA [5A01000000000000] 
 12474 00009E02 50                      	push rax
 12475 00009E03 6A03                    	push 3
 12476 00009E05 488B0425[68030000]      	mov rax, qword [free_var_109]
 12477                                  	assert_closure(rax)
    42 00009E0D 803805              <1>  cmp byte [%1], %2
    43 00009E10 0F8574770000        <1>  jne L_error_incorrect_type
 12478 00009E16 FF7001                  	push SOB_CLOSURE_ENV(rax)
 12479 00009E19 FF5009                  	call SOB_CLOSURE_CODE(rax)
 12480 00009E1C 483D[02000000]          	cmp rax, sob_boolean_false
 12481 00009E22 0F8493000000                      	je .L_if_else_0039
 12482 00009E28 488B4510                          	mov rax, qword [rbp + 8 * 2]
 12483 00009E2C 488B00                  	mov rax, qword [rax + 8 * 0]
 12484 00009E2F 488B00                  	mov rax, qword [rax + 8 * 0]
 12485 00009E32 50                      	push rax
 12486 00009E33 488B4520                	mov rax, qword [rbp + 8 * (4 + 0)]
 12487 00009E37 50                      	push rax
 12488 00009E38 6A01                    	push 1
 12489 00009E3A 488B0425[C0000000]      	mov rax, qword [free_var_24]
 12490                                  	assert_closure(rax)
    42 00009E42 803805              <1>  cmp byte [%1], %2
    43 00009E45 0F853F770000        <1>  jne L_error_incorrect_type
 12491 00009E4B FF7001                  	push SOB_CLOSURE_ENV(rax)
 12492 00009E4E FF5009                  	call SOB_CLOSURE_CODE(rax)
 12493 00009E51 50                      	push rax
 12494 00009E52 6A02                    	push 2
 12495 00009E54 488B0425[10030000]      	mov rax, qword [free_var_98]
 12496                                  	assert_closure(rax)
    42 00009E5C 803805              <1>  cmp byte [%1], %2
    43 00009E5F 0F8525770000        <1>  jne L_error_incorrect_type
 12497 00009E65 FF7001                  	push SOB_CLOSURE_ENV(rax)
 12498 00009E68 FF5009                  	call SOB_CLOSURE_CODE(rax)
 12499 00009E6B 50                      	push rax
 12500 00009E6C 6A01                    	push 1
 12501 00009E6E 488B0425[C8000000]      	mov rax, qword [free_var_25]
 12502                                  	assert_closure(rax)
    42 00009E76 803805              <1>  cmp byte [%1], %2
    43 00009E79 0F850B770000        <1>  jne L_error_incorrect_type
 12503 00009E7F FF7001                  	push SOB_CLOSURE_ENV(rax)
 12504 00009E82 FF7508                  	push qword [rbp + 8 * 1] ; old ret addr
 12505 00009E85 FF7500                  	push qword [rbp] ; same the old rbp
 12506 00009E88 BA04000000              	mov rdx, 1 + 3
 12507 00009E8D 488B4D18                	mov rcx, COUNT
 12508 00009E91 488D4CCD20              	lea rcx, [rbp + 8*4 + rcx * 8]
 12509 00009E96 4889EF                  	mov rdi, rbp
 12510                                  .L_tc_recycle_frame_loop_007c:
 12511 00009E99 4883FA00                	cmp rdx, 0
 12512 00009E9D 7413                    	je .L_tc_recycle_frame_done_007c
 12513 00009E9F 4883E908                	sub rcx, 8
 12514 00009EA3 4883EF08                	sub rdi, 8
 12515 00009EA7 488B37                  	mov rsi, [rdi]
 12516 00009EAA 488931                  	mov qword [rcx], rsi
 12517 00009EAD 48FFCA                  	dec rdx
 12518 00009EB0 EBE7                    	jmp .L_tc_recycle_frame_loop_007c
 12519                                  .L_tc_recycle_frame_done_007c:
 12520 00009EB2 5D                      	pop rbp ; restore the old rbp
 12521 00009EB3 4889CC                  	mov rsp, rcx
 12522 00009EB6 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 12523 00009EB9 EB04                    	jmp .L_if_end_0039
 12524                                            .L_if_else_0039:
 12525 00009EBB 488B4520                          	mov rax, qword [rbp + 8 * (4 + 0)]
 12526                                  .L_if_end_0039:
 12527 00009EBF C9                      	leave
 12528 00009EC0 C21800                  	ret 8 * (2 + 1)
 12529                                  .L_lambda_simple_end_005f:	; new closure is in rax
 12530 00009EC3 48890425[90030000]      	mov qword [free_var_114], rax
 12531 00009ECB 48B8-                   	mov rax, sob_void
 12531 00009ECD [0000000000000000] 
 12532 00009ED5 C9                      	leave
 12533 00009ED6 C21800                  	ret 8 * (2 + 1)
 12534                                  .L_lambda_simple_end_005d:	; new closure is in rax
 12535                                  	assert_closure(rax)
    42 00009ED9 803805              <1>  cmp byte [%1], %2
    43 00009EDC 0F85A8760000        <1>  jne L_error_incorrect_type
 12536 00009EE2 FF7001                  	push SOB_CLOSURE_ENV(rax)
 12537 00009EE5 FF5009                  	call SOB_CLOSURE_CODE(rax)
 12538                                  
 12539 00009EE8 4889C7                  	mov rdi, rax
 12540 00009EEB E8B25E0000              	call print_sexpr_if_not_void
 12541                                  
 12542 00009EF0 48B8-                   	mov rax, L_constants + 0
 12542 00009EF2 [0000000000000000] 
 12543 00009EFA 48890425[98030000]      	mov qword [free_var_115], rax
 12544 00009F02 48B8-                   	mov rax, sob_void
 12544 00009F04 [0000000000000000] 
 12545                                  
 12546 00009F0C 4889C7                  	mov rdi, rax
 12547 00009F0F E88E5E0000              	call print_sexpr_if_not_void
 12548                                  
 12549 00009F14 48B8-                   	mov rax, L_constants + 0
 12549 00009F16 [0000000000000000] 
 12550 00009F1E 48890425[A0030000]      	mov qword [free_var_116], rax
 12551 00009F26 48B8-                   	mov rax, sob_void
 12551 00009F28 [0000000000000000] 
 12552                                  
 12553 00009F30 4889C7                  	mov rdi, rax
 12554 00009F33 E86A5E0000              	call print_sexpr_if_not_void
 12555                                  
 12556 00009F38 48B8-                   	mov rax, L_constants + 0
 12556 00009F3A [0000000000000000] 
 12557 00009F42 48890425[A8030000]      	mov qword [free_var_117], rax
 12558 00009F4A 48B8-                   	mov rax, sob_void
 12558 00009F4C [0000000000000000] 
 12559                                  
 12560 00009F54 4889C7                  	mov rdi, rax
 12561 00009F57 E8465E0000              	call print_sexpr_if_not_void
 12562                                  
 12563 00009F5C 48B8-                   	mov rax, L_constants + 0
 12563 00009F5E [0000000000000000] 
 12564 00009F66 48890425[B0030000]      	mov qword [free_var_118], rax
 12565 00009F6E 48B8-                   	mov rax, sob_void
 12565 00009F70 [0000000000000000] 
 12566                                  
 12567 00009F78 4889C7                  	mov rdi, rax
 12568 00009F7B E8225E0000              	call print_sexpr_if_not_void
 12569                                  
 12570 00009F80 48B8-                   	mov rax, L_constants + 0
 12570 00009F82 [0000000000000000] 
 12571 00009F8A 48890425[B8030000]      	mov qword [free_var_119], rax
 12572 00009F92 48B8-                   	mov rax, sob_void
 12572 00009F94 [0000000000000000] 
 12573                                  
 12574 00009F9C 4889C7                  	mov rdi, rax
 12575 00009F9F E8FE5D0000              	call print_sexpr_if_not_void
 12576                                  
 12577 00009FA4 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 12578 00009FA9 E8E35D0000              	call malloc
 12579 00009FAE 50                      	push rax
 12580 00009FAF BF00000000              	mov rdi, 8 * 0	; new rib
 12581 00009FB4 E8D85D0000              	call malloc
 12582 00009FB9 50                      	push rax
 12583 00009FBA BF08000000              	mov rdi, 8 * 1	; extended env
 12584 00009FBF E8CD5D0000              	call malloc
 12585 00009FC4 488B7D10                	mov rdi, ENV
 12586 00009FC8 BE00000000              	mov rsi, 0
 12587 00009FCD BA01000000              	mov rdx, 1
 12588                                  .L_lambda_simple_env_loop_0061:	; ext_env[i + 1] <-- env[i]
 12589 00009FD2 4883FE00                	cmp rsi, 0
 12590 00009FD6 7410                    	je .L_lambda_simple_env_end_0061
 12591 00009FD8 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 12592 00009FDC 48890CD0                	mov qword [rax + 8 * rdx], rcx
 12593 00009FE0 48FFC6                  	inc rsi
 12594 00009FE3 48FFC2                  	inc rdx
 12595 00009FE6 EBEA                    	jmp .L_lambda_simple_env_loop_0061
 12596                                  .L_lambda_simple_env_end_0061:
 12597 00009FE8 5B                      	pop rbx
 12598 00009FE9 BE00000000              	mov rsi, 0
 12599                                  .L_lambda_simple_params_loop_0061:	; copy params
 12600 00009FEE 4883FE00                	cmp rsi, 0
 12601 00009FF2 740E                    	je .L_lambda_simple_params_end_0061
 12602 00009FF4 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 12603 00009FF9 488914F3                	mov qword [rbx + 8 * rsi], rdx
 12604 00009FFD 48FFC6                  	inc rsi
 12605 0000A000 EBEC                    	jmp .L_lambda_simple_params_loop_0061
 12606                                  .L_lambda_simple_params_end_0061:
 12607 0000A002 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 12608 0000A005 4889C3                  	mov rbx, rax
 12609 0000A008 58                      	pop rax
 12610 0000A009 C60005                  	mov byte [rax], T_closure
 12611 0000A00C 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 12612 0000A010 48C74009[1DA00000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0061
 12613 0000A018 E9E6020000              	jmp .L_lambda_simple_end_0061
 12614                                  .L_lambda_simple_code_0061:	; lambda-simple body
 12615 0000A01D 48837C241001            	cmp qword [rsp + 8 * 2], 1
 12616 0000A023 740B                    	je .L_lambda_simple_arity_check_ok_0061
 12617 0000A025 FF742410                	push qword [rsp + 8 * 2]
 12618 0000A029 6A01                    	push 1
 12619 0000A02B E91A5D0000              	jmp L_error_incorrect_arity_simple
 12620                                  .L_lambda_simple_arity_check_ok_0061:
 12621 0000A030 C8000000                	enter 0, 0
 12622 0000A034 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 12623 0000A039 E8535D0000              	call malloc
 12624 0000A03E 50                      	push rax
 12625 0000A03F BF08000000              	mov rdi, 8 * 1	; new rib
 12626 0000A044 E8485D0000              	call malloc
 12627 0000A049 50                      	push rax
 12628 0000A04A BF10000000              	mov rdi, 8 * 2	; extended env
 12629 0000A04F E83D5D0000              	call malloc
 12630 0000A054 488B7D10                	mov rdi, ENV
 12631 0000A058 BE00000000              	mov rsi, 0
 12632 0000A05D BA01000000              	mov rdx, 1
 12633                                  .L_lambda_opt_env_loop_0011:	; ext_env[i + 1] <-- env[i]
 12634 0000A062 4883FE01                	cmp rsi, 1
 12635 0000A066 7410                    	je .L_lambda_opt_env_end_0011
 12636 0000A068 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 12637 0000A06C 48890CD0                	mov qword [rax + 8 * rdx], rcx
 12638 0000A070 48FFC6                  	inc rsi
 12639 0000A073 48FFC2                  	inc rdx
 12640 0000A076 EBEA                    	jmp .L_lambda_opt_env_loop_0011
 12641                                  .L_lambda_opt_env_end_0011:
 12642 0000A078 5B                      	pop rbx
 12643 0000A079 BE00000000              	mov rsi, 0
 12644                                  .L_lambda_opt_params_loop_0011:	; copy params
 12645 0000A07E 4883FE01                	cmp rsi, 1
 12646 0000A082 740E                    	je .L_lambda_opt_params_end_0011
 12647 0000A084 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 12648 0000A089 488914F3                	mov qword [rbx + 8 * rsi], rdx
 12649 0000A08D 48FFC6                  	inc rsi
 12650 0000A090 EBEC                    	jmp .L_lambda_opt_params_loop_0011
 12651                                  .L_lambda_opt_params_end_0011:
 12652 0000A092 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 12653 0000A095 4889C3                  	mov rbx, rax
 12654 0000A098 58                      	pop rax
 12655 0000A099 C60005                  	mov byte [rax], T_closure
 12656 0000A09C 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 12657 0000A0A0 48C74009[ADA00000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_opt_code_0011
 12658 0000A0A8 E952020000              	jmp .L_lambda_opt_end_0011
 12659                                  .L_lambda_opt_code_0011:	; lambda-opt body
 12660 0000A0AD 48837C241000            	cmp qword [rsp + 8 * 2], 0
 12661 0000A0B3 740D                    	je .L_lambda_opt_arity_check_exact_0011
 12662 0000A0B5 7F43                    	jg .L_lambda_opt_arity_check_more_0011
 12663 0000A0B7 FF742410                	push qword [rsp + 8 * 2]
 12664 0000A0BB 6A00                    	push 0
 12665 0000A0BD E99C5C0000              	jmp L_error_incorrect_arity_opt
 12666                                  .L_lambda_opt_arity_check_exact_0011:
 12667 0000A0C2 48C744241001000000      	mov qword [rsp + 8 * 2], 1
 12668 0000A0CB BA03000000              	mov rdx, 3
 12669 0000A0D0 FF3424                  	push qword [rsp]
 12670 0000A0D3 BE01000000              	mov rsi, 1
 12671                                  .L_lambda_opt_stack_shrink_loop_0031:
 12672 0000A0D8 4839D6                  	cmp rsi, rdx
 12673 0000A0DB 7411                    	je .L_lambda_opt_stack_shrink_loop_exit_0031
 12674 0000A0DD 488D5CF408              	lea rbx, [rsp + 8 + rsi * 8]
 12675 0000A0E2 488B0B                  	mov rcx, [rbx]
 12676 0000A0E5 48894BF8                	mov qword [rbx - 8], rcx
 12677 0000A0E9 48FFC6                  	inc rsi
 12678 0000A0EC EBEA                    	jmp .L_lambda_opt_stack_shrink_loop_0031
 12679                                  .L_lambda_opt_stack_shrink_loop_exit_0031:
 12680 0000A0EE 48C703[01000000]        	mov qword [rbx], sob_nil
 12681 0000A0F5 E985000000              	jmp .L_lambda_opt_stack_adjusted_0011
 12682                                  .L_lambda_opt_arity_check_more_0011:
 12683 0000A0FA 488B542410              	mov rdx, qword [rsp + 8 * 2]
 12684 0000A0FF 4883EA00                	sub rdx, 0
 12685 0000A103 48C744241001000000      	mov qword [rsp + 8 * 2], 1
 12686 0000A10C BE00000000              	mov rsi, 0
 12687 0000A111 488D5CD410              	lea rbx, [rsp + 2 * 8 + 0 * 8 + rdx * 8]
 12688 0000A116 48B9-                   	mov rcx, sob_nil
 12688 0000A118 [0100000000000000] 
 12689                                  .L_lambda_opt_stack_shrink_loop_0032:
 12690 0000A120 4839D6                  	cmp rsi, rdx
 12691 0000A123 7427                    je .L_lambda_opt_stack_shrink_loop_exit_0032
 12692 0000A125 BF11000000              	mov rdi, 17 ; 1+8+8
 12693 0000A12A E8625C0000              	call malloc
 12694 0000A12F 48894809                	mov SOB_PAIR_CDR(rax), rcx
 12695 0000A133 48F7DE                  	neg rsi
 12696 0000A136 488B0CF3                	mov rcx, qword [rbx + rsi * 8]
 12697 0000A13A 48F7DE                  	neg rsi
 12698 0000A13D 48894801                	mov SOB_PAIR_CAR(rax), rcx
 12699 0000A141 C60021                  	mov byte [rax], T_pair
 12700 0000A144 4889C1                  	mov rcx, rax
 12701 0000A147 48FFC6                  	inc rsi
 12702 0000A14A EBD4                    	jmp .L_lambda_opt_stack_shrink_loop_0032
 12703                                  .L_lambda_opt_stack_shrink_loop_exit_0032:
 12704 0000A14C 48890B                  	mov qword [rbx], rcx
 12705 0000A14F 4883EB08                	sub rbx, 8
 12706 0000A153 4889E7                  	mov rdi, rsp
 12707 0000A156 4883C710                	add rdi, 16
 12708 0000A15A BE03000000              	mov rsi, 3
 12709                                  .L_lambda_opt_stack_shrink_loop_0033:
 12710 0000A15F 4883FE00                	cmp rsi,0
 12711 0000A163 7413                    	je .L_lambda_opt_stack_shrink_loop_exit_0033
 12712 0000A165 488B0F                  	mov rcx, qword [rdi]
 12713 0000A168 48890B                  	mov [rbx], rcx
 12714 0000A16B 48FFCE                  	dec rsi
 12715 0000A16E 4883EB08                	sub rbx, 8
 12716 0000A172 4883EF08                	sub rdi, 8
 12717 0000A176 EBE7                    	jmp .L_lambda_opt_stack_shrink_loop_0033
 12718                                  .L_lambda_opt_stack_shrink_loop_exit_0033:
 12719 0000A178 4883C308                	add rbx, 8
 12720 0000A17C 4889DC                  	mov rsp, rbx
 12721                                  .L_lambda_opt_stack_adjusted_0011:
 12722 0000A17F C8000000                	enter 0, 0
 12723 0000A183 488B4520                	mov rax, qword [rbp + 8 * (4 + 0)]
 12724 0000A187 50                      	push rax
 12725 0000A188 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 12726 0000A18D E8FF5B0000              	call malloc
 12727 0000A192 50                      	push rax
 12728 0000A193 BF08000000              	mov rdi, 8 * 1	; new rib
 12729 0000A198 E8F45B0000              	call malloc
 12730 0000A19D 50                      	push rax
 12731 0000A19E BF18000000              	mov rdi, 8 * 3	; extended env
 12732 0000A1A3 E8E95B0000              	call malloc
 12733 0000A1A8 488B7D10                	mov rdi, ENV
 12734 0000A1AC BE00000000              	mov rsi, 0
 12735 0000A1B1 BA01000000              	mov rdx, 1
 12736                                  .L_lambda_simple_env_loop_0062:	; ext_env[i + 1] <-- env[i]
 12737 0000A1B6 4883FE02                	cmp rsi, 2
 12738 0000A1BA 7410                    	je .L_lambda_simple_env_end_0062
 12739 0000A1BC 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 12740 0000A1C0 48890CD0                	mov qword [rax + 8 * rdx], rcx
 12741 0000A1C4 48FFC6                  	inc rsi
 12742 0000A1C7 48FFC2                  	inc rdx
 12743 0000A1CA EBEA                    	jmp .L_lambda_simple_env_loop_0062
 12744                                  .L_lambda_simple_env_end_0062:
 12745 0000A1CC 5B                      	pop rbx
 12746 0000A1CD BE00000000              	mov rsi, 0
 12747                                  .L_lambda_simple_params_loop_0062:	; copy params
 12748 0000A1D2 4883FE01                	cmp rsi, 1
 12749 0000A1D6 740E                    	je .L_lambda_simple_params_end_0062
 12750 0000A1D8 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 12751 0000A1DD 488914F3                	mov qword [rbx + 8 * rsi], rdx
 12752 0000A1E1 48FFC6                  	inc rsi
 12753 0000A1E4 EBEC                    	jmp .L_lambda_simple_params_loop_0062
 12754                                  .L_lambda_simple_params_end_0062:
 12755 0000A1E6 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 12756 0000A1E9 4889C3                  	mov rbx, rax
 12757 0000A1EC 58                      	pop rax
 12758 0000A1ED C60005                  	mov byte [rax], T_closure
 12759 0000A1F0 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 12760 0000A1F4 48C74009[01A20000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0062
 12761 0000A1FC E987000000              	jmp .L_lambda_simple_end_0062
 12762                                  .L_lambda_simple_code_0062:	; lambda-simple body
 12763 0000A201 48837C241001            	cmp qword [rsp + 8 * 2], 1
 12764 0000A207 740B                    	je .L_lambda_simple_arity_check_ok_0062
 12765 0000A209 FF742410                	push qword [rsp + 8 * 2]
 12766 0000A20D 6A01                    	push 1
 12767 0000A20F E9365B0000              	jmp L_error_incorrect_arity_simple
 12768                                  .L_lambda_simple_arity_check_ok_0062:
 12769 0000A214 C8000000                	enter 0, 0
 12770 0000A218 488B4520                	mov rax, qword [rbp + 8 * (4 + 0)]
 12771 0000A21C 50                      	push rax
 12772 0000A21D 6A01                    	push 1
 12773 0000A21F 488B0425[88030000]      	mov rax, qword [free_var_113]
 12774                                  	assert_closure(rax)
    42 0000A227 803805              <1>  cmp byte [%1], %2
    43 0000A22A 0F855A730000        <1>  jne L_error_incorrect_type
 12775 0000A230 FF7001                  	push SOB_CLOSURE_ENV(rax)
 12776 0000A233 FF5009                  	call SOB_CLOSURE_CODE(rax)
 12777 0000A236 50                      	push rax
 12778 0000A237 6A01                    	push 1
 12779 0000A239 488B0425[C0000000]      	mov rax, qword [free_var_24]
 12780                                  	assert_closure(rax)
    42 0000A241 803805              <1>  cmp byte [%1], %2
    43 0000A244 0F8540730000        <1>  jne L_error_incorrect_type
 12781 0000A24A FF7001                  	push SOB_CLOSURE_ENV(rax)
 12782 0000A24D FF7508                  	push qword [rbp + 8 * 1] ; old ret addr
 12783 0000A250 FF7500                  	push qword [rbp] ; same the old rbp
 12784 0000A253 BA04000000              	mov rdx, 1 + 3
 12785 0000A258 488B4D18                	mov rcx, COUNT
 12786 0000A25C 488D4CCD20              	lea rcx, [rbp + 8*4 + rcx * 8]
 12787 0000A261 4889EF                  	mov rdi, rbp
 12788                                  .L_tc_recycle_frame_loop_007e:
 12789 0000A264 4883FA00                	cmp rdx, 0
 12790 0000A268 7413                    	je .L_tc_recycle_frame_done_007e
 12791 0000A26A 4883E908                	sub rcx, 8
 12792 0000A26E 4883EF08                	sub rdi, 8
 12793 0000A272 488B37                  	mov rsi, [rdi]
 12794 0000A275 488931                  	mov qword [rcx], rsi
 12795 0000A278 48FFCA                  	dec rdx
 12796 0000A27B EBE7                    	jmp .L_tc_recycle_frame_loop_007e
 12797                                  .L_tc_recycle_frame_done_007e:
 12798 0000A27D 5D                      	pop rbp ; restore the old rbp
 12799 0000A27E 4889CC                  	mov rsp, rcx
 12800 0000A281 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 12801 0000A284 C9                      	leave
 12802 0000A285 C21800                  	ret 8 * (2 + 1)
 12803                                  .L_lambda_simple_end_0062:	; new closure is in rax
 12804 0000A288 50                      	push rax
 12805 0000A289 6A02                    	push 2
 12806 0000A28B 488B0425[D8020000]      	mov rax, qword [free_var_91]
 12807                                  	assert_closure(rax)
    42 0000A293 803805              <1>  cmp byte [%1], %2
    43 0000A296 0F85EE720000        <1>  jne L_error_incorrect_type
 12808 0000A29C FF7001                  	push SOB_CLOSURE_ENV(rax)
 12809 0000A29F FF5009                  	call SOB_CLOSURE_CODE(rax)
 12810 0000A2A2 50                      	push rax
 12811 0000A2A3 488B4510                	mov rax, qword [rbp + 8 * 2]
 12812 0000A2A7 488B00                  	mov rax, qword [rax + 8 * 0]
 12813 0000A2AA 488B00                  	mov rax, qword [rax + 8 * 0]
 12814 0000A2AD 50                      	push rax
 12815 0000A2AE 6A02                    	push 2
 12816 0000A2B0 488B0425[C8020000]      	mov rax, qword [free_var_89]
 12817                                  	assert_closure(rax)
    42 0000A2B8 803805              <1>  cmp byte [%1], %2
    43 0000A2BB 0F85C9720000        <1>  jne L_error_incorrect_type
 12818 0000A2C1 FF7001                  	push SOB_CLOSURE_ENV(rax)
 12819 0000A2C4 FF7508                  	push qword [rbp + 8 * 1] ; old ret addr
 12820 0000A2C7 FF7500                  	push qword [rbp] ; same the old rbp
 12821 0000A2CA BA05000000              	mov rdx, 2 + 3
 12822 0000A2CF 488B4D18                	mov rcx, COUNT
 12823 0000A2D3 488D4CCD20              	lea rcx, [rbp + 8*4 + rcx * 8]
 12824 0000A2D8 4889EF                  	mov rdi, rbp
 12825                                  .L_tc_recycle_frame_loop_007d:
 12826 0000A2DB 4883FA00                	cmp rdx, 0
 12827 0000A2DF 7413                    	je .L_tc_recycle_frame_done_007d
 12828 0000A2E1 4883E908                	sub rcx, 8
 12829 0000A2E5 4883EF08                	sub rdi, 8
 12830 0000A2E9 488B37                  	mov rsi, [rdi]
 12831 0000A2EC 488931                  	mov qword [rcx], rsi
 12832 0000A2EF 48FFCA                  	dec rdx
 12833 0000A2F2 EBE7                    	jmp .L_tc_recycle_frame_loop_007d
 12834                                  .L_tc_recycle_frame_done_007d:
 12835 0000A2F4 5D                      	pop rbp ; restore the old rbp
 12836 0000A2F5 4889CC                  	mov rsp, rcx
 12837 0000A2F8 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 12838 0000A2FB C9                      	leave
 12839 0000A2FC C21800                  	ret 8 * (2 + 1)
 12840                                  .L_lambda_opt_end_0011:	; new closure is in rax
 12841 0000A2FF C9                      	leave
 12842 0000A300 C21800                  	ret 8 * (2 + 1)
 12843                                  .L_lambda_simple_end_0061:	; new closure is in rax
 12844 0000A303 50                      	push rax
 12845 0000A304 6A01                    	push 1
 12846 0000A306 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 12847 0000A30B E8815A0000              	call malloc
 12848 0000A310 50                      	push rax
 12849 0000A311 BF00000000              	mov rdi, 8 * 0	; new rib
 12850 0000A316 E8765A0000              	call malloc
 12851 0000A31B 50                      	push rax
 12852 0000A31C BF08000000              	mov rdi, 8 * 1	; extended env
 12853 0000A321 E86B5A0000              	call malloc
 12854 0000A326 488B7D10                	mov rdi, ENV
 12855 0000A32A BE00000000              	mov rsi, 0
 12856 0000A32F BA01000000              	mov rdx, 1
 12857                                  .L_lambda_simple_env_loop_0060:	; ext_env[i + 1] <-- env[i]
 12858 0000A334 4883FE00                	cmp rsi, 0
 12859 0000A338 7410                    	je .L_lambda_simple_env_end_0060
 12860 0000A33A 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 12861 0000A33E 48890CD0                	mov qword [rax + 8 * rdx], rcx
 12862 0000A342 48FFC6                  	inc rsi
 12863 0000A345 48FFC2                  	inc rdx
 12864 0000A348 EBEA                    	jmp .L_lambda_simple_env_loop_0060
 12865                                  .L_lambda_simple_env_end_0060:
 12866 0000A34A 5B                      	pop rbx
 12867 0000A34B BE00000000              	mov rsi, 0
 12868                                  .L_lambda_simple_params_loop_0060:	; copy params
 12869 0000A350 4883FE00                	cmp rsi, 0
 12870 0000A354 740E                    	je .L_lambda_simple_params_end_0060
 12871 0000A356 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 12872 0000A35B 488914F3                	mov qword [rbx + 8 * rsi], rdx
 12873 0000A35F 48FFC6                  	inc rsi
 12874 0000A362 EBEC                    	jmp .L_lambda_simple_params_loop_0060
 12875                                  .L_lambda_simple_params_end_0060:
 12876 0000A364 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 12877 0000A367 4889C3                  	mov rbx, rax
 12878 0000A36A 58                      	pop rax
 12879 0000A36B C60005                  	mov byte [rax], T_closure
 12880 0000A36E 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 12881 0000A372 48C74009[7FA30000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0060
 12882 0000A37A E90B010000              	jmp .L_lambda_simple_end_0060
 12883                                  .L_lambda_simple_code_0060:	; lambda-simple body
 12884 0000A37F 48837C241001            	cmp qword [rsp + 8 * 2], 1
 12885 0000A385 740B                    	je .L_lambda_simple_arity_check_ok_0060
 12886 0000A387 FF742410                	push qword [rsp + 8 * 2]
 12887 0000A38B 6A01                    	push 1
 12888 0000A38D E9B8590000              	jmp L_error_incorrect_arity_simple
 12889                                  .L_lambda_simple_arity_check_ok_0060:
 12890 0000A392 C8000000                	enter 0, 0
 12891 0000A396 488B0425[30030000]      	mov rax, qword [free_var_102]
 12892 0000A39E 50                      	push rax
 12893 0000A39F 6A01                    	push 1
 12894 0000A3A1 488B4520                	mov rax, qword [rbp + 8 * (4 + 0)]
 12895                                  	assert_closure(rax)
    42 0000A3A5 803805              <1>  cmp byte [%1], %2
    43 0000A3A8 0F85DC710000        <1>  jne L_error_incorrect_type
 12896 0000A3AE FF7001                  	push SOB_CLOSURE_ENV(rax)
 12897 0000A3B1 FF5009                  	call SOB_CLOSURE_CODE(rax)
 12898 0000A3B4 48890425[98030000]      	mov qword [free_var_115], rax
 12899 0000A3BC 48B8-                   	mov rax, sob_void
 12899 0000A3BE [0000000000000000] 
 12900                                  
 12901 0000A3C6 488B0425[38030000]      	mov rax, qword [free_var_103]
 12902 0000A3CE 50                      	push rax
 12903 0000A3CF 6A01                    	push 1
 12904 0000A3D1 488B4520                	mov rax, qword [rbp + 8 * (4 + 0)]
 12905                                  	assert_closure(rax)
    42 0000A3D5 803805              <1>  cmp byte [%1], %2
    43 0000A3D8 0F85AC710000        <1>  jne L_error_incorrect_type
 12906 0000A3DE FF7001                  	push SOB_CLOSURE_ENV(rax)
 12907 0000A3E1 FF5009                  	call SOB_CLOSURE_CODE(rax)
 12908 0000A3E4 48890425[A0030000]      	mov qword [free_var_116], rax
 12909 0000A3EC 48B8-                   	mov rax, sob_void
 12909 0000A3EE [0000000000000000] 
 12910                                  
 12911 0000A3F6 488B0425[50030000]      	mov rax, qword [free_var_106]
 12912 0000A3FE 50                      	push rax
 12913 0000A3FF 6A01                    	push 1
 12914 0000A401 488B4520                	mov rax, qword [rbp + 8 * (4 + 0)]
 12915                                  	assert_closure(rax)
    42 0000A405 803805              <1>  cmp byte [%1], %2
    43 0000A408 0F857C710000        <1>  jne L_error_incorrect_type
 12916 0000A40E FF7001                  	push SOB_CLOSURE_ENV(rax)
 12917 0000A411 FF5009                  	call SOB_CLOSURE_CODE(rax)
 12918 0000A414 48890425[A8030000]      	mov qword [free_var_117], rax
 12919 0000A41C 48B8-                   	mov rax, sob_void
 12919 0000A41E [0000000000000000] 
 12920                                  
 12921 0000A426 488B0425[40030000]      	mov rax, qword [free_var_104]
 12922 0000A42E 50                      	push rax
 12923 0000A42F 6A01                    	push 1
 12924 0000A431 488B4520                	mov rax, qword [rbp + 8 * (4 + 0)]
 12925                                  	assert_closure(rax)
    42 0000A435 803805              <1>  cmp byte [%1], %2
    43 0000A438 0F854C710000        <1>  jne L_error_incorrect_type
 12926 0000A43E FF7001                  	push SOB_CLOSURE_ENV(rax)
 12927 0000A441 FF5009                  	call SOB_CLOSURE_CODE(rax)
 12928 0000A444 48890425[B0030000]      	mov qword [free_var_118], rax
 12929 0000A44C 48B8-                   	mov rax, sob_void
 12929 0000A44E [0000000000000000] 
 12930                                  
 12931 0000A456 488B0425[48030000]      	mov rax, qword [free_var_105]
 12932 0000A45E 50                      	push rax
 12933 0000A45F 6A01                    	push 1
 12934 0000A461 488B4520                	mov rax, qword [rbp + 8 * (4 + 0)]
 12935                                  	assert_closure(rax)
    42 0000A465 803805              <1>  cmp byte [%1], %2
    43 0000A468 0F851C710000        <1>  jne L_error_incorrect_type
 12936 0000A46E FF7001                  	push SOB_CLOSURE_ENV(rax)
 12937 0000A471 FF5009                  	call SOB_CLOSURE_CODE(rax)
 12938 0000A474 48890425[B8030000]      	mov qword [free_var_119], rax
 12939 0000A47C 48B8-                   	mov rax, sob_void
 12939 0000A47E [0000000000000000] 
 12940 0000A486 C9                      	leave
 12941 0000A487 C21800                  	ret 8 * (2 + 1)
 12942                                  .L_lambda_simple_end_0060:	; new closure is in rax
 12943                                  	assert_closure(rax)
    42 0000A48A 803805              <1>  cmp byte [%1], %2
    43 0000A48D 0F85F7700000        <1>  jne L_error_incorrect_type
 12944 0000A493 FF7001                  	push SOB_CLOSURE_ENV(rax)
 12945 0000A496 FF5009                  	call SOB_CLOSURE_CODE(rax)
 12946                                  
 12947 0000A499 4889C7                  	mov rdi, rax
 12948 0000A49C E801590000              	call print_sexpr_if_not_void
 12949                                  
 12950 0000A4A1 48B8-                   	mov rax, L_constants + 0
 12950 0000A4A3 [0000000000000000] 
 12951 0000A4AB 48890425[C0030000]      	mov qword [free_var_120], rax
 12952 0000A4B3 48B8-                   	mov rax, sob_void
 12952 0000A4B5 [0000000000000000] 
 12953                                  
 12954 0000A4BD 4889C7                  	mov rdi, rax
 12955 0000A4C0 E8DD580000              	call print_sexpr_if_not_void
 12956                                  
 12957 0000A4C5 48B8-                   	mov rax, L_constants + 0
 12957 0000A4C7 [0000000000000000] 
 12958 0000A4CF 48890425[C8030000]      	mov qword [free_var_121], rax
 12959 0000A4D7 48B8-                   	mov rax, sob_void
 12959 0000A4D9 [0000000000000000] 
 12960                                  
 12961 0000A4E1 4889C7                  	mov rdi, rax
 12962 0000A4E4 E8B9580000              	call print_sexpr_if_not_void
 12963                                  
 12964 0000A4E9 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 12965 0000A4EE E89E580000              	call malloc
 12966 0000A4F3 50                      	push rax
 12967 0000A4F4 BF00000000              	mov rdi, 8 * 0	; new rib
 12968 0000A4F9 E893580000              	call malloc
 12969 0000A4FE 50                      	push rax
 12970 0000A4FF BF08000000              	mov rdi, 8 * 1	; extended env
 12971 0000A504 E888580000              	call malloc
 12972 0000A509 488B7D10                	mov rdi, ENV
 12973 0000A50D BE00000000              	mov rsi, 0
 12974 0000A512 BA01000000              	mov rdx, 1
 12975                                  .L_lambda_simple_env_loop_0064:	; ext_env[i + 1] <-- env[i]
 12976 0000A517 4883FE00                	cmp rsi, 0
 12977 0000A51B 7410                    	je .L_lambda_simple_env_end_0064
 12978 0000A51D 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 12979 0000A521 48890CD0                	mov qword [rax + 8 * rdx], rcx
 12980 0000A525 48FFC6                  	inc rsi
 12981 0000A528 48FFC2                  	inc rdx
 12982 0000A52B EBEA                    	jmp .L_lambda_simple_env_loop_0064
 12983                                  .L_lambda_simple_env_end_0064:
 12984 0000A52D 5B                      	pop rbx
 12985 0000A52E BE00000000              	mov rsi, 0
 12986                                  .L_lambda_simple_params_loop_0064:	; copy params
 12987 0000A533 4883FE00                	cmp rsi, 0
 12988 0000A537 740E                    	je .L_lambda_simple_params_end_0064
 12989 0000A539 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 12990 0000A53E 488914F3                	mov qword [rbx + 8 * rsi], rdx
 12991 0000A542 48FFC6                  	inc rsi
 12992 0000A545 EBEC                    	jmp .L_lambda_simple_params_loop_0064
 12993                                  .L_lambda_simple_params_end_0064:
 12994 0000A547 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 12995 0000A54A 4889C3                  	mov rbx, rax
 12996 0000A54D 58                      	pop rax
 12997 0000A54E C60005                  	mov byte [rax], T_closure
 12998 0000A551 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 12999 0000A555 48C74009[62A50000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0064
 13000 0000A55D E940010000              	jmp .L_lambda_simple_end_0064
 13001                                  .L_lambda_simple_code_0064:	; lambda-simple body
 13002 0000A562 48837C241001            	cmp qword [rsp + 8 * 2], 1
 13003 0000A568 740B                    	je .L_lambda_simple_arity_check_ok_0064
 13004 0000A56A FF742410                	push qword [rsp + 8 * 2]
 13005 0000A56E 6A01                    	push 1
 13006 0000A570 E9D5570000              	jmp L_error_incorrect_arity_simple
 13007                                  .L_lambda_simple_arity_check_ok_0064:
 13008 0000A575 C8000000                	enter 0, 0
 13009 0000A579 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 13010 0000A57E E80E580000              	call malloc
 13011 0000A583 50                      	push rax
 13012 0000A584 BF08000000              	mov rdi, 8 * 1	; new rib
 13013 0000A589 E803580000              	call malloc
 13014 0000A58E 50                      	push rax
 13015 0000A58F BF10000000              	mov rdi, 8 * 2	; extended env
 13016 0000A594 E8F8570000              	call malloc
 13017 0000A599 488B7D10                	mov rdi, ENV
 13018 0000A59D BE00000000              	mov rsi, 0
 13019 0000A5A2 BA01000000              	mov rdx, 1
 13020                                  .L_lambda_simple_env_loop_0065:	; ext_env[i + 1] <-- env[i]
 13021 0000A5A7 4883FE01                	cmp rsi, 1
 13022 0000A5AB 7410                    	je .L_lambda_simple_env_end_0065
 13023 0000A5AD 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 13024 0000A5B1 48890CD0                	mov qword [rax + 8 * rdx], rcx
 13025 0000A5B5 48FFC6                  	inc rsi
 13026 0000A5B8 48FFC2                  	inc rdx
 13027 0000A5BB EBEA                    	jmp .L_lambda_simple_env_loop_0065
 13028                                  .L_lambda_simple_env_end_0065:
 13029 0000A5BD 5B                      	pop rbx
 13030 0000A5BE BE00000000              	mov rsi, 0
 13031                                  .L_lambda_simple_params_loop_0065:	; copy params
 13032 0000A5C3 4883FE01                	cmp rsi, 1
 13033 0000A5C7 740E                    	je .L_lambda_simple_params_end_0065
 13034 0000A5C9 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 13035 0000A5CE 488914F3                	mov qword [rbx + 8 * rsi], rdx
 13036 0000A5D2 48FFC6                  	inc rsi
 13037 0000A5D5 EBEC                    	jmp .L_lambda_simple_params_loop_0065
 13038                                  .L_lambda_simple_params_end_0065:
 13039 0000A5D7 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 13040 0000A5DA 4889C3                  	mov rbx, rax
 13041 0000A5DD 58                      	pop rax
 13042 0000A5DE C60005                  	mov byte [rax], T_closure
 13043 0000A5E1 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 13044 0000A5E5 48C74009[F2A50000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0065
 13045 0000A5ED E9AC000000              	jmp .L_lambda_simple_end_0065
 13046                                  .L_lambda_simple_code_0065:	; lambda-simple body
 13047 0000A5F2 48837C241001            	cmp qword [rsp + 8 * 2], 1
 13048 0000A5F8 740B                    	je .L_lambda_simple_arity_check_ok_0065
 13049 0000A5FA FF742410                	push qword [rsp + 8 * 2]
 13050 0000A5FE 6A01                    	push 1
 13051 0000A600 E945570000              	jmp L_error_incorrect_arity_simple
 13052                                  .L_lambda_simple_arity_check_ok_0065:
 13053 0000A605 C8000000                	enter 0, 0
 13054 0000A609 488B4520                	mov rax, qword [rbp + 8 * (4 + 0)]
 13055 0000A60D 50                      	push rax
 13056 0000A60E 6A01                    	push 1
 13057 0000A610 488B0425[D8030000]      	mov rax, qword [free_var_123]
 13058                                  	assert_closure(rax)
    42 0000A618 803805              <1>  cmp byte [%1], %2
    43 0000A61B 0F85696F0000        <1>  jne L_error_incorrect_type
 13059 0000A621 FF7001                  	push SOB_CLOSURE_ENV(rax)
 13060 0000A624 FF5009                  	call SOB_CLOSURE_CODE(rax)
 13061 0000A627 50                      	push rax
 13062 0000A628 488B4510                	mov rax, qword [rbp + 8 * 2]
 13063 0000A62C 488B00                  	mov rax, qword [rax + 8 * 0]
 13064 0000A62F 488B00                  	mov rax, qword [rax + 8 * 0]
 13065 0000A632 50                      	push rax
 13066 0000A633 6A02                    	push 2
 13067 0000A635 488B0425[D8020000]      	mov rax, qword [free_var_91]
 13068                                  	assert_closure(rax)
    42 0000A63D 803805              <1>  cmp byte [%1], %2
    43 0000A640 0F85446F0000        <1>  jne L_error_incorrect_type
 13069 0000A646 FF7001                  	push SOB_CLOSURE_ENV(rax)
 13070 0000A649 FF5009                  	call SOB_CLOSURE_CODE(rax)
 13071 0000A64C 50                      	push rax
 13072 0000A64D 6A01                    	push 1
 13073 0000A64F 488B0425[D0030000]      	mov rax, qword [free_var_122]
 13074                                  	assert_closure(rax)
    42 0000A657 803805              <1>  cmp byte [%1], %2
    43 0000A65A 0F852A6F0000        <1>  jne L_error_incorrect_type
 13075 0000A660 FF7001                  	push SOB_CLOSURE_ENV(rax)
 13076 0000A663 FF7508                  	push qword [rbp + 8 * 1] ; old ret addr
 13077 0000A666 FF7500                  	push qword [rbp] ; same the old rbp
 13078 0000A669 BA04000000              	mov rdx, 1 + 3
 13079 0000A66E 488B4D18                	mov rcx, COUNT
 13080 0000A672 488D4CCD20              	lea rcx, [rbp + 8*4 + rcx * 8]
 13081 0000A677 4889EF                  	mov rdi, rbp
 13082                                  .L_tc_recycle_frame_loop_007f:
 13083 0000A67A 4883FA00                	cmp rdx, 0
 13084 0000A67E 7413                    	je .L_tc_recycle_frame_done_007f
 13085 0000A680 4883E908                	sub rcx, 8
 13086 0000A684 4883EF08                	sub rdi, 8
 13087 0000A688 488B37                  	mov rsi, [rdi]
 13088 0000A68B 488931                  	mov qword [rcx], rsi
 13089 0000A68E 48FFCA                  	dec rdx
 13090 0000A691 EBE7                    	jmp .L_tc_recycle_frame_loop_007f
 13091                                  .L_tc_recycle_frame_done_007f:
 13092 0000A693 5D                      	pop rbp ; restore the old rbp
 13093 0000A694 4889CC                  	mov rsp, rcx
 13094 0000A697 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 13095 0000A69A C9                      	leave
 13096 0000A69B C21800                  	ret 8 * (2 + 1)
 13097                                  .L_lambda_simple_end_0065:	; new closure is in rax
 13098 0000A69E C9                      	leave
 13099 0000A69F C21800                  	ret 8 * (2 + 1)
 13100                                  .L_lambda_simple_end_0064:	; new closure is in rax
 13101 0000A6A2 50                      	push rax
 13102 0000A6A3 6A01                    	push 1
 13103 0000A6A5 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 13104 0000A6AA E8E2560000              	call malloc
 13105 0000A6AF 50                      	push rax
 13106 0000A6B0 BF00000000              	mov rdi, 8 * 0	; new rib
 13107 0000A6B5 E8D7560000              	call malloc
 13108 0000A6BA 50                      	push rax
 13109 0000A6BB BF08000000              	mov rdi, 8 * 1	; extended env
 13110 0000A6C0 E8CC560000              	call malloc
 13111 0000A6C5 488B7D10                	mov rdi, ENV
 13112 0000A6C9 BE00000000              	mov rsi, 0
 13113 0000A6CE BA01000000              	mov rdx, 1
 13114                                  .L_lambda_simple_env_loop_0063:	; ext_env[i + 1] <-- env[i]
 13115 0000A6D3 4883FE00                	cmp rsi, 0
 13116 0000A6D7 7410                    	je .L_lambda_simple_env_end_0063
 13117 0000A6D9 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 13118 0000A6DD 48890CD0                	mov qword [rax + 8 * rdx], rcx
 13119 0000A6E1 48FFC6                  	inc rsi
 13120 0000A6E4 48FFC2                  	inc rdx
 13121 0000A6E7 EBEA                    	jmp .L_lambda_simple_env_loop_0063
 13122                                  .L_lambda_simple_env_end_0063:
 13123 0000A6E9 5B                      	pop rbx
 13124 0000A6EA BE00000000              	mov rsi, 0
 13125                                  .L_lambda_simple_params_loop_0063:	; copy params
 13126 0000A6EF 4883FE00                	cmp rsi, 0
 13127 0000A6F3 740E                    	je .L_lambda_simple_params_end_0063
 13128 0000A6F5 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 13129 0000A6FA 488914F3                	mov qword [rbx + 8 * rsi], rdx
 13130 0000A6FE 48FFC6                  	inc rsi
 13131 0000A701 EBEC                    	jmp .L_lambda_simple_params_loop_0063
 13132                                  .L_lambda_simple_params_end_0063:
 13133 0000A703 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 13134 0000A706 4889C3                  	mov rbx, rax
 13135 0000A709 58                      	pop rax
 13136 0000A70A C60005                  	mov byte [rax], T_closure
 13137 0000A70D 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 13138 0000A711 48C74009[1BA70000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0063
 13139 0000A719 EB7B                    	jmp .L_lambda_simple_end_0063
 13140                                  .L_lambda_simple_code_0063:	; lambda-simple body
 13141 0000A71B 48837C241001            	cmp qword [rsp + 8 * 2], 1
 13142 0000A721 740B                    	je .L_lambda_simple_arity_check_ok_0063
 13143 0000A723 FF742410                	push qword [rsp + 8 * 2]
 13144 0000A727 6A01                    	push 1
 13145 0000A729 E91C560000              	jmp L_error_incorrect_arity_simple
 13146                                  .L_lambda_simple_arity_check_ok_0063:
 13147 0000A72E C8000000                	enter 0, 0
 13148 0000A732 488B0425[88030000]      	mov rax, qword [free_var_113]
 13149 0000A73A 50                      	push rax
 13150 0000A73B 6A01                    	push 1
 13151 0000A73D 488B4520                	mov rax, qword [rbp + 8 * (4 + 0)]
 13152                                  	assert_closure(rax)
    42 0000A741 803805              <1>  cmp byte [%1], %2
    43 0000A744 0F85406E0000        <1>  jne L_error_incorrect_type
 13153 0000A74A FF7001                  	push SOB_CLOSURE_ENV(rax)
 13154 0000A74D FF5009                  	call SOB_CLOSURE_CODE(rax)
 13155 0000A750 48890425[C0030000]      	mov qword [free_var_120], rax
 13156 0000A758 48B8-                   	mov rax, sob_void
 13156 0000A75A [0000000000000000] 
 13157                                  
 13158 0000A762 488B0425[90030000]      	mov rax, qword [free_var_114]
 13159 0000A76A 50                      	push rax
 13160 0000A76B 6A01                    	push 1
 13161 0000A76D 488B4520                	mov rax, qword [rbp + 8 * (4 + 0)]
 13162                                  	assert_closure(rax)
    42 0000A771 803805              <1>  cmp byte [%1], %2
    43 0000A774 0F85106E0000        <1>  jne L_error_incorrect_type
 13163 0000A77A FF7001                  	push SOB_CLOSURE_ENV(rax)
 13164 0000A77D FF5009                  	call SOB_CLOSURE_CODE(rax)
 13165 0000A780 48890425[C8030000]      	mov qword [free_var_121], rax
 13166 0000A788 48B8-                   	mov rax, sob_void
 13166 0000A78A [0000000000000000] 
 13167 0000A792 C9                      	leave
 13168 0000A793 C21800                  	ret 8 * (2 + 1)
 13169                                  .L_lambda_simple_end_0063:	; new closure is in rax
 13170                                  	assert_closure(rax)
    42 0000A796 803805              <1>  cmp byte [%1], %2
    43 0000A799 0F85EB6D0000        <1>  jne L_error_incorrect_type
 13171 0000A79F FF7001                  	push SOB_CLOSURE_ENV(rax)
 13172 0000A7A2 FF5009                  	call SOB_CLOSURE_CODE(rax)
 13173                                  
 13174 0000A7A5 4889C7                  	mov rdi, rax
 13175 0000A7A8 E8F5550000              	call print_sexpr_if_not_void
 13176                                  
 13177 0000A7AD 48B8-                   	mov rax, L_constants + 0
 13177 0000A7AF [0000000000000000] 
 13178 0000A7B7 48890425[E0030000]      	mov qword [free_var_124], rax
 13179 0000A7BF 48B8-                   	mov rax, sob_void
 13179 0000A7C1 [0000000000000000] 
 13180                                  
 13181 0000A7C9 4889C7                  	mov rdi, rax
 13182 0000A7CC E8D1550000              	call print_sexpr_if_not_void
 13183                                  
 13184 0000A7D1 48B8-                   	mov rax, L_constants + 0
 13184 0000A7D3 [0000000000000000] 
 13185 0000A7DB 48890425[E8030000]      	mov qword [free_var_125], rax
 13186 0000A7E3 48B8-                   	mov rax, sob_void
 13186 0000A7E5 [0000000000000000] 
 13187                                  
 13188 0000A7ED 4889C7                  	mov rdi, rax
 13189 0000A7F0 E8AD550000              	call print_sexpr_if_not_void
 13190                                  
 13191 0000A7F5 48B8-                   	mov rax, L_constants + 0
 13191 0000A7F7 [0000000000000000] 
 13192 0000A7FF 48890425[F0030000]      	mov qword [free_var_126], rax
 13193 0000A807 48B8-                   	mov rax, sob_void
 13193 0000A809 [0000000000000000] 
 13194                                  
 13195 0000A811 4889C7                  	mov rdi, rax
 13196 0000A814 E889550000              	call print_sexpr_if_not_void
 13197                                  
 13198 0000A819 48B8-                   	mov rax, L_constants + 0
 13198 0000A81B [0000000000000000] 
 13199 0000A823 48890425[F8030000]      	mov qword [free_var_127], rax
 13200 0000A82B 48B8-                   	mov rax, sob_void
 13200 0000A82D [0000000000000000] 
 13201                                  
 13202 0000A835 4889C7                  	mov rdi, rax
 13203 0000A838 E865550000              	call print_sexpr_if_not_void
 13204                                  
 13205 0000A83D 48B8-                   	mov rax, L_constants + 0
 13205 0000A83F [0000000000000000] 
 13206 0000A847 48890425[00040000]      	mov qword [free_var_128], rax
 13207 0000A84F 48B8-                   	mov rax, sob_void
 13207 0000A851 [0000000000000000] 
 13208                                  
 13209 0000A859 4889C7                  	mov rdi, rax
 13210 0000A85C E841550000              	call print_sexpr_if_not_void
 13211                                  
 13212 0000A861 48B8-                   	mov rax, L_constants + 0
 13212 0000A863 [0000000000000000] 
 13213 0000A86B 48890425[08040000]      	mov qword [free_var_129], rax
 13214 0000A873 48B8-                   	mov rax, sob_void
 13214 0000A875 [0000000000000000] 
 13215                                  
 13216 0000A87D 4889C7                  	mov rdi, rax
 13217 0000A880 E81D550000              	call print_sexpr_if_not_void
 13218                                  
 13219 0000A885 48B8-                   	mov rax, L_constants + 0
 13219 0000A887 [0000000000000000] 
 13220 0000A88F 48890425[10040000]      	mov qword [free_var_130], rax
 13221 0000A897 48B8-                   	mov rax, sob_void
 13221 0000A899 [0000000000000000] 
 13222                                  
 13223 0000A8A1 4889C7                  	mov rdi, rax
 13224 0000A8A4 E8F9540000              	call print_sexpr_if_not_void
 13225                                  
 13226 0000A8A9 48B8-                   	mov rax, L_constants + 0
 13226 0000A8AB [0000000000000000] 
 13227 0000A8B3 48890425[18040000]      	mov qword [free_var_131], rax
 13228 0000A8BB 48B8-                   	mov rax, sob_void
 13228 0000A8BD [0000000000000000] 
 13229                                  
 13230 0000A8C5 4889C7                  	mov rdi, rax
 13231 0000A8C8 E8D5540000              	call print_sexpr_if_not_void
 13232                                  
 13233 0000A8CD 48B8-                   	mov rax, L_constants + 0
 13233 0000A8CF [0000000000000000] 
 13234 0000A8D7 48890425[20040000]      	mov qword [free_var_132], rax
 13235 0000A8DF 48B8-                   	mov rax, sob_void
 13235 0000A8E1 [0000000000000000] 
 13236                                  
 13237 0000A8E9 4889C7                  	mov rdi, rax
 13238 0000A8EC E8B1540000              	call print_sexpr_if_not_void
 13239                                  
 13240 0000A8F1 48B8-                   	mov rax, L_constants + 0
 13240 0000A8F3 [0000000000000000] 
 13241 0000A8FB 48890425[28040000]      	mov qword [free_var_133], rax
 13242 0000A903 48B8-                   	mov rax, sob_void
 13242 0000A905 [0000000000000000] 
 13243                                  
 13244 0000A90D 4889C7                  	mov rdi, rax
 13245 0000A910 E88D540000              	call print_sexpr_if_not_void
 13246                                  
 13247 0000A915 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 13248 0000A91A E872540000              	call malloc
 13249 0000A91F 50                      	push rax
 13250 0000A920 BF00000000              	mov rdi, 8 * 0	; new rib
 13251 0000A925 E867540000              	call malloc
 13252 0000A92A 50                      	push rax
 13253 0000A92B BF08000000              	mov rdi, 8 * 1	; extended env
 13254 0000A930 E85C540000              	call malloc
 13255 0000A935 488B7D10                	mov rdi, ENV
 13256 0000A939 BE00000000              	mov rsi, 0
 13257 0000A93E BA01000000              	mov rdx, 1
 13258                                  .L_lambda_simple_env_loop_0067:	; ext_env[i + 1] <-- env[i]
 13259 0000A943 4883FE00                	cmp rsi, 0
 13260 0000A947 7410                    	je .L_lambda_simple_env_end_0067
 13261 0000A949 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 13262 0000A94D 48890CD0                	mov qword [rax + 8 * rdx], rcx
 13263 0000A951 48FFC6                  	inc rsi
 13264 0000A954 48FFC2                  	inc rdx
 13265 0000A957 EBEA                    	jmp .L_lambda_simple_env_loop_0067
 13266                                  .L_lambda_simple_env_end_0067:
 13267 0000A959 5B                      	pop rbx
 13268 0000A95A BE00000000              	mov rsi, 0
 13269                                  .L_lambda_simple_params_loop_0067:	; copy params
 13270 0000A95F 4883FE00                	cmp rsi, 0
 13271 0000A963 740E                    	je .L_lambda_simple_params_end_0067
 13272 0000A965 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 13273 0000A96A 488914F3                	mov qword [rbx + 8 * rsi], rdx
 13274 0000A96E 48FFC6                  	inc rsi
 13275 0000A971 EBEC                    	jmp .L_lambda_simple_params_loop_0067
 13276                                  .L_lambda_simple_params_end_0067:
 13277 0000A973 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 13278 0000A976 4889C3                  	mov rbx, rax
 13279 0000A979 58                      	pop rax
 13280 0000A97A C60005                  	mov byte [rax], T_closure
 13281 0000A97D 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 13282 0000A981 48C74009[8EA90000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0067
 13283 0000A989 E9070C0000              	jmp .L_lambda_simple_end_0067
 13284                                  .L_lambda_simple_code_0067:	; lambda-simple body
 13285 0000A98E 48837C241002            	cmp qword [rsp + 8 * 2], 2
 13286 0000A994 740B                    	je .L_lambda_simple_arity_check_ok_0067
 13287 0000A996 FF742410                	push qword [rsp + 8 * 2]
 13288 0000A99A 6A02                    	push 2
 13289 0000A99C E9A9530000              	jmp L_error_incorrect_arity_simple
 13290                                  .L_lambda_simple_arity_check_ok_0067:
 13291 0000A9A1 C8000000                	enter 0, 0
 13292 0000A9A5 48B8-                   	mov rax, L_constants + 23
 13292 0000A9A7 [1700000000000000] 
 13293 0000A9AF 50                      	push rax
 13294 0000A9B0 6A01                    	push 1
 13295 0000A9B2 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 13296 0000A9B7 E8D5530000              	call malloc
 13297 0000A9BC 50                      	push rax
 13298 0000A9BD BF10000000              	mov rdi, 8 * 2	; new rib
 13299 0000A9C2 E8CA530000              	call malloc
 13300 0000A9C7 50                      	push rax
 13301 0000A9C8 BF10000000              	mov rdi, 8 * 2	; extended env
 13302 0000A9CD E8BF530000              	call malloc
 13303 0000A9D2 488B7D10                	mov rdi, ENV
 13304 0000A9D6 BE00000000              	mov rsi, 0
 13305 0000A9DB BA01000000              	mov rdx, 1
 13306                                  .L_lambda_simple_env_loop_0068:	; ext_env[i + 1] <-- env[i]
 13307 0000A9E0 4883FE01                	cmp rsi, 1
 13308 0000A9E4 7410                    	je .L_lambda_simple_env_end_0068
 13309 0000A9E6 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 13310 0000A9EA 48890CD0                	mov qword [rax + 8 * rdx], rcx
 13311 0000A9EE 48FFC6                  	inc rsi
 13312 0000A9F1 48FFC2                  	inc rdx
 13313 0000A9F4 EBEA                    	jmp .L_lambda_simple_env_loop_0068
 13314                                  .L_lambda_simple_env_end_0068:
 13315 0000A9F6 5B                      	pop rbx
 13316 0000A9F7 BE00000000              	mov rsi, 0
 13317                                  .L_lambda_simple_params_loop_0068:	; copy params
 13318 0000A9FC 4883FE02                	cmp rsi, 2
 13319 0000AA00 740E                    	je .L_lambda_simple_params_end_0068
 13320 0000AA02 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 13321 0000AA07 488914F3                	mov qword [rbx + 8 * rsi], rdx
 13322 0000AA0B 48FFC6                  	inc rsi
 13323 0000AA0E EBEC                    	jmp .L_lambda_simple_params_loop_0068
 13324                                  .L_lambda_simple_params_end_0068:
 13325 0000AA10 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 13326 0000AA13 4889C3                  	mov rbx, rax
 13327 0000AA16 58                      	pop rax
 13328 0000AA17 C60005                  	mov byte [rax], T_closure
 13329 0000AA1A 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 13330 0000AA1E 48C74009[2BAA0000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0068
 13331 0000AA26 E9230B0000              	jmp .L_lambda_simple_end_0068
 13332                                  .L_lambda_simple_code_0068:	; lambda-simple body
 13333 0000AA2B 48837C241001            	cmp qword [rsp + 8 * 2], 1
 13334 0000AA31 740B                    	je .L_lambda_simple_arity_check_ok_0068
 13335 0000AA33 FF742410                	push qword [rsp + 8 * 2]
 13336 0000AA37 6A01                    	push 1
 13337 0000AA39 E90C530000              	jmp L_error_incorrect_arity_simple
 13338                                  .L_lambda_simple_arity_check_ok_0068:
 13339 0000AA3E C8000000                	enter 0, 0
 13340 0000AA42 488B4520                	mov rax, qword [rbp + 8 * (4 + 0)]
 13341 0000AA46 4889C2                  	mov rdx, rax
 13342 0000AA49 BF08000000              	mov rdi, 8
 13343 0000AA4E E83E530000              	call malloc
 13344 0000AA53 488910                  	mov qword[rax], rdx
 13345 0000AA56 48894520                	mov qword [rbp + 8 * (4 + 0)], rax
 13346 0000AA5A 48B8-                   	mov rax, sob_void
 13346 0000AA5C [0000000000000000] 
 13347                                  
 13348 0000AA64 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 13349 0000AA69 E823530000              	call malloc
 13350 0000AA6E 50                      	push rax
 13351 0000AA6F BF08000000              	mov rdi, 8 * 1	; new rib
 13352 0000AA74 E818530000              	call malloc
 13353 0000AA79 50                      	push rax
 13354 0000AA7A BF18000000              	mov rdi, 8 * 3	; extended env
 13355 0000AA7F E80D530000              	call malloc
 13356 0000AA84 488B7D10                	mov rdi, ENV
 13357 0000AA88 BE00000000              	mov rsi, 0
 13358 0000AA8D BA01000000              	mov rdx, 1
 13359                                  .L_lambda_simple_env_loop_0069:	; ext_env[i + 1] <-- env[i]
 13360 0000AA92 4883FE02                	cmp rsi, 2
 13361 0000AA96 7410                    	je .L_lambda_simple_env_end_0069
 13362 0000AA98 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 13363 0000AA9C 48890CD0                	mov qword [rax + 8 * rdx], rcx
 13364 0000AAA0 48FFC6                  	inc rsi
 13365 0000AAA3 48FFC2                  	inc rdx
 13366 0000AAA6 EBEA                    	jmp .L_lambda_simple_env_loop_0069
 13367                                  .L_lambda_simple_env_end_0069:
 13368 0000AAA8 5B                      	pop rbx
 13369 0000AAA9 BE00000000              	mov rsi, 0
 13370                                  .L_lambda_simple_params_loop_0069:	; copy params
 13371 0000AAAE 4883FE01                	cmp rsi, 1
 13372 0000AAB2 740E                    	je .L_lambda_simple_params_end_0069
 13373 0000AAB4 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 13374 0000AAB9 488914F3                	mov qword [rbx + 8 * rsi], rdx
 13375 0000AABD 48FFC6                  	inc rsi
 13376 0000AAC0 EBEC                    	jmp .L_lambda_simple_params_loop_0069
 13377                                  .L_lambda_simple_params_end_0069:
 13378 0000AAC2 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 13379 0000AAC5 4889C3                  	mov rbx, rax
 13380 0000AAC8 58                      	pop rax
 13381 0000AAC9 C60005                  	mov byte [rax], T_closure
 13382 0000AACC 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 13383 0000AAD0 48C74009[DDAA0000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0069
 13384 0000AAD8 E939020000              	jmp .L_lambda_simple_end_0069
 13385                                  .L_lambda_simple_code_0069:	; lambda-simple body
 13386 0000AADD 48837C241005            	cmp qword [rsp + 8 * 2], 5
 13387 0000AAE3 740B                    	je .L_lambda_simple_arity_check_ok_0069
 13388 0000AAE5 FF742410                	push qword [rsp + 8 * 2]
 13389 0000AAE9 6A05                    	push 5
 13390 0000AAEB E95A520000              	jmp L_error_incorrect_arity_simple
 13391                                  .L_lambda_simple_arity_check_ok_0069:
 13392 0000AAF0 C8000000                	enter 0, 0
 13393 0000AAF4 488B4530                	mov rax, qword [rbp + 8 * (4 + 2)]
 13394 0000AAF8 50                      	push rax
 13395 0000AAF9 488B4520                	mov rax, qword [rbp + 8 * (4 + 0)]
 13396 0000AAFD 50                      	push rax
 13397 0000AAFE 6A02                    	push 2
 13398 0000AB00 488B0425[50030000]      	mov rax, qword [free_var_106]
 13399                                  	assert_closure(rax)
    42 0000AB08 803805              <1>  cmp byte [%1], %2
    43 0000AB0B 0F85796A0000        <1>  jne L_error_incorrect_type
 13400 0000AB11 FF7001                  	push SOB_CLOSURE_ENV(rax)
 13401 0000AB14 FF5009                  	call SOB_CLOSURE_CODE(rax)
 13402 0000AB17 483D[02000000]          	cmp rax, sob_boolean_false
 13403 0000AB1D 7425                              	je .L_if_else_003a
 13404 0000AB1F 488B4540                          	mov rax, qword [rbp + 8 * (4 + 4)]
 13405 0000AB23 50                      	push rax
 13406 0000AB24 488B4530                	mov rax, qword [rbp + 8 * (4 + 2)]
 13407 0000AB28 50                      	push rax
 13408 0000AB29 6A02                    	push 2
 13409 0000AB2B 488B0425[30030000]      	mov rax, qword [free_var_102]
 13410                                  	assert_closure(rax)
    42 0000AB33 803805              <1>  cmp byte [%1], %2
    43 0000AB36 0F854E6A0000        <1>  jne L_error_incorrect_type
 13411 0000AB3C FF7001                  	push SOB_CLOSURE_ENV(rax)
 13412 0000AB3F FF5009                  	call SOB_CLOSURE_CODE(rax)
 13413 0000AB42 EB0A                    	jmp .L_if_end_003a
 13414                                            .L_if_else_003a:
 13415 0000AB44 48B8-                             	mov rax, L_constants + 2
 13415 0000AB46 [0200000000000000] 
 13416                                  .L_if_end_003a:
 13417 0000AB4E 483D[02000000]          	cmp rax, sob_boolean_false
 13418 0000AB54 0F85B8010000            	jne .L_or_end_0005
 13419 0000AB5A 488B4530                	mov rax, qword [rbp + 8 * (4 + 2)]
 13420 0000AB5E 50                      	push rax
 13421 0000AB5F 488B4520                	mov rax, qword [rbp + 8 * (4 + 0)]
 13422 0000AB63 50                      	push rax
 13423 0000AB64 6A02                    	push 2
 13424 0000AB66 488B0425[30030000]      	mov rax, qword [free_var_102]
 13425                                  	assert_closure(rax)
    42 0000AB6E 803805              <1>  cmp byte [%1], %2
    43 0000AB71 0F85136A0000        <1>  jne L_error_incorrect_type
 13426 0000AB77 FF7001                  	push SOB_CLOSURE_ENV(rax)
 13427 0000AB7A FF5009                  	call SOB_CLOSURE_CODE(rax)
 13428 0000AB7D 483D[02000000]          	cmp rax, sob_boolean_false
 13429 0000AB83 0F847F010000                      	je .L_if_else_003c
 13430 0000AB89 488B4520                          	mov rax, qword [rbp + 8 * (4 + 0)]
 13431 0000AB8D 50                      	push rax
 13432 0000AB8E 488B4538                	mov rax, qword [rbp + 8 * (4 + 3)]
 13433 0000AB92 50                      	push rax
 13434 0000AB93 6A02                    	push 2
 13435 0000AB95 488B0425[78010000]      	mov rax, qword [free_var_47]
 13436                                  	assert_closure(rax)
    42 0000AB9D 803805              <1>  cmp byte [%1], %2
    43 0000ABA0 0F85E4690000        <1>  jne L_error_incorrect_type
 13437 0000ABA6 FF7001                  	push SOB_CLOSURE_ENV(rax)
 13438 0000ABA9 FF5009                  	call SOB_CLOSURE_CODE(rax)
 13439 0000ABAC 50                      	push rax
 13440 0000ABAD 488B4520                	mov rax, qword [rbp + 8 * (4 + 0)]
 13441 0000ABB1 50                      	push rax
 13442 0000ABB2 488B4528                	mov rax, qword [rbp + 8 * (4 + 1)]
 13443 0000ABB6 50                      	push rax
 13444 0000ABB7 6A02                    	push 2
 13445 0000ABB9 488B0425[78010000]      	mov rax, qword [free_var_47]
 13446                                  	assert_closure(rax)
    42 0000ABC1 803805              <1>  cmp byte [%1], %2
    43 0000ABC4 0F85C0690000        <1>  jne L_error_incorrect_type
 13447 0000ABCA FF7001                  	push SOB_CLOSURE_ENV(rax)
 13448 0000ABCD FF5009                  	call SOB_CLOSURE_CODE(rax)
 13449 0000ABD0 50                      	push rax
 13450 0000ABD1 6A02                    	push 2
 13451 0000ABD3 488B4510                	mov rax, qword [rbp + 8 * 2]
 13452 0000ABD7 488B4008                	mov rax, qword [rax + 8 * 1]
 13453 0000ABDB 488B00                  	mov rax, qword [rax + 8 * 0]
 13454                                  	assert_closure(rax)
    42 0000ABDE 803805              <1>  cmp byte [%1], %2
    43 0000ABE1 0F85A3690000        <1>  jne L_error_incorrect_type
 13455 0000ABE7 FF7001                  	push SOB_CLOSURE_ENV(rax)
 13456 0000ABEA FF5009                  	call SOB_CLOSURE_CODE(rax)
 13457 0000ABED 483D[02000000]          	cmp rax, sob_boolean_false
 13458 0000ABF3 0F850D010000            	jne .L_or_end_0006
 13459 0000ABF9 488B4520                	mov rax, qword [rbp + 8 * (4 + 0)]
 13460 0000ABFD 50                      	push rax
 13461 0000ABFE 488B4538                	mov rax, qword [rbp + 8 * (4 + 3)]
 13462 0000AC02 50                      	push rax
 13463 0000AC03 6A02                    	push 2
 13464 0000AC05 488B0425[78010000]      	mov rax, qword [free_var_47]
 13465                                  	assert_closure(rax)
    42 0000AC0D 803805              <1>  cmp byte [%1], %2
    43 0000AC10 0F8574690000        <1>  jne L_error_incorrect_type
 13466 0000AC16 FF7001                  	push SOB_CLOSURE_ENV(rax)
 13467 0000AC19 FF5009                  	call SOB_CLOSURE_CODE(rax)
 13468 0000AC1C 50                      	push rax
 13469 0000AC1D 488B4520                	mov rax, qword [rbp + 8 * (4 + 0)]
 13470 0000AC21 50                      	push rax
 13471 0000AC22 488B4528                	mov rax, qword [rbp + 8 * (4 + 1)]
 13472 0000AC26 50                      	push rax
 13473 0000AC27 6A02                    	push 2
 13474 0000AC29 488B0425[78010000]      	mov rax, qword [free_var_47]
 13475                                  	assert_closure(rax)
    42 0000AC31 803805              <1>  cmp byte [%1], %2
    43 0000AC34 0F8550690000        <1>  jne L_error_incorrect_type
 13476 0000AC3A FF7001                  	push SOB_CLOSURE_ENV(rax)
 13477 0000AC3D FF5009                  	call SOB_CLOSURE_CODE(rax)
 13478 0000AC40 50                      	push rax
 13479 0000AC41 6A02                    	push 2
 13480 0000AC43 488B4510                	mov rax, qword [rbp + 8 * 2]
 13481 0000AC47 488B4008                	mov rax, qword [rax + 8 * 1]
 13482 0000AC4B 488B4008                	mov rax, qword [rax + 8 * 1]
 13483                                  	assert_closure(rax)
    42 0000AC4F 803805              <1>  cmp byte [%1], %2
    43 0000AC52 0F8532690000        <1>  jne L_error_incorrect_type
 13484 0000AC58 FF7001                  	push SOB_CLOSURE_ENV(rax)
 13485 0000AC5B FF5009                  	call SOB_CLOSURE_CODE(rax)
 13486 0000AC5E 483D[02000000]          	cmp rax, sob_boolean_false
 13487 0000AC64 0F8492000000                      	je .L_if_else_003b
 13488 0000AC6A 488B4540                          	mov rax, qword [rbp + 8 * (4 + 4)]
 13489 0000AC6E 50                      	push rax
 13490 0000AC6F 488B4538                	mov rax, qword [rbp + 8 * (4 + 3)]
 13491 0000AC73 50                      	push rax
 13492 0000AC74 488B4530                	mov rax, qword [rbp + 8 * (4 + 2)]
 13493 0000AC78 50                      	push rax
 13494 0000AC79 488B4528                	mov rax, qword [rbp + 8 * (4 + 1)]
 13495 0000AC7D 50                      	push rax
 13496 0000AC7E 48B8-                   	mov rax, L_constants + 128
 13496 0000AC80 [8000000000000000] 
 13497 0000AC88 50                      	push rax
 13498 0000AC89 488B4520                	mov rax, qword [rbp + 8 * (4 + 0)]
 13499 0000AC8D 50                      	push rax
 13500 0000AC8E 6A02                    	push 2
 13501 0000AC90 488B0425[08030000]      	mov rax, qword [free_var_97]
 13502                                  	assert_closure(rax)
    42 0000AC98 803805              <1>  cmp byte [%1], %2
    43 0000AC9B 0F85E9680000        <1>  jne L_error_incorrect_type
 13503 0000ACA1 FF7001                  	push SOB_CLOSURE_ENV(rax)
 13504 0000ACA4 FF5009                  	call SOB_CLOSURE_CODE(rax)
 13505 0000ACA7 50                      	push rax
 13506 0000ACA8 6A05                    	push 5
 13507 0000ACAA 488B4510                	mov rax, qword [rbp + 8 * 2]
 13508 0000ACAE 488B00                  	mov rax, qword [rax + 8 * 0]
 13509 0000ACB1 488B00                  	mov rax, qword [rax + 8 * 0]
 13510 0000ACB4 488B00                  	mov rax, qword [rax]
 13511                                  	assert_closure(rax)
    42 0000ACB7 803805              <1>  cmp byte [%1], %2
    43 0000ACBA 0F85CA680000        <1>  jne L_error_incorrect_type
 13512 0000ACC0 FF7001                  	push SOB_CLOSURE_ENV(rax)
 13513 0000ACC3 FF7508                  	push qword [rbp + 8 * 1] ; old ret addr
 13514 0000ACC6 FF7500                  	push qword [rbp] ; same the old rbp
 13515 0000ACC9 BA08000000              	mov rdx, 5 + 3
 13516 0000ACCE 488B4D18                	mov rcx, COUNT
 13517 0000ACD2 488D4CCD20              	lea rcx, [rbp + 8*4 + rcx * 8]
 13518 0000ACD7 4889EF                  	mov rdi, rbp
 13519                                  .L_tc_recycle_frame_loop_0081:
 13520 0000ACDA 4883FA00                	cmp rdx, 0
 13521 0000ACDE 7413                    	je .L_tc_recycle_frame_done_0081
 13522 0000ACE0 4883E908                	sub rcx, 8
 13523 0000ACE4 4883EF08                	sub rdi, 8
 13524 0000ACE8 488B37                  	mov rsi, [rdi]
 13525 0000ACEB 488931                  	mov qword [rcx], rsi
 13526 0000ACEE 48FFCA                  	dec rdx
 13527 0000ACF1 EBE7                    	jmp .L_tc_recycle_frame_loop_0081
 13528                                  .L_tc_recycle_frame_done_0081:
 13529 0000ACF3 5D                      	pop rbp ; restore the old rbp
 13530 0000ACF4 4889CC                  	mov rsp, rcx
 13531 0000ACF7 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 13532 0000ACFA EB0A                    	jmp .L_if_end_003b
 13533                                            .L_if_else_003b:
 13534 0000ACFC 48B8-                             	mov rax, L_constants + 2
 13534 0000ACFE [0200000000000000] 
 13535                                  .L_if_end_003b:
 13536                                  .L_or_end_0006:
 13537 0000AD06 EB0A                    	jmp .L_if_end_003c
 13538                                            .L_if_else_003c:
 13539 0000AD08 48B8-                             	mov rax, L_constants + 2
 13539 0000AD0A [0200000000000000] 
 13540                                  .L_if_end_003c:
 13541                                  .L_or_end_0005:
 13542 0000AD12 C9                      	leave
 13543 0000AD13 C23800                  	ret 8 * (2 + 5)
 13544                                  .L_lambda_simple_end_0069:	; new closure is in rax
 13545 0000AD16 50                      	push rax
 13546 0000AD17 488B4520                	mov rax, qword [rbp + 8 * (4 + 0)]
 13547 0000AD1B 8F00                    	pop qword [rax]
 13548 0000AD1D 48B8-                   	mov rax, sob_void
 13548 0000AD1F [0000000000000000] 
 13549                                  
 13550 0000AD27 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 13551 0000AD2C E860500000              	call malloc
 13552 0000AD31 50                      	push rax
 13553 0000AD32 BF08000000              	mov rdi, 8 * 1	; new rib
 13554 0000AD37 E855500000              	call malloc
 13555 0000AD3C 50                      	push rax
 13556 0000AD3D BF18000000              	mov rdi, 8 * 3	; extended env
 13557 0000AD42 E84A500000              	call malloc
 13558 0000AD47 488B7D10                	mov rdi, ENV
 13559 0000AD4B BE00000000              	mov rsi, 0
 13560 0000AD50 BA01000000              	mov rdx, 1
 13561                                  .L_lambda_simple_env_loop_006d:	; ext_env[i + 1] <-- env[i]
 13562 0000AD55 4883FE02                	cmp rsi, 2
 13563 0000AD59 7410                    	je .L_lambda_simple_env_end_006d
 13564 0000AD5B 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 13565 0000AD5F 48890CD0                	mov qword [rax + 8 * rdx], rcx
 13566 0000AD63 48FFC6                  	inc rsi
 13567 0000AD66 48FFC2                  	inc rdx
 13568 0000AD69 EBEA                    	jmp .L_lambda_simple_env_loop_006d
 13569                                  .L_lambda_simple_env_end_006d:
 13570 0000AD6B 5B                      	pop rbx
 13571 0000AD6C BE00000000              	mov rsi, 0
 13572                                  .L_lambda_simple_params_loop_006d:	; copy params
 13573 0000AD71 4883FE01                	cmp rsi, 1
 13574 0000AD75 740E                    	je .L_lambda_simple_params_end_006d
 13575 0000AD77 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 13576 0000AD7C 488914F3                	mov qword [rbx + 8 * rsi], rdx
 13577 0000AD80 48FFC6                  	inc rsi
 13578 0000AD83 EBEC                    	jmp .L_lambda_simple_params_loop_006d
 13579                                  .L_lambda_simple_params_end_006d:
 13580 0000AD85 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 13581 0000AD88 4889C3                  	mov rbx, rax
 13582 0000AD8B 58                      	pop rax
 13583 0000AD8C C60005                  	mov byte [rax], T_closure
 13584 0000AD8F 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 13585 0000AD93 48C74009[A0AD0000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_006d
 13586 0000AD9B E964020000              	jmp .L_lambda_simple_end_006d
 13587                                  .L_lambda_simple_code_006d:	; lambda-simple body
 13588 0000ADA0 48837C241002            	cmp qword [rsp + 8 * 2], 2
 13589 0000ADA6 740B                    	je .L_lambda_simple_arity_check_ok_006d
 13590 0000ADA8 FF742410                	push qword [rsp + 8 * 2]
 13591 0000ADAC 6A02                    	push 2
 13592 0000ADAE E9974F0000              	jmp L_error_incorrect_arity_simple
 13593                                  .L_lambda_simple_arity_check_ok_006d:
 13594 0000ADB3 C8000000                	enter 0, 0
 13595 0000ADB7 488B4528                	mov rax, qword [rbp + 8 * (4 + 1)]
 13596 0000ADBB 50                      	push rax
 13597 0000ADBC 6A01                    	push 1
 13598 0000ADBE 488B0425[90000000]      	mov rax, qword [free_var_18]
 13599                                  	assert_closure(rax)
    42 0000ADC6 803805              <1>  cmp byte [%1], %2
    43 0000ADC9 0F85BB670000        <1>  jne L_error_incorrect_type
 13600 0000ADCF FF7001                  	push SOB_CLOSURE_ENV(rax)
 13601 0000ADD2 FF5009                  	call SOB_CLOSURE_CODE(rax)
 13602 0000ADD5 50                      	push rax
 13603 0000ADD6 488B4520                	mov rax, qword [rbp + 8 * (4 + 0)]
 13604 0000ADDA 50                      	push rax
 13605 0000ADDB 6A01                    	push 1
 13606 0000ADDD 488B0425[90000000]      	mov rax, qword [free_var_18]
 13607                                  	assert_closure(rax)
    42 0000ADE5 803805              <1>  cmp byte [%1], %2
    43 0000ADE8 0F859C670000        <1>  jne L_error_incorrect_type
 13608 0000ADEE FF7001                  	push SOB_CLOSURE_ENV(rax)
 13609 0000ADF1 FF5009                  	call SOB_CLOSURE_CODE(rax)
 13610 0000ADF4 50                      	push rax
 13611 0000ADF5 6A02                    	push 2
 13612 0000ADF7 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 13613 0000ADFC E8904F0000              	call malloc
 13614 0000AE01 50                      	push rax
 13615 0000AE02 BF10000000              	mov rdi, 8 * 2	; new rib
 13616 0000AE07 E8854F0000              	call malloc
 13617 0000AE0C 50                      	push rax
 13618 0000AE0D BF20000000              	mov rdi, 8 * 4	; extended env
 13619 0000AE12 E87A4F0000              	call malloc
 13620 0000AE17 488B7D10                	mov rdi, ENV
 13621 0000AE1B BE00000000              	mov rsi, 0
 13622 0000AE20 BA01000000              	mov rdx, 1
 13623                                  .L_lambda_simple_env_loop_006e:	; ext_env[i + 1] <-- env[i]
 13624 0000AE25 4883FE03                	cmp rsi, 3
 13625 0000AE29 7410                    	je .L_lambda_simple_env_end_006e
 13626 0000AE2B 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 13627 0000AE2F 48890CD0                	mov qword [rax + 8 * rdx], rcx
 13628 0000AE33 48FFC6                  	inc rsi
 13629 0000AE36 48FFC2                  	inc rdx
 13630 0000AE39 EBEA                    	jmp .L_lambda_simple_env_loop_006e
 13631                                  .L_lambda_simple_env_end_006e:
 13632 0000AE3B 5B                      	pop rbx
 13633 0000AE3C BE00000000              	mov rsi, 0
 13634                                  .L_lambda_simple_params_loop_006e:	; copy params
 13635 0000AE41 4883FE02                	cmp rsi, 2
 13636 0000AE45 740E                    	je .L_lambda_simple_params_end_006e
 13637 0000AE47 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 13638 0000AE4C 488914F3                	mov qword [rbx + 8 * rsi], rdx
 13639 0000AE50 48FFC6                  	inc rsi
 13640 0000AE53 EBEC                    	jmp .L_lambda_simple_params_loop_006e
 13641                                  .L_lambda_simple_params_end_006e:
 13642 0000AE55 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 13643 0000AE58 4889C3                  	mov rbx, rax
 13644 0000AE5B 58                      	pop rax
 13645 0000AE5C C60005                  	mov byte [rax], T_closure
 13646 0000AE5F 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 13647 0000AE63 48C74009[70AE0000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_006e
 13648 0000AE6B E94D010000              	jmp .L_lambda_simple_end_006e
 13649                                  .L_lambda_simple_code_006e:	; lambda-simple body
 13650 0000AE70 48837C241002            	cmp qword [rsp + 8 * 2], 2
 13651 0000AE76 740B                    	je .L_lambda_simple_arity_check_ok_006e
 13652 0000AE78 FF742410                	push qword [rsp + 8 * 2]
 13653 0000AE7C 6A02                    	push 2
 13654 0000AE7E E9C74E0000              	jmp L_error_incorrect_arity_simple
 13655                                  .L_lambda_simple_arity_check_ok_006e:
 13656 0000AE83 C8000000                	enter 0, 0
 13657 0000AE87 488B4528                	mov rax, qword [rbp + 8 * (4 + 1)]
 13658 0000AE8B 50                      	push rax
 13659 0000AE8C 488B4520                	mov rax, qword [rbp + 8 * (4 + 0)]
 13660 0000AE90 50                      	push rax
 13661 0000AE91 6A02                    	push 2
 13662 0000AE93 488B0425[38030000]      	mov rax, qword [free_var_103]
 13663                                  	assert_closure(rax)
    42 0000AE9B 803805              <1>  cmp byte [%1], %2
    43 0000AE9E 0F85E6660000        <1>  jne L_error_incorrect_type
 13664 0000AEA4 FF7001                  	push SOB_CLOSURE_ENV(rax)
 13665 0000AEA7 FF5009                  	call SOB_CLOSURE_CODE(rax)
 13666 0000AEAA 483D[02000000]          	cmp rax, sob_boolean_false
 13667 0000AEB0 0F8484000000                      	je .L_if_else_003e
 13668 0000AEB6 488B4528                          	mov rax, qword [rbp + 8 * (4 + 1)]
 13669 0000AEBA 50                      	push rax
 13670 0000AEBB 488B4510                	mov rax, qword [rbp + 8 * 2]
 13671 0000AEBF 488B00                  	mov rax, qword [rax + 8 * 0]
 13672 0000AEC2 488B4008                	mov rax, qword [rax + 8 * 1]
 13673 0000AEC6 50                      	push rax
 13674 0000AEC7 488B4520                	mov rax, qword [rbp + 8 * (4 + 0)]
 13675 0000AECB 50                      	push rax
 13676 0000AECC 488B4510                	mov rax, qword [rbp + 8 * 2]
 13677 0000AED0 488B00                  	mov rax, qword [rax + 8 * 0]
 13678 0000AED3 488B00                  	mov rax, qword [rax + 8 * 0]
 13679 0000AED6 50                      	push rax
 13680 0000AED7 48B8-                   	mov rax, L_constants + 32
 13680 0000AED9 [2000000000000000] 
 13681 0000AEE1 50                      	push rax
 13682 0000AEE2 6A05                    	push 5
 13683 0000AEE4 488B4510                	mov rax, qword [rbp + 8 * 2]
 13684 0000AEE8 488B4008                	mov rax, qword [rax + 8 * 1]
 13685 0000AEEC 488B00                  	mov rax, qword [rax + 8 * 0]
 13686 0000AEEF 488B00                  	mov rax, qword [rax]
 13687                                  	assert_closure(rax)
    42 0000AEF2 803805              <1>  cmp byte [%1], %2
    43 0000AEF5 0F858F660000        <1>  jne L_error_incorrect_type
 13688 0000AEFB FF7001                  	push SOB_CLOSURE_ENV(rax)
 13689 0000AEFE FF7508                  	push qword [rbp + 8 * 1] ; old ret addr
 13690 0000AF01 FF7500                  	push qword [rbp] ; same the old rbp
 13691 0000AF04 BA08000000              	mov rdx, 5 + 3
 13692 0000AF09 488B4D18                	mov rcx, COUNT
 13693 0000AF0D 488D4CCD20              	lea rcx, [rbp + 8*4 + rcx * 8]
 13694 0000AF12 4889EF                  	mov rdi, rbp
 13695                                  .L_tc_recycle_frame_loop_0087:
 13696 0000AF15 4883FA00                	cmp rdx, 0
 13697 0000AF19 7413                    	je .L_tc_recycle_frame_done_0087
 13698 0000AF1B 4883E908                	sub rcx, 8
 13699 0000AF1F 4883EF08                	sub rdi, 8
 13700 0000AF23 488B37                  	mov rsi, [rdi]
 13701 0000AF26 488931                  	mov qword [rcx], rsi
 13702 0000AF29 48FFCA                  	dec rdx
 13703 0000AF2C EBE7                    	jmp .L_tc_recycle_frame_loop_0087
 13704                                  .L_tc_recycle_frame_done_0087:
 13705 0000AF2E 5D                      	pop rbp ; restore the old rbp
 13706 0000AF2F 4889CC                  	mov rsp, rcx
 13707 0000AF32 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 13708 0000AF35 E97F000000              	jmp .L_if_end_003e
 13709                                            .L_if_else_003e:
 13710 0000AF3A 488B4520                          	mov rax, qword [rbp + 8 * (4 + 0)]
 13711 0000AF3E 50                      	push rax
 13712 0000AF3F 488B4510                	mov rax, qword [rbp + 8 * 2]
 13713 0000AF43 488B00                  	mov rax, qword [rax + 8 * 0]
 13714 0000AF46 488B00                  	mov rax, qword [rax + 8 * 0]
 13715 0000AF49 50                      	push rax
 13716 0000AF4A 488B4528                	mov rax, qword [rbp + 8 * (4 + 1)]
 13717 0000AF4E 50                      	push rax
 13718 0000AF4F 488B4510                	mov rax, qword [rbp + 8 * 2]
 13719 0000AF53 488B00                  	mov rax, qword [rax + 8 * 0]
 13720 0000AF56 488B4008                	mov rax, qword [rax + 8 * 1]
 13721 0000AF5A 50                      	push rax
 13722 0000AF5B 48B8-                   	mov rax, L_constants + 32
 13722 0000AF5D [2000000000000000] 
 13723 0000AF65 50                      	push rax
 13724 0000AF66 6A05                    	push 5
 13725 0000AF68 488B4510                	mov rax, qword [rbp + 8 * 2]
 13726 0000AF6C 488B4008                	mov rax, qword [rax + 8 * 1]
 13727 0000AF70 488B00                  	mov rax, qword [rax + 8 * 0]
 13728 0000AF73 488B00                  	mov rax, qword [rax]
 13729                                  	assert_closure(rax)
    42 0000AF76 803805              <1>  cmp byte [%1], %2
    43 0000AF79 0F850B660000        <1>  jne L_error_incorrect_type
 13730 0000AF7F FF7001                  	push SOB_CLOSURE_ENV(rax)
 13731 0000AF82 FF7508                  	push qword [rbp + 8 * 1] ; old ret addr
 13732 0000AF85 FF7500                  	push qword [rbp] ; same the old rbp
 13733 0000AF88 BA08000000              	mov rdx, 5 + 3
 13734 0000AF8D 488B4D18                	mov rcx, COUNT
 13735 0000AF91 488D4CCD20              	lea rcx, [rbp + 8*4 + rcx * 8]
 13736 0000AF96 4889EF                  	mov rdi, rbp
 13737                                  .L_tc_recycle_frame_loop_0088:
 13738 0000AF99 4883FA00                	cmp rdx, 0
 13739 0000AF9D 7413                    	je .L_tc_recycle_frame_done_0088
 13740 0000AF9F 4883E908                	sub rcx, 8
 13741 0000AFA3 4883EF08                	sub rdi, 8
 13742 0000AFA7 488B37                  	mov rsi, [rdi]
 13743 0000AFAA 488931                  	mov qword [rcx], rsi
 13744 0000AFAD 48FFCA                  	dec rdx
 13745 0000AFB0 EBE7                    	jmp .L_tc_recycle_frame_loop_0088
 13746                                  .L_tc_recycle_frame_done_0088:
 13747 0000AFB2 5D                      	pop rbp ; restore the old rbp
 13748 0000AFB3 4889CC                  	mov rsp, rcx
 13749 0000AFB6 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 13750                                  .L_if_end_003e:
 13751 0000AFB9 C9                      	leave
 13752 0000AFBA C22000                  	ret 8 * (2 + 2)
 13753                                  .L_lambda_simple_end_006e:	; new closure is in rax
 13754                                  	assert_closure(rax)
    42 0000AFBD 803805              <1>  cmp byte [%1], %2
    43 0000AFC0 0F85C4650000        <1>  jne L_error_incorrect_type
 13755 0000AFC6 FF7001                  	push SOB_CLOSURE_ENV(rax)
 13756 0000AFC9 FF7508                  	push qword [rbp + 8 * 1] ; old ret addr
 13757 0000AFCC FF7500                  	push qword [rbp] ; same the old rbp
 13758 0000AFCF BA05000000              	mov rdx, 2 + 3
 13759 0000AFD4 488B4D18                	mov rcx, COUNT
 13760 0000AFD8 488D4CCD20              	lea rcx, [rbp + 8*4 + rcx * 8]
 13761 0000AFDD 4889EF                  	mov rdi, rbp
 13762                                  .L_tc_recycle_frame_loop_0086:
 13763 0000AFE0 4883FA00                	cmp rdx, 0
 13764 0000AFE4 7413                    	je .L_tc_recycle_frame_done_0086
 13765 0000AFE6 4883E908                	sub rcx, 8
 13766 0000AFEA 4883EF08                	sub rdi, 8
 13767 0000AFEE 488B37                  	mov rsi, [rdi]
 13768 0000AFF1 488931                  	mov qword [rcx], rsi
 13769 0000AFF4 48FFCA                  	dec rdx
 13770 0000AFF7 EBE7                    	jmp .L_tc_recycle_frame_loop_0086
 13771                                  .L_tc_recycle_frame_done_0086:
 13772 0000AFF9 5D                      	pop rbp ; restore the old rbp
 13773 0000AFFA 4889CC                  	mov rsp, rcx
 13774 0000AFFD FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 13775 0000B000 C9                      	leave
 13776 0000B001 C22000                  	ret 8 * (2 + 2)
 13777                                  .L_lambda_simple_end_006d:	; new closure is in rax
 13778 0000B004 50                      	push rax
 13779 0000B005 6A01                    	push 1
 13780 0000B007 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 13781 0000B00C E8804D0000              	call malloc
 13782 0000B011 50                      	push rax
 13783 0000B012 BF08000000              	mov rdi, 8 * 1	; new rib
 13784 0000B017 E8754D0000              	call malloc
 13785 0000B01C 50                      	push rax
 13786 0000B01D BF18000000              	mov rdi, 8 * 3	; extended env
 13787 0000B022 E86A4D0000              	call malloc
 13788 0000B027 488B7D10                	mov rdi, ENV
 13789 0000B02B BE00000000              	mov rsi, 0
 13790 0000B030 BA01000000              	mov rdx, 1
 13791                                  .L_lambda_simple_env_loop_006a:	; ext_env[i + 1] <-- env[i]
 13792 0000B035 4883FE02                	cmp rsi, 2
 13793 0000B039 7410                    	je .L_lambda_simple_env_end_006a
 13794 0000B03B 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 13795 0000B03F 48890CD0                	mov qword [rax + 8 * rdx], rcx
 13796 0000B043 48FFC6                  	inc rsi
 13797 0000B046 48FFC2                  	inc rdx
 13798 0000B049 EBEA                    	jmp .L_lambda_simple_env_loop_006a
 13799                                  .L_lambda_simple_env_end_006a:
 13800 0000B04B 5B                      	pop rbx
 13801 0000B04C BE00000000              	mov rsi, 0
 13802                                  .L_lambda_simple_params_loop_006a:	; copy params
 13803 0000B051 4883FE01                	cmp rsi, 1
 13804 0000B055 740E                    	je .L_lambda_simple_params_end_006a
 13805 0000B057 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 13806 0000B05C 488914F3                	mov qword [rbx + 8 * rsi], rdx
 13807 0000B060 48FFC6                  	inc rsi
 13808 0000B063 EBEC                    	jmp .L_lambda_simple_params_loop_006a
 13809                                  .L_lambda_simple_params_end_006a:
 13810 0000B065 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 13811 0000B068 4889C3                  	mov rbx, rax
 13812 0000B06B 58                      	pop rax
 13813 0000B06C C60005                  	mov byte [rax], T_closure
 13814 0000B06F 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 13815 0000B073 48C74009[80B00000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_006a
 13816 0000B07B E987040000              	jmp .L_lambda_simple_end_006a
 13817                                  .L_lambda_simple_code_006a:	; lambda-simple body
 13818 0000B080 48837C241001            	cmp qword [rsp + 8 * 2], 1
 13819 0000B086 740B                    	je .L_lambda_simple_arity_check_ok_006a
 13820 0000B088 FF742410                	push qword [rsp + 8 * 2]
 13821 0000B08C 6A01                    	push 1
 13822 0000B08E E9B74C0000              	jmp L_error_incorrect_arity_simple
 13823                                  .L_lambda_simple_arity_check_ok_006a:
 13824 0000B093 C8000000                	enter 0, 0
 13825 0000B097 48B8-                   	mov rax, L_constants + 23
 13825 0000B099 [1700000000000000] 
 13826 0000B0A1 50                      	push rax
 13827 0000B0A2 6A01                    	push 1
 13828 0000B0A4 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 13829 0000B0A9 E8E34C0000              	call malloc
 13830 0000B0AE 50                      	push rax
 13831 0000B0AF BF08000000              	mov rdi, 8 * 1	; new rib
 13832 0000B0B4 E8D84C0000              	call malloc
 13833 0000B0B9 50                      	push rax
 13834 0000B0BA BF20000000              	mov rdi, 8 * 4	; extended env
 13835 0000B0BF E8CD4C0000              	call malloc
 13836 0000B0C4 488B7D10                	mov rdi, ENV
 13837 0000B0C8 BE00000000              	mov rsi, 0
 13838 0000B0CD BA01000000              	mov rdx, 1
 13839                                  .L_lambda_simple_env_loop_006b:	; ext_env[i + 1] <-- env[i]
 13840 0000B0D2 4883FE03                	cmp rsi, 3
 13841 0000B0D6 7410                    	je .L_lambda_simple_env_end_006b
 13842 0000B0D8 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 13843 0000B0DC 48890CD0                	mov qword [rax + 8 * rdx], rcx
 13844 0000B0E0 48FFC6                  	inc rsi
 13845 0000B0E3 48FFC2                  	inc rdx
 13846 0000B0E6 EBEA                    	jmp .L_lambda_simple_env_loop_006b
 13847                                  .L_lambda_simple_env_end_006b:
 13848 0000B0E8 5B                      	pop rbx
 13849 0000B0E9 BE00000000              	mov rsi, 0
 13850                                  .L_lambda_simple_params_loop_006b:	; copy params
 13851 0000B0EE 4883FE01                	cmp rsi, 1
 13852 0000B0F2 740E                    	je .L_lambda_simple_params_end_006b
 13853 0000B0F4 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 13854 0000B0F9 488914F3                	mov qword [rbx + 8 * rsi], rdx
 13855 0000B0FD 48FFC6                  	inc rsi
 13856 0000B100 EBEC                    	jmp .L_lambda_simple_params_loop_006b
 13857                                  .L_lambda_simple_params_end_006b:
 13858 0000B102 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 13859 0000B105 4889C3                  	mov rbx, rax
 13860 0000B108 58                      	pop rax
 13861 0000B109 C60005                  	mov byte [rax], T_closure
 13862 0000B10C 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 13863 0000B110 48C74009[1DB10000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_006b
 13864 0000B118 E9A3030000              	jmp .L_lambda_simple_end_006b
 13865                                  .L_lambda_simple_code_006b:	; lambda-simple body
 13866 0000B11D 48837C241001            	cmp qword [rsp + 8 * 2], 1
 13867 0000B123 740B                    	je .L_lambda_simple_arity_check_ok_006b
 13868 0000B125 FF742410                	push qword [rsp + 8 * 2]
 13869 0000B129 6A01                    	push 1
 13870 0000B12B E91A4C0000              	jmp L_error_incorrect_arity_simple
 13871                                  .L_lambda_simple_arity_check_ok_006b:
 13872 0000B130 C8000000                	enter 0, 0
 13873 0000B134 488B4520                	mov rax, qword [rbp + 8 * (4 + 0)]
 13874 0000B138 4889C2                  	mov rdx, rax
 13875 0000B13B BF08000000              	mov rdi, 8
 13876 0000B140 E84C4C0000              	call malloc
 13877 0000B145 488910                  	mov qword[rax], rdx
 13878 0000B148 48894520                	mov qword [rbp + 8 * (4 + 0)], rax
 13879 0000B14C 48B8-                   	mov rax, sob_void
 13879 0000B14E [0000000000000000] 
 13880                                  
 13881 0000B156 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 13882 0000B15B E8314C0000              	call malloc
 13883 0000B160 50                      	push rax
 13884 0000B161 BF08000000              	mov rdi, 8 * 1	; new rib
 13885 0000B166 E8264C0000              	call malloc
 13886 0000B16B 50                      	push rax
 13887 0000B16C BF28000000              	mov rdi, 8 * 5	; extended env
 13888 0000B171 E81B4C0000              	call malloc
 13889 0000B176 488B7D10                	mov rdi, ENV
 13890 0000B17A BE00000000              	mov rsi, 0
 13891 0000B17F BA01000000              	mov rdx, 1
 13892                                  .L_lambda_simple_env_loop_006c:	; ext_env[i + 1] <-- env[i]
 13893 0000B184 4883FE04                	cmp rsi, 4
 13894 0000B188 7410                    	je .L_lambda_simple_env_end_006c
 13895 0000B18A 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 13896 0000B18E 48890CD0                	mov qword [rax + 8 * rdx], rcx
 13897 0000B192 48FFC6                  	inc rsi
 13898 0000B195 48FFC2                  	inc rdx
 13899 0000B198 EBEA                    	jmp .L_lambda_simple_env_loop_006c
 13900                                  .L_lambda_simple_env_end_006c:
 13901 0000B19A 5B                      	pop rbx
 13902 0000B19B BE00000000              	mov rsi, 0
 13903                                  .L_lambda_simple_params_loop_006c:	; copy params
 13904 0000B1A0 4883FE01                	cmp rsi, 1
 13905 0000B1A4 740E                    	je .L_lambda_simple_params_end_006c
 13906 0000B1A6 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 13907 0000B1AB 488914F3                	mov qword [rbx + 8 * rsi], rdx
 13908 0000B1AF 48FFC6                  	inc rsi
 13909 0000B1B2 EBEC                    	jmp .L_lambda_simple_params_loop_006c
 13910                                  .L_lambda_simple_params_end_006c:
 13911 0000B1B4 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 13912 0000B1B7 4889C3                  	mov rbx, rax
 13913 0000B1BA 58                      	pop rax
 13914 0000B1BB C60005                  	mov byte [rax], T_closure
 13915 0000B1BE 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 13916 0000B1C2 48C74009[CFB10000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_006c
 13917 0000B1CA E92D010000              	jmp .L_lambda_simple_end_006c
 13918                                  .L_lambda_simple_code_006c:	; lambda-simple body
 13919 0000B1CF 48837C241002            	cmp qword [rsp + 8 * 2], 2
 13920 0000B1D5 740B                    	je .L_lambda_simple_arity_check_ok_006c
 13921 0000B1D7 FF742410                	push qword [rsp + 8 * 2]
 13922 0000B1DB 6A02                    	push 2
 13923 0000B1DD E9684B0000              	jmp L_error_incorrect_arity_simple
 13924                                  .L_lambda_simple_arity_check_ok_006c:
 13925 0000B1E2 C8000000                	enter 0, 0
 13926 0000B1E6 488B4528                	mov rax, qword [rbp + 8 * (4 + 1)]
 13927 0000B1EA 50                      	push rax
 13928 0000B1EB 6A01                    	push 1
 13929 0000B1ED 488B0425[00000000]      	mov rax, qword [free_var_0]
 13930                                  	assert_closure(rax)
    42 0000B1F5 803805              <1>  cmp byte [%1], %2
    43 0000B1F8 0F858C630000        <1>  jne L_error_incorrect_type
 13931 0000B1FE FF7001                  	push SOB_CLOSURE_ENV(rax)
 13932 0000B201 FF5009                  	call SOB_CLOSURE_CODE(rax)
 13933 0000B204 483D[02000000]          	cmp rax, sob_boolean_false
 13934 0000B20A 0F85E8000000            	jne .L_or_end_0007
 13935 0000B210 488B4528                	mov rax, qword [rbp + 8 * (4 + 1)]
 13936 0000B214 50                      	push rax
 13937 0000B215 6A01                    	push 1
 13938 0000B217 488B0425[80000000]      	mov rax, qword [free_var_16]
 13939                                  	assert_closure(rax)
    42 0000B21F 803805              <1>  cmp byte [%1], %2
    43 0000B222 0F8562630000        <1>  jne L_error_incorrect_type
 13940 0000B228 FF7001                  	push SOB_CLOSURE_ENV(rax)
 13941 0000B22B FF5009                  	call SOB_CLOSURE_CODE(rax)
 13942 0000B22E 50                      	push rax
 13943 0000B22F 488B4520                	mov rax, qword [rbp + 8 * (4 + 0)]
 13944 0000B233 50                      	push rax
 13945 0000B234 6A02                    	push 2
 13946 0000B236 488B4510                	mov rax, qword [rbp + 8 * 2]
 13947 0000B23A 488B4008                	mov rax, qword [rax + 8 * 1]
 13948 0000B23E 488B00                  	mov rax, qword [rax + 8 * 0]
 13949                                  	assert_closure(rax)
    42 0000B241 803805              <1>  cmp byte [%1], %2
    43 0000B244 0F8540630000        <1>  jne L_error_incorrect_type
 13950 0000B24A FF7001                  	push SOB_CLOSURE_ENV(rax)
 13951 0000B24D FF5009                  	call SOB_CLOSURE_CODE(rax)
 13952 0000B250 483D[02000000]          	cmp rax, sob_boolean_false
 13953 0000B256 0F8492000000                      	je .L_if_else_003d
 13954 0000B25C 488B4528                          	mov rax, qword [rbp + 8 * (4 + 1)]
 13955 0000B260 50                      	push rax
 13956 0000B261 6A01                    	push 1
 13957 0000B263 488B0425[88000000]      	mov rax, qword [free_var_17]
 13958                                  	assert_closure(rax)
    42 0000B26B 803805              <1>  cmp byte [%1], %2
    43 0000B26E 0F8516630000        <1>  jne L_error_incorrect_type
 13959 0000B274 FF7001                  	push SOB_CLOSURE_ENV(rax)
 13960 0000B277 FF5009                  	call SOB_CLOSURE_CODE(rax)
 13961 0000B27A 50                      	push rax
 13962 0000B27B 488B4528                	mov rax, qword [rbp + 8 * (4 + 1)]
 13963 0000B27F 50                      	push rax
 13964 0000B280 6A01                    	push 1
 13965 0000B282 488B0425[80000000]      	mov rax, qword [free_var_16]
 13966                                  	assert_closure(rax)
    42 0000B28A 803805              <1>  cmp byte [%1], %2
    43 0000B28D 0F85F7620000        <1>  jne L_error_incorrect_type
 13967 0000B293 FF7001                  	push SOB_CLOSURE_ENV(rax)
 13968 0000B296 FF5009                  	call SOB_CLOSURE_CODE(rax)
 13969 0000B299 50                      	push rax
 13970 0000B29A 6A02                    	push 2
 13971 0000B29C 488B4510                	mov rax, qword [rbp + 8 * 2]
 13972 0000B2A0 488B00                  	mov rax, qword [rax + 8 * 0]
 13973 0000B2A3 488B00                  	mov rax, qword [rax + 8 * 0]
 13974 0000B2A6 488B00                  	mov rax, qword [rax]
 13975                                  	assert_closure(rax)
    42 0000B2A9 803805              <1>  cmp byte [%1], %2
    43 0000B2AC 0F85D8620000        <1>  jne L_error_incorrect_type
 13976 0000B2B2 FF7001                  	push SOB_CLOSURE_ENV(rax)
 13977 0000B2B5 FF7508                  	push qword [rbp + 8 * 1] ; old ret addr
 13978 0000B2B8 FF7500                  	push qword [rbp] ; same the old rbp
 13979 0000B2BB BA05000000              	mov rdx, 2 + 3
 13980 0000B2C0 488B4D18                	mov rcx, COUNT
 13981 0000B2C4 488D4CCD20              	lea rcx, [rbp + 8*4 + rcx * 8]
 13982 0000B2C9 4889EF                  	mov rdi, rbp
 13983                                  .L_tc_recycle_frame_loop_0084:
 13984 0000B2CC 4883FA00                	cmp rdx, 0
 13985 0000B2D0 7413                    	je .L_tc_recycle_frame_done_0084
 13986 0000B2D2 4883E908                	sub rcx, 8
 13987 0000B2D6 4883EF08                	sub rdi, 8
 13988 0000B2DA 488B37                  	mov rsi, [rdi]
 13989 0000B2DD 488931                  	mov qword [rcx], rsi
 13990 0000B2E0 48FFCA                  	dec rdx
 13991 0000B2E3 EBE7                    	jmp .L_tc_recycle_frame_loop_0084
 13992                                  .L_tc_recycle_frame_done_0084:
 13993 0000B2E5 5D                      	pop rbp ; restore the old rbp
 13994 0000B2E6 4889CC                  	mov rsp, rcx
 13995 0000B2E9 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 13996 0000B2EC EB0A                    	jmp .L_if_end_003d
 13997                                            .L_if_else_003d:
 13998 0000B2EE 48B8-                             	mov rax, L_constants + 2
 13998 0000B2F0 [0200000000000000] 
 13999                                  .L_if_end_003d:
 14000                                  .L_or_end_0007:
 14001 0000B2F8 C9                      	leave
 14002 0000B2F9 C22000                  	ret 8 * (2 + 2)
 14003                                  .L_lambda_simple_end_006c:	; new closure is in rax
 14004 0000B2FC 50                      	push rax
 14005 0000B2FD 488B4520                	mov rax, qword [rbp + 8 * (4 + 0)]
 14006 0000B301 8F00                    	pop qword [rax]
 14007 0000B303 48B8-                   	mov rax, sob_void
 14007 0000B305 [0000000000000000] 
 14008                                  
 14009 0000B30D BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 14010 0000B312 E87A4A0000              	call malloc
 14011 0000B317 50                      	push rax
 14012 0000B318 BF08000000              	mov rdi, 8 * 1	; new rib
 14013 0000B31D E86F4A0000              	call malloc
 14014 0000B322 50                      	push rax
 14015 0000B323 BF28000000              	mov rdi, 8 * 5	; extended env
 14016 0000B328 E8644A0000              	call malloc
 14017 0000B32D 488B7D10                	mov rdi, ENV
 14018 0000B331 BE00000000              	mov rsi, 0
 14019 0000B336 BA01000000              	mov rdx, 1
 14020                                  .L_lambda_opt_env_loop_0012:	; ext_env[i + 1] <-- env[i]
 14021 0000B33B 4883FE04                	cmp rsi, 4
 14022 0000B33F 7410                    	je .L_lambda_opt_env_end_0012
 14023 0000B341 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 14024 0000B345 48890CD0                	mov qword [rax + 8 * rdx], rcx
 14025 0000B349 48FFC6                  	inc rsi
 14026 0000B34C 48FFC2                  	inc rdx
 14027 0000B34F EBEA                    	jmp .L_lambda_opt_env_loop_0012
 14028                                  .L_lambda_opt_env_end_0012:
 14029 0000B351 5B                      	pop rbx
 14030 0000B352 BE00000000              	mov rsi, 0
 14031                                  .L_lambda_opt_params_loop_0012:	; copy params
 14032 0000B357 4883FE01                	cmp rsi, 1
 14033 0000B35B 740E                    	je .L_lambda_opt_params_end_0012
 14034 0000B35D 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 14035 0000B362 488914F3                	mov qword [rbx + 8 * rsi], rdx
 14036 0000B366 48FFC6                  	inc rsi
 14037 0000B369 EBEC                    	jmp .L_lambda_opt_params_loop_0012
 14038                                  .L_lambda_opt_params_end_0012:
 14039 0000B36B 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 14040 0000B36E 4889C3                  	mov rbx, rax
 14041 0000B371 58                      	pop rax
 14042 0000B372 C60005                  	mov byte [rax], T_closure
 14043 0000B375 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 14044 0000B379 48C74009[86B30000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_opt_code_0012
 14045 0000B381 E936010000              	jmp .L_lambda_opt_end_0012
 14046                                  .L_lambda_opt_code_0012:	; lambda-opt body
 14047 0000B386 48837C241001            	cmp qword [rsp + 8 * 2], 1
 14048 0000B38C 740D                    	je .L_lambda_opt_arity_check_exact_0012
 14049 0000B38E 7F43                    	jg .L_lambda_opt_arity_check_more_0012
 14050 0000B390 FF742410                	push qword [rsp + 8 * 2]
 14051 0000B394 6A01                    	push 1
 14052 0000B396 E9C3490000              	jmp L_error_incorrect_arity_opt
 14053                                  .L_lambda_opt_arity_check_exact_0012:
 14054 0000B39B 48C744241002000000      	mov qword [rsp + 8 * 2], 2
 14055 0000B3A4 BA04000000              	mov rdx, 4
 14056 0000B3A9 FF3424                  	push qword [rsp]
 14057 0000B3AC BE01000000              	mov rsi, 1
 14058                                  .L_lambda_opt_stack_shrink_loop_0034:
 14059 0000B3B1 4839D6                  	cmp rsi, rdx
 14060 0000B3B4 7411                    	je .L_lambda_opt_stack_shrink_loop_exit_0034
 14061 0000B3B6 488D5CF408              	lea rbx, [rsp + 8 + rsi * 8]
 14062 0000B3BB 488B0B                  	mov rcx, [rbx]
 14063 0000B3BE 48894BF8                	mov qword [rbx - 8], rcx
 14064 0000B3C2 48FFC6                  	inc rsi
 14065 0000B3C5 EBEA                    	jmp .L_lambda_opt_stack_shrink_loop_0034
 14066                                  .L_lambda_opt_stack_shrink_loop_exit_0034:
 14067 0000B3C7 48C703[01000000]        	mov qword [rbx], sob_nil
 14068 0000B3CE E985000000              	jmp .L_lambda_opt_stack_adjusted_0012
 14069                                  .L_lambda_opt_arity_check_more_0012:
 14070 0000B3D3 488B542410              	mov rdx, qword [rsp + 8 * 2]
 14071 0000B3D8 4883EA01                	sub rdx, 1
 14072 0000B3DC 48C744241002000000      	mov qword [rsp + 8 * 2], 2
 14073 0000B3E5 BE00000000              	mov rsi, 0
 14074 0000B3EA 488D5CD418              	lea rbx, [rsp + 2 * 8 + 1 * 8 + rdx * 8]
 14075 0000B3EF 48B9-                   	mov rcx, sob_nil
 14075 0000B3F1 [0100000000000000] 
 14076                                  .L_lambda_opt_stack_shrink_loop_0035:
 14077 0000B3F9 4839D6                  	cmp rsi, rdx
 14078 0000B3FC 7427                    je .L_lambda_opt_stack_shrink_loop_exit_0035
 14079 0000B3FE BF11000000              	mov rdi, 17 ; 1+8+8
 14080 0000B403 E889490000              	call malloc
 14081 0000B408 48894809                	mov SOB_PAIR_CDR(rax), rcx
 14082 0000B40C 48F7DE                  	neg rsi
 14083 0000B40F 488B0CF3                	mov rcx, qword [rbx + rsi * 8]
 14084 0000B413 48F7DE                  	neg rsi
 14085 0000B416 48894801                	mov SOB_PAIR_CAR(rax), rcx
 14086 0000B41A C60021                  	mov byte [rax], T_pair
 14087 0000B41D 4889C1                  	mov rcx, rax
 14088 0000B420 48FFC6                  	inc rsi
 14089 0000B423 EBD4                    	jmp .L_lambda_opt_stack_shrink_loop_0035
 14090                                  .L_lambda_opt_stack_shrink_loop_exit_0035:
 14091 0000B425 48890B                  	mov qword [rbx], rcx
 14092 0000B428 4883EB08                	sub rbx, 8
 14093 0000B42C 4889E7                  	mov rdi, rsp
 14094 0000B42F 4883C718                	add rdi, 24
 14095 0000B433 BE04000000              	mov rsi, 4
 14096                                  .L_lambda_opt_stack_shrink_loop_0036:
 14097 0000B438 4883FE00                	cmp rsi,0
 14098 0000B43C 7413                    	je .L_lambda_opt_stack_shrink_loop_exit_0036
 14099 0000B43E 488B0F                  	mov rcx, qword [rdi]
 14100 0000B441 48890B                  	mov [rbx], rcx
 14101 0000B444 48FFCE                  	dec rsi
 14102 0000B447 4883EB08                	sub rbx, 8
 14103 0000B44B 4883EF08                	sub rdi, 8
 14104 0000B44F EBE7                    	jmp .L_lambda_opt_stack_shrink_loop_0036
 14105                                  .L_lambda_opt_stack_shrink_loop_exit_0036:
 14106 0000B451 4883C308                	add rbx, 8
 14107 0000B455 4889DC                  	mov rsp, rbx
 14108                                  .L_lambda_opt_stack_adjusted_0012:
 14109 0000B458 C8000000                	enter 0, 0
 14110 0000B45C 488B4528                	mov rax, qword [rbp + 8 * (4 + 1)]
 14111 0000B460 50                      	push rax
 14112 0000B461 488B4520                	mov rax, qword [rbp + 8 * (4 + 0)]
 14113 0000B465 50                      	push rax
 14114 0000B466 6A02                    	push 2
 14115 0000B468 488B4510                	mov rax, qword [rbp + 8 * 2]
 14116 0000B46C 488B00                  	mov rax, qword [rax + 8 * 0]
 14117 0000B46F 488B00                  	mov rax, qword [rax + 8 * 0]
 14118 0000B472 488B00                  	mov rax, qword [rax]
 14119                                  	assert_closure(rax)
    42 0000B475 803805              <1>  cmp byte [%1], %2
    43 0000B478 0F850C610000        <1>  jne L_error_incorrect_type
 14120 0000B47E FF7001                  	push SOB_CLOSURE_ENV(rax)
 14121 0000B481 FF7508                  	push qword [rbp + 8 * 1] ; old ret addr
 14122 0000B484 FF7500                  	push qword [rbp] ; same the old rbp
 14123 0000B487 BA05000000              	mov rdx, 2 + 3
 14124 0000B48C 488B4D18                	mov rcx, COUNT
 14125 0000B490 488D4CCD20              	lea rcx, [rbp + 8*4 + rcx * 8]
 14126 0000B495 4889EF                  	mov rdi, rbp
 14127                                  .L_tc_recycle_frame_loop_0085:
 14128 0000B498 4883FA00                	cmp rdx, 0
 14129 0000B49C 7413                    	je .L_tc_recycle_frame_done_0085
 14130 0000B49E 4883E908                	sub rcx, 8
 14131 0000B4A2 4883EF08                	sub rdi, 8
 14132 0000B4A6 488B37                  	mov rsi, [rdi]
 14133 0000B4A9 488931                  	mov qword [rcx], rsi
 14134 0000B4AC 48FFCA                  	dec rdx
 14135 0000B4AF EBE7                    	jmp .L_tc_recycle_frame_loop_0085
 14136                                  .L_tc_recycle_frame_done_0085:
 14137 0000B4B1 5D                      	pop rbp ; restore the old rbp
 14138 0000B4B2 4889CC                  	mov rsp, rcx
 14139 0000B4B5 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 14140 0000B4B8 C9                      	leave
 14141 0000B4B9 C22000                  	ret 8 * (2 + 2)
 14142                                  .L_lambda_opt_end_0012:	; new closure is in rax
 14143 0000B4BC C9                      	leave
 14144 0000B4BD C21800                  	ret 8 * (2 + 1)
 14145                                  .L_lambda_simple_end_006b:	; new closure is in rax
 14146                                  	assert_closure(rax)
    42 0000B4C0 803805              <1>  cmp byte [%1], %2
    43 0000B4C3 0F85C1600000        <1>  jne L_error_incorrect_type
 14147 0000B4C9 FF7001                  	push SOB_CLOSURE_ENV(rax)
 14148 0000B4CC FF7508                  	push qword [rbp + 8 * 1] ; old ret addr
 14149 0000B4CF FF7500                  	push qword [rbp] ; same the old rbp
 14150 0000B4D2 BA04000000              	mov rdx, 1 + 3
 14151 0000B4D7 488B4D18                	mov rcx, COUNT
 14152 0000B4DB 488D4CCD20              	lea rcx, [rbp + 8*4 + rcx * 8]
 14153 0000B4E0 4889EF                  	mov rdi, rbp
 14154                                  .L_tc_recycle_frame_loop_0083:
 14155 0000B4E3 4883FA00                	cmp rdx, 0
 14156 0000B4E7 7413                    	je .L_tc_recycle_frame_done_0083
 14157 0000B4E9 4883E908                	sub rcx, 8
 14158 0000B4ED 4883EF08                	sub rdi, 8
 14159 0000B4F1 488B37                  	mov rsi, [rdi]
 14160 0000B4F4 488931                  	mov qword [rcx], rsi
 14161 0000B4F7 48FFCA                  	dec rdx
 14162 0000B4FA EBE7                    	jmp .L_tc_recycle_frame_loop_0083
 14163                                  .L_tc_recycle_frame_done_0083:
 14164 0000B4FC 5D                      	pop rbp ; restore the old rbp
 14165 0000B4FD 4889CC                  	mov rsp, rcx
 14166 0000B500 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 14167 0000B503 C9                      	leave
 14168 0000B504 C21800                  	ret 8 * (2 + 1)
 14169                                  .L_lambda_simple_end_006a:	; new closure is in rax
 14170                                  	assert_closure(rax)
    42 0000B507 803805              <1>  cmp byte [%1], %2
    43 0000B50A 0F857A600000        <1>  jne L_error_incorrect_type
 14171 0000B510 FF7001                  	push SOB_CLOSURE_ENV(rax)
 14172 0000B513 FF7508                  	push qword [rbp + 8 * 1] ; old ret addr
 14173 0000B516 FF7500                  	push qword [rbp] ; same the old rbp
 14174 0000B519 BA04000000              	mov rdx, 1 + 3
 14175 0000B51E 488B4D18                	mov rcx, COUNT
 14176 0000B522 488D4CCD20              	lea rcx, [rbp + 8*4 + rcx * 8]
 14177 0000B527 4889EF                  	mov rdi, rbp
 14178                                  .L_tc_recycle_frame_loop_0082:
 14179 0000B52A 4883FA00                	cmp rdx, 0
 14180 0000B52E 7413                    	je .L_tc_recycle_frame_done_0082
 14181 0000B530 4883E908                	sub rcx, 8
 14182 0000B534 4883EF08                	sub rdi, 8
 14183 0000B538 488B37                  	mov rsi, [rdi]
 14184 0000B53B 488931                  	mov qword [rcx], rsi
 14185 0000B53E 48FFCA                  	dec rdx
 14186 0000B541 EBE7                    	jmp .L_tc_recycle_frame_loop_0082
 14187                                  .L_tc_recycle_frame_done_0082:
 14188 0000B543 5D                      	pop rbp ; restore the old rbp
 14189 0000B544 4889CC                  	mov rsp, rcx
 14190 0000B547 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 14191 0000B54A C9                      	leave
 14192 0000B54B C21800                  	ret 8 * (2 + 1)
 14193                                  .L_lambda_simple_end_0068:	; new closure is in rax
 14194                                  	assert_closure(rax)
    42 0000B54E 803805              <1>  cmp byte [%1], %2
    43 0000B551 0F8533600000        <1>  jne L_error_incorrect_type
 14195 0000B557 FF7001                  	push SOB_CLOSURE_ENV(rax)
 14196 0000B55A FF7508                  	push qword [rbp + 8 * 1] ; old ret addr
 14197 0000B55D FF7500                  	push qword [rbp] ; same the old rbp
 14198 0000B560 BA04000000              	mov rdx, 1 + 3
 14199 0000B565 488B4D18                	mov rcx, COUNT
 14200 0000B569 488D4CCD20              	lea rcx, [rbp + 8*4 + rcx * 8]
 14201 0000B56E 4889EF                  	mov rdi, rbp
 14202                                  .L_tc_recycle_frame_loop_0080:
 14203 0000B571 4883FA00                	cmp rdx, 0
 14204 0000B575 7413                    	je .L_tc_recycle_frame_done_0080
 14205 0000B577 4883E908                	sub rcx, 8
 14206 0000B57B 4883EF08                	sub rdi, 8
 14207 0000B57F 488B37                  	mov rsi, [rdi]
 14208 0000B582 488931                  	mov qword [rcx], rsi
 14209 0000B585 48FFCA                  	dec rdx
 14210 0000B588 EBE7                    	jmp .L_tc_recycle_frame_loop_0080
 14211                                  .L_tc_recycle_frame_done_0080:
 14212 0000B58A 5D                      	pop rbp ; restore the old rbp
 14213 0000B58B 4889CC                  	mov rsp, rcx
 14214 0000B58E FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 14215 0000B591 C9                      	leave
 14216 0000B592 C22000                  	ret 8 * (2 + 2)
 14217                                  .L_lambda_simple_end_0067:	; new closure is in rax
 14218 0000B595 50                      	push rax
 14219 0000B596 6A01                    	push 1
 14220 0000B598 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 14221 0000B59D E8EF470000              	call malloc
 14222 0000B5A2 50                      	push rax
 14223 0000B5A3 BF00000000              	mov rdi, 8 * 0	; new rib
 14224 0000B5A8 E8E4470000              	call malloc
 14225 0000B5AD 50                      	push rax
 14226 0000B5AE BF08000000              	mov rdi, 8 * 1	; extended env
 14227 0000B5B3 E8D9470000              	call malloc
 14228 0000B5B8 488B7D10                	mov rdi, ENV
 14229 0000B5BC BE00000000              	mov rsi, 0
 14230 0000B5C1 BA01000000              	mov rdx, 1
 14231                                  .L_lambda_simple_env_loop_0066:	; ext_env[i + 1] <-- env[i]
 14232 0000B5C6 4883FE00                	cmp rsi, 0
 14233 0000B5CA 7410                    	je .L_lambda_simple_env_end_0066
 14234 0000B5CC 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 14235 0000B5D0 48890CD0                	mov qword [rax + 8 * rdx], rcx
 14236 0000B5D4 48FFC6                  	inc rsi
 14237 0000B5D7 48FFC2                  	inc rdx
 14238 0000B5DA EBEA                    	jmp .L_lambda_simple_env_loop_0066
 14239                                  .L_lambda_simple_env_end_0066:
 14240 0000B5DC 5B                      	pop rbx
 14241 0000B5DD BE00000000              	mov rsi, 0
 14242                                  .L_lambda_simple_params_loop_0066:	; copy params
 14243 0000B5E2 4883FE00                	cmp rsi, 0
 14244 0000B5E6 740E                    	je .L_lambda_simple_params_end_0066
 14245 0000B5E8 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 14246 0000B5ED 488914F3                	mov qword [rbx + 8 * rsi], rdx
 14247 0000B5F1 48FFC6                  	inc rsi
 14248 0000B5F4 EBEC                    	jmp .L_lambda_simple_params_loop_0066
 14249                                  .L_lambda_simple_params_end_0066:
 14250 0000B5F6 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 14251 0000B5F9 4889C3                  	mov rbx, rax
 14252 0000B5FC 58                      	pop rax
 14253 0000B5FD C60005                  	mov byte [rax], T_closure
 14254 0000B600 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 14255 0000B604 48C74009[11B60000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0066
 14256 0000B60C E9FF000000              	jmp .L_lambda_simple_end_0066
 14257                                  .L_lambda_simple_code_0066:	; lambda-simple body
 14258 0000B611 48837C241001            	cmp qword [rsp + 8 * 2], 1
 14259 0000B617 740B                    	je .L_lambda_simple_arity_check_ok_0066
 14260 0000B619 FF742410                	push qword [rsp + 8 * 2]
 14261 0000B61D 6A01                    	push 1
 14262 0000B61F E926470000              	jmp L_error_incorrect_arity_simple
 14263                                  .L_lambda_simple_arity_check_ok_0066:
 14264 0000B624 C8000000                	enter 0, 0
 14265 0000B628 488B0425[70030000]      	mov rax, qword [free_var_110]
 14266 0000B630 50                      	push rax
 14267 0000B631 488B0425[60030000]      	mov rax, qword [free_var_108]
 14268 0000B639 50                      	push rax
 14269 0000B63A 6A02                    	push 2
 14270 0000B63C 488B4520                	mov rax, qword [rbp + 8 * (4 + 0)]
 14271                                  	assert_closure(rax)
    42 0000B640 803805              <1>  cmp byte [%1], %2
    43 0000B643 0F85415F0000        <1>  jne L_error_incorrect_type
 14272 0000B649 FF7001                  	push SOB_CLOSURE_ENV(rax)
 14273 0000B64C FF5009                  	call SOB_CLOSURE_CODE(rax)
 14274 0000B64F 48890425[E0030000]      	mov qword [free_var_124], rax
 14275 0000B657 48B8-                   	mov rax, sob_void
 14275 0000B659 [0000000000000000] 
 14276                                  
 14277 0000B661 488B0425[A8030000]      	mov rax, qword [free_var_117]
 14278 0000B669 50                      	push rax
 14279 0000B66A 488B0425[98030000]      	mov rax, qword [free_var_115]
 14280 0000B672 50                      	push rax
 14281 0000B673 6A02                    	push 2
 14282 0000B675 488B4520                	mov rax, qword [rbp + 8 * (4 + 0)]
 14283                                  	assert_closure(rax)
    42 0000B679 803805              <1>  cmp byte [%1], %2
    43 0000B67C 0F85085F0000        <1>  jne L_error_incorrect_type
 14284 0000B682 FF7001                  	push SOB_CLOSURE_ENV(rax)
 14285 0000B685 FF5009                  	call SOB_CLOSURE_CODE(rax)
 14286 0000B688 48890425[08040000]      	mov qword [free_var_129], rax
 14287 0000B690 48B8-                   	mov rax, sob_void
 14287 0000B692 [0000000000000000] 
 14288                                  
 14289 0000B69A 488B0425[70030000]      	mov rax, qword [free_var_110]
 14290 0000B6A2 50                      	push rax
 14291 0000B6A3 488B0425[78030000]      	mov rax, qword [free_var_111]
 14292 0000B6AB 50                      	push rax
 14293 0000B6AC 6A02                    	push 2
 14294 0000B6AE 488B4520                	mov rax, qword [rbp + 8 * (4 + 0)]
 14295                                  	assert_closure(rax)
    42 0000B6B2 803805              <1>  cmp byte [%1], %2
    43 0000B6B5 0F85CF5E0000        <1>  jne L_error_incorrect_type
 14296 0000B6BB FF7001                  	push SOB_CLOSURE_ENV(rax)
 14297 0000B6BE FF5009                  	call SOB_CLOSURE_CODE(rax)
 14298 0000B6C1 48890425[00040000]      	mov qword [free_var_128], rax
 14299 0000B6C9 48B8-                   	mov rax, sob_void
 14299 0000B6CB [0000000000000000] 
 14300                                  
 14301 0000B6D3 488B0425[A8030000]      	mov rax, qword [free_var_117]
 14302 0000B6DB 50                      	push rax
 14303 0000B6DC 488B0425[B0030000]      	mov rax, qword [free_var_118]
 14304 0000B6E4 50                      	push rax
 14305 0000B6E5 6A02                    	push 2
 14306 0000B6E7 488B4520                	mov rax, qword [rbp + 8 * (4 + 0)]
 14307                                  	assert_closure(rax)
    42 0000B6EB 803805              <1>  cmp byte [%1], %2
    43 0000B6EE 0F85965E0000        <1>  jne L_error_incorrect_type
 14308 0000B6F4 FF7001                  	push SOB_CLOSURE_ENV(rax)
 14309 0000B6F7 FF5009                  	call SOB_CLOSURE_CODE(rax)
 14310 0000B6FA 48890425[28040000]      	mov qword [free_var_133], rax
 14311 0000B702 48B8-                   	mov rax, sob_void
 14311 0000B704 [0000000000000000] 
 14312 0000B70C C9                      	leave
 14313 0000B70D C21800                  	ret 8 * (2 + 1)
 14314                                  .L_lambda_simple_end_0066:	; new closure is in rax
 14315                                  	assert_closure(rax)
    42 0000B710 803805              <1>  cmp byte [%1], %2
    43 0000B713 0F85715E0000        <1>  jne L_error_incorrect_type
 14316 0000B719 FF7001                  	push SOB_CLOSURE_ENV(rax)
 14317 0000B71C FF5009                  	call SOB_CLOSURE_CODE(rax)
 14318                                  
 14319 0000B71F 4889C7                  	mov rdi, rax
 14320 0000B722 E87B460000              	call print_sexpr_if_not_void
 14321                                  
 14322 0000B727 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 14323 0000B72C E860460000              	call malloc
 14324 0000B731 50                      	push rax
 14325 0000B732 BF00000000              	mov rdi, 8 * 0	; new rib
 14326 0000B737 E855460000              	call malloc
 14327 0000B73C 50                      	push rax
 14328 0000B73D BF08000000              	mov rdi, 8 * 1	; extended env
 14329 0000B742 E84A460000              	call malloc
 14330 0000B747 488B7D10                	mov rdi, ENV
 14331 0000B74B BE00000000              	mov rsi, 0
 14332 0000B750 BA01000000              	mov rdx, 1
 14333                                  .L_lambda_simple_env_loop_0070:	; ext_env[i + 1] <-- env[i]
 14334 0000B755 4883FE00                	cmp rsi, 0
 14335 0000B759 7410                    	je .L_lambda_simple_env_end_0070
 14336 0000B75B 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 14337 0000B75F 48890CD0                	mov qword [rax + 8 * rdx], rcx
 14338 0000B763 48FFC6                  	inc rsi
 14339 0000B766 48FFC2                  	inc rdx
 14340 0000B769 EBEA                    	jmp .L_lambda_simple_env_loop_0070
 14341                                  .L_lambda_simple_env_end_0070:
 14342 0000B76B 5B                      	pop rbx
 14343 0000B76C BE00000000              	mov rsi, 0
 14344                                  .L_lambda_simple_params_loop_0070:	; copy params
 14345 0000B771 4883FE00                	cmp rsi, 0
 14346 0000B775 740E                    	je .L_lambda_simple_params_end_0070
 14347 0000B777 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 14348 0000B77C 488914F3                	mov qword [rbx + 8 * rsi], rdx
 14349 0000B780 48FFC6                  	inc rsi
 14350 0000B783 EBEC                    	jmp .L_lambda_simple_params_loop_0070
 14351                                  .L_lambda_simple_params_end_0070:
 14352 0000B785 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 14353 0000B788 4889C3                  	mov rbx, rax
 14354 0000B78B 58                      	pop rax
 14355 0000B78C C60005                  	mov byte [rax], T_closure
 14356 0000B78F 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 14357 0000B793 48C74009[A0B70000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0070
 14358 0000B79B E9D00B0000              	jmp .L_lambda_simple_end_0070
 14359                                  .L_lambda_simple_code_0070:	; lambda-simple body
 14360 0000B7A0 48837C241002            	cmp qword [rsp + 8 * 2], 2
 14361 0000B7A6 740B                    	je .L_lambda_simple_arity_check_ok_0070
 14362 0000B7A8 FF742410                	push qword [rsp + 8 * 2]
 14363 0000B7AC 6A02                    	push 2
 14364 0000B7AE E997450000              	jmp L_error_incorrect_arity_simple
 14365                                  .L_lambda_simple_arity_check_ok_0070:
 14366 0000B7B3 C8000000                	enter 0, 0
 14367 0000B7B7 48B8-                   	mov rax, L_constants + 23
 14367 0000B7B9 [1700000000000000] 
 14368 0000B7C1 50                      	push rax
 14369 0000B7C2 6A01                    	push 1
 14370 0000B7C4 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 14371 0000B7C9 E8C3450000              	call malloc
 14372 0000B7CE 50                      	push rax
 14373 0000B7CF BF10000000              	mov rdi, 8 * 2	; new rib
 14374 0000B7D4 E8B8450000              	call malloc
 14375 0000B7D9 50                      	push rax
 14376 0000B7DA BF10000000              	mov rdi, 8 * 2	; extended env
 14377 0000B7DF E8AD450000              	call malloc
 14378 0000B7E4 488B7D10                	mov rdi, ENV
 14379 0000B7E8 BE00000000              	mov rsi, 0
 14380 0000B7ED BA01000000              	mov rdx, 1
 14381                                  .L_lambda_simple_env_loop_0071:	; ext_env[i + 1] <-- env[i]
 14382 0000B7F2 4883FE01                	cmp rsi, 1
 14383 0000B7F6 7410                    	je .L_lambda_simple_env_end_0071
 14384 0000B7F8 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 14385 0000B7FC 48890CD0                	mov qword [rax + 8 * rdx], rcx
 14386 0000B800 48FFC6                  	inc rsi
 14387 0000B803 48FFC2                  	inc rdx
 14388 0000B806 EBEA                    	jmp .L_lambda_simple_env_loop_0071
 14389                                  .L_lambda_simple_env_end_0071:
 14390 0000B808 5B                      	pop rbx
 14391 0000B809 BE00000000              	mov rsi, 0
 14392                                  .L_lambda_simple_params_loop_0071:	; copy params
 14393 0000B80E 4883FE02                	cmp rsi, 2
 14394 0000B812 740E                    	je .L_lambda_simple_params_end_0071
 14395 0000B814 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 14396 0000B819 488914F3                	mov qword [rbx + 8 * rsi], rdx
 14397 0000B81D 48FFC6                  	inc rsi
 14398 0000B820 EBEC                    	jmp .L_lambda_simple_params_loop_0071
 14399                                  .L_lambda_simple_params_end_0071:
 14400 0000B822 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 14401 0000B825 4889C3                  	mov rbx, rax
 14402 0000B828 58                      	pop rax
 14403 0000B829 C60005                  	mov byte [rax], T_closure
 14404 0000B82C 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 14405 0000B830 48C74009[3DB80000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0071
 14406 0000B838 E9EC0A0000              	jmp .L_lambda_simple_end_0071
 14407                                  .L_lambda_simple_code_0071:	; lambda-simple body
 14408 0000B83D 48837C241001            	cmp qword [rsp + 8 * 2], 1
 14409 0000B843 740B                    	je .L_lambda_simple_arity_check_ok_0071
 14410 0000B845 FF742410                	push qword [rsp + 8 * 2]
 14411 0000B849 6A01                    	push 1
 14412 0000B84B E9FA440000              	jmp L_error_incorrect_arity_simple
 14413                                  .L_lambda_simple_arity_check_ok_0071:
 14414 0000B850 C8000000                	enter 0, 0
 14415 0000B854 488B4520                	mov rax, qword [rbp + 8 * (4 + 0)]
 14416 0000B858 4889C2                  	mov rdx, rax
 14417 0000B85B BF08000000              	mov rdi, 8
 14418 0000B860 E82C450000              	call malloc
 14419 0000B865 488910                  	mov qword[rax], rdx
 14420 0000B868 48894520                	mov qword [rbp + 8 * (4 + 0)], rax
 14421 0000B86C 48B8-                   	mov rax, sob_void
 14421 0000B86E [0000000000000000] 
 14422                                  
 14423 0000B876 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 14424 0000B87B E811450000              	call malloc
 14425 0000B880 50                      	push rax
 14426 0000B881 BF08000000              	mov rdi, 8 * 1	; new rib
 14427 0000B886 E806450000              	call malloc
 14428 0000B88B 50                      	push rax
 14429 0000B88C BF18000000              	mov rdi, 8 * 3	; extended env
 14430 0000B891 E8FB440000              	call malloc
 14431 0000B896 488B7D10                	mov rdi, ENV
 14432 0000B89A BE00000000              	mov rsi, 0
 14433 0000B89F BA01000000              	mov rdx, 1
 14434                                  .L_lambda_simple_env_loop_0072:	; ext_env[i + 1] <-- env[i]
 14435 0000B8A4 4883FE02                	cmp rsi, 2
 14436 0000B8A8 7410                    	je .L_lambda_simple_env_end_0072
 14437 0000B8AA 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 14438 0000B8AE 48890CD0                	mov qword [rax + 8 * rdx], rcx
 14439 0000B8B2 48FFC6                  	inc rsi
 14440 0000B8B5 48FFC2                  	inc rdx
 14441 0000B8B8 EBEA                    	jmp .L_lambda_simple_env_loop_0072
 14442                                  .L_lambda_simple_env_end_0072:
 14443 0000B8BA 5B                      	pop rbx
 14444 0000B8BB BE00000000              	mov rsi, 0
 14445                                  .L_lambda_simple_params_loop_0072:	; copy params
 14446 0000B8C0 4883FE01                	cmp rsi, 1
 14447 0000B8C4 740E                    	je .L_lambda_simple_params_end_0072
 14448 0000B8C6 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 14449 0000B8CB 488914F3                	mov qword [rbx + 8 * rsi], rdx
 14450 0000B8CF 48FFC6                  	inc rsi
 14451 0000B8D2 EBEC                    	jmp .L_lambda_simple_params_loop_0072
 14452                                  .L_lambda_simple_params_end_0072:
 14453 0000B8D4 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 14454 0000B8D7 4889C3                  	mov rbx, rax
 14455 0000B8DA 58                      	pop rax
 14456 0000B8DB C60005                  	mov byte [rax], T_closure
 14457 0000B8DE 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 14458 0000B8E2 48C74009[EFB80000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0072
 14459 0000B8EA E902020000              	jmp .L_lambda_simple_end_0072
 14460                                  .L_lambda_simple_code_0072:	; lambda-simple body
 14461 0000B8EF 48837C241005            	cmp qword [rsp + 8 * 2], 5
 14462 0000B8F5 740B                    	je .L_lambda_simple_arity_check_ok_0072
 14463 0000B8F7 FF742410                	push qword [rsp + 8 * 2]
 14464 0000B8FB 6A05                    	push 5
 14465 0000B8FD E948440000              	jmp L_error_incorrect_arity_simple
 14466                                  .L_lambda_simple_arity_check_ok_0072:
 14467 0000B902 C8000000                	enter 0, 0
 14468 0000B906 488B4530                	mov rax, qword [rbp + 8 * (4 + 2)]
 14469 0000B90A 50                      	push rax
 14470 0000B90B 488B4520                	mov rax, qword [rbp + 8 * (4 + 0)]
 14471 0000B90F 50                      	push rax
 14472 0000B910 6A02                    	push 2
 14473 0000B912 488B0425[50030000]      	mov rax, qword [free_var_106]
 14474                                  	assert_closure(rax)
    42 0000B91A 803805              <1>  cmp byte [%1], %2
    43 0000B91D 0F85675C0000        <1>  jne L_error_incorrect_type
 14475 0000B923 FF7001                  	push SOB_CLOSURE_ENV(rax)
 14476 0000B926 FF5009                  	call SOB_CLOSURE_CODE(rax)
 14477 0000B929 483D[02000000]          	cmp rax, sob_boolean_false
 14478 0000B92F 0F85B8010000            	jne .L_or_end_0008
 14479 0000B935 488B4520                	mov rax, qword [rbp + 8 * (4 + 0)]
 14480 0000B939 50                      	push rax
 14481 0000B93A 488B4538                	mov rax, qword [rbp + 8 * (4 + 3)]
 14482 0000B93E 50                      	push rax
 14483 0000B93F 6A02                    	push 2
 14484 0000B941 488B0425[78010000]      	mov rax, qword [free_var_47]
 14485                                  	assert_closure(rax)
    42 0000B949 803805              <1>  cmp byte [%1], %2
    43 0000B94C 0F85385C0000        <1>  jne L_error_incorrect_type
 14486 0000B952 FF7001                  	push SOB_CLOSURE_ENV(rax)
 14487 0000B955 FF5009                  	call SOB_CLOSURE_CODE(rax)
 14488 0000B958 50                      	push rax
 14489 0000B959 488B4520                	mov rax, qword [rbp + 8 * (4 + 0)]
 14490 0000B95D 50                      	push rax
 14491 0000B95E 488B4528                	mov rax, qword [rbp + 8 * (4 + 1)]
 14492 0000B962 50                      	push rax
 14493 0000B963 6A02                    	push 2
 14494 0000B965 488B0425[78010000]      	mov rax, qword [free_var_47]
 14495                                  	assert_closure(rax)
    42 0000B96D 803805              <1>  cmp byte [%1], %2
    43 0000B970 0F85145C0000        <1>  jne L_error_incorrect_type
 14496 0000B976 FF7001                  	push SOB_CLOSURE_ENV(rax)
 14497 0000B979 FF5009                  	call SOB_CLOSURE_CODE(rax)
 14498 0000B97C 50                      	push rax
 14499 0000B97D 6A02                    	push 2
 14500 0000B97F 488B4510                	mov rax, qword [rbp + 8 * 2]
 14501 0000B983 488B4008                	mov rax, qword [rax + 8 * 1]
 14502 0000B987 488B00                  	mov rax, qword [rax + 8 * 0]
 14503                                  	assert_closure(rax)
    42 0000B98A 803805              <1>  cmp byte [%1], %2
    43 0000B98D 0F85F75B0000        <1>  jne L_error_incorrect_type
 14504 0000B993 FF7001                  	push SOB_CLOSURE_ENV(rax)
 14505 0000B996 FF5009                  	call SOB_CLOSURE_CODE(rax)
 14506 0000B999 483D[02000000]          	cmp rax, sob_boolean_false
 14507 0000B99F 0F8548010000            	jne .L_or_end_0008
 14508 0000B9A5 488B4530                	mov rax, qword [rbp + 8 * (4 + 2)]
 14509 0000B9A9 50                      	push rax
 14510 0000B9AA 488B4520                	mov rax, qword [rbp + 8 * (4 + 0)]
 14511 0000B9AE 50                      	push rax
 14512 0000B9AF 6A02                    	push 2
 14513 0000B9B1 488B0425[30030000]      	mov rax, qword [free_var_102]
 14514                                  	assert_closure(rax)
    42 0000B9B9 803805              <1>  cmp byte [%1], %2
    43 0000B9BC 0F85C85B0000        <1>  jne L_error_incorrect_type
 14515 0000B9C2 FF7001                  	push SOB_CLOSURE_ENV(rax)
 14516 0000B9C5 FF5009                  	call SOB_CLOSURE_CODE(rax)
 14517 0000B9C8 483D[02000000]          	cmp rax, sob_boolean_false
 14518 0000B9CE 0F840F010000                      	je .L_if_else_0040
 14519 0000B9D4 488B4520                          	mov rax, qword [rbp + 8 * (4 + 0)]
 14520 0000B9D8 50                      	push rax
 14521 0000B9D9 488B4538                	mov rax, qword [rbp + 8 * (4 + 3)]
 14522 0000B9DD 50                      	push rax
 14523 0000B9DE 6A02                    	push 2
 14524 0000B9E0 488B0425[78010000]      	mov rax, qword [free_var_47]
 14525                                  	assert_closure(rax)
    42 0000B9E8 803805              <1>  cmp byte [%1], %2
    43 0000B9EB 0F85995B0000        <1>  jne L_error_incorrect_type
 14526 0000B9F1 FF7001                  	push SOB_CLOSURE_ENV(rax)
 14527 0000B9F4 FF5009                  	call SOB_CLOSURE_CODE(rax)
 14528 0000B9F7 50                      	push rax
 14529 0000B9F8 488B4520                	mov rax, qword [rbp + 8 * (4 + 0)]
 14530 0000B9FC 50                      	push rax
 14531 0000B9FD 488B4528                	mov rax, qword [rbp + 8 * (4 + 1)]
 14532 0000BA01 50                      	push rax
 14533 0000BA02 6A02                    	push 2
 14534 0000BA04 488B0425[78010000]      	mov rax, qword [free_var_47]
 14535                                  	assert_closure(rax)
    42 0000BA0C 803805              <1>  cmp byte [%1], %2
    43 0000BA0F 0F85755B0000        <1>  jne L_error_incorrect_type
 14536 0000BA15 FF7001                  	push SOB_CLOSURE_ENV(rax)
 14537 0000BA18 FF5009                  	call SOB_CLOSURE_CODE(rax)
 14538 0000BA1B 50                      	push rax
 14539 0000BA1C 6A02                    	push 2
 14540 0000BA1E 488B4510                	mov rax, qword [rbp + 8 * 2]
 14541 0000BA22 488B4008                	mov rax, qword [rax + 8 * 1]
 14542 0000BA26 488B4008                	mov rax, qword [rax + 8 * 1]
 14543                                  	assert_closure(rax)
    42 0000BA2A 803805              <1>  cmp byte [%1], %2
    43 0000BA2D 0F85575B0000        <1>  jne L_error_incorrect_type
 14544 0000BA33 FF7001                  	push SOB_CLOSURE_ENV(rax)
 14545 0000BA36 FF5009                  	call SOB_CLOSURE_CODE(rax)
 14546 0000BA39 483D[02000000]          	cmp rax, sob_boolean_false
 14547 0000BA3F 0F8492000000                      	je .L_if_else_003f
 14548 0000BA45 488B4540                          	mov rax, qword [rbp + 8 * (4 + 4)]
 14549 0000BA49 50                      	push rax
 14550 0000BA4A 488B4538                	mov rax, qword [rbp + 8 * (4 + 3)]
 14551 0000BA4E 50                      	push rax
 14552 0000BA4F 488B4530                	mov rax, qword [rbp + 8 * (4 + 2)]
 14553 0000BA53 50                      	push rax
 14554 0000BA54 488B4528                	mov rax, qword [rbp + 8 * (4 + 1)]
 14555 0000BA58 50                      	push rax
 14556 0000BA59 48B8-                   	mov rax, L_constants + 128
 14556 0000BA5B [8000000000000000] 
 14557 0000BA63 50                      	push rax
 14558 0000BA64 488B4520                	mov rax, qword [rbp + 8 * (4 + 0)]
 14559 0000BA68 50                      	push rax
 14560 0000BA69 6A02                    	push 2
 14561 0000BA6B 488B0425[08030000]      	mov rax, qword [free_var_97]
 14562                                  	assert_closure(rax)
    42 0000BA73 803805              <1>  cmp byte [%1], %2
    43 0000BA76 0F850E5B0000        <1>  jne L_error_incorrect_type
 14563 0000BA7C FF7001                  	push SOB_CLOSURE_ENV(rax)
 14564 0000BA7F FF5009                  	call SOB_CLOSURE_CODE(rax)
 14565 0000BA82 50                      	push rax
 14566 0000BA83 6A05                    	push 5
 14567 0000BA85 488B4510                	mov rax, qword [rbp + 8 * 2]
 14568 0000BA89 488B00                  	mov rax, qword [rax + 8 * 0]
 14569 0000BA8C 488B00                  	mov rax, qword [rax + 8 * 0]
 14570 0000BA8F 488B00                  	mov rax, qword [rax]
 14571                                  	assert_closure(rax)
    42 0000BA92 803805              <1>  cmp byte [%1], %2
    43 0000BA95 0F85EF5A0000        <1>  jne L_error_incorrect_type
 14572 0000BA9B FF7001                  	push SOB_CLOSURE_ENV(rax)
 14573 0000BA9E FF7508                  	push qword [rbp + 8 * 1] ; old ret addr
 14574 0000BAA1 FF7500                  	push qword [rbp] ; same the old rbp
 14575 0000BAA4 BA08000000              	mov rdx, 5 + 3
 14576 0000BAA9 488B4D18                	mov rcx, COUNT
 14577 0000BAAD 488D4CCD20              	lea rcx, [rbp + 8*4 + rcx * 8]
 14578 0000BAB2 4889EF                  	mov rdi, rbp
 14579                                  .L_tc_recycle_frame_loop_008a:
 14580 0000BAB5 4883FA00                	cmp rdx, 0
 14581 0000BAB9 7413                    	je .L_tc_recycle_frame_done_008a
 14582 0000BABB 4883E908                	sub rcx, 8
 14583 0000BABF 4883EF08                	sub rdi, 8
 14584 0000BAC3 488B37                  	mov rsi, [rdi]
 14585 0000BAC6 488931                  	mov qword [rcx], rsi
 14586 0000BAC9 48FFCA                  	dec rdx
 14587 0000BACC EBE7                    	jmp .L_tc_recycle_frame_loop_008a
 14588                                  .L_tc_recycle_frame_done_008a:
 14589 0000BACE 5D                      	pop rbp ; restore the old rbp
 14590 0000BACF 4889CC                  	mov rsp, rcx
 14591 0000BAD2 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 14592 0000BAD5 EB0A                    	jmp .L_if_end_003f
 14593                                            .L_if_else_003f:
 14594 0000BAD7 48B8-                             	mov rax, L_constants + 2
 14594 0000BAD9 [0200000000000000] 
 14595                                  .L_if_end_003f:
 14596 0000BAE1 EB0A                    	jmp .L_if_end_0040
 14597                                            .L_if_else_0040:
 14598 0000BAE3 48B8-                             	mov rax, L_constants + 2
 14598 0000BAE5 [0200000000000000] 
 14599                                  .L_if_end_0040:
 14600                                  .L_or_end_0008:
 14601 0000BAED C9                      	leave
 14602 0000BAEE C23800                  	ret 8 * (2 + 5)
 14603                                  .L_lambda_simple_end_0072:	; new closure is in rax
 14604 0000BAF1 50                      	push rax
 14605 0000BAF2 488B4520                	mov rax, qword [rbp + 8 * (4 + 0)]
 14606 0000BAF6 8F00                    	pop qword [rax]
 14607 0000BAF8 48B8-                   	mov rax, sob_void
 14607 0000BAFA [0000000000000000] 
 14608                                  
 14609 0000BB02 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 14610 0000BB07 E885420000              	call malloc
 14611 0000BB0C 50                      	push rax
 14612 0000BB0D BF08000000              	mov rdi, 8 * 1	; new rib
 14613 0000BB12 E87A420000              	call malloc
 14614 0000BB17 50                      	push rax
 14615 0000BB18 BF18000000              	mov rdi, 8 * 3	; extended env
 14616 0000BB1D E86F420000              	call malloc
 14617 0000BB22 488B7D10                	mov rdi, ENV
 14618 0000BB26 BE00000000              	mov rsi, 0
 14619 0000BB2B BA01000000              	mov rdx, 1
 14620                                  .L_lambda_simple_env_loop_0076:	; ext_env[i + 1] <-- env[i]
 14621 0000BB30 4883FE02                	cmp rsi, 2
 14622 0000BB34 7410                    	je .L_lambda_simple_env_end_0076
 14623 0000BB36 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 14624 0000BB3A 48890CD0                	mov qword [rax + 8 * rdx], rcx
 14625 0000BB3E 48FFC6                  	inc rsi
 14626 0000BB41 48FFC2                  	inc rdx
 14627 0000BB44 EBEA                    	jmp .L_lambda_simple_env_loop_0076
 14628                                  .L_lambda_simple_env_end_0076:
 14629 0000BB46 5B                      	pop rbx
 14630 0000BB47 BE00000000              	mov rsi, 0
 14631                                  .L_lambda_simple_params_loop_0076:	; copy params
 14632 0000BB4C 4883FE01                	cmp rsi, 1
 14633 0000BB50 740E                    	je .L_lambda_simple_params_end_0076
 14634 0000BB52 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 14635 0000BB57 488914F3                	mov qword [rbx + 8 * rsi], rdx
 14636 0000BB5B 48FFC6                  	inc rsi
 14637 0000BB5E EBEC                    	jmp .L_lambda_simple_params_loop_0076
 14638                                  .L_lambda_simple_params_end_0076:
 14639 0000BB60 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 14640 0000BB63 4889C3                  	mov rbx, rax
 14641 0000BB66 58                      	pop rax
 14642 0000BB67 C60005                  	mov byte [rax], T_closure
 14643 0000BB6A 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 14644 0000BB6E 48C74009[7BBB0000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0076
 14645 0000BB76 E964020000              	jmp .L_lambda_simple_end_0076
 14646                                  .L_lambda_simple_code_0076:	; lambda-simple body
 14647 0000BB7B 48837C241002            	cmp qword [rsp + 8 * 2], 2
 14648 0000BB81 740B                    	je .L_lambda_simple_arity_check_ok_0076
 14649 0000BB83 FF742410                	push qword [rsp + 8 * 2]
 14650 0000BB87 6A02                    	push 2
 14651 0000BB89 E9BC410000              	jmp L_error_incorrect_arity_simple
 14652                                  .L_lambda_simple_arity_check_ok_0076:
 14653 0000BB8E C8000000                	enter 0, 0
 14654 0000BB92 488B4528                	mov rax, qword [rbp + 8 * (4 + 1)]
 14655 0000BB96 50                      	push rax
 14656 0000BB97 6A01                    	push 1
 14657 0000BB99 488B0425[90000000]      	mov rax, qword [free_var_18]
 14658                                  	assert_closure(rax)
    42 0000BBA1 803805              <1>  cmp byte [%1], %2
    43 0000BBA4 0F85E0590000        <1>  jne L_error_incorrect_type
 14659 0000BBAA FF7001                  	push SOB_CLOSURE_ENV(rax)
 14660 0000BBAD FF5009                  	call SOB_CLOSURE_CODE(rax)
 14661 0000BBB0 50                      	push rax
 14662 0000BBB1 488B4520                	mov rax, qword [rbp + 8 * (4 + 0)]
 14663 0000BBB5 50                      	push rax
 14664 0000BBB6 6A01                    	push 1
 14665 0000BBB8 488B0425[90000000]      	mov rax, qword [free_var_18]
 14666                                  	assert_closure(rax)
    42 0000BBC0 803805              <1>  cmp byte [%1], %2
    43 0000BBC3 0F85C1590000        <1>  jne L_error_incorrect_type
 14667 0000BBC9 FF7001                  	push SOB_CLOSURE_ENV(rax)
 14668 0000BBCC FF5009                  	call SOB_CLOSURE_CODE(rax)
 14669 0000BBCF 50                      	push rax
 14670 0000BBD0 6A02                    	push 2
 14671 0000BBD2 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 14672 0000BBD7 E8B5410000              	call malloc
 14673 0000BBDC 50                      	push rax
 14674 0000BBDD BF10000000              	mov rdi, 8 * 2	; new rib
 14675 0000BBE2 E8AA410000              	call malloc
 14676 0000BBE7 50                      	push rax
 14677 0000BBE8 BF20000000              	mov rdi, 8 * 4	; extended env
 14678 0000BBED E89F410000              	call malloc
 14679 0000BBF2 488B7D10                	mov rdi, ENV
 14680 0000BBF6 BE00000000              	mov rsi, 0
 14681 0000BBFB BA01000000              	mov rdx, 1
 14682                                  .L_lambda_simple_env_loop_0077:	; ext_env[i + 1] <-- env[i]
 14683 0000BC00 4883FE03                	cmp rsi, 3
 14684 0000BC04 7410                    	je .L_lambda_simple_env_end_0077
 14685 0000BC06 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 14686 0000BC0A 48890CD0                	mov qword [rax + 8 * rdx], rcx
 14687 0000BC0E 48FFC6                  	inc rsi
 14688 0000BC11 48FFC2                  	inc rdx
 14689 0000BC14 EBEA                    	jmp .L_lambda_simple_env_loop_0077
 14690                                  .L_lambda_simple_env_end_0077:
 14691 0000BC16 5B                      	pop rbx
 14692 0000BC17 BE00000000              	mov rsi, 0
 14693                                  .L_lambda_simple_params_loop_0077:	; copy params
 14694 0000BC1C 4883FE02                	cmp rsi, 2
 14695 0000BC20 740E                    	je .L_lambda_simple_params_end_0077
 14696 0000BC22 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 14697 0000BC27 488914F3                	mov qword [rbx + 8 * rsi], rdx
 14698 0000BC2B 48FFC6                  	inc rsi
 14699 0000BC2E EBEC                    	jmp .L_lambda_simple_params_loop_0077
 14700                                  .L_lambda_simple_params_end_0077:
 14701 0000BC30 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 14702 0000BC33 4889C3                  	mov rbx, rax
 14703 0000BC36 58                      	pop rax
 14704 0000BC37 C60005                  	mov byte [rax], T_closure
 14705 0000BC3A 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 14706 0000BC3E 48C74009[4BBC0000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0077
 14707 0000BC46 E94D010000              	jmp .L_lambda_simple_end_0077
 14708                                  .L_lambda_simple_code_0077:	; lambda-simple body
 14709 0000BC4B 48837C241002            	cmp qword [rsp + 8 * 2], 2
 14710 0000BC51 740B                    	je .L_lambda_simple_arity_check_ok_0077
 14711 0000BC53 FF742410                	push qword [rsp + 8 * 2]
 14712 0000BC57 6A02                    	push 2
 14713 0000BC59 E9EC400000              	jmp L_error_incorrect_arity_simple
 14714                                  .L_lambda_simple_arity_check_ok_0077:
 14715 0000BC5E C8000000                	enter 0, 0
 14716 0000BC62 488B4528                	mov rax, qword [rbp + 8 * (4 + 1)]
 14717 0000BC66 50                      	push rax
 14718 0000BC67 488B4520                	mov rax, qword [rbp + 8 * (4 + 0)]
 14719 0000BC6B 50                      	push rax
 14720 0000BC6C 6A02                    	push 2
 14721 0000BC6E 488B0425[38030000]      	mov rax, qword [free_var_103]
 14722                                  	assert_closure(rax)
    42 0000BC76 803805              <1>  cmp byte [%1], %2
    43 0000BC79 0F850B590000        <1>  jne L_error_incorrect_type
 14723 0000BC7F FF7001                  	push SOB_CLOSURE_ENV(rax)
 14724 0000BC82 FF5009                  	call SOB_CLOSURE_CODE(rax)
 14725 0000BC85 483D[02000000]          	cmp rax, sob_boolean_false
 14726 0000BC8B 0F8484000000                      	je .L_if_else_0042
 14727 0000BC91 488B4528                          	mov rax, qword [rbp + 8 * (4 + 1)]
 14728 0000BC95 50                      	push rax
 14729 0000BC96 488B4510                	mov rax, qword [rbp + 8 * 2]
 14730 0000BC9A 488B00                  	mov rax, qword [rax + 8 * 0]
 14731 0000BC9D 488B4008                	mov rax, qword [rax + 8 * 1]
 14732 0000BCA1 50                      	push rax
 14733 0000BCA2 488B4520                	mov rax, qword [rbp + 8 * (4 + 0)]
 14734 0000BCA6 50                      	push rax
 14735 0000BCA7 488B4510                	mov rax, qword [rbp + 8 * 2]
 14736 0000BCAB 488B00                  	mov rax, qword [rax + 8 * 0]
 14737 0000BCAE 488B00                  	mov rax, qword [rax + 8 * 0]
 14738 0000BCB1 50                      	push rax
 14739 0000BCB2 48B8-                   	mov rax, L_constants + 32
 14739 0000BCB4 [2000000000000000] 
 14740 0000BCBC 50                      	push rax
 14741 0000BCBD 6A05                    	push 5
 14742 0000BCBF 488B4510                	mov rax, qword [rbp + 8 * 2]
 14743 0000BCC3 488B4008                	mov rax, qword [rax + 8 * 1]
 14744 0000BCC7 488B00                  	mov rax, qword [rax + 8 * 0]
 14745 0000BCCA 488B00                  	mov rax, qword [rax]
 14746                                  	assert_closure(rax)
    42 0000BCCD 803805              <1>  cmp byte [%1], %2
    43 0000BCD0 0F85B4580000        <1>  jne L_error_incorrect_type
 14747 0000BCD6 FF7001                  	push SOB_CLOSURE_ENV(rax)
 14748 0000BCD9 FF7508                  	push qword [rbp + 8 * 1] ; old ret addr
 14749 0000BCDC FF7500                  	push qword [rbp] ; same the old rbp
 14750 0000BCDF BA08000000              	mov rdx, 5 + 3
 14751 0000BCE4 488B4D18                	mov rcx, COUNT
 14752 0000BCE8 488D4CCD20              	lea rcx, [rbp + 8*4 + rcx * 8]
 14753 0000BCED 4889EF                  	mov rdi, rbp
 14754                                  .L_tc_recycle_frame_loop_0090:
 14755 0000BCF0 4883FA00                	cmp rdx, 0
 14756 0000BCF4 7413                    	je .L_tc_recycle_frame_done_0090
 14757 0000BCF6 4883E908                	sub rcx, 8
 14758 0000BCFA 4883EF08                	sub rdi, 8
 14759 0000BCFE 488B37                  	mov rsi, [rdi]
 14760 0000BD01 488931                  	mov qword [rcx], rsi
 14761 0000BD04 48FFCA                  	dec rdx
 14762 0000BD07 EBE7                    	jmp .L_tc_recycle_frame_loop_0090
 14763                                  .L_tc_recycle_frame_done_0090:
 14764 0000BD09 5D                      	pop rbp ; restore the old rbp
 14765 0000BD0A 4889CC                  	mov rsp, rcx
 14766 0000BD0D FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 14767 0000BD10 E97F000000              	jmp .L_if_end_0042
 14768                                            .L_if_else_0042:
 14769 0000BD15 488B4520                          	mov rax, qword [rbp + 8 * (4 + 0)]
 14770 0000BD19 50                      	push rax
 14771 0000BD1A 488B4510                	mov rax, qword [rbp + 8 * 2]
 14772 0000BD1E 488B00                  	mov rax, qword [rax + 8 * 0]
 14773 0000BD21 488B00                  	mov rax, qword [rax + 8 * 0]
 14774 0000BD24 50                      	push rax
 14775 0000BD25 488B4528                	mov rax, qword [rbp + 8 * (4 + 1)]
 14776 0000BD29 50                      	push rax
 14777 0000BD2A 488B4510                	mov rax, qword [rbp + 8 * 2]
 14778 0000BD2E 488B00                  	mov rax, qword [rax + 8 * 0]
 14779 0000BD31 488B4008                	mov rax, qword [rax + 8 * 1]
 14780 0000BD35 50                      	push rax
 14781 0000BD36 48B8-                   	mov rax, L_constants + 32
 14781 0000BD38 [2000000000000000] 
 14782 0000BD40 50                      	push rax
 14783 0000BD41 6A05                    	push 5
 14784 0000BD43 488B4510                	mov rax, qword [rbp + 8 * 2]
 14785 0000BD47 488B4008                	mov rax, qword [rax + 8 * 1]
 14786 0000BD4B 488B00                  	mov rax, qword [rax + 8 * 0]
 14787 0000BD4E 488B00                  	mov rax, qword [rax]
 14788                                  	assert_closure(rax)
    42 0000BD51 803805              <1>  cmp byte [%1], %2
    43 0000BD54 0F8530580000        <1>  jne L_error_incorrect_type
 14789 0000BD5A FF7001                  	push SOB_CLOSURE_ENV(rax)
 14790 0000BD5D FF7508                  	push qword [rbp + 8 * 1] ; old ret addr
 14791 0000BD60 FF7500                  	push qword [rbp] ; same the old rbp
 14792 0000BD63 BA08000000              	mov rdx, 5 + 3
 14793 0000BD68 488B4D18                	mov rcx, COUNT
 14794 0000BD6C 488D4CCD20              	lea rcx, [rbp + 8*4 + rcx * 8]
 14795 0000BD71 4889EF                  	mov rdi, rbp
 14796                                  .L_tc_recycle_frame_loop_0091:
 14797 0000BD74 4883FA00                	cmp rdx, 0
 14798 0000BD78 7413                    	je .L_tc_recycle_frame_done_0091
 14799 0000BD7A 4883E908                	sub rcx, 8
 14800 0000BD7E 4883EF08                	sub rdi, 8
 14801 0000BD82 488B37                  	mov rsi, [rdi]
 14802 0000BD85 488931                  	mov qword [rcx], rsi
 14803 0000BD88 48FFCA                  	dec rdx
 14804 0000BD8B EBE7                    	jmp .L_tc_recycle_frame_loop_0091
 14805                                  .L_tc_recycle_frame_done_0091:
 14806 0000BD8D 5D                      	pop rbp ; restore the old rbp
 14807 0000BD8E 4889CC                  	mov rsp, rcx
 14808 0000BD91 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 14809                                  .L_if_end_0042:
 14810 0000BD94 C9                      	leave
 14811 0000BD95 C22000                  	ret 8 * (2 + 2)
 14812                                  .L_lambda_simple_end_0077:	; new closure is in rax
 14813                                  	assert_closure(rax)
    42 0000BD98 803805              <1>  cmp byte [%1], %2
    43 0000BD9B 0F85E9570000        <1>  jne L_error_incorrect_type
 14814 0000BDA1 FF7001                  	push SOB_CLOSURE_ENV(rax)
 14815 0000BDA4 FF7508                  	push qword [rbp + 8 * 1] ; old ret addr
 14816 0000BDA7 FF7500                  	push qword [rbp] ; same the old rbp
 14817 0000BDAA BA05000000              	mov rdx, 2 + 3
 14818 0000BDAF 488B4D18                	mov rcx, COUNT
 14819 0000BDB3 488D4CCD20              	lea rcx, [rbp + 8*4 + rcx * 8]
 14820 0000BDB8 4889EF                  	mov rdi, rbp
 14821                                  .L_tc_recycle_frame_loop_008f:
 14822 0000BDBB 4883FA00                	cmp rdx, 0
 14823 0000BDBF 7413                    	je .L_tc_recycle_frame_done_008f
 14824 0000BDC1 4883E908                	sub rcx, 8
 14825 0000BDC5 4883EF08                	sub rdi, 8
 14826 0000BDC9 488B37                  	mov rsi, [rdi]
 14827 0000BDCC 488931                  	mov qword [rcx], rsi
 14828 0000BDCF 48FFCA                  	dec rdx
 14829 0000BDD2 EBE7                    	jmp .L_tc_recycle_frame_loop_008f
 14830                                  .L_tc_recycle_frame_done_008f:
 14831 0000BDD4 5D                      	pop rbp ; restore the old rbp
 14832 0000BDD5 4889CC                  	mov rsp, rcx
 14833 0000BDD8 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 14834 0000BDDB C9                      	leave
 14835 0000BDDC C22000                  	ret 8 * (2 + 2)
 14836                                  .L_lambda_simple_end_0076:	; new closure is in rax
 14837 0000BDDF 50                      	push rax
 14838 0000BDE0 6A01                    	push 1
 14839 0000BDE2 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 14840 0000BDE7 E8A53F0000              	call malloc
 14841 0000BDEC 50                      	push rax
 14842 0000BDED BF08000000              	mov rdi, 8 * 1	; new rib
 14843 0000BDF2 E89A3F0000              	call malloc
 14844 0000BDF7 50                      	push rax
 14845 0000BDF8 BF18000000              	mov rdi, 8 * 3	; extended env
 14846 0000BDFD E88F3F0000              	call malloc
 14847 0000BE02 488B7D10                	mov rdi, ENV
 14848 0000BE06 BE00000000              	mov rsi, 0
 14849 0000BE0B BA01000000              	mov rdx, 1
 14850                                  .L_lambda_simple_env_loop_0073:	; ext_env[i + 1] <-- env[i]
 14851 0000BE10 4883FE02                	cmp rsi, 2
 14852 0000BE14 7410                    	je .L_lambda_simple_env_end_0073
 14853 0000BE16 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 14854 0000BE1A 48890CD0                	mov qword [rax + 8 * rdx], rcx
 14855 0000BE1E 48FFC6                  	inc rsi
 14856 0000BE21 48FFC2                  	inc rdx
 14857 0000BE24 EBEA                    	jmp .L_lambda_simple_env_loop_0073
 14858                                  .L_lambda_simple_env_end_0073:
 14859 0000BE26 5B                      	pop rbx
 14860 0000BE27 BE00000000              	mov rsi, 0
 14861                                  .L_lambda_simple_params_loop_0073:	; copy params
 14862 0000BE2C 4883FE01                	cmp rsi, 1
 14863 0000BE30 740E                    	je .L_lambda_simple_params_end_0073
 14864 0000BE32 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 14865 0000BE37 488914F3                	mov qword [rbx + 8 * rsi], rdx
 14866 0000BE3B 48FFC6                  	inc rsi
 14867 0000BE3E EBEC                    	jmp .L_lambda_simple_params_loop_0073
 14868                                  .L_lambda_simple_params_end_0073:
 14869 0000BE40 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 14870 0000BE43 4889C3                  	mov rbx, rax
 14871 0000BE46 58                      	pop rax
 14872 0000BE47 C60005                  	mov byte [rax], T_closure
 14873 0000BE4A 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 14874 0000BE4E 48C74009[5BBE0000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0073
 14875 0000BE56 E987040000              	jmp .L_lambda_simple_end_0073
 14876                                  .L_lambda_simple_code_0073:	; lambda-simple body
 14877 0000BE5B 48837C241001            	cmp qword [rsp + 8 * 2], 1
 14878 0000BE61 740B                    	je .L_lambda_simple_arity_check_ok_0073
 14879 0000BE63 FF742410                	push qword [rsp + 8 * 2]
 14880 0000BE67 6A01                    	push 1
 14881 0000BE69 E9DC3E0000              	jmp L_error_incorrect_arity_simple
 14882                                  .L_lambda_simple_arity_check_ok_0073:
 14883 0000BE6E C8000000                	enter 0, 0
 14884 0000BE72 48B8-                   	mov rax, L_constants + 23
 14884 0000BE74 [1700000000000000] 
 14885 0000BE7C 50                      	push rax
 14886 0000BE7D 6A01                    	push 1
 14887 0000BE7F BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 14888 0000BE84 E8083F0000              	call malloc
 14889 0000BE89 50                      	push rax
 14890 0000BE8A BF08000000              	mov rdi, 8 * 1	; new rib
 14891 0000BE8F E8FD3E0000              	call malloc
 14892 0000BE94 50                      	push rax
 14893 0000BE95 BF20000000              	mov rdi, 8 * 4	; extended env
 14894 0000BE9A E8F23E0000              	call malloc
 14895 0000BE9F 488B7D10                	mov rdi, ENV
 14896 0000BEA3 BE00000000              	mov rsi, 0
 14897 0000BEA8 BA01000000              	mov rdx, 1
 14898                                  .L_lambda_simple_env_loop_0074:	; ext_env[i + 1] <-- env[i]
 14899 0000BEAD 4883FE03                	cmp rsi, 3
 14900 0000BEB1 7410                    	je .L_lambda_simple_env_end_0074
 14901 0000BEB3 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 14902 0000BEB7 48890CD0                	mov qword [rax + 8 * rdx], rcx
 14903 0000BEBB 48FFC6                  	inc rsi
 14904 0000BEBE 48FFC2                  	inc rdx
 14905 0000BEC1 EBEA                    	jmp .L_lambda_simple_env_loop_0074
 14906                                  .L_lambda_simple_env_end_0074:
 14907 0000BEC3 5B                      	pop rbx
 14908 0000BEC4 BE00000000              	mov rsi, 0
 14909                                  .L_lambda_simple_params_loop_0074:	; copy params
 14910 0000BEC9 4883FE01                	cmp rsi, 1
 14911 0000BECD 740E                    	je .L_lambda_simple_params_end_0074
 14912 0000BECF 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 14913 0000BED4 488914F3                	mov qword [rbx + 8 * rsi], rdx
 14914 0000BED8 48FFC6                  	inc rsi
 14915 0000BEDB EBEC                    	jmp .L_lambda_simple_params_loop_0074
 14916                                  .L_lambda_simple_params_end_0074:
 14917 0000BEDD 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 14918 0000BEE0 4889C3                  	mov rbx, rax
 14919 0000BEE3 58                      	pop rax
 14920 0000BEE4 C60005                  	mov byte [rax], T_closure
 14921 0000BEE7 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 14922 0000BEEB 48C74009[F8BE0000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0074
 14923 0000BEF3 E9A3030000              	jmp .L_lambda_simple_end_0074
 14924                                  .L_lambda_simple_code_0074:	; lambda-simple body
 14925 0000BEF8 48837C241001            	cmp qword [rsp + 8 * 2], 1
 14926 0000BEFE 740B                    	je .L_lambda_simple_arity_check_ok_0074
 14927 0000BF00 FF742410                	push qword [rsp + 8 * 2]
 14928 0000BF04 6A01                    	push 1
 14929 0000BF06 E93F3E0000              	jmp L_error_incorrect_arity_simple
 14930                                  .L_lambda_simple_arity_check_ok_0074:
 14931 0000BF0B C8000000                	enter 0, 0
 14932 0000BF0F 488B4520                	mov rax, qword [rbp + 8 * (4 + 0)]
 14933 0000BF13 4889C2                  	mov rdx, rax
 14934 0000BF16 BF08000000              	mov rdi, 8
 14935 0000BF1B E8713E0000              	call malloc
 14936 0000BF20 488910                  	mov qword[rax], rdx
 14937 0000BF23 48894520                	mov qword [rbp + 8 * (4 + 0)], rax
 14938 0000BF27 48B8-                   	mov rax, sob_void
 14938 0000BF29 [0000000000000000] 
 14939                                  
 14940 0000BF31 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 14941 0000BF36 E8563E0000              	call malloc
 14942 0000BF3B 50                      	push rax
 14943 0000BF3C BF08000000              	mov rdi, 8 * 1	; new rib
 14944 0000BF41 E84B3E0000              	call malloc
 14945 0000BF46 50                      	push rax
 14946 0000BF47 BF28000000              	mov rdi, 8 * 5	; extended env
 14947 0000BF4C E8403E0000              	call malloc
 14948 0000BF51 488B7D10                	mov rdi, ENV
 14949 0000BF55 BE00000000              	mov rsi, 0
 14950 0000BF5A BA01000000              	mov rdx, 1
 14951                                  .L_lambda_simple_env_loop_0075:	; ext_env[i + 1] <-- env[i]
 14952 0000BF5F 4883FE04                	cmp rsi, 4
 14953 0000BF63 7410                    	je .L_lambda_simple_env_end_0075
 14954 0000BF65 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 14955 0000BF69 48890CD0                	mov qword [rax + 8 * rdx], rcx
 14956 0000BF6D 48FFC6                  	inc rsi
 14957 0000BF70 48FFC2                  	inc rdx
 14958 0000BF73 EBEA                    	jmp .L_lambda_simple_env_loop_0075
 14959                                  .L_lambda_simple_env_end_0075:
 14960 0000BF75 5B                      	pop rbx
 14961 0000BF76 BE00000000              	mov rsi, 0
 14962                                  .L_lambda_simple_params_loop_0075:	; copy params
 14963 0000BF7B 4883FE01                	cmp rsi, 1
 14964 0000BF7F 740E                    	je .L_lambda_simple_params_end_0075
 14965 0000BF81 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 14966 0000BF86 488914F3                	mov qword [rbx + 8 * rsi], rdx
 14967 0000BF8A 48FFC6                  	inc rsi
 14968 0000BF8D EBEC                    	jmp .L_lambda_simple_params_loop_0075
 14969                                  .L_lambda_simple_params_end_0075:
 14970 0000BF8F 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 14971 0000BF92 4889C3                  	mov rbx, rax
 14972 0000BF95 58                      	pop rax
 14973 0000BF96 C60005                  	mov byte [rax], T_closure
 14974 0000BF99 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 14975 0000BF9D 48C74009[AABF0000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0075
 14976 0000BFA5 E92D010000              	jmp .L_lambda_simple_end_0075
 14977                                  .L_lambda_simple_code_0075:	; lambda-simple body
 14978 0000BFAA 48837C241002            	cmp qword [rsp + 8 * 2], 2
 14979 0000BFB0 740B                    	je .L_lambda_simple_arity_check_ok_0075
 14980 0000BFB2 FF742410                	push qword [rsp + 8 * 2]
 14981 0000BFB6 6A02                    	push 2
 14982 0000BFB8 E98D3D0000              	jmp L_error_incorrect_arity_simple
 14983                                  .L_lambda_simple_arity_check_ok_0075:
 14984 0000BFBD C8000000                	enter 0, 0
 14985 0000BFC1 488B4528                	mov rax, qword [rbp + 8 * (4 + 1)]
 14986 0000BFC5 50                      	push rax
 14987 0000BFC6 6A01                    	push 1
 14988 0000BFC8 488B0425[00000000]      	mov rax, qword [free_var_0]
 14989                                  	assert_closure(rax)
    42 0000BFD0 803805              <1>  cmp byte [%1], %2
    43 0000BFD3 0F85B1550000        <1>  jne L_error_incorrect_type
 14990 0000BFD9 FF7001                  	push SOB_CLOSURE_ENV(rax)
 14991 0000BFDC FF5009                  	call SOB_CLOSURE_CODE(rax)
 14992 0000BFDF 483D[02000000]          	cmp rax, sob_boolean_false
 14993 0000BFE5 0F85E8000000            	jne .L_or_end_0009
 14994 0000BFEB 488B4528                	mov rax, qword [rbp + 8 * (4 + 1)]
 14995 0000BFEF 50                      	push rax
 14996 0000BFF0 6A01                    	push 1
 14997 0000BFF2 488B0425[80000000]      	mov rax, qword [free_var_16]
 14998                                  	assert_closure(rax)
    42 0000BFFA 803805              <1>  cmp byte [%1], %2
    43 0000BFFD 0F8587550000        <1>  jne L_error_incorrect_type
 14999 0000C003 FF7001                  	push SOB_CLOSURE_ENV(rax)
 15000 0000C006 FF5009                  	call SOB_CLOSURE_CODE(rax)
 15001 0000C009 50                      	push rax
 15002 0000C00A 488B4520                	mov rax, qword [rbp + 8 * (4 + 0)]
 15003 0000C00E 50                      	push rax
 15004 0000C00F 6A02                    	push 2
 15005 0000C011 488B4510                	mov rax, qword [rbp + 8 * 2]
 15006 0000C015 488B4008                	mov rax, qword [rax + 8 * 1]
 15007 0000C019 488B00                  	mov rax, qword [rax + 8 * 0]
 15008                                  	assert_closure(rax)
    42 0000C01C 803805              <1>  cmp byte [%1], %2
    43 0000C01F 0F8565550000        <1>  jne L_error_incorrect_type
 15009 0000C025 FF7001                  	push SOB_CLOSURE_ENV(rax)
 15010 0000C028 FF5009                  	call SOB_CLOSURE_CODE(rax)
 15011 0000C02B 483D[02000000]          	cmp rax, sob_boolean_false
 15012 0000C031 0F8492000000                      	je .L_if_else_0041
 15013 0000C037 488B4528                          	mov rax, qword [rbp + 8 * (4 + 1)]
 15014 0000C03B 50                      	push rax
 15015 0000C03C 6A01                    	push 1
 15016 0000C03E 488B0425[88000000]      	mov rax, qword [free_var_17]
 15017                                  	assert_closure(rax)
    42 0000C046 803805              <1>  cmp byte [%1], %2
    43 0000C049 0F853B550000        <1>  jne L_error_incorrect_type
 15018 0000C04F FF7001                  	push SOB_CLOSURE_ENV(rax)
 15019 0000C052 FF5009                  	call SOB_CLOSURE_CODE(rax)
 15020 0000C055 50                      	push rax
 15021 0000C056 488B4528                	mov rax, qword [rbp + 8 * (4 + 1)]
 15022 0000C05A 50                      	push rax
 15023 0000C05B 6A01                    	push 1
 15024 0000C05D 488B0425[80000000]      	mov rax, qword [free_var_16]
 15025                                  	assert_closure(rax)
    42 0000C065 803805              <1>  cmp byte [%1], %2
    43 0000C068 0F851C550000        <1>  jne L_error_incorrect_type
 15026 0000C06E FF7001                  	push SOB_CLOSURE_ENV(rax)
 15027 0000C071 FF5009                  	call SOB_CLOSURE_CODE(rax)
 15028 0000C074 50                      	push rax
 15029 0000C075 6A02                    	push 2
 15030 0000C077 488B4510                	mov rax, qword [rbp + 8 * 2]
 15031 0000C07B 488B00                  	mov rax, qword [rax + 8 * 0]
 15032 0000C07E 488B00                  	mov rax, qword [rax + 8 * 0]
 15033 0000C081 488B00                  	mov rax, qword [rax]
 15034                                  	assert_closure(rax)
    42 0000C084 803805              <1>  cmp byte [%1], %2
    43 0000C087 0F85FD540000        <1>  jne L_error_incorrect_type
 15035 0000C08D FF7001                  	push SOB_CLOSURE_ENV(rax)
 15036 0000C090 FF7508                  	push qword [rbp + 8 * 1] ; old ret addr
 15037 0000C093 FF7500                  	push qword [rbp] ; same the old rbp
 15038 0000C096 BA05000000              	mov rdx, 2 + 3
 15039 0000C09B 488B4D18                	mov rcx, COUNT
 15040 0000C09F 488D4CCD20              	lea rcx, [rbp + 8*4 + rcx * 8]
 15041 0000C0A4 4889EF                  	mov rdi, rbp
 15042                                  .L_tc_recycle_frame_loop_008d:
 15043 0000C0A7 4883FA00                	cmp rdx, 0
 15044 0000C0AB 7413                    	je .L_tc_recycle_frame_done_008d
 15045 0000C0AD 4883E908                	sub rcx, 8
 15046 0000C0B1 4883EF08                	sub rdi, 8
 15047 0000C0B5 488B37                  	mov rsi, [rdi]
 15048 0000C0B8 488931                  	mov qword [rcx], rsi
 15049 0000C0BB 48FFCA                  	dec rdx
 15050 0000C0BE EBE7                    	jmp .L_tc_recycle_frame_loop_008d
 15051                                  .L_tc_recycle_frame_done_008d:
 15052 0000C0C0 5D                      	pop rbp ; restore the old rbp
 15053 0000C0C1 4889CC                  	mov rsp, rcx
 15054 0000C0C4 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 15055 0000C0C7 EB0A                    	jmp .L_if_end_0041
 15056                                            .L_if_else_0041:
 15057 0000C0C9 48B8-                             	mov rax, L_constants + 2
 15057 0000C0CB [0200000000000000] 
 15058                                  .L_if_end_0041:
 15059                                  .L_or_end_0009:
 15060 0000C0D3 C9                      	leave
 15061 0000C0D4 C22000                  	ret 8 * (2 + 2)
 15062                                  .L_lambda_simple_end_0075:	; new closure is in rax
 15063 0000C0D7 50                      	push rax
 15064 0000C0D8 488B4520                	mov rax, qword [rbp + 8 * (4 + 0)]
 15065 0000C0DC 8F00                    	pop qword [rax]
 15066 0000C0DE 48B8-                   	mov rax, sob_void
 15066 0000C0E0 [0000000000000000] 
 15067                                  
 15068 0000C0E8 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 15069 0000C0ED E89F3C0000              	call malloc
 15070 0000C0F2 50                      	push rax
 15071 0000C0F3 BF08000000              	mov rdi, 8 * 1	; new rib
 15072 0000C0F8 E8943C0000              	call malloc
 15073 0000C0FD 50                      	push rax
 15074 0000C0FE BF28000000              	mov rdi, 8 * 5	; extended env
 15075 0000C103 E8893C0000              	call malloc
 15076 0000C108 488B7D10                	mov rdi, ENV
 15077 0000C10C BE00000000              	mov rsi, 0
 15078 0000C111 BA01000000              	mov rdx, 1
 15079                                  .L_lambda_opt_env_loop_0013:	; ext_env[i + 1] <-- env[i]
 15080 0000C116 4883FE04                	cmp rsi, 4
 15081 0000C11A 7410                    	je .L_lambda_opt_env_end_0013
 15082 0000C11C 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 15083 0000C120 48890CD0                	mov qword [rax + 8 * rdx], rcx
 15084 0000C124 48FFC6                  	inc rsi
 15085 0000C127 48FFC2                  	inc rdx
 15086 0000C12A EBEA                    	jmp .L_lambda_opt_env_loop_0013
 15087                                  .L_lambda_opt_env_end_0013:
 15088 0000C12C 5B                      	pop rbx
 15089 0000C12D BE00000000              	mov rsi, 0
 15090                                  .L_lambda_opt_params_loop_0013:	; copy params
 15091 0000C132 4883FE01                	cmp rsi, 1
 15092 0000C136 740E                    	je .L_lambda_opt_params_end_0013
 15093 0000C138 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 15094 0000C13D 488914F3                	mov qword [rbx + 8 * rsi], rdx
 15095 0000C141 48FFC6                  	inc rsi
 15096 0000C144 EBEC                    	jmp .L_lambda_opt_params_loop_0013
 15097                                  .L_lambda_opt_params_end_0013:
 15098 0000C146 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 15099 0000C149 4889C3                  	mov rbx, rax
 15100 0000C14C 58                      	pop rax
 15101 0000C14D C60005                  	mov byte [rax], T_closure
 15102 0000C150 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 15103 0000C154 48C74009[61C10000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_opt_code_0013
 15104 0000C15C E936010000              	jmp .L_lambda_opt_end_0013
 15105                                  .L_lambda_opt_code_0013:	; lambda-opt body
 15106 0000C161 48837C241001            	cmp qword [rsp + 8 * 2], 1
 15107 0000C167 740D                    	je .L_lambda_opt_arity_check_exact_0013
 15108 0000C169 7F43                    	jg .L_lambda_opt_arity_check_more_0013
 15109 0000C16B FF742410                	push qword [rsp + 8 * 2]
 15110 0000C16F 6A01                    	push 1
 15111 0000C171 E9E83B0000              	jmp L_error_incorrect_arity_opt
 15112                                  .L_lambda_opt_arity_check_exact_0013:
 15113 0000C176 48C744241002000000      	mov qword [rsp + 8 * 2], 2
 15114 0000C17F BA04000000              	mov rdx, 4
 15115 0000C184 FF3424                  	push qword [rsp]
 15116 0000C187 BE01000000              	mov rsi, 1
 15117                                  .L_lambda_opt_stack_shrink_loop_0037:
 15118 0000C18C 4839D6                  	cmp rsi, rdx
 15119 0000C18F 7411                    	je .L_lambda_opt_stack_shrink_loop_exit_0037
 15120 0000C191 488D5CF408              	lea rbx, [rsp + 8 + rsi * 8]
 15121 0000C196 488B0B                  	mov rcx, [rbx]
 15122 0000C199 48894BF8                	mov qword [rbx - 8], rcx
 15123 0000C19D 48FFC6                  	inc rsi
 15124 0000C1A0 EBEA                    	jmp .L_lambda_opt_stack_shrink_loop_0037
 15125                                  .L_lambda_opt_stack_shrink_loop_exit_0037:
 15126 0000C1A2 48C703[01000000]        	mov qword [rbx], sob_nil
 15127 0000C1A9 E985000000              	jmp .L_lambda_opt_stack_adjusted_0013
 15128                                  .L_lambda_opt_arity_check_more_0013:
 15129 0000C1AE 488B542410              	mov rdx, qword [rsp + 8 * 2]
 15130 0000C1B3 4883EA01                	sub rdx, 1
 15131 0000C1B7 48C744241002000000      	mov qword [rsp + 8 * 2], 2
 15132 0000C1C0 BE00000000              	mov rsi, 0
 15133 0000C1C5 488D5CD418              	lea rbx, [rsp + 2 * 8 + 1 * 8 + rdx * 8]
 15134 0000C1CA 48B9-                   	mov rcx, sob_nil
 15134 0000C1CC [0100000000000000] 
 15135                                  .L_lambda_opt_stack_shrink_loop_0038:
 15136 0000C1D4 4839D6                  	cmp rsi, rdx
 15137 0000C1D7 7427                    je .L_lambda_opt_stack_shrink_loop_exit_0038
 15138 0000C1D9 BF11000000              	mov rdi, 17 ; 1+8+8
 15139 0000C1DE E8AE3B0000              	call malloc
 15140 0000C1E3 48894809                	mov SOB_PAIR_CDR(rax), rcx
 15141 0000C1E7 48F7DE                  	neg rsi
 15142 0000C1EA 488B0CF3                	mov rcx, qword [rbx + rsi * 8]
 15143 0000C1EE 48F7DE                  	neg rsi
 15144 0000C1F1 48894801                	mov SOB_PAIR_CAR(rax), rcx
 15145 0000C1F5 C60021                  	mov byte [rax], T_pair
 15146 0000C1F8 4889C1                  	mov rcx, rax
 15147 0000C1FB 48FFC6                  	inc rsi
 15148 0000C1FE EBD4                    	jmp .L_lambda_opt_stack_shrink_loop_0038
 15149                                  .L_lambda_opt_stack_shrink_loop_exit_0038:
 15150 0000C200 48890B                  	mov qword [rbx], rcx
 15151 0000C203 4883EB08                	sub rbx, 8
 15152 0000C207 4889E7                  	mov rdi, rsp
 15153 0000C20A 4883C718                	add rdi, 24
 15154 0000C20E BE04000000              	mov rsi, 4
 15155                                  .L_lambda_opt_stack_shrink_loop_0039:
 15156 0000C213 4883FE00                	cmp rsi,0
 15157 0000C217 7413                    	je .L_lambda_opt_stack_shrink_loop_exit_0039
 15158 0000C219 488B0F                  	mov rcx, qword [rdi]
 15159 0000C21C 48890B                  	mov [rbx], rcx
 15160 0000C21F 48FFCE                  	dec rsi
 15161 0000C222 4883EB08                	sub rbx, 8
 15162 0000C226 4883EF08                	sub rdi, 8
 15163 0000C22A EBE7                    	jmp .L_lambda_opt_stack_shrink_loop_0039
 15164                                  .L_lambda_opt_stack_shrink_loop_exit_0039:
 15165 0000C22C 4883C308                	add rbx, 8
 15166 0000C230 4889DC                  	mov rsp, rbx
 15167                                  .L_lambda_opt_stack_adjusted_0013:
 15168 0000C233 C8000000                	enter 0, 0
 15169 0000C237 488B4528                	mov rax, qword [rbp + 8 * (4 + 1)]
 15170 0000C23B 50                      	push rax
 15171 0000C23C 488B4520                	mov rax, qword [rbp + 8 * (4 + 0)]
 15172 0000C240 50                      	push rax
 15173 0000C241 6A02                    	push 2
 15174 0000C243 488B4510                	mov rax, qword [rbp + 8 * 2]
 15175 0000C247 488B00                  	mov rax, qword [rax + 8 * 0]
 15176 0000C24A 488B00                  	mov rax, qword [rax + 8 * 0]
 15177 0000C24D 488B00                  	mov rax, qword [rax]
 15178                                  	assert_closure(rax)
    42 0000C250 803805              <1>  cmp byte [%1], %2
    43 0000C253 0F8531530000        <1>  jne L_error_incorrect_type
 15179 0000C259 FF7001                  	push SOB_CLOSURE_ENV(rax)
 15180 0000C25C FF7508                  	push qword [rbp + 8 * 1] ; old ret addr
 15181 0000C25F FF7500                  	push qword [rbp] ; same the old rbp
 15182 0000C262 BA05000000              	mov rdx, 2 + 3
 15183 0000C267 488B4D18                	mov rcx, COUNT
 15184 0000C26B 488D4CCD20              	lea rcx, [rbp + 8*4 + rcx * 8]
 15185 0000C270 4889EF                  	mov rdi, rbp
 15186                                  .L_tc_recycle_frame_loop_008e:
 15187 0000C273 4883FA00                	cmp rdx, 0
 15188 0000C277 7413                    	je .L_tc_recycle_frame_done_008e
 15189 0000C279 4883E908                	sub rcx, 8
 15190 0000C27D 4883EF08                	sub rdi, 8
 15191 0000C281 488B37                  	mov rsi, [rdi]
 15192 0000C284 488931                  	mov qword [rcx], rsi
 15193 0000C287 48FFCA                  	dec rdx
 15194 0000C28A EBE7                    	jmp .L_tc_recycle_frame_loop_008e
 15195                                  .L_tc_recycle_frame_done_008e:
 15196 0000C28C 5D                      	pop rbp ; restore the old rbp
 15197 0000C28D 4889CC                  	mov rsp, rcx
 15198 0000C290 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 15199 0000C293 C9                      	leave
 15200 0000C294 C22000                  	ret 8 * (2 + 2)
 15201                                  .L_lambda_opt_end_0013:	; new closure is in rax
 15202 0000C297 C9                      	leave
 15203 0000C298 C21800                  	ret 8 * (2 + 1)
 15204                                  .L_lambda_simple_end_0074:	; new closure is in rax
 15205                                  	assert_closure(rax)
    42 0000C29B 803805              <1>  cmp byte [%1], %2
    43 0000C29E 0F85E6520000        <1>  jne L_error_incorrect_type
 15206 0000C2A4 FF7001                  	push SOB_CLOSURE_ENV(rax)
 15207 0000C2A7 FF7508                  	push qword [rbp + 8 * 1] ; old ret addr
 15208 0000C2AA FF7500                  	push qword [rbp] ; same the old rbp
 15209 0000C2AD BA04000000              	mov rdx, 1 + 3
 15210 0000C2B2 488B4D18                	mov rcx, COUNT
 15211 0000C2B6 488D4CCD20              	lea rcx, [rbp + 8*4 + rcx * 8]
 15212 0000C2BB 4889EF                  	mov rdi, rbp
 15213                                  .L_tc_recycle_frame_loop_008c:
 15214 0000C2BE 4883FA00                	cmp rdx, 0
 15215 0000C2C2 7413                    	je .L_tc_recycle_frame_done_008c
 15216 0000C2C4 4883E908                	sub rcx, 8
 15217 0000C2C8 4883EF08                	sub rdi, 8
 15218 0000C2CC 488B37                  	mov rsi, [rdi]
 15219 0000C2CF 488931                  	mov qword [rcx], rsi
 15220 0000C2D2 48FFCA                  	dec rdx
 15221 0000C2D5 EBE7                    	jmp .L_tc_recycle_frame_loop_008c
 15222                                  .L_tc_recycle_frame_done_008c:
 15223 0000C2D7 5D                      	pop rbp ; restore the old rbp
 15224 0000C2D8 4889CC                  	mov rsp, rcx
 15225 0000C2DB FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 15226 0000C2DE C9                      	leave
 15227 0000C2DF C21800                  	ret 8 * (2 + 1)
 15228                                  .L_lambda_simple_end_0073:	; new closure is in rax
 15229                                  	assert_closure(rax)
    42 0000C2E2 803805              <1>  cmp byte [%1], %2
    43 0000C2E5 0F859F520000        <1>  jne L_error_incorrect_type
 15230 0000C2EB FF7001                  	push SOB_CLOSURE_ENV(rax)
 15231 0000C2EE FF7508                  	push qword [rbp + 8 * 1] ; old ret addr
 15232 0000C2F1 FF7500                  	push qword [rbp] ; same the old rbp
 15233 0000C2F4 BA04000000              	mov rdx, 1 + 3
 15234 0000C2F9 488B4D18                	mov rcx, COUNT
 15235 0000C2FD 488D4CCD20              	lea rcx, [rbp + 8*4 + rcx * 8]
 15236 0000C302 4889EF                  	mov rdi, rbp
 15237                                  .L_tc_recycle_frame_loop_008b:
 15238 0000C305 4883FA00                	cmp rdx, 0
 15239 0000C309 7413                    	je .L_tc_recycle_frame_done_008b
 15240 0000C30B 4883E908                	sub rcx, 8
 15241 0000C30F 4883EF08                	sub rdi, 8
 15242 0000C313 488B37                  	mov rsi, [rdi]
 15243 0000C316 488931                  	mov qword [rcx], rsi
 15244 0000C319 48FFCA                  	dec rdx
 15245 0000C31C EBE7                    	jmp .L_tc_recycle_frame_loop_008b
 15246                                  .L_tc_recycle_frame_done_008b:
 15247 0000C31E 5D                      	pop rbp ; restore the old rbp
 15248 0000C31F 4889CC                  	mov rsp, rcx
 15249 0000C322 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 15250 0000C325 C9                      	leave
 15251 0000C326 C21800                  	ret 8 * (2 + 1)
 15252                                  .L_lambda_simple_end_0071:	; new closure is in rax
 15253                                  	assert_closure(rax)
    42 0000C329 803805              <1>  cmp byte [%1], %2
    43 0000C32C 0F8558520000        <1>  jne L_error_incorrect_type
 15254 0000C332 FF7001                  	push SOB_CLOSURE_ENV(rax)
 15255 0000C335 FF7508                  	push qword [rbp + 8 * 1] ; old ret addr
 15256 0000C338 FF7500                  	push qword [rbp] ; same the old rbp
 15257 0000C33B BA04000000              	mov rdx, 1 + 3
 15258 0000C340 488B4D18                	mov rcx, COUNT
 15259 0000C344 488D4CCD20              	lea rcx, [rbp + 8*4 + rcx * 8]
 15260 0000C349 4889EF                  	mov rdi, rbp
 15261                                  .L_tc_recycle_frame_loop_0089:
 15262 0000C34C 4883FA00                	cmp rdx, 0
 15263 0000C350 7413                    	je .L_tc_recycle_frame_done_0089
 15264 0000C352 4883E908                	sub rcx, 8
 15265 0000C356 4883EF08                	sub rdi, 8
 15266 0000C35A 488B37                  	mov rsi, [rdi]
 15267 0000C35D 488931                  	mov qword [rcx], rsi
 15268 0000C360 48FFCA                  	dec rdx
 15269 0000C363 EBE7                    	jmp .L_tc_recycle_frame_loop_0089
 15270                                  .L_tc_recycle_frame_done_0089:
 15271 0000C365 5D                      	pop rbp ; restore the old rbp
 15272 0000C366 4889CC                  	mov rsp, rcx
 15273 0000C369 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 15274 0000C36C C9                      	leave
 15275 0000C36D C22000                  	ret 8 * (2 + 2)
 15276                                  .L_lambda_simple_end_0070:	; new closure is in rax
 15277 0000C370 50                      	push rax
 15278 0000C371 6A01                    	push 1
 15279 0000C373 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 15280 0000C378 E8143A0000              	call malloc
 15281 0000C37D 50                      	push rax
 15282 0000C37E BF00000000              	mov rdi, 8 * 0	; new rib
 15283 0000C383 E8093A0000              	call malloc
 15284 0000C388 50                      	push rax
 15285 0000C389 BF08000000              	mov rdi, 8 * 1	; extended env
 15286 0000C38E E8FE390000              	call malloc
 15287 0000C393 488B7D10                	mov rdi, ENV
 15288 0000C397 BE00000000              	mov rsi, 0
 15289 0000C39C BA01000000              	mov rdx, 1
 15290                                  .L_lambda_simple_env_loop_006f:	; ext_env[i + 1] <-- env[i]
 15291 0000C3A1 4883FE00                	cmp rsi, 0
 15292 0000C3A5 7410                    	je .L_lambda_simple_env_end_006f
 15293 0000C3A7 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 15294 0000C3AB 48890CD0                	mov qword [rax + 8 * rdx], rcx
 15295 0000C3AF 48FFC6                  	inc rsi
 15296 0000C3B2 48FFC2                  	inc rdx
 15297 0000C3B5 EBEA                    	jmp .L_lambda_simple_env_loop_006f
 15298                                  .L_lambda_simple_env_end_006f:
 15299 0000C3B7 5B                      	pop rbx
 15300 0000C3B8 BE00000000              	mov rsi, 0
 15301                                  .L_lambda_simple_params_loop_006f:	; copy params
 15302 0000C3BD 4883FE00                	cmp rsi, 0
 15303 0000C3C1 740E                    	je .L_lambda_simple_params_end_006f
 15304 0000C3C3 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 15305 0000C3C8 488914F3                	mov qword [rbx + 8 * rsi], rdx
 15306 0000C3CC 48FFC6                  	inc rsi
 15307 0000C3CF EBEC                    	jmp .L_lambda_simple_params_loop_006f
 15308                                  .L_lambda_simple_params_end_006f:
 15309 0000C3D1 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 15310 0000C3D4 4889C3                  	mov rbx, rax
 15311 0000C3D7 58                      	pop rax
 15312 0000C3D8 C60005                  	mov byte [rax], T_closure
 15313 0000C3DB 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 15314 0000C3DF 48C74009[ECC30000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_006f
 15315 0000C3E7 E9FF000000              	jmp .L_lambda_simple_end_006f
 15316                                  .L_lambda_simple_code_006f:	; lambda-simple body
 15317 0000C3EC 48837C241001            	cmp qword [rsp + 8 * 2], 1
 15318 0000C3F2 740B                    	je .L_lambda_simple_arity_check_ok_006f
 15319 0000C3F4 FF742410                	push qword [rsp + 8 * 2]
 15320 0000C3F8 6A01                    	push 1
 15321 0000C3FA E94B390000              	jmp L_error_incorrect_arity_simple
 15322                                  .L_lambda_simple_arity_check_ok_006f:
 15323 0000C3FF C8000000                	enter 0, 0
 15324 0000C403 488B0425[70030000]      	mov rax, qword [free_var_110]
 15325 0000C40B 50                      	push rax
 15326 0000C40C 488B0425[60030000]      	mov rax, qword [free_var_108]
 15327 0000C414 50                      	push rax
 15328 0000C415 6A02                    	push 2
 15329 0000C417 488B4520                	mov rax, qword [rbp + 8 * (4 + 0)]
 15330                                  	assert_closure(rax)
    42 0000C41B 803805              <1>  cmp byte [%1], %2
    43 0000C41E 0F8566510000        <1>  jne L_error_incorrect_type
 15331 0000C424 FF7001                  	push SOB_CLOSURE_ENV(rax)
 15332 0000C427 FF5009                  	call SOB_CLOSURE_CODE(rax)
 15333 0000C42A 48890425[E8030000]      	mov qword [free_var_125], rax
 15334 0000C432 48B8-                   	mov rax, sob_void
 15334 0000C434 [0000000000000000] 
 15335                                  
 15336 0000C43C 488B0425[70030000]      	mov rax, qword [free_var_110]
 15337 0000C444 50                      	push rax
 15338 0000C445 488B0425[60030000]      	mov rax, qword [free_var_108]
 15339 0000C44D 50                      	push rax
 15340 0000C44E 6A02                    	push 2
 15341 0000C450 488B4520                	mov rax, qword [rbp + 8 * (4 + 0)]
 15342                                  	assert_closure(rax)
    42 0000C454 803805              <1>  cmp byte [%1], %2
    43 0000C457 0F852D510000        <1>  jne L_error_incorrect_type
 15343 0000C45D FF7001                  	push SOB_CLOSURE_ENV(rax)
 15344 0000C460 FF5009                  	call SOB_CLOSURE_CODE(rax)
 15345 0000C463 48890425[10040000]      	mov qword [free_var_130], rax
 15346 0000C46B 48B8-                   	mov rax, sob_void
 15346 0000C46D [0000000000000000] 
 15347                                  
 15348 0000C475 488B0425[70030000]      	mov rax, qword [free_var_110]
 15349 0000C47D 50                      	push rax
 15350 0000C47E 488B0425[78030000]      	mov rax, qword [free_var_111]
 15351 0000C486 50                      	push rax
 15352 0000C487 6A02                    	push 2
 15353 0000C489 488B4520                	mov rax, qword [rbp + 8 * (4 + 0)]
 15354                                  	assert_closure(rax)
    42 0000C48D 803805              <1>  cmp byte [%1], %2
    43 0000C490 0F85F4500000        <1>  jne L_error_incorrect_type
 15355 0000C496 FF7001                  	push SOB_CLOSURE_ENV(rax)
 15356 0000C499 FF5009                  	call SOB_CLOSURE_CODE(rax)
 15357 0000C49C 48890425[F8030000]      	mov qword [free_var_127], rax
 15358 0000C4A4 48B8-                   	mov rax, sob_void
 15358 0000C4A6 [0000000000000000] 
 15359                                  
 15360 0000C4AE 488B0425[A8030000]      	mov rax, qword [free_var_117]
 15361 0000C4B6 50                      	push rax
 15362 0000C4B7 488B0425[B0030000]      	mov rax, qword [free_var_118]
 15363 0000C4BF 50                      	push rax
 15364 0000C4C0 6A02                    	push 2
 15365 0000C4C2 488B4520                	mov rax, qword [rbp + 8 * (4 + 0)]
 15366                                  	assert_closure(rax)
    42 0000C4C6 803805              <1>  cmp byte [%1], %2
    43 0000C4C9 0F85BB500000        <1>  jne L_error_incorrect_type
 15367 0000C4CF FF7001                  	push SOB_CLOSURE_ENV(rax)
 15368 0000C4D2 FF5009                  	call SOB_CLOSURE_CODE(rax)
 15369 0000C4D5 48890425[20040000]      	mov qword [free_var_132], rax
 15370 0000C4DD 48B8-                   	mov rax, sob_void
 15370 0000C4DF [0000000000000000] 
 15371 0000C4E7 C9                      	leave
 15372 0000C4E8 C21800                  	ret 8 * (2 + 1)
 15373                                  .L_lambda_simple_end_006f:	; new closure is in rax
 15374                                  	assert_closure(rax)
    42 0000C4EB 803805              <1>  cmp byte [%1], %2
    43 0000C4EE 0F8596500000        <1>  jne L_error_incorrect_type
 15375 0000C4F4 FF7001                  	push SOB_CLOSURE_ENV(rax)
 15376 0000C4F7 FF5009                  	call SOB_CLOSURE_CODE(rax)
 15377                                  
 15378 0000C4FA 4889C7                  	mov rdi, rax
 15379 0000C4FD E8A0380000              	call print_sexpr_if_not_void
 15380                                  
 15381 0000C502 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 15382 0000C507 E885380000              	call malloc
 15383 0000C50C 50                      	push rax
 15384 0000C50D BF00000000              	mov rdi, 8 * 0	; new rib
 15385 0000C512 E87A380000              	call malloc
 15386 0000C517 50                      	push rax
 15387 0000C518 BF08000000              	mov rdi, 8 * 1	; extended env
 15388 0000C51D E86F380000              	call malloc
 15389 0000C522 488B7D10                	mov rdi, ENV
 15390 0000C526 BE00000000              	mov rsi, 0
 15391 0000C52B BA01000000              	mov rdx, 1
 15392                                  .L_lambda_simple_env_loop_0079:	; ext_env[i + 1] <-- env[i]
 15393 0000C530 4883FE00                	cmp rsi, 0
 15394 0000C534 7410                    	je .L_lambda_simple_env_end_0079
 15395 0000C536 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 15396 0000C53A 48890CD0                	mov qword [rax + 8 * rdx], rcx
 15397 0000C53E 48FFC6                  	inc rsi
 15398 0000C541 48FFC2                  	inc rdx
 15399 0000C544 EBEA                    	jmp .L_lambda_simple_env_loop_0079
 15400                                  .L_lambda_simple_env_end_0079:
 15401 0000C546 5B                      	pop rbx
 15402 0000C547 BE00000000              	mov rsi, 0
 15403                                  .L_lambda_simple_params_loop_0079:	; copy params
 15404 0000C54C 4883FE00                	cmp rsi, 0
 15405 0000C550 740E                    	je .L_lambda_simple_params_end_0079
 15406 0000C552 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 15407 0000C557 488914F3                	mov qword [rbx + 8 * rsi], rdx
 15408 0000C55B 48FFC6                  	inc rsi
 15409 0000C55E EBEC                    	jmp .L_lambda_simple_params_loop_0079
 15410                                  .L_lambda_simple_params_end_0079:
 15411 0000C560 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 15412 0000C563 4889C3                  	mov rbx, rax
 15413 0000C566 58                      	pop rax
 15414 0000C567 C60005                  	mov byte [rax], T_closure
 15415 0000C56A 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 15416 0000C56E 48C74009[7BC50000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0079
 15417 0000C576 E9DD0A0000              	jmp .L_lambda_simple_end_0079
 15418                                  .L_lambda_simple_code_0079:	; lambda-simple body
 15419 0000C57B 48837C241001            	cmp qword [rsp + 8 * 2], 1
 15420 0000C581 740B                    	je .L_lambda_simple_arity_check_ok_0079
 15421 0000C583 FF742410                	push qword [rsp + 8 * 2]
 15422 0000C587 6A01                    	push 1
 15423 0000C589 E9BC370000              	jmp L_error_incorrect_arity_simple
 15424                                  .L_lambda_simple_arity_check_ok_0079:
 15425 0000C58E C8000000                	enter 0, 0
 15426 0000C592 48B8-                   	mov rax, L_constants + 23
 15426 0000C594 [1700000000000000] 
 15427 0000C59C 50                      	push rax
 15428 0000C59D 6A01                    	push 1
 15429 0000C59F BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 15430 0000C5A4 E8E8370000              	call malloc
 15431 0000C5A9 50                      	push rax
 15432 0000C5AA BF08000000              	mov rdi, 8 * 1	; new rib
 15433 0000C5AF E8DD370000              	call malloc
 15434 0000C5B4 50                      	push rax
 15435 0000C5B5 BF10000000              	mov rdi, 8 * 2	; extended env
 15436 0000C5BA E8D2370000              	call malloc
 15437 0000C5BF 488B7D10                	mov rdi, ENV
 15438 0000C5C3 BE00000000              	mov rsi, 0
 15439 0000C5C8 BA01000000              	mov rdx, 1
 15440                                  .L_lambda_simple_env_loop_007a:	; ext_env[i + 1] <-- env[i]
 15441 0000C5CD 4883FE01                	cmp rsi, 1
 15442 0000C5D1 7410                    	je .L_lambda_simple_env_end_007a
 15443 0000C5D3 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 15444 0000C5D7 48890CD0                	mov qword [rax + 8 * rdx], rcx
 15445 0000C5DB 48FFC6                  	inc rsi
 15446 0000C5DE 48FFC2                  	inc rdx
 15447 0000C5E1 EBEA                    	jmp .L_lambda_simple_env_loop_007a
 15448                                  .L_lambda_simple_env_end_007a:
 15449 0000C5E3 5B                      	pop rbx
 15450 0000C5E4 BE00000000              	mov rsi, 0
 15451                                  .L_lambda_simple_params_loop_007a:	; copy params
 15452 0000C5E9 4883FE01                	cmp rsi, 1
 15453 0000C5ED 740E                    	je .L_lambda_simple_params_end_007a
 15454 0000C5EF 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 15455 0000C5F4 488914F3                	mov qword [rbx + 8 * rsi], rdx
 15456 0000C5F8 48FFC6                  	inc rsi
 15457 0000C5FB EBEC                    	jmp .L_lambda_simple_params_loop_007a
 15458                                  .L_lambda_simple_params_end_007a:
 15459 0000C5FD 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 15460 0000C600 4889C3                  	mov rbx, rax
 15461 0000C603 58                      	pop rax
 15462 0000C604 C60005                  	mov byte [rax], T_closure
 15463 0000C607 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 15464 0000C60B 48C74009[18C60000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_007a
 15465 0000C613 E9F9090000              	jmp .L_lambda_simple_end_007a
 15466                                  .L_lambda_simple_code_007a:	; lambda-simple body
 15467 0000C618 48837C241001            	cmp qword [rsp + 8 * 2], 1
 15468 0000C61E 740B                    	je .L_lambda_simple_arity_check_ok_007a
 15469 0000C620 FF742410                	push qword [rsp + 8 * 2]
 15470 0000C624 6A01                    	push 1
 15471 0000C626 E91F370000              	jmp L_error_incorrect_arity_simple
 15472                                  .L_lambda_simple_arity_check_ok_007a:
 15473 0000C62B C8000000                	enter 0, 0
 15474 0000C62F 488B4520                	mov rax, qword [rbp + 8 * (4 + 0)]
 15475 0000C633 4889C2                  	mov rdx, rax
 15476 0000C636 BF08000000              	mov rdi, 8
 15477 0000C63B E851370000              	call malloc
 15478 0000C640 488910                  	mov qword[rax], rdx
 15479 0000C643 48894520                	mov qword [rbp + 8 * (4 + 0)], rax
 15480 0000C647 48B8-                   	mov rax, sob_void
 15480 0000C649 [0000000000000000] 
 15481                                  
 15482 0000C651 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 15483 0000C656 E836370000              	call malloc
 15484 0000C65B 50                      	push rax
 15485 0000C65C BF08000000              	mov rdi, 8 * 1	; new rib
 15486 0000C661 E82B370000              	call malloc
 15487 0000C666 50                      	push rax
 15488 0000C667 BF18000000              	mov rdi, 8 * 3	; extended env
 15489 0000C66C E820370000              	call malloc
 15490 0000C671 488B7D10                	mov rdi, ENV
 15491 0000C675 BE00000000              	mov rsi, 0
 15492 0000C67A BA01000000              	mov rdx, 1
 15493                                  .L_lambda_simple_env_loop_007b:	; ext_env[i + 1] <-- env[i]
 15494 0000C67F 4883FE02                	cmp rsi, 2
 15495 0000C683 7410                    	je .L_lambda_simple_env_end_007b
 15496 0000C685 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 15497 0000C689 48890CD0                	mov qword [rax + 8 * rdx], rcx
 15498 0000C68D 48FFC6                  	inc rsi
 15499 0000C690 48FFC2                  	inc rdx
 15500 0000C693 EBEA                    	jmp .L_lambda_simple_env_loop_007b
 15501                                  .L_lambda_simple_env_end_007b:
 15502 0000C695 5B                      	pop rbx
 15503 0000C696 BE00000000              	mov rsi, 0
 15504                                  .L_lambda_simple_params_loop_007b:	; copy params
 15505 0000C69B 4883FE01                	cmp rsi, 1
 15506 0000C69F 740E                    	je .L_lambda_simple_params_end_007b
 15507 0000C6A1 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 15508 0000C6A6 488914F3                	mov qword [rbx + 8 * rsi], rdx
 15509 0000C6AA 48FFC6                  	inc rsi
 15510 0000C6AD EBEC                    	jmp .L_lambda_simple_params_loop_007b
 15511                                  .L_lambda_simple_params_end_007b:
 15512 0000C6AF 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 15513 0000C6B2 4889C3                  	mov rbx, rax
 15514 0000C6B5 58                      	pop rax
 15515 0000C6B6 C60005                  	mov byte [rax], T_closure
 15516 0000C6B9 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 15517 0000C6BD 48C74009[CAC60000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_007b
 15518 0000C6C5 E98C010000              	jmp .L_lambda_simple_end_007b
 15519                                  .L_lambda_simple_code_007b:	; lambda-simple body
 15520 0000C6CA 48837C241004            	cmp qword [rsp + 8 * 2], 4
 15521 0000C6D0 740B                    	je .L_lambda_simple_arity_check_ok_007b
 15522 0000C6D2 FF742410                	push qword [rsp + 8 * 2]
 15523 0000C6D6 6A04                    	push 4
 15524 0000C6D8 E96D360000              	jmp L_error_incorrect_arity_simple
 15525                                  .L_lambda_simple_arity_check_ok_007b:
 15526 0000C6DD C8000000                	enter 0, 0
 15527 0000C6E1 488B4538                	mov rax, qword [rbp + 8 * (4 + 3)]
 15528 0000C6E5 50                      	push rax
 15529 0000C6E6 488B4520                	mov rax, qword [rbp + 8 * (4 + 0)]
 15530 0000C6EA 50                      	push rax
 15531 0000C6EB 6A02                    	push 2
 15532 0000C6ED 488B0425[50030000]      	mov rax, qword [free_var_106]
 15533                                  	assert_closure(rax)
    42 0000C6F5 803805              <1>  cmp byte [%1], %2
    43 0000C6F8 0F858C4E0000        <1>  jne L_error_incorrect_type
 15534 0000C6FE FF7001                  	push SOB_CLOSURE_ENV(rax)
 15535 0000C701 FF5009                  	call SOB_CLOSURE_CODE(rax)
 15536 0000C704 483D[02000000]          	cmp rax, sob_boolean_false
 15537 0000C70A 0F8542010000            	jne .L_or_end_000a
 15538 0000C710 488B4538                	mov rax, qword [rbp + 8 * (4 + 3)]
 15539 0000C714 50                      	push rax
 15540 0000C715 488B4520                	mov rax, qword [rbp + 8 * (4 + 0)]
 15541 0000C719 50                      	push rax
 15542 0000C71A 6A02                    	push 2
 15543 0000C71C 488B0425[30030000]      	mov rax, qword [free_var_102]
 15544                                  	assert_closure(rax)
    42 0000C724 803805              <1>  cmp byte [%1], %2
    43 0000C727 0F855D4E0000        <1>  jne L_error_incorrect_type
 15545 0000C72D FF7001                  	push SOB_CLOSURE_ENV(rax)
 15546 0000C730 FF5009                  	call SOB_CLOSURE_CODE(rax)
 15547 0000C733 483D[02000000]          	cmp rax, sob_boolean_false
 15548 0000C739 0F8409010000                      	je .L_if_else_0044
 15549 0000C73F 488B4520                          	mov rax, qword [rbp + 8 * (4 + 0)]
 15550 0000C743 50                      	push rax
 15551 0000C744 488B4530                	mov rax, qword [rbp + 8 * (4 + 2)]
 15552 0000C748 50                      	push rax
 15553 0000C749 6A02                    	push 2
 15554 0000C74B 488B0425[78010000]      	mov rax, qword [free_var_47]
 15555                                  	assert_closure(rax)
    42 0000C753 803805              <1>  cmp byte [%1], %2
    43 0000C756 0F852E4E0000        <1>  jne L_error_incorrect_type
 15556 0000C75C FF7001                  	push SOB_CLOSURE_ENV(rax)
 15557 0000C75F FF5009                  	call SOB_CLOSURE_CODE(rax)
 15558 0000C762 50                      	push rax
 15559 0000C763 488B4520                	mov rax, qword [rbp + 8 * (4 + 0)]
 15560 0000C767 50                      	push rax
 15561 0000C768 488B4528                	mov rax, qword [rbp + 8 * (4 + 1)]
 15562 0000C76C 50                      	push rax
 15563 0000C76D 6A02                    	push 2
 15564 0000C76F 488B0425[78010000]      	mov rax, qword [free_var_47]
 15565                                  	assert_closure(rax)
    42 0000C777 803805              <1>  cmp byte [%1], %2
    43 0000C77A 0F850A4E0000        <1>  jne L_error_incorrect_type
 15566 0000C780 FF7001                  	push SOB_CLOSURE_ENV(rax)
 15567 0000C783 FF5009                  	call SOB_CLOSURE_CODE(rax)
 15568 0000C786 50                      	push rax
 15569 0000C787 6A02                    	push 2
 15570 0000C789 488B4510                	mov rax, qword [rbp + 8 * 2]
 15571 0000C78D 488B4008                	mov rax, qword [rax + 8 * 1]
 15572 0000C791 488B00                  	mov rax, qword [rax + 8 * 0]
 15573                                  	assert_closure(rax)
    42 0000C794 803805              <1>  cmp byte [%1], %2
    43 0000C797 0F85ED4D0000        <1>  jne L_error_incorrect_type
 15574 0000C79D FF7001                  	push SOB_CLOSURE_ENV(rax)
 15575 0000C7A0 FF5009                  	call SOB_CLOSURE_CODE(rax)
 15576 0000C7A3 483D[02000000]          	cmp rax, sob_boolean_false
 15577 0000C7A9 0F848D000000                      	je .L_if_else_0043
 15578 0000C7AF 488B4538                          	mov rax, qword [rbp + 8 * (4 + 3)]
 15579 0000C7B3 50                      	push rax
 15580 0000C7B4 488B4530                	mov rax, qword [rbp + 8 * (4 + 2)]
 15581 0000C7B8 50                      	push rax
 15582 0000C7B9 488B4528                	mov rax, qword [rbp + 8 * (4 + 1)]
 15583 0000C7BD 50                      	push rax
 15584 0000C7BE 48B8-                   	mov rax, L_constants + 128
 15584 0000C7C0 [8000000000000000] 
 15585 0000C7C8 50                      	push rax
 15586 0000C7C9 488B4520                	mov rax, qword [rbp + 8 * (4 + 0)]
 15587 0000C7CD 50                      	push rax
 15588 0000C7CE 6A02                    	push 2
 15589 0000C7D0 488B0425[08030000]      	mov rax, qword [free_var_97]
 15590                                  	assert_closure(rax)
    42 0000C7D8 803805              <1>  cmp byte [%1], %2
    43 0000C7DB 0F85A94D0000        <1>  jne L_error_incorrect_type
 15591 0000C7E1 FF7001                  	push SOB_CLOSURE_ENV(rax)
 15592 0000C7E4 FF5009                  	call SOB_CLOSURE_CODE(rax)
 15593 0000C7E7 50                      	push rax
 15594 0000C7E8 6A04                    	push 4
 15595 0000C7EA 488B4510                	mov rax, qword [rbp + 8 * 2]
 15596 0000C7EE 488B00                  	mov rax, qword [rax + 8 * 0]
 15597 0000C7F1 488B00                  	mov rax, qword [rax + 8 * 0]
 15598 0000C7F4 488B00                  	mov rax, qword [rax]
 15599                                  	assert_closure(rax)
    42 0000C7F7 803805              <1>  cmp byte [%1], %2
    43 0000C7FA 0F858A4D0000        <1>  jne L_error_incorrect_type
 15600 0000C800 FF7001                  	push SOB_CLOSURE_ENV(rax)
 15601 0000C803 FF7508                  	push qword [rbp + 8 * 1] ; old ret addr
 15602 0000C806 FF7500                  	push qword [rbp] ; same the old rbp
 15603 0000C809 BA07000000              	mov rdx, 4 + 3
 15604 0000C80E 488B4D18                	mov rcx, COUNT
 15605 0000C812 488D4CCD20              	lea rcx, [rbp + 8*4 + rcx * 8]
 15606 0000C817 4889EF                  	mov rdi, rbp
 15607                                  .L_tc_recycle_frame_loop_0093:
 15608 0000C81A 4883FA00                	cmp rdx, 0
 15609 0000C81E 7413                    	je .L_tc_recycle_frame_done_0093
 15610 0000C820 4883E908                	sub rcx, 8
 15611 0000C824 4883EF08                	sub rdi, 8
 15612 0000C828 488B37                  	mov rsi, [rdi]
 15613 0000C82B 488931                  	mov qword [rcx], rsi
 15614 0000C82E 48FFCA                  	dec rdx
 15615 0000C831 EBE7                    	jmp .L_tc_recycle_frame_loop_0093
 15616                                  .L_tc_recycle_frame_done_0093:
 15617 0000C833 5D                      	pop rbp ; restore the old rbp
 15618 0000C834 4889CC                  	mov rsp, rcx
 15619 0000C837 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 15620 0000C83A EB0A                    	jmp .L_if_end_0043
 15621                                            .L_if_else_0043:
 15622 0000C83C 48B8-                             	mov rax, L_constants + 2
 15622 0000C83E [0200000000000000] 
 15623                                  .L_if_end_0043:
 15624 0000C846 EB0A                    	jmp .L_if_end_0044
 15625                                            .L_if_else_0044:
 15626 0000C848 48B8-                             	mov rax, L_constants + 2
 15626 0000C84A [0200000000000000] 
 15627                                  .L_if_end_0044:
 15628                                  .L_or_end_000a:
 15629 0000C852 C9                      	leave
 15630 0000C853 C23000                  	ret 8 * (2 + 4)
 15631                                  .L_lambda_simple_end_007b:	; new closure is in rax
 15632 0000C856 50                      	push rax
 15633 0000C857 488B4520                	mov rax, qword [rbp + 8 * (4 + 0)]
 15634 0000C85B 8F00                    	pop qword [rax]
 15635 0000C85D 48B8-                   	mov rax, sob_void
 15635 0000C85F [0000000000000000] 
 15636                                  
 15637 0000C867 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 15638 0000C86C E820350000              	call malloc
 15639 0000C871 50                      	push rax
 15640 0000C872 BF08000000              	mov rdi, 8 * 1	; new rib
 15641 0000C877 E815350000              	call malloc
 15642 0000C87C 50                      	push rax
 15643 0000C87D BF18000000              	mov rdi, 8 * 3	; extended env
 15644 0000C882 E80A350000              	call malloc
 15645 0000C887 488B7D10                	mov rdi, ENV
 15646 0000C88B BE00000000              	mov rsi, 0
 15647 0000C890 BA01000000              	mov rdx, 1
 15648                                  .L_lambda_simple_env_loop_007f:	; ext_env[i + 1] <-- env[i]
 15649 0000C895 4883FE02                	cmp rsi, 2
 15650 0000C899 7410                    	je .L_lambda_simple_env_end_007f
 15651 0000C89B 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 15652 0000C89F 48890CD0                	mov qword [rax + 8 * rdx], rcx
 15653 0000C8A3 48FFC6                  	inc rsi
 15654 0000C8A6 48FFC2                  	inc rdx
 15655 0000C8A9 EBEA                    	jmp .L_lambda_simple_env_loop_007f
 15656                                  .L_lambda_simple_env_end_007f:
 15657 0000C8AB 5B                      	pop rbx
 15658 0000C8AC BE00000000              	mov rsi, 0
 15659                                  .L_lambda_simple_params_loop_007f:	; copy params
 15660 0000C8B1 4883FE01                	cmp rsi, 1
 15661 0000C8B5 740E                    	je .L_lambda_simple_params_end_007f
 15662 0000C8B7 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 15663 0000C8BC 488914F3                	mov qword [rbx + 8 * rsi], rdx
 15664 0000C8C0 48FFC6                  	inc rsi
 15665 0000C8C3 EBEC                    	jmp .L_lambda_simple_params_loop_007f
 15666                                  .L_lambda_simple_params_end_007f:
 15667 0000C8C5 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 15668 0000C8C8 4889C3                  	mov rbx, rax
 15669 0000C8CB 58                      	pop rax
 15670 0000C8CC C60005                  	mov byte [rax], T_closure
 15671 0000C8CF 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 15672 0000C8D3 48C74009[E0C80000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_007f
 15673 0000C8DB E9E7010000              	jmp .L_lambda_simple_end_007f
 15674                                  .L_lambda_simple_code_007f:	; lambda-simple body
 15675 0000C8E0 48837C241002            	cmp qword [rsp + 8 * 2], 2
 15676 0000C8E6 740B                    	je .L_lambda_simple_arity_check_ok_007f
 15677 0000C8E8 FF742410                	push qword [rsp + 8 * 2]
 15678 0000C8EC 6A02                    	push 2
 15679 0000C8EE E957340000              	jmp L_error_incorrect_arity_simple
 15680                                  .L_lambda_simple_arity_check_ok_007f:
 15681 0000C8F3 C8000000                	enter 0, 0
 15682 0000C8F7 488B4528                	mov rax, qword [rbp + 8 * (4 + 1)]
 15683 0000C8FB 50                      	push rax
 15684 0000C8FC 6A01                    	push 1
 15685 0000C8FE 488B0425[90000000]      	mov rax, qword [free_var_18]
 15686                                  	assert_closure(rax)
    42 0000C906 803805              <1>  cmp byte [%1], %2
    43 0000C909 0F857B4C0000        <1>  jne L_error_incorrect_type
 15687 0000C90F FF7001                  	push SOB_CLOSURE_ENV(rax)
 15688 0000C912 FF5009                  	call SOB_CLOSURE_CODE(rax)
 15689 0000C915 50                      	push rax
 15690 0000C916 488B4520                	mov rax, qword [rbp + 8 * (4 + 0)]
 15691 0000C91A 50                      	push rax
 15692 0000C91B 6A01                    	push 1
 15693 0000C91D 488B0425[90000000]      	mov rax, qword [free_var_18]
 15694                                  	assert_closure(rax)
    42 0000C925 803805              <1>  cmp byte [%1], %2
    43 0000C928 0F855C4C0000        <1>  jne L_error_incorrect_type
 15695 0000C92E FF7001                  	push SOB_CLOSURE_ENV(rax)
 15696 0000C931 FF5009                  	call SOB_CLOSURE_CODE(rax)
 15697 0000C934 50                      	push rax
 15698 0000C935 6A02                    	push 2
 15699 0000C937 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 15700 0000C93C E850340000              	call malloc
 15701 0000C941 50                      	push rax
 15702 0000C942 BF10000000              	mov rdi, 8 * 2	; new rib
 15703 0000C947 E845340000              	call malloc
 15704 0000C94C 50                      	push rax
 15705 0000C94D BF20000000              	mov rdi, 8 * 4	; extended env
 15706 0000C952 E83A340000              	call malloc
 15707 0000C957 488B7D10                	mov rdi, ENV
 15708 0000C95B BE00000000              	mov rsi, 0
 15709 0000C960 BA01000000              	mov rdx, 1
 15710                                  .L_lambda_simple_env_loop_0080:	; ext_env[i + 1] <-- env[i]
 15711 0000C965 4883FE03                	cmp rsi, 3
 15712 0000C969 7410                    	je .L_lambda_simple_env_end_0080
 15713 0000C96B 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 15714 0000C96F 48890CD0                	mov qword [rax + 8 * rdx], rcx
 15715 0000C973 48FFC6                  	inc rsi
 15716 0000C976 48FFC2                  	inc rdx
 15717 0000C979 EBEA                    	jmp .L_lambda_simple_env_loop_0080
 15718                                  .L_lambda_simple_env_end_0080:
 15719 0000C97B 5B                      	pop rbx
 15720 0000C97C BE00000000              	mov rsi, 0
 15721                                  .L_lambda_simple_params_loop_0080:	; copy params
 15722 0000C981 4883FE02                	cmp rsi, 2
 15723 0000C985 740E                    	je .L_lambda_simple_params_end_0080
 15724 0000C987 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 15725 0000C98C 488914F3                	mov qword [rbx + 8 * rsi], rdx
 15726 0000C990 48FFC6                  	inc rsi
 15727 0000C993 EBEC                    	jmp .L_lambda_simple_params_loop_0080
 15728                                  .L_lambda_simple_params_end_0080:
 15729 0000C995 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 15730 0000C998 4889C3                  	mov rbx, rax
 15731 0000C99B 58                      	pop rax
 15732 0000C99C C60005                  	mov byte [rax], T_closure
 15733 0000C99F 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 15734 0000C9A3 48C74009[B0C90000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0080
 15735 0000C9AB E9D0000000              	jmp .L_lambda_simple_end_0080
 15736                                  .L_lambda_simple_code_0080:	; lambda-simple body
 15737 0000C9B0 48837C241002            	cmp qword [rsp + 8 * 2], 2
 15738 0000C9B6 740B                    	je .L_lambda_simple_arity_check_ok_0080
 15739 0000C9B8 FF742410                	push qword [rsp + 8 * 2]
 15740 0000C9BC 6A02                    	push 2
 15741 0000C9BE E987330000              	jmp L_error_incorrect_arity_simple
 15742                                  .L_lambda_simple_arity_check_ok_0080:
 15743 0000C9C3 C8000000                	enter 0, 0
 15744 0000C9C7 488B4528                	mov rax, qword [rbp + 8 * (4 + 1)]
 15745 0000C9CB 50                      	push rax
 15746 0000C9CC 488B4520                	mov rax, qword [rbp + 8 * (4 + 0)]
 15747 0000C9D0 50                      	push rax
 15748 0000C9D1 6A02                    	push 2
 15749 0000C9D3 488B0425[50030000]      	mov rax, qword [free_var_106]
 15750                                  	assert_closure(rax)
    42 0000C9DB 803805              <1>  cmp byte [%1], %2
    43 0000C9DE 0F85A64B0000        <1>  jne L_error_incorrect_type
 15751 0000C9E4 FF7001                  	push SOB_CLOSURE_ENV(rax)
 15752 0000C9E7 FF5009                  	call SOB_CLOSURE_CODE(rax)
 15753 0000C9EA 483D[02000000]          	cmp rax, sob_boolean_false
 15754 0000C9F0 0F847C000000                      	je .L_if_else_0046
 15755 0000C9F6 488B4520                          	mov rax, qword [rbp + 8 * (4 + 0)]
 15756 0000C9FA 50                      	push rax
 15757 0000C9FB 488B4510                	mov rax, qword [rbp + 8 * 2]
 15758 0000C9FF 488B00                  	mov rax, qword [rax + 8 * 0]
 15759 0000CA02 488B4008                	mov rax, qword [rax + 8 * 1]
 15760 0000CA06 50                      	push rax
 15761 0000CA07 488B4510                	mov rax, qword [rbp + 8 * 2]
 15762 0000CA0B 488B00                  	mov rax, qword [rax + 8 * 0]
 15763 0000CA0E 488B00                  	mov rax, qword [rax + 8 * 0]
 15764 0000CA11 50                      	push rax
 15765 0000CA12 48B8-                   	mov rax, L_constants + 32
 15765 0000CA14 [2000000000000000] 
 15766 0000CA1C 50                      	push rax
 15767 0000CA1D 6A04                    	push 4
 15768 0000CA1F 488B4510                	mov rax, qword [rbp + 8 * 2]
 15769 0000CA23 488B4008                	mov rax, qword [rax + 8 * 1]
 15770 0000CA27 488B00                  	mov rax, qword [rax + 8 * 0]
 15771 0000CA2A 488B00                  	mov rax, qword [rax]
 15772                                  	assert_closure(rax)
    42 0000CA2D 803805              <1>  cmp byte [%1], %2
    43 0000CA30 0F85544B0000        <1>  jne L_error_incorrect_type
 15773 0000CA36 FF7001                  	push SOB_CLOSURE_ENV(rax)
 15774 0000CA39 FF7508                  	push qword [rbp + 8 * 1] ; old ret addr
 15775 0000CA3C FF7500                  	push qword [rbp] ; same the old rbp
 15776 0000CA3F BA07000000              	mov rdx, 4 + 3
 15777 0000CA44 488B4D18                	mov rcx, COUNT
 15778 0000CA48 488D4CCD20              	lea rcx, [rbp + 8*4 + rcx * 8]
 15779 0000CA4D 4889EF                  	mov rdi, rbp
 15780                                  .L_tc_recycle_frame_loop_0099:
 15781 0000CA50 4883FA00                	cmp rdx, 0
 15782 0000CA54 7413                    	je .L_tc_recycle_frame_done_0099
 15783 0000CA56 4883E908                	sub rcx, 8
 15784 0000CA5A 4883EF08                	sub rdi, 8
 15785 0000CA5E 488B37                  	mov rsi, [rdi]
 15786 0000CA61 488931                  	mov qword [rcx], rsi
 15787 0000CA64 48FFCA                  	dec rdx
 15788 0000CA67 EBE7                    	jmp .L_tc_recycle_frame_loop_0099
 15789                                  .L_tc_recycle_frame_done_0099:
 15790 0000CA69 5D                      	pop rbp ; restore the old rbp
 15791 0000CA6A 4889CC                  	mov rsp, rcx
 15792 0000CA6D FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 15793 0000CA70 EB0A                    	jmp .L_if_end_0046
 15794                                            .L_if_else_0046:
 15795 0000CA72 48B8-                             	mov rax, L_constants + 2
 15795 0000CA74 [0200000000000000] 
 15796                                  .L_if_end_0046:
 15797 0000CA7C C9                      	leave
 15798 0000CA7D C22000                  	ret 8 * (2 + 2)
 15799                                  .L_lambda_simple_end_0080:	; new closure is in rax
 15800                                  	assert_closure(rax)
    42 0000CA80 803805              <1>  cmp byte [%1], %2
    43 0000CA83 0F85014B0000        <1>  jne L_error_incorrect_type
 15801 0000CA89 FF7001                  	push SOB_CLOSURE_ENV(rax)
 15802 0000CA8C FF7508                  	push qword [rbp + 8 * 1] ; old ret addr
 15803 0000CA8F FF7500                  	push qword [rbp] ; same the old rbp
 15804 0000CA92 BA05000000              	mov rdx, 2 + 3
 15805 0000CA97 488B4D18                	mov rcx, COUNT
 15806 0000CA9B 488D4CCD20              	lea rcx, [rbp + 8*4 + rcx * 8]
 15807 0000CAA0 4889EF                  	mov rdi, rbp
 15808                                  .L_tc_recycle_frame_loop_0098:
 15809 0000CAA3 4883FA00                	cmp rdx, 0
 15810 0000CAA7 7413                    	je .L_tc_recycle_frame_done_0098
 15811 0000CAA9 4883E908                	sub rcx, 8
 15812 0000CAAD 4883EF08                	sub rdi, 8
 15813 0000CAB1 488B37                  	mov rsi, [rdi]
 15814 0000CAB4 488931                  	mov qword [rcx], rsi
 15815 0000CAB7 48FFCA                  	dec rdx
 15816 0000CABA EBE7                    	jmp .L_tc_recycle_frame_loop_0098
 15817                                  .L_tc_recycle_frame_done_0098:
 15818 0000CABC 5D                      	pop rbp ; restore the old rbp
 15819 0000CABD 4889CC                  	mov rsp, rcx
 15820 0000CAC0 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 15821 0000CAC3 C9                      	leave
 15822 0000CAC4 C22000                  	ret 8 * (2 + 2)
 15823                                  .L_lambda_simple_end_007f:	; new closure is in rax
 15824 0000CAC7 50                      	push rax
 15825 0000CAC8 6A01                    	push 1
 15826 0000CACA BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 15827 0000CACF E8BD320000              	call malloc
 15828 0000CAD4 50                      	push rax
 15829 0000CAD5 BF08000000              	mov rdi, 8 * 1	; new rib
 15830 0000CADA E8B2320000              	call malloc
 15831 0000CADF 50                      	push rax
 15832 0000CAE0 BF18000000              	mov rdi, 8 * 3	; extended env
 15833 0000CAE5 E8A7320000              	call malloc
 15834 0000CAEA 488B7D10                	mov rdi, ENV
 15835 0000CAEE BE00000000              	mov rsi, 0
 15836 0000CAF3 BA01000000              	mov rdx, 1
 15837                                  .L_lambda_simple_env_loop_007c:	; ext_env[i + 1] <-- env[i]
 15838 0000CAF8 4883FE02                	cmp rsi, 2
 15839 0000CAFC 7410                    	je .L_lambda_simple_env_end_007c
 15840 0000CAFE 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 15841 0000CB02 48890CD0                	mov qword [rax + 8 * rdx], rcx
 15842 0000CB06 48FFC6                  	inc rsi
 15843 0000CB09 48FFC2                  	inc rdx
 15844 0000CB0C EBEA                    	jmp .L_lambda_simple_env_loop_007c
 15845                                  .L_lambda_simple_env_end_007c:
 15846 0000CB0E 5B                      	pop rbx
 15847 0000CB0F BE00000000              	mov rsi, 0
 15848                                  .L_lambda_simple_params_loop_007c:	; copy params
 15849 0000CB14 4883FE01                	cmp rsi, 1
 15850 0000CB18 740E                    	je .L_lambda_simple_params_end_007c
 15851 0000CB1A 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 15852 0000CB1F 488914F3                	mov qword [rbx + 8 * rsi], rdx
 15853 0000CB23 48FFC6                  	inc rsi
 15854 0000CB26 EBEC                    	jmp .L_lambda_simple_params_loop_007c
 15855                                  .L_lambda_simple_params_end_007c:
 15856 0000CB28 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 15857 0000CB2B 4889C3                  	mov rbx, rax
 15858 0000CB2E 58                      	pop rax
 15859 0000CB2F C60005                  	mov byte [rax], T_closure
 15860 0000CB32 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 15861 0000CB36 48C74009[43CB0000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_007c
 15862 0000CB3E E987040000              	jmp .L_lambda_simple_end_007c
 15863                                  .L_lambda_simple_code_007c:	; lambda-simple body
 15864 0000CB43 48837C241001            	cmp qword [rsp + 8 * 2], 1
 15865 0000CB49 740B                    	je .L_lambda_simple_arity_check_ok_007c
 15866 0000CB4B FF742410                	push qword [rsp + 8 * 2]
 15867 0000CB4F 6A01                    	push 1
 15868 0000CB51 E9F4310000              	jmp L_error_incorrect_arity_simple
 15869                                  .L_lambda_simple_arity_check_ok_007c:
 15870 0000CB56 C8000000                	enter 0, 0
 15871 0000CB5A 48B8-                   	mov rax, L_constants + 23
 15871 0000CB5C [1700000000000000] 
 15872 0000CB64 50                      	push rax
 15873 0000CB65 6A01                    	push 1
 15874 0000CB67 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 15875 0000CB6C E820320000              	call malloc
 15876 0000CB71 50                      	push rax
 15877 0000CB72 BF08000000              	mov rdi, 8 * 1	; new rib
 15878 0000CB77 E815320000              	call malloc
 15879 0000CB7C 50                      	push rax
 15880 0000CB7D BF20000000              	mov rdi, 8 * 4	; extended env
 15881 0000CB82 E80A320000              	call malloc
 15882 0000CB87 488B7D10                	mov rdi, ENV
 15883 0000CB8B BE00000000              	mov rsi, 0
 15884 0000CB90 BA01000000              	mov rdx, 1
 15885                                  .L_lambda_simple_env_loop_007d:	; ext_env[i + 1] <-- env[i]
 15886 0000CB95 4883FE03                	cmp rsi, 3
 15887 0000CB99 7410                    	je .L_lambda_simple_env_end_007d
 15888 0000CB9B 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 15889 0000CB9F 48890CD0                	mov qword [rax + 8 * rdx], rcx
 15890 0000CBA3 48FFC6                  	inc rsi
 15891 0000CBA6 48FFC2                  	inc rdx
 15892 0000CBA9 EBEA                    	jmp .L_lambda_simple_env_loop_007d
 15893                                  .L_lambda_simple_env_end_007d:
 15894 0000CBAB 5B                      	pop rbx
 15895 0000CBAC BE00000000              	mov rsi, 0
 15896                                  .L_lambda_simple_params_loop_007d:	; copy params
 15897 0000CBB1 4883FE01                	cmp rsi, 1
 15898 0000CBB5 740E                    	je .L_lambda_simple_params_end_007d
 15899 0000CBB7 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 15900 0000CBBC 488914F3                	mov qword [rbx + 8 * rsi], rdx
 15901 0000CBC0 48FFC6                  	inc rsi
 15902 0000CBC3 EBEC                    	jmp .L_lambda_simple_params_loop_007d
 15903                                  .L_lambda_simple_params_end_007d:
 15904 0000CBC5 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 15905 0000CBC8 4889C3                  	mov rbx, rax
 15906 0000CBCB 58                      	pop rax
 15907 0000CBCC C60005                  	mov byte [rax], T_closure
 15908 0000CBCF 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 15909 0000CBD3 48C74009[E0CB0000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_007d
 15910 0000CBDB E9A3030000              	jmp .L_lambda_simple_end_007d
 15911                                  .L_lambda_simple_code_007d:	; lambda-simple body
 15912 0000CBE0 48837C241001            	cmp qword [rsp + 8 * 2], 1
 15913 0000CBE6 740B                    	je .L_lambda_simple_arity_check_ok_007d
 15914 0000CBE8 FF742410                	push qword [rsp + 8 * 2]
 15915 0000CBEC 6A01                    	push 1
 15916 0000CBEE E957310000              	jmp L_error_incorrect_arity_simple
 15917                                  .L_lambda_simple_arity_check_ok_007d:
 15918 0000CBF3 C8000000                	enter 0, 0
 15919 0000CBF7 488B4520                	mov rax, qword [rbp + 8 * (4 + 0)]
 15920 0000CBFB 4889C2                  	mov rdx, rax
 15921 0000CBFE BF08000000              	mov rdi, 8
 15922 0000CC03 E889310000              	call malloc
 15923 0000CC08 488910                  	mov qword[rax], rdx
 15924 0000CC0B 48894520                	mov qword [rbp + 8 * (4 + 0)], rax
 15925 0000CC0F 48B8-                   	mov rax, sob_void
 15925 0000CC11 [0000000000000000] 
 15926                                  
 15927 0000CC19 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 15928 0000CC1E E86E310000              	call malloc
 15929 0000CC23 50                      	push rax
 15930 0000CC24 BF08000000              	mov rdi, 8 * 1	; new rib
 15931 0000CC29 E863310000              	call malloc
 15932 0000CC2E 50                      	push rax
 15933 0000CC2F BF28000000              	mov rdi, 8 * 5	; extended env
 15934 0000CC34 E858310000              	call malloc
 15935 0000CC39 488B7D10                	mov rdi, ENV
 15936 0000CC3D BE00000000              	mov rsi, 0
 15937 0000CC42 BA01000000              	mov rdx, 1
 15938                                  .L_lambda_simple_env_loop_007e:	; ext_env[i + 1] <-- env[i]
 15939 0000CC47 4883FE04                	cmp rsi, 4
 15940 0000CC4B 7410                    	je .L_lambda_simple_env_end_007e
 15941 0000CC4D 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 15942 0000CC51 48890CD0                	mov qword [rax + 8 * rdx], rcx
 15943 0000CC55 48FFC6                  	inc rsi
 15944 0000CC58 48FFC2                  	inc rdx
 15945 0000CC5B EBEA                    	jmp .L_lambda_simple_env_loop_007e
 15946                                  .L_lambda_simple_env_end_007e:
 15947 0000CC5D 5B                      	pop rbx
 15948 0000CC5E BE00000000              	mov rsi, 0
 15949                                  .L_lambda_simple_params_loop_007e:	; copy params
 15950 0000CC63 4883FE01                	cmp rsi, 1
 15951 0000CC67 740E                    	je .L_lambda_simple_params_end_007e
 15952 0000CC69 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 15953 0000CC6E 488914F3                	mov qword [rbx + 8 * rsi], rdx
 15954 0000CC72 48FFC6                  	inc rsi
 15955 0000CC75 EBEC                    	jmp .L_lambda_simple_params_loop_007e
 15956                                  .L_lambda_simple_params_end_007e:
 15957 0000CC77 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 15958 0000CC7A 4889C3                  	mov rbx, rax
 15959 0000CC7D 58                      	pop rax
 15960 0000CC7E C60005                  	mov byte [rax], T_closure
 15961 0000CC81 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 15962 0000CC85 48C74009[92CC0000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_007e
 15963 0000CC8D E92D010000              	jmp .L_lambda_simple_end_007e
 15964                                  .L_lambda_simple_code_007e:	; lambda-simple body
 15965 0000CC92 48837C241002            	cmp qword [rsp + 8 * 2], 2
 15966 0000CC98 740B                    	je .L_lambda_simple_arity_check_ok_007e
 15967 0000CC9A FF742410                	push qword [rsp + 8 * 2]
 15968 0000CC9E 6A02                    	push 2
 15969 0000CCA0 E9A5300000              	jmp L_error_incorrect_arity_simple
 15970                                  .L_lambda_simple_arity_check_ok_007e:
 15971 0000CCA5 C8000000                	enter 0, 0
 15972 0000CCA9 488B4528                	mov rax, qword [rbp + 8 * (4 + 1)]
 15973 0000CCAD 50                      	push rax
 15974 0000CCAE 6A01                    	push 1
 15975 0000CCB0 488B0425[00000000]      	mov rax, qword [free_var_0]
 15976                                  	assert_closure(rax)
    42 0000CCB8 803805              <1>  cmp byte [%1], %2
    43 0000CCBB 0F85C9480000        <1>  jne L_error_incorrect_type
 15977 0000CCC1 FF7001                  	push SOB_CLOSURE_ENV(rax)
 15978 0000CCC4 FF5009                  	call SOB_CLOSURE_CODE(rax)
 15979 0000CCC7 483D[02000000]          	cmp rax, sob_boolean_false
 15980 0000CCCD 0F85E8000000            	jne .L_or_end_000b
 15981 0000CCD3 488B4528                	mov rax, qword [rbp + 8 * (4 + 1)]
 15982 0000CCD7 50                      	push rax
 15983 0000CCD8 6A01                    	push 1
 15984 0000CCDA 488B0425[80000000]      	mov rax, qword [free_var_16]
 15985                                  	assert_closure(rax)
    42 0000CCE2 803805              <1>  cmp byte [%1], %2
    43 0000CCE5 0F859F480000        <1>  jne L_error_incorrect_type
 15986 0000CCEB FF7001                  	push SOB_CLOSURE_ENV(rax)
 15987 0000CCEE FF5009                  	call SOB_CLOSURE_CODE(rax)
 15988 0000CCF1 50                      	push rax
 15989 0000CCF2 488B4520                	mov rax, qword [rbp + 8 * (4 + 0)]
 15990 0000CCF6 50                      	push rax
 15991 0000CCF7 6A02                    	push 2
 15992 0000CCF9 488B4510                	mov rax, qword [rbp + 8 * 2]
 15993 0000CCFD 488B4008                	mov rax, qword [rax + 8 * 1]
 15994 0000CD01 488B00                  	mov rax, qword [rax + 8 * 0]
 15995                                  	assert_closure(rax)
    42 0000CD04 803805              <1>  cmp byte [%1], %2
    43 0000CD07 0F857D480000        <1>  jne L_error_incorrect_type
 15996 0000CD0D FF7001                  	push SOB_CLOSURE_ENV(rax)
 15997 0000CD10 FF5009                  	call SOB_CLOSURE_CODE(rax)
 15998 0000CD13 483D[02000000]          	cmp rax, sob_boolean_false
 15999 0000CD19 0F8492000000                      	je .L_if_else_0045
 16000 0000CD1F 488B4528                          	mov rax, qword [rbp + 8 * (4 + 1)]
 16001 0000CD23 50                      	push rax
 16002 0000CD24 6A01                    	push 1
 16003 0000CD26 488B0425[88000000]      	mov rax, qword [free_var_17]
 16004                                  	assert_closure(rax)
    42 0000CD2E 803805              <1>  cmp byte [%1], %2
    43 0000CD31 0F8553480000        <1>  jne L_error_incorrect_type
 16005 0000CD37 FF7001                  	push SOB_CLOSURE_ENV(rax)
 16006 0000CD3A FF5009                  	call SOB_CLOSURE_CODE(rax)
 16007 0000CD3D 50                      	push rax
 16008 0000CD3E 488B4528                	mov rax, qword [rbp + 8 * (4 + 1)]
 16009 0000CD42 50                      	push rax
 16010 0000CD43 6A01                    	push 1
 16011 0000CD45 488B0425[80000000]      	mov rax, qword [free_var_16]
 16012                                  	assert_closure(rax)
    42 0000CD4D 803805              <1>  cmp byte [%1], %2
    43 0000CD50 0F8534480000        <1>  jne L_error_incorrect_type
 16013 0000CD56 FF7001                  	push SOB_CLOSURE_ENV(rax)
 16014 0000CD59 FF5009                  	call SOB_CLOSURE_CODE(rax)
 16015 0000CD5C 50                      	push rax
 16016 0000CD5D 6A02                    	push 2
 16017 0000CD5F 488B4510                	mov rax, qword [rbp + 8 * 2]
 16018 0000CD63 488B00                  	mov rax, qword [rax + 8 * 0]
 16019 0000CD66 488B00                  	mov rax, qword [rax + 8 * 0]
 16020 0000CD69 488B00                  	mov rax, qword [rax]
 16021                                  	assert_closure(rax)
    42 0000CD6C 803805              <1>  cmp byte [%1], %2
    43 0000CD6F 0F8515480000        <1>  jne L_error_incorrect_type
 16022 0000CD75 FF7001                  	push SOB_CLOSURE_ENV(rax)
 16023 0000CD78 FF7508                  	push qword [rbp + 8 * 1] ; old ret addr
 16024 0000CD7B FF7500                  	push qword [rbp] ; same the old rbp
 16025 0000CD7E BA05000000              	mov rdx, 2 + 3
 16026 0000CD83 488B4D18                	mov rcx, COUNT
 16027 0000CD87 488D4CCD20              	lea rcx, [rbp + 8*4 + rcx * 8]
 16028 0000CD8C 4889EF                  	mov rdi, rbp
 16029                                  .L_tc_recycle_frame_loop_0096:
 16030 0000CD8F 4883FA00                	cmp rdx, 0
 16031 0000CD93 7413                    	je .L_tc_recycle_frame_done_0096
 16032 0000CD95 4883E908                	sub rcx, 8
 16033 0000CD99 4883EF08                	sub rdi, 8
 16034 0000CD9D 488B37                  	mov rsi, [rdi]
 16035 0000CDA0 488931                  	mov qword [rcx], rsi
 16036 0000CDA3 48FFCA                  	dec rdx
 16037 0000CDA6 EBE7                    	jmp .L_tc_recycle_frame_loop_0096
 16038                                  .L_tc_recycle_frame_done_0096:
 16039 0000CDA8 5D                      	pop rbp ; restore the old rbp
 16040 0000CDA9 4889CC                  	mov rsp, rcx
 16041 0000CDAC FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 16042 0000CDAF EB0A                    	jmp .L_if_end_0045
 16043                                            .L_if_else_0045:
 16044 0000CDB1 48B8-                             	mov rax, L_constants + 2
 16044 0000CDB3 [0200000000000000] 
 16045                                  .L_if_end_0045:
 16046                                  .L_or_end_000b:
 16047 0000CDBB C9                      	leave
 16048 0000CDBC C22000                  	ret 8 * (2 + 2)
 16049                                  .L_lambda_simple_end_007e:	; new closure is in rax
 16050 0000CDBF 50                      	push rax
 16051 0000CDC0 488B4520                	mov rax, qword [rbp + 8 * (4 + 0)]
 16052 0000CDC4 8F00                    	pop qword [rax]
 16053 0000CDC6 48B8-                   	mov rax, sob_void
 16053 0000CDC8 [0000000000000000] 
 16054                                  
 16055 0000CDD0 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 16056 0000CDD5 E8B72F0000              	call malloc
 16057 0000CDDA 50                      	push rax
 16058 0000CDDB BF08000000              	mov rdi, 8 * 1	; new rib
 16059 0000CDE0 E8AC2F0000              	call malloc
 16060 0000CDE5 50                      	push rax
 16061 0000CDE6 BF28000000              	mov rdi, 8 * 5	; extended env
 16062 0000CDEB E8A12F0000              	call malloc
 16063 0000CDF0 488B7D10                	mov rdi, ENV
 16064 0000CDF4 BE00000000              	mov rsi, 0
 16065 0000CDF9 BA01000000              	mov rdx, 1
 16066                                  .L_lambda_opt_env_loop_0014:	; ext_env[i + 1] <-- env[i]
 16067 0000CDFE 4883FE04                	cmp rsi, 4
 16068 0000CE02 7410                    	je .L_lambda_opt_env_end_0014
 16069 0000CE04 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 16070 0000CE08 48890CD0                	mov qword [rax + 8 * rdx], rcx
 16071 0000CE0C 48FFC6                  	inc rsi
 16072 0000CE0F 48FFC2                  	inc rdx
 16073 0000CE12 EBEA                    	jmp .L_lambda_opt_env_loop_0014
 16074                                  .L_lambda_opt_env_end_0014:
 16075 0000CE14 5B                      	pop rbx
 16076 0000CE15 BE00000000              	mov rsi, 0
 16077                                  .L_lambda_opt_params_loop_0014:	; copy params
 16078 0000CE1A 4883FE01                	cmp rsi, 1
 16079 0000CE1E 740E                    	je .L_lambda_opt_params_end_0014
 16080 0000CE20 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 16081 0000CE25 488914F3                	mov qword [rbx + 8 * rsi], rdx
 16082 0000CE29 48FFC6                  	inc rsi
 16083 0000CE2C EBEC                    	jmp .L_lambda_opt_params_loop_0014
 16084                                  .L_lambda_opt_params_end_0014:
 16085 0000CE2E 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 16086 0000CE31 4889C3                  	mov rbx, rax
 16087 0000CE34 58                      	pop rax
 16088 0000CE35 C60005                  	mov byte [rax], T_closure
 16089 0000CE38 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 16090 0000CE3C 48C74009[49CE0000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_opt_code_0014
 16091 0000CE44 E936010000              	jmp .L_lambda_opt_end_0014
 16092                                  .L_lambda_opt_code_0014:	; lambda-opt body
 16093 0000CE49 48837C241001            	cmp qword [rsp + 8 * 2], 1
 16094 0000CE4F 740D                    	je .L_lambda_opt_arity_check_exact_0014
 16095 0000CE51 7F43                    	jg .L_lambda_opt_arity_check_more_0014
 16096 0000CE53 FF742410                	push qword [rsp + 8 * 2]
 16097 0000CE57 6A01                    	push 1
 16098 0000CE59 E9002F0000              	jmp L_error_incorrect_arity_opt
 16099                                  .L_lambda_opt_arity_check_exact_0014:
 16100 0000CE5E 48C744241002000000      	mov qword [rsp + 8 * 2], 2
 16101 0000CE67 BA04000000              	mov rdx, 4
 16102 0000CE6C FF3424                  	push qword [rsp]
 16103 0000CE6F BE01000000              	mov rsi, 1
 16104                                  .L_lambda_opt_stack_shrink_loop_003a:
 16105 0000CE74 4839D6                  	cmp rsi, rdx
 16106 0000CE77 7411                    	je .L_lambda_opt_stack_shrink_loop_exit_003a
 16107 0000CE79 488D5CF408              	lea rbx, [rsp + 8 + rsi * 8]
 16108 0000CE7E 488B0B                  	mov rcx, [rbx]
 16109 0000CE81 48894BF8                	mov qword [rbx - 8], rcx
 16110 0000CE85 48FFC6                  	inc rsi
 16111 0000CE88 EBEA                    	jmp .L_lambda_opt_stack_shrink_loop_003a
 16112                                  .L_lambda_opt_stack_shrink_loop_exit_003a:
 16113 0000CE8A 48C703[01000000]        	mov qword [rbx], sob_nil
 16114 0000CE91 E985000000              	jmp .L_lambda_opt_stack_adjusted_0014
 16115                                  .L_lambda_opt_arity_check_more_0014:
 16116 0000CE96 488B542410              	mov rdx, qword [rsp + 8 * 2]
 16117 0000CE9B 4883EA01                	sub rdx, 1
 16118 0000CE9F 48C744241002000000      	mov qword [rsp + 8 * 2], 2
 16119 0000CEA8 BE00000000              	mov rsi, 0
 16120 0000CEAD 488D5CD418              	lea rbx, [rsp + 2 * 8 + 1 * 8 + rdx * 8]
 16121 0000CEB2 48B9-                   	mov rcx, sob_nil
 16121 0000CEB4 [0100000000000000] 
 16122                                  .L_lambda_opt_stack_shrink_loop_003b:
 16123 0000CEBC 4839D6                  	cmp rsi, rdx
 16124 0000CEBF 7427                    je .L_lambda_opt_stack_shrink_loop_exit_003b
 16125 0000CEC1 BF11000000              	mov rdi, 17 ; 1+8+8
 16126 0000CEC6 E8C62E0000              	call malloc
 16127 0000CECB 48894809                	mov SOB_PAIR_CDR(rax), rcx
 16128 0000CECF 48F7DE                  	neg rsi
 16129 0000CED2 488B0CF3                	mov rcx, qword [rbx + rsi * 8]
 16130 0000CED6 48F7DE                  	neg rsi
 16131 0000CED9 48894801                	mov SOB_PAIR_CAR(rax), rcx
 16132 0000CEDD C60021                  	mov byte [rax], T_pair
 16133 0000CEE0 4889C1                  	mov rcx, rax
 16134 0000CEE3 48FFC6                  	inc rsi
 16135 0000CEE6 EBD4                    	jmp .L_lambda_opt_stack_shrink_loop_003b
 16136                                  .L_lambda_opt_stack_shrink_loop_exit_003b:
 16137 0000CEE8 48890B                  	mov qword [rbx], rcx
 16138 0000CEEB 4883EB08                	sub rbx, 8
 16139 0000CEEF 4889E7                  	mov rdi, rsp
 16140 0000CEF2 4883C718                	add rdi, 24
 16141 0000CEF6 BE04000000              	mov rsi, 4
 16142                                  .L_lambda_opt_stack_shrink_loop_003c:
 16143 0000CEFB 4883FE00                	cmp rsi,0
 16144 0000CEFF 7413                    	je .L_lambda_opt_stack_shrink_loop_exit_003c
 16145 0000CF01 488B0F                  	mov rcx, qword [rdi]
 16146 0000CF04 48890B                  	mov [rbx], rcx
 16147 0000CF07 48FFCE                  	dec rsi
 16148 0000CF0A 4883EB08                	sub rbx, 8
 16149 0000CF0E 4883EF08                	sub rdi, 8
 16150 0000CF12 EBE7                    	jmp .L_lambda_opt_stack_shrink_loop_003c
 16151                                  .L_lambda_opt_stack_shrink_loop_exit_003c:
 16152 0000CF14 4883C308                	add rbx, 8
 16153 0000CF18 4889DC                  	mov rsp, rbx
 16154                                  .L_lambda_opt_stack_adjusted_0014:
 16155 0000CF1B C8000000                	enter 0, 0
 16156 0000CF1F 488B4528                	mov rax, qword [rbp + 8 * (4 + 1)]
 16157 0000CF23 50                      	push rax
 16158 0000CF24 488B4520                	mov rax, qword [rbp + 8 * (4 + 0)]
 16159 0000CF28 50                      	push rax
 16160 0000CF29 6A02                    	push 2
 16161 0000CF2B 488B4510                	mov rax, qword [rbp + 8 * 2]
 16162 0000CF2F 488B00                  	mov rax, qword [rax + 8 * 0]
 16163 0000CF32 488B00                  	mov rax, qword [rax + 8 * 0]
 16164 0000CF35 488B00                  	mov rax, qword [rax]
 16165                                  	assert_closure(rax)
    42 0000CF38 803805              <1>  cmp byte [%1], %2
    43 0000CF3B 0F8549460000        <1>  jne L_error_incorrect_type
 16166 0000CF41 FF7001                  	push SOB_CLOSURE_ENV(rax)
 16167 0000CF44 FF7508                  	push qword [rbp + 8 * 1] ; old ret addr
 16168 0000CF47 FF7500                  	push qword [rbp] ; same the old rbp
 16169 0000CF4A BA05000000              	mov rdx, 2 + 3
 16170 0000CF4F 488B4D18                	mov rcx, COUNT
 16171 0000CF53 488D4CCD20              	lea rcx, [rbp + 8*4 + rcx * 8]
 16172 0000CF58 4889EF                  	mov rdi, rbp
 16173                                  .L_tc_recycle_frame_loop_0097:
 16174 0000CF5B 4883FA00                	cmp rdx, 0
 16175 0000CF5F 7413                    	je .L_tc_recycle_frame_done_0097
 16176 0000CF61 4883E908                	sub rcx, 8
 16177 0000CF65 4883EF08                	sub rdi, 8
 16178 0000CF69 488B37                  	mov rsi, [rdi]
 16179 0000CF6C 488931                  	mov qword [rcx], rsi
 16180 0000CF6F 48FFCA                  	dec rdx
 16181 0000CF72 EBE7                    	jmp .L_tc_recycle_frame_loop_0097
 16182                                  .L_tc_recycle_frame_done_0097:
 16183 0000CF74 5D                      	pop rbp ; restore the old rbp
 16184 0000CF75 4889CC                  	mov rsp, rcx
 16185 0000CF78 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 16186 0000CF7B C9                      	leave
 16187 0000CF7C C22000                  	ret 8 * (2 + 2)
 16188                                  .L_lambda_opt_end_0014:	; new closure is in rax
 16189 0000CF7F C9                      	leave
 16190 0000CF80 C21800                  	ret 8 * (2 + 1)
 16191                                  .L_lambda_simple_end_007d:	; new closure is in rax
 16192                                  	assert_closure(rax)
    42 0000CF83 803805              <1>  cmp byte [%1], %2
    43 0000CF86 0F85FE450000        <1>  jne L_error_incorrect_type
 16193 0000CF8C FF7001                  	push SOB_CLOSURE_ENV(rax)
 16194 0000CF8F FF7508                  	push qword [rbp + 8 * 1] ; old ret addr
 16195 0000CF92 FF7500                  	push qword [rbp] ; same the old rbp
 16196 0000CF95 BA04000000              	mov rdx, 1 + 3
 16197 0000CF9A 488B4D18                	mov rcx, COUNT
 16198 0000CF9E 488D4CCD20              	lea rcx, [rbp + 8*4 + rcx * 8]
 16199 0000CFA3 4889EF                  	mov rdi, rbp
 16200                                  .L_tc_recycle_frame_loop_0095:
 16201 0000CFA6 4883FA00                	cmp rdx, 0
 16202 0000CFAA 7413                    	je .L_tc_recycle_frame_done_0095
 16203 0000CFAC 4883E908                	sub rcx, 8
 16204 0000CFB0 4883EF08                	sub rdi, 8
 16205 0000CFB4 488B37                  	mov rsi, [rdi]
 16206 0000CFB7 488931                  	mov qword [rcx], rsi
 16207 0000CFBA 48FFCA                  	dec rdx
 16208 0000CFBD EBE7                    	jmp .L_tc_recycle_frame_loop_0095
 16209                                  .L_tc_recycle_frame_done_0095:
 16210 0000CFBF 5D                      	pop rbp ; restore the old rbp
 16211 0000CFC0 4889CC                  	mov rsp, rcx
 16212 0000CFC3 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 16213 0000CFC6 C9                      	leave
 16214 0000CFC7 C21800                  	ret 8 * (2 + 1)
 16215                                  .L_lambda_simple_end_007c:	; new closure is in rax
 16216                                  	assert_closure(rax)
    42 0000CFCA 803805              <1>  cmp byte [%1], %2
    43 0000CFCD 0F85B7450000        <1>  jne L_error_incorrect_type
 16217 0000CFD3 FF7001                  	push SOB_CLOSURE_ENV(rax)
 16218 0000CFD6 FF7508                  	push qword [rbp + 8 * 1] ; old ret addr
 16219 0000CFD9 FF7500                  	push qword [rbp] ; same the old rbp
 16220 0000CFDC BA04000000              	mov rdx, 1 + 3
 16221 0000CFE1 488B4D18                	mov rcx, COUNT
 16222 0000CFE5 488D4CCD20              	lea rcx, [rbp + 8*4 + rcx * 8]
 16223 0000CFEA 4889EF                  	mov rdi, rbp
 16224                                  .L_tc_recycle_frame_loop_0094:
 16225 0000CFED 4883FA00                	cmp rdx, 0
 16226 0000CFF1 7413                    	je .L_tc_recycle_frame_done_0094
 16227 0000CFF3 4883E908                	sub rcx, 8
 16228 0000CFF7 4883EF08                	sub rdi, 8
 16229 0000CFFB 488B37                  	mov rsi, [rdi]
 16230 0000CFFE 488931                  	mov qword [rcx], rsi
 16231 0000D001 48FFCA                  	dec rdx
 16232 0000D004 EBE7                    	jmp .L_tc_recycle_frame_loop_0094
 16233                                  .L_tc_recycle_frame_done_0094:
 16234 0000D006 5D                      	pop rbp ; restore the old rbp
 16235 0000D007 4889CC                  	mov rsp, rcx
 16236 0000D00A FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 16237 0000D00D C9                      	leave
 16238 0000D00E C21800                  	ret 8 * (2 + 1)
 16239                                  .L_lambda_simple_end_007a:	; new closure is in rax
 16240                                  	assert_closure(rax)
    42 0000D011 803805              <1>  cmp byte [%1], %2
    43 0000D014 0F8570450000        <1>  jne L_error_incorrect_type
 16241 0000D01A FF7001                  	push SOB_CLOSURE_ENV(rax)
 16242 0000D01D FF7508                  	push qword [rbp + 8 * 1] ; old ret addr
 16243 0000D020 FF7500                  	push qword [rbp] ; same the old rbp
 16244 0000D023 BA04000000              	mov rdx, 1 + 3
 16245 0000D028 488B4D18                	mov rcx, COUNT
 16246 0000D02C 488D4CCD20              	lea rcx, [rbp + 8*4 + rcx * 8]
 16247 0000D031 4889EF                  	mov rdi, rbp
 16248                                  .L_tc_recycle_frame_loop_0092:
 16249 0000D034 4883FA00                	cmp rdx, 0
 16250 0000D038 7413                    	je .L_tc_recycle_frame_done_0092
 16251 0000D03A 4883E908                	sub rcx, 8
 16252 0000D03E 4883EF08                	sub rdi, 8
 16253 0000D042 488B37                  	mov rsi, [rdi]
 16254 0000D045 488931                  	mov qword [rcx], rsi
 16255 0000D048 48FFCA                  	dec rdx
 16256 0000D04B EBE7                    	jmp .L_tc_recycle_frame_loop_0092
 16257                                  .L_tc_recycle_frame_done_0092:
 16258 0000D04D 5D                      	pop rbp ; restore the old rbp
 16259 0000D04E 4889CC                  	mov rsp, rcx
 16260 0000D051 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 16261 0000D054 C9                      	leave
 16262 0000D055 C21800                  	ret 8 * (2 + 1)
 16263                                  .L_lambda_simple_end_0079:	; new closure is in rax
 16264 0000D058 50                      	push rax
 16265 0000D059 6A01                    	push 1
 16266 0000D05B BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 16267 0000D060 E82C2D0000              	call malloc
 16268 0000D065 50                      	push rax
 16269 0000D066 BF00000000              	mov rdi, 8 * 0	; new rib
 16270 0000D06B E8212D0000              	call malloc
 16271 0000D070 50                      	push rax
 16272 0000D071 BF08000000              	mov rdi, 8 * 1	; extended env
 16273 0000D076 E8162D0000              	call malloc
 16274 0000D07B 488B7D10                	mov rdi, ENV
 16275 0000D07F BE00000000              	mov rsi, 0
 16276 0000D084 BA01000000              	mov rdx, 1
 16277                                  .L_lambda_simple_env_loop_0078:	; ext_env[i + 1] <-- env[i]
 16278 0000D089 4883FE00                	cmp rsi, 0
 16279 0000D08D 7410                    	je .L_lambda_simple_env_end_0078
 16280 0000D08F 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 16281 0000D093 48890CD0                	mov qword [rax + 8 * rdx], rcx
 16282 0000D097 48FFC6                  	inc rsi
 16283 0000D09A 48FFC2                  	inc rdx
 16284 0000D09D EBEA                    	jmp .L_lambda_simple_env_loop_0078
 16285                                  .L_lambda_simple_env_end_0078:
 16286 0000D09F 5B                      	pop rbx
 16287 0000D0A0 BE00000000              	mov rsi, 0
 16288                                  .L_lambda_simple_params_loop_0078:	; copy params
 16289 0000D0A5 4883FE00                	cmp rsi, 0
 16290 0000D0A9 740E                    	je .L_lambda_simple_params_end_0078
 16291 0000D0AB 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 16292 0000D0B0 488914F3                	mov qword [rbx + 8 * rsi], rdx
 16293 0000D0B4 48FFC6                  	inc rsi
 16294 0000D0B7 EBEC                    	jmp .L_lambda_simple_params_loop_0078
 16295                                  .L_lambda_simple_params_end_0078:
 16296 0000D0B9 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 16297 0000D0BC 4889C3                  	mov rbx, rax
 16298 0000D0BF 58                      	pop rax
 16299 0000D0C0 C60005                  	mov byte [rax], T_closure
 16300 0000D0C3 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 16301 0000D0C7 48C74009[D1D00000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0078
 16302 0000D0CF EB7B                    	jmp .L_lambda_simple_end_0078
 16303                                  .L_lambda_simple_code_0078:	; lambda-simple body
 16304 0000D0D1 48837C241001            	cmp qword [rsp + 8 * 2], 1
 16305 0000D0D7 740B                    	je .L_lambda_simple_arity_check_ok_0078
 16306 0000D0D9 FF742410                	push qword [rsp + 8 * 2]
 16307 0000D0DD 6A01                    	push 1
 16308 0000D0DF E9662C0000              	jmp L_error_incorrect_arity_simple
 16309                                  .L_lambda_simple_arity_check_ok_0078:
 16310 0000D0E4 C8000000                	enter 0, 0
 16311 0000D0E8 488B0425[70030000]      	mov rax, qword [free_var_110]
 16312 0000D0F0 50                      	push rax
 16313 0000D0F1 6A01                    	push 1
 16314 0000D0F3 488B4520                	mov rax, qword [rbp + 8 * (4 + 0)]
 16315                                  	assert_closure(rax)
    42 0000D0F7 803805              <1>  cmp byte [%1], %2
    43 0000D0FA 0F858A440000        <1>  jne L_error_incorrect_type
 16316 0000D100 FF7001                  	push SOB_CLOSURE_ENV(rax)
 16317 0000D103 FF5009                  	call SOB_CLOSURE_CODE(rax)
 16318 0000D106 48890425[F0030000]      	mov qword [free_var_126], rax
 16319 0000D10E 48B8-                   	mov rax, sob_void
 16319 0000D110 [0000000000000000] 
 16320                                  
 16321 0000D118 488B0425[A8030000]      	mov rax, qword [free_var_117]
 16322 0000D120 50                      	push rax
 16323 0000D121 6A01                    	push 1
 16324 0000D123 488B4520                	mov rax, qword [rbp + 8 * (4 + 0)]
 16325                                  	assert_closure(rax)
    42 0000D127 803805              <1>  cmp byte [%1], %2
    43 0000D12A 0F855A440000        <1>  jne L_error_incorrect_type
 16326 0000D130 FF7001                  	push SOB_CLOSURE_ENV(rax)
 16327 0000D133 FF5009                  	call SOB_CLOSURE_CODE(rax)
 16328 0000D136 48890425[18040000]      	mov qword [free_var_131], rax
 16329 0000D13E 48B8-                   	mov rax, sob_void
 16329 0000D140 [0000000000000000] 
 16330 0000D148 C9                      	leave
 16331 0000D149 C21800                  	ret 8 * (2 + 1)
 16332                                  .L_lambda_simple_end_0078:	; new closure is in rax
 16333                                  	assert_closure(rax)
    42 0000D14C 803805              <1>  cmp byte [%1], %2
    43 0000D14F 0F8535440000        <1>  jne L_error_incorrect_type
 16334 0000D155 FF7001                  	push SOB_CLOSURE_ENV(rax)
 16335 0000D158 FF5009                  	call SOB_CLOSURE_CODE(rax)
 16336                                  
 16337 0000D15B 4889C7                  	mov rdi, rax
 16338 0000D15E E83F2C0000              	call print_sexpr_if_not_void
 16339                                  
 16340 0000D163 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 16341 0000D168 E8242C0000              	call malloc
 16342 0000D16D 50                      	push rax
 16343 0000D16E BF00000000              	mov rdi, 8 * 0	; new rib
 16344 0000D173 E8192C0000              	call malloc
 16345 0000D178 50                      	push rax
 16346 0000D179 BF08000000              	mov rdi, 8 * 1	; extended env
 16347 0000D17E E80E2C0000              	call malloc
 16348 0000D183 488B7D10                	mov rdi, ENV
 16349 0000D187 BE00000000              	mov rsi, 0
 16350 0000D18C BA01000000              	mov rdx, 1
 16351                                  .L_lambda_simple_env_loop_0081:	; ext_env[i + 1] <-- env[i]
 16352 0000D191 4883FE00                	cmp rsi, 0
 16353 0000D195 7410                    	je .L_lambda_simple_env_end_0081
 16354 0000D197 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 16355 0000D19B 48890CD0                	mov qword [rax + 8 * rdx], rcx
 16356 0000D19F 48FFC6                  	inc rsi
 16357 0000D1A2 48FFC2                  	inc rdx
 16358 0000D1A5 EBEA                    	jmp .L_lambda_simple_env_loop_0081
 16359                                  .L_lambda_simple_env_end_0081:
 16360 0000D1A7 5B                      	pop rbx
 16361 0000D1A8 BE00000000              	mov rsi, 0
 16362                                  .L_lambda_simple_params_loop_0081:	; copy params
 16363 0000D1AD 4883FE00                	cmp rsi, 0
 16364 0000D1B1 740E                    	je .L_lambda_simple_params_end_0081
 16365 0000D1B3 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 16366 0000D1B8 488914F3                	mov qword [rbx + 8 * rsi], rdx
 16367 0000D1BC 48FFC6                  	inc rsi
 16368 0000D1BF EBEC                    	jmp .L_lambda_simple_params_loop_0081
 16369                                  .L_lambda_simple_params_end_0081:
 16370 0000D1C1 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 16371 0000D1C4 4889C3                  	mov rbx, rax
 16372 0000D1C7 58                      	pop rax
 16373 0000D1C8 C60005                  	mov byte [rax], T_closure
 16374 0000D1CB 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 16375 0000D1CF 48C74009[DCD10000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0081
 16376 0000D1D7 E9E1000000              	jmp .L_lambda_simple_end_0081
 16377                                  .L_lambda_simple_code_0081:	; lambda-simple body
 16378 0000D1DC 48837C241001            	cmp qword [rsp + 8 * 2], 1
 16379 0000D1E2 740B                    	je .L_lambda_simple_arity_check_ok_0081
 16380 0000D1E4 FF742410                	push qword [rsp + 8 * 2]
 16381 0000D1E8 6A01                    	push 1
 16382 0000D1EA E95B2B0000              	jmp L_error_incorrect_arity_simple
 16383                                  .L_lambda_simple_arity_check_ok_0081:
 16384 0000D1EF C8000000                	enter 0, 0
 16385 0000D1F3 488B4520                	mov rax, qword [rbp + 8 * (4 + 0)]
 16386 0000D1F7 50                      	push rax
 16387 0000D1F8 6A01                    	push 1
 16388 0000D1FA 488B0425[00000000]      	mov rax, qword [free_var_0]
 16389                                  	assert_closure(rax)
    42 0000D202 803805              <1>  cmp byte [%1], %2
    43 0000D205 0F857F430000        <1>  jne L_error_incorrect_type
 16390 0000D20B FF7001                  	push SOB_CLOSURE_ENV(rax)
 16391 0000D20E FF5009                  	call SOB_CLOSURE_CODE(rax)
 16392 0000D211 483D[02000000]          	cmp rax, sob_boolean_false
 16393 0000D217 740F                              	je .L_if_else_0047
 16394 0000D219 48B8-                             	mov rax, L_constants + 32
 16394 0000D21B [2000000000000000] 
 16395 0000D223 E991000000              	jmp .L_if_end_0047
 16396                                            .L_if_else_0047:
 16397 0000D228 488B4520                          	mov rax, qword [rbp + 8 * (4 + 0)]
 16398 0000D22C 50                      	push rax
 16399 0000D22D 6A01                    	push 1
 16400 0000D22F 488B0425[88000000]      	mov rax, qword [free_var_17]
 16401                                  	assert_closure(rax)
    42 0000D237 803805              <1>  cmp byte [%1], %2
    43 0000D23A 0F854A430000        <1>  jne L_error_incorrect_type
 16402 0000D240 FF7001                  	push SOB_CLOSURE_ENV(rax)
 16403 0000D243 FF5009                  	call SOB_CLOSURE_CODE(rax)
 16404 0000D246 50                      	push rax
 16405 0000D247 6A01                    	push 1
 16406 0000D249 488B0425[30040000]      	mov rax, qword [free_var_134]
 16407                                  	assert_closure(rax)
    42 0000D251 803805              <1>  cmp byte [%1], %2
    43 0000D254 0F8530430000        <1>  jne L_error_incorrect_type
 16408 0000D25A FF7001                  	push SOB_CLOSURE_ENV(rax)
 16409 0000D25D FF5009                  	call SOB_CLOSURE_CODE(rax)
 16410 0000D260 50                      	push rax
 16411 0000D261 48B8-                   	mov rax, L_constants + 128
 16411 0000D263 [8000000000000000] 
 16412 0000D26B 50                      	push rax
 16413 0000D26C 6A02                    	push 2
 16414 0000D26E 488B0425[08030000]      	mov rax, qword [free_var_97]
 16415                                  	assert_closure(rax)
    42 0000D276 803805              <1>  cmp byte [%1], %2
    43 0000D279 0F850B430000        <1>  jne L_error_incorrect_type
 16416 0000D27F FF7001                  	push SOB_CLOSURE_ENV(rax)
 16417 0000D282 FF7508                  	push qword [rbp + 8 * 1] ; old ret addr
 16418 0000D285 FF7500                  	push qword [rbp] ; same the old rbp
 16419 0000D288 BA05000000              	mov rdx, 2 + 3
 16420 0000D28D 488B4D18                	mov rcx, COUNT
 16421 0000D291 488D4CCD20              	lea rcx, [rbp + 8*4 + rcx * 8]
 16422 0000D296 4889EF                  	mov rdi, rbp
 16423                                  .L_tc_recycle_frame_loop_009a:
 16424 0000D299 4883FA00                	cmp rdx, 0
 16425 0000D29D 7413                    	je .L_tc_recycle_frame_done_009a
 16426 0000D29F 4883E908                	sub rcx, 8
 16427 0000D2A3 4883EF08                	sub rdi, 8
 16428 0000D2A7 488B37                  	mov rsi, [rdi]
 16429 0000D2AA 488931                  	mov qword [rcx], rsi
 16430 0000D2AD 48FFCA                  	dec rdx
 16431 0000D2B0 EBE7                    	jmp .L_tc_recycle_frame_loop_009a
 16432                                  .L_tc_recycle_frame_done_009a:
 16433 0000D2B2 5D                      	pop rbp ; restore the old rbp
 16434 0000D2B3 4889CC                  	mov rsp, rcx
 16435 0000D2B6 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 16436                                  .L_if_end_0047:
 16437 0000D2B9 C9                      	leave
 16438 0000D2BA C21800                  	ret 8 * (2 + 1)
 16439                                  .L_lambda_simple_end_0081:	; new closure is in rax
 16440 0000D2BD 48890425[30040000]      	mov qword [free_var_134], rax
 16441 0000D2C5 48B8-                   	mov rax, sob_void
 16441 0000D2C7 [0000000000000000] 
 16442                                  
 16443 0000D2CF 4889C7                  	mov rdi, rax
 16444 0000D2D2 E8CB2A0000              	call print_sexpr_if_not_void
 16445                                  
 16446 0000D2D7 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 16447 0000D2DC E8B02A0000              	call malloc
 16448 0000D2E1 50                      	push rax
 16449 0000D2E2 BF00000000              	mov rdi, 8 * 0	; new rib
 16450 0000D2E7 E8A52A0000              	call malloc
 16451 0000D2EC 50                      	push rax
 16452 0000D2ED BF08000000              	mov rdi, 8 * 1	; extended env
 16453 0000D2F2 E89A2A0000              	call malloc
 16454 0000D2F7 488B7D10                	mov rdi, ENV
 16455 0000D2FB BE00000000              	mov rsi, 0
 16456 0000D300 BA01000000              	mov rdx, 1
 16457                                  .L_lambda_simple_env_loop_0082:	; ext_env[i + 1] <-- env[i]
 16458 0000D305 4883FE00                	cmp rsi, 0
 16459 0000D309 7410                    	je .L_lambda_simple_env_end_0082
 16460 0000D30B 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 16461 0000D30F 48890CD0                	mov qword [rax + 8 * rdx], rcx
 16462 0000D313 48FFC6                  	inc rsi
 16463 0000D316 48FFC2                  	inc rdx
 16464 0000D319 EBEA                    	jmp .L_lambda_simple_env_loop_0082
 16465                                  .L_lambda_simple_env_end_0082:
 16466 0000D31B 5B                      	pop rbx
 16467 0000D31C BE00000000              	mov rsi, 0
 16468                                  .L_lambda_simple_params_loop_0082:	; copy params
 16469 0000D321 4883FE00                	cmp rsi, 0
 16470 0000D325 740E                    	je .L_lambda_simple_params_end_0082
 16471 0000D327 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 16472 0000D32C 488914F3                	mov qword [rbx + 8 * rsi], rdx
 16473 0000D330 48FFC6                  	inc rsi
 16474 0000D333 EBEC                    	jmp .L_lambda_simple_params_loop_0082
 16475                                  .L_lambda_simple_params_end_0082:
 16476 0000D335 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 16477 0000D338 4889C3                  	mov rbx, rax
 16478 0000D33B 58                      	pop rax
 16479 0000D33C C60005                  	mov byte [rax], T_closure
 16480 0000D33F 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 16481 0000D343 48C74009[50D30000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0082
 16482 0000D34B E9E3000000              	jmp .L_lambda_simple_end_0082
 16483                                  .L_lambda_simple_code_0082:	; lambda-simple body
 16484 0000D350 48837C241001            	cmp qword [rsp + 8 * 2], 1
 16485 0000D356 740B                    	je .L_lambda_simple_arity_check_ok_0082
 16486 0000D358 FF742410                	push qword [rsp + 8 * 2]
 16487 0000D35C 6A01                    	push 1
 16488 0000D35E E9E7290000              	jmp L_error_incorrect_arity_simple
 16489                                  .L_lambda_simple_arity_check_ok_0082:
 16490 0000D363 C8000000                	enter 0, 0
 16491 0000D367 488B4520                	mov rax, qword [rbp + 8 * (4 + 0)]
 16492 0000D36B 50                      	push rax
 16493 0000D36C 6A01                    	push 1
 16494 0000D36E 488B0425[00000000]      	mov rax, qword [free_var_0]
 16495                                  	assert_closure(rax)
    42 0000D376 803805              <1>  cmp byte [%1], %2
    43 0000D379 0F850B420000        <1>  jne L_error_incorrect_type
 16496 0000D37F FF7001                  	push SOB_CLOSURE_ENV(rax)
 16497 0000D382 FF5009                  	call SOB_CLOSURE_CODE(rax)
 16498 0000D385 483D[02000000]          	cmp rax, sob_boolean_false
 16499 0000D38B 0F859E000000            	jne .L_or_end_000c
 16500 0000D391 488B4520                	mov rax, qword [rbp + 8 * (4 + 0)]
 16501 0000D395 50                      	push rax
 16502 0000D396 6A01                    	push 1
 16503 0000D398 488B0425[08000000]      	mov rax, qword [free_var_1]
 16504                                  	assert_closure(rax)
    42 0000D3A0 803805              <1>  cmp byte [%1], %2
    43 0000D3A3 0F85E1410000        <1>  jne L_error_incorrect_type
 16505 0000D3A9 FF7001                  	push SOB_CLOSURE_ENV(rax)
 16506 0000D3AC FF5009                  	call SOB_CLOSURE_CODE(rax)
 16507 0000D3AF 483D[02000000]          	cmp rax, sob_boolean_false
 16508 0000D3B5 746E                              	je .L_if_else_0048
 16509 0000D3B7 488B4520                          	mov rax, qword [rbp + 8 * (4 + 0)]
 16510 0000D3BB 50                      	push rax
 16511 0000D3BC 6A01                    	push 1
 16512 0000D3BE 488B0425[88000000]      	mov rax, qword [free_var_17]
 16513                                  	assert_closure(rax)
    42 0000D3C6 803805              <1>  cmp byte [%1], %2
    43 0000D3C9 0F85BB410000        <1>  jne L_error_incorrect_type
 16514 0000D3CF FF7001                  	push SOB_CLOSURE_ENV(rax)
 16515 0000D3D2 FF5009                  	call SOB_CLOSURE_CODE(rax)
 16516 0000D3D5 50                      	push rax
 16517 0000D3D6 6A01                    	push 1
 16518 0000D3D8 488B0425[A0020000]      	mov rax, qword [free_var_84]
 16519                                  	assert_closure(rax)
    42 0000D3E0 803805              <1>  cmp byte [%1], %2
    43 0000D3E3 0F85A1410000        <1>  jne L_error_incorrect_type
 16520 0000D3E9 FF7001                  	push SOB_CLOSURE_ENV(rax)
 16521 0000D3EC FF7508                  	push qword [rbp + 8 * 1] ; old ret addr
 16522 0000D3EF FF7500                  	push qword [rbp] ; same the old rbp
 16523 0000D3F2 BA04000000              	mov rdx, 1 + 3
 16524 0000D3F7 488B4D18                	mov rcx, COUNT
 16525 0000D3FB 488D4CCD20              	lea rcx, [rbp + 8*4 + rcx * 8]
 16526 0000D400 4889EF                  	mov rdi, rbp
 16527                                  .L_tc_recycle_frame_loop_009b:
 16528 0000D403 4883FA00                	cmp rdx, 0
 16529 0000D407 7413                    	je .L_tc_recycle_frame_done_009b
 16530 0000D409 4883E908                	sub rcx, 8
 16531 0000D40D 4883EF08                	sub rdi, 8
 16532 0000D411 488B37                  	mov rsi, [rdi]
 16533 0000D414 488931                  	mov qword [rcx], rsi
 16534 0000D417 48FFCA                  	dec rdx
 16535 0000D41A EBE7                    	jmp .L_tc_recycle_frame_loop_009b
 16536                                  .L_tc_recycle_frame_done_009b:
 16537 0000D41C 5D                      	pop rbp ; restore the old rbp
 16538 0000D41D 4889CC                  	mov rsp, rcx
 16539 0000D420 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 16540 0000D423 EB0A                    	jmp .L_if_end_0048
 16541                                            .L_if_else_0048:
 16542 0000D425 48B8-                             	mov rax, L_constants + 2
 16542 0000D427 [0200000000000000] 
 16543                                  .L_if_end_0048:
 16544                                  .L_or_end_000c:
 16545 0000D42F C9                      	leave
 16546 0000D430 C21800                  	ret 8 * (2 + 1)
 16547                                  .L_lambda_simple_end_0082:	; new closure is in rax
 16548 0000D433 48890425[A0020000]      	mov qword [free_var_84], rax
 16549 0000D43B 48B8-                   	mov rax, sob_void
 16549 0000D43D [0000000000000000] 
 16550                                  
 16551 0000D445 4889C7                  	mov rdi, rax
 16552 0000D448 E855290000              	call print_sexpr_if_not_void
 16553                                  
 16554 0000D44D 488B0425[98010000]      	mov rax, qword [free_var_51]
 16555 0000D455 50                      	push rax
 16556 0000D456 6A01                    	push 1
 16557 0000D458 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 16558 0000D45D E82F290000              	call malloc
 16559 0000D462 50                      	push rax
 16560 0000D463 BF00000000              	mov rdi, 8 * 0	; new rib
 16561 0000D468 E824290000              	call malloc
 16562 0000D46D 50                      	push rax
 16563 0000D46E BF08000000              	mov rdi, 8 * 1	; extended env
 16564 0000D473 E819290000              	call malloc
 16565 0000D478 488B7D10                	mov rdi, ENV
 16566 0000D47C BE00000000              	mov rsi, 0
 16567 0000D481 BA01000000              	mov rdx, 1
 16568                                  .L_lambda_simple_env_loop_0083:	; ext_env[i + 1] <-- env[i]
 16569 0000D486 4883FE00                	cmp rsi, 0
 16570 0000D48A 7410                    	je .L_lambda_simple_env_end_0083
 16571 0000D48C 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 16572 0000D490 48890CD0                	mov qword [rax + 8 * rdx], rcx
 16573 0000D494 48FFC6                  	inc rsi
 16574 0000D497 48FFC2                  	inc rdx
 16575 0000D49A EBEA                    	jmp .L_lambda_simple_env_loop_0083
 16576                                  .L_lambda_simple_env_end_0083:
 16577 0000D49C 5B                      	pop rbx
 16578 0000D49D BE00000000              	mov rsi, 0
 16579                                  .L_lambda_simple_params_loop_0083:	; copy params
 16580 0000D4A2 4883FE00                	cmp rsi, 0
 16581 0000D4A6 740E                    	je .L_lambda_simple_params_end_0083
 16582 0000D4A8 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 16583 0000D4AD 488914F3                	mov qword [rbx + 8 * rsi], rdx
 16584 0000D4B1 48FFC6                  	inc rsi
 16585 0000D4B4 EBEC                    	jmp .L_lambda_simple_params_loop_0083
 16586                                  .L_lambda_simple_params_end_0083:
 16587 0000D4B6 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 16588 0000D4B9 4889C3                  	mov rbx, rax
 16589 0000D4BC 58                      	pop rax
 16590 0000D4BD C60005                  	mov byte [rax], T_closure
 16591 0000D4C0 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 16592 0000D4C4 48C74009[D1D40000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0083
 16593 0000D4CC E99B030000              	jmp .L_lambda_simple_end_0083
 16594                                  .L_lambda_simple_code_0083:	; lambda-simple body
 16595 0000D4D1 48837C241001            	cmp qword [rsp + 8 * 2], 1
 16596 0000D4D7 740B                    	je .L_lambda_simple_arity_check_ok_0083
 16597 0000D4D9 FF742410                	push qword [rsp + 8 * 2]
 16598 0000D4DD 6A01                    	push 1
 16599 0000D4DF E966280000              	jmp L_error_incorrect_arity_simple
 16600                                  .L_lambda_simple_arity_check_ok_0083:
 16601 0000D4E4 C8000000                	enter 0, 0
 16602 0000D4E8 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 16603 0000D4ED E89F280000              	call malloc
 16604 0000D4F2 50                      	push rax
 16605 0000D4F3 BF08000000              	mov rdi, 8 * 1	; new rib
 16606 0000D4F8 E894280000              	call malloc
 16607 0000D4FD 50                      	push rax
 16608 0000D4FE BF10000000              	mov rdi, 8 * 2	; extended env
 16609 0000D503 E889280000              	call malloc
 16610 0000D508 488B7D10                	mov rdi, ENV
 16611 0000D50C BE00000000              	mov rsi, 0
 16612 0000D511 BA01000000              	mov rdx, 1
 16613                                  .L_lambda_opt_env_loop_0015:	; ext_env[i + 1] <-- env[i]
 16614 0000D516 4883FE01                	cmp rsi, 1
 16615 0000D51A 7410                    	je .L_lambda_opt_env_end_0015
 16616 0000D51C 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 16617 0000D520 48890CD0                	mov qword [rax + 8 * rdx], rcx
 16618 0000D524 48FFC6                  	inc rsi
 16619 0000D527 48FFC2                  	inc rdx
 16620 0000D52A EBEA                    	jmp .L_lambda_opt_env_loop_0015
 16621                                  .L_lambda_opt_env_end_0015:
 16622 0000D52C 5B                      	pop rbx
 16623 0000D52D BE00000000              	mov rsi, 0
 16624                                  .L_lambda_opt_params_loop_0015:	; copy params
 16625 0000D532 4883FE01                	cmp rsi, 1
 16626 0000D536 740E                    	je .L_lambda_opt_params_end_0015
 16627 0000D538 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 16628 0000D53D 488914F3                	mov qword [rbx + 8 * rsi], rdx
 16629 0000D541 48FFC6                  	inc rsi
 16630 0000D544 EBEC                    	jmp .L_lambda_opt_params_loop_0015
 16631                                  .L_lambda_opt_params_end_0015:
 16632 0000D546 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 16633 0000D549 4889C3                  	mov rbx, rax
 16634 0000D54C 58                      	pop rax
 16635 0000D54D C60005                  	mov byte [rax], T_closure
 16636 0000D550 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 16637 0000D554 48C74009[61D50000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_opt_code_0015
 16638 0000D55C E907030000              	jmp .L_lambda_opt_end_0015
 16639                                  .L_lambda_opt_code_0015:	; lambda-opt body
 16640 0000D561 48837C241001            	cmp qword [rsp + 8 * 2], 1
 16641 0000D567 740D                    	je .L_lambda_opt_arity_check_exact_0015
 16642 0000D569 7F43                    	jg .L_lambda_opt_arity_check_more_0015
 16643 0000D56B FF742410                	push qword [rsp + 8 * 2]
 16644 0000D56F 6A01                    	push 1
 16645 0000D571 E9E8270000              	jmp L_error_incorrect_arity_opt
 16646                                  .L_lambda_opt_arity_check_exact_0015:
 16647 0000D576 48C744241002000000      	mov qword [rsp + 8 * 2], 2
 16648 0000D57F BA04000000              	mov rdx, 4
 16649 0000D584 FF3424                  	push qword [rsp]
 16650 0000D587 BE01000000              	mov rsi, 1
 16651                                  .L_lambda_opt_stack_shrink_loop_003d:
 16652 0000D58C 4839D6                  	cmp rsi, rdx
 16653 0000D58F 7411                    	je .L_lambda_opt_stack_shrink_loop_exit_003d
 16654 0000D591 488D5CF408              	lea rbx, [rsp + 8 + rsi * 8]
 16655 0000D596 488B0B                  	mov rcx, [rbx]
 16656 0000D599 48894BF8                	mov qword [rbx - 8], rcx
 16657 0000D59D 48FFC6                  	inc rsi
 16658 0000D5A0 EBEA                    	jmp .L_lambda_opt_stack_shrink_loop_003d
 16659                                  .L_lambda_opt_stack_shrink_loop_exit_003d:
 16660 0000D5A2 48C703[01000000]        	mov qword [rbx], sob_nil
 16661 0000D5A9 E985000000              	jmp .L_lambda_opt_stack_adjusted_0015
 16662                                  .L_lambda_opt_arity_check_more_0015:
 16663 0000D5AE 488B542410              	mov rdx, qword [rsp + 8 * 2]
 16664 0000D5B3 4883EA01                	sub rdx, 1
 16665 0000D5B7 48C744241002000000      	mov qword [rsp + 8 * 2], 2
 16666 0000D5C0 BE00000000              	mov rsi, 0
 16667 0000D5C5 488D5CD418              	lea rbx, [rsp + 2 * 8 + 1 * 8 + rdx * 8]
 16668 0000D5CA 48B9-                   	mov rcx, sob_nil
 16668 0000D5CC [0100000000000000] 
 16669                                  .L_lambda_opt_stack_shrink_loop_003e:
 16670 0000D5D4 4839D6                  	cmp rsi, rdx
 16671 0000D5D7 7427                    je .L_lambda_opt_stack_shrink_loop_exit_003e
 16672 0000D5D9 BF11000000              	mov rdi, 17 ; 1+8+8
 16673 0000D5DE E8AE270000              	call malloc
 16674 0000D5E3 48894809                	mov SOB_PAIR_CDR(rax), rcx
 16675 0000D5E7 48F7DE                  	neg rsi
 16676 0000D5EA 488B0CF3                	mov rcx, qword [rbx + rsi * 8]
 16677 0000D5EE 48F7DE                  	neg rsi
 16678 0000D5F1 48894801                	mov SOB_PAIR_CAR(rax), rcx
 16679 0000D5F5 C60021                  	mov byte [rax], T_pair
 16680 0000D5F8 4889C1                  	mov rcx, rax
 16681 0000D5FB 48FFC6                  	inc rsi
 16682 0000D5FE EBD4                    	jmp .L_lambda_opt_stack_shrink_loop_003e
 16683                                  .L_lambda_opt_stack_shrink_loop_exit_003e:
 16684 0000D600 48890B                  	mov qword [rbx], rcx
 16685 0000D603 4883EB08                	sub rbx, 8
 16686 0000D607 4889E7                  	mov rdi, rsp
 16687 0000D60A 4883C718                	add rdi, 24
 16688 0000D60E BE04000000              	mov rsi, 4
 16689                                  .L_lambda_opt_stack_shrink_loop_003f:
 16690 0000D613 4883FE00                	cmp rsi,0
 16691 0000D617 7413                    	je .L_lambda_opt_stack_shrink_loop_exit_003f
 16692 0000D619 488B0F                  	mov rcx, qword [rdi]
 16693 0000D61C 48890B                  	mov [rbx], rcx
 16694 0000D61F 48FFCE                  	dec rsi
 16695 0000D622 4883EB08                	sub rbx, 8
 16696 0000D626 4883EF08                	sub rdi, 8
 16697 0000D62A EBE7                    	jmp .L_lambda_opt_stack_shrink_loop_003f
 16698                                  .L_lambda_opt_stack_shrink_loop_exit_003f:
 16699 0000D62C 4883C308                	add rbx, 8
 16700 0000D630 4889DC                  	mov rsp, rbx
 16701                                  .L_lambda_opt_stack_adjusted_0015:
 16702 0000D633 C8000000                	enter 0, 0
 16703 0000D637 488B4528                	mov rax, qword [rbp + 8 * (4 + 1)]
 16704 0000D63B 50                      	push rax
 16705 0000D63C 6A01                    	push 1
 16706 0000D63E 488B0425[00000000]      	mov rax, qword [free_var_0]
 16707                                  	assert_closure(rax)
    42 0000D646 803805              <1>  cmp byte [%1], %2
    43 0000D649 0F853B3F0000        <1>  jne L_error_incorrect_type
 16708 0000D64F FF7001                  	push SOB_CLOSURE_ENV(rax)
 16709 0000D652 FF5009                  	call SOB_CLOSURE_CODE(rax)
 16710 0000D655 483D[02000000]          	cmp rax, sob_boolean_false
 16711 0000D65B 740F                              	je .L_if_else_004b
 16712 0000D65D 48B8-                             	mov rax, L_constants + 0
 16712 0000D65F [0000000000000000] 
 16713 0000D667 E9C1000000              	jmp .L_if_end_004b
 16714                                            .L_if_else_004b:
 16715 0000D66C 488B4528                          	mov rax, qword [rbp + 8 * (4 + 1)]
 16716 0000D670 50                      	push rax
 16717 0000D671 6A01                    	push 1
 16718 0000D673 488B0425[08000000]      	mov rax, qword [free_var_1]
 16719                                  	assert_closure(rax)
    42 0000D67B 803805              <1>  cmp byte [%1], %2
    43 0000D67E 0F85063F0000        <1>  jne L_error_incorrect_type
 16720 0000D684 FF7001                  	push SOB_CLOSURE_ENV(rax)
 16721 0000D687 FF5009                  	call SOB_CLOSURE_CODE(rax)
 16722 0000D68A 483D[02000000]          	cmp rax, sob_boolean_false
 16723 0000D690 743A                              	je .L_if_else_0049
 16724 0000D692 488B4528                          	mov rax, qword [rbp + 8 * (4 + 1)]
 16725 0000D696 50                      	push rax
 16726 0000D697 6A01                    	push 1
 16727 0000D699 488B0425[88000000]      	mov rax, qword [free_var_17]
 16728                                  	assert_closure(rax)
    42 0000D6A1 803805              <1>  cmp byte [%1], %2
    43 0000D6A4 0F85E03E0000        <1>  jne L_error_incorrect_type
 16729 0000D6AA FF7001                  	push SOB_CLOSURE_ENV(rax)
 16730 0000D6AD FF5009                  	call SOB_CLOSURE_CODE(rax)
 16731 0000D6B0 50                      	push rax
 16732 0000D6B1 6A01                    	push 1
 16733 0000D6B3 488B0425[00000000]      	mov rax, qword [free_var_0]
 16734                                  	assert_closure(rax)
    42 0000D6BB 803805              <1>  cmp byte [%1], %2
    43 0000D6BE 0F85C63E0000        <1>  jne L_error_incorrect_type
 16735 0000D6C4 FF7001                  	push SOB_CLOSURE_ENV(rax)
 16736 0000D6C7 FF5009                  	call SOB_CLOSURE_CODE(rax)
 16737 0000D6CA EB0A                    	jmp .L_if_end_0049
 16738                                            .L_if_else_0049:
 16739 0000D6CC 48B8-                             	mov rax, L_constants + 2
 16739 0000D6CE [0200000000000000] 
 16740                                  .L_if_end_0049:
 16741 0000D6D6 483D[02000000]          	cmp rax, sob_boolean_false
 16742 0000D6DC 7420                              	je .L_if_else_004a
 16743 0000D6DE 488B4528                          	mov rax, qword [rbp + 8 * (4 + 1)]
 16744 0000D6E2 50                      	push rax
 16745 0000D6E3 6A01                    	push 1
 16746 0000D6E5 488B0425[80000000]      	mov rax, qword [free_var_16]
 16747                                  	assert_closure(rax)
    42 0000D6ED 803805              <1>  cmp byte [%1], %2
    43 0000D6F0 0F85943E0000        <1>  jne L_error_incorrect_type
 16748 0000D6F6 FF7001                  	push SOB_CLOSURE_ENV(rax)
 16749 0000D6F9 FF5009                  	call SOB_CLOSURE_CODE(rax)
 16750 0000D6FC EB2F                    	jmp .L_if_end_004a
 16751                                            .L_if_else_004a:
 16752 0000D6FE 48B8-                             	mov rax, L_constants + 379
 16752 0000D700 [7B01000000000000] 
 16753 0000D708 50                      	push rax
 16754 0000D709 48B8-                   	mov rax, L_constants + 370
 16754 0000D70B [7201000000000000] 
 16755 0000D713 50                      	push rax
 16756 0000D714 6A02                    	push 2
 16757 0000D716 488B0425[30010000]      	mov rax, qword [free_var_38]
 16758                                  	assert_closure(rax)
    42 0000D71E 803805              <1>  cmp byte [%1], %2
    43 0000D721 0F85633E0000        <1>  jne L_error_incorrect_type
 16759 0000D727 FF7001                  	push SOB_CLOSURE_ENV(rax)
 16760 0000D72A FF5009                  	call SOB_CLOSURE_CODE(rax)
 16761                                  .L_if_end_004a:
 16762                                  .L_if_end_004b:
 16763 0000D72D 50                      	push rax
 16764 0000D72E 6A01                    	push 1
 16765 0000D730 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 16766 0000D735 E857260000              	call malloc
 16767 0000D73A 50                      	push rax
 16768 0000D73B BF10000000              	mov rdi, 8 * 2	; new rib
 16769 0000D740 E84C260000              	call malloc
 16770 0000D745 50                      	push rax
 16771 0000D746 BF18000000              	mov rdi, 8 * 3	; extended env
 16772 0000D74B E841260000              	call malloc
 16773 0000D750 488B7D10                	mov rdi, ENV
 16774 0000D754 BE00000000              	mov rsi, 0
 16775 0000D759 BA01000000              	mov rdx, 1
 16776                                  .L_lambda_simple_env_loop_0084:	; ext_env[i + 1] <-- env[i]
 16777 0000D75E 4883FE02                	cmp rsi, 2
 16778 0000D762 7410                    	je .L_lambda_simple_env_end_0084
 16779 0000D764 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 16780 0000D768 48890CD0                	mov qword [rax + 8 * rdx], rcx
 16781 0000D76C 48FFC6                  	inc rsi
 16782 0000D76F 48FFC2                  	inc rdx
 16783 0000D772 EBEA                    	jmp .L_lambda_simple_env_loop_0084
 16784                                  .L_lambda_simple_env_end_0084:
 16785 0000D774 5B                      	pop rbx
 16786 0000D775 BE00000000              	mov rsi, 0
 16787                                  .L_lambda_simple_params_loop_0084:	; copy params
 16788 0000D77A 4883FE02                	cmp rsi, 2
 16789 0000D77E 740E                    	je .L_lambda_simple_params_end_0084
 16790 0000D780 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 16791 0000D785 488914F3                	mov qword [rbx + 8 * rsi], rdx
 16792 0000D789 48FFC6                  	inc rsi
 16793 0000D78C EBEC                    	jmp .L_lambda_simple_params_loop_0084
 16794                                  .L_lambda_simple_params_end_0084:
 16795 0000D78E 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 16796 0000D791 4889C3                  	mov rbx, rax
 16797 0000D794 58                      	pop rax
 16798 0000D795 C60005                  	mov byte [rax], T_closure
 16799 0000D798 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 16800 0000D79C 48C74009[A6D70000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0084
 16801 0000D7A4 EB7B                    	jmp .L_lambda_simple_end_0084
 16802                                  .L_lambda_simple_code_0084:	; lambda-simple body
 16803 0000D7A6 48837C241001            	cmp qword [rsp + 8 * 2], 1
 16804 0000D7AC 740B                    	je .L_lambda_simple_arity_check_ok_0084
 16805 0000D7AE FF742410                	push qword [rsp + 8 * 2]
 16806 0000D7B2 6A01                    	push 1
 16807 0000D7B4 E991250000              	jmp L_error_incorrect_arity_simple
 16808                                  .L_lambda_simple_arity_check_ok_0084:
 16809 0000D7B9 C8000000                	enter 0, 0
 16810 0000D7BD 488B4520                	mov rax, qword [rbp + 8 * (4 + 0)]
 16811 0000D7C1 50                      	push rax
 16812 0000D7C2 488B4510                	mov rax, qword [rbp + 8 * 2]
 16813 0000D7C6 488B00                  	mov rax, qword [rax + 8 * 0]
 16814 0000D7C9 488B00                  	mov rax, qword [rax + 8 * 0]
 16815 0000D7CC 50                      	push rax
 16816 0000D7CD 6A02                    	push 2
 16817 0000D7CF 488B4510                	mov rax, qword [rbp + 8 * 2]
 16818 0000D7D3 488B4008                	mov rax, qword [rax + 8 * 1]
 16819 0000D7D7 488B00                  	mov rax, qword [rax + 8 * 0]
 16820                                  	assert_closure(rax)
    42 0000D7DA 803805              <1>  cmp byte [%1], %2
    43 0000D7DD 0F85A73D0000        <1>  jne L_error_incorrect_type
 16821 0000D7E3 FF7001                  	push SOB_CLOSURE_ENV(rax)
 16822 0000D7E6 FF7508                  	push qword [rbp + 8 * 1] ; old ret addr
 16823 0000D7E9 FF7500                  	push qword [rbp] ; same the old rbp
 16824 0000D7EC BA05000000              	mov rdx, 2 + 3
 16825 0000D7F1 488B4D18                	mov rcx, COUNT
 16826 0000D7F5 488D4CCD20              	lea rcx, [rbp + 8*4 + rcx * 8]
 16827 0000D7FA 4889EF                  	mov rdi, rbp
 16828                                  .L_tc_recycle_frame_loop_009d:
 16829 0000D7FD 4883FA00                	cmp rdx, 0
 16830 0000D801 7413                    	je .L_tc_recycle_frame_done_009d
 16831 0000D803 4883E908                	sub rcx, 8
 16832 0000D807 4883EF08                	sub rdi, 8
 16833 0000D80B 488B37                  	mov rsi, [rdi]
 16834 0000D80E 488931                  	mov qword [rcx], rsi
 16835 0000D811 48FFCA                  	dec rdx
 16836 0000D814 EBE7                    	jmp .L_tc_recycle_frame_loop_009d
 16837                                  .L_tc_recycle_frame_done_009d:
 16838 0000D816 5D                      	pop rbp ; restore the old rbp
 16839 0000D817 4889CC                  	mov rsp, rcx
 16840 0000D81A FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 16841 0000D81D C9                      	leave
 16842 0000D81E C21800                  	ret 8 * (2 + 1)
 16843                                  .L_lambda_simple_end_0084:	; new closure is in rax
 16844                                  	assert_closure(rax)
    42 0000D821 803805              <1>  cmp byte [%1], %2
    43 0000D824 0F85603D0000        <1>  jne L_error_incorrect_type
 16845 0000D82A FF7001                  	push SOB_CLOSURE_ENV(rax)
 16846 0000D82D FF7508                  	push qword [rbp + 8 * 1] ; old ret addr
 16847 0000D830 FF7500                  	push qword [rbp] ; same the old rbp
 16848 0000D833 BA04000000              	mov rdx, 1 + 3
 16849 0000D838 488B4D18                	mov rcx, COUNT
 16850 0000D83C 488D4CCD20              	lea rcx, [rbp + 8*4 + rcx * 8]
 16851 0000D841 4889EF                  	mov rdi, rbp
 16852                                  .L_tc_recycle_frame_loop_009c:
 16853 0000D844 4883FA00                	cmp rdx, 0
 16854 0000D848 7413                    	je .L_tc_recycle_frame_done_009c
 16855 0000D84A 4883E908                	sub rcx, 8
 16856 0000D84E 4883EF08                	sub rdi, 8
 16857 0000D852 488B37                  	mov rsi, [rdi]
 16858 0000D855 488931                  	mov qword [rcx], rsi
 16859 0000D858 48FFCA                  	dec rdx
 16860 0000D85B EBE7                    	jmp .L_tc_recycle_frame_loop_009c
 16861                                  .L_tc_recycle_frame_done_009c:
 16862 0000D85D 5D                      	pop rbp ; restore the old rbp
 16863 0000D85E 4889CC                  	mov rsp, rcx
 16864 0000D861 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 16865 0000D864 C9                      	leave
 16866 0000D865 C22000                  	ret 8 * (2 + 2)
 16867                                  .L_lambda_opt_end_0015:	; new closure is in rax
 16868 0000D868 C9                      	leave
 16869 0000D869 C21800                  	ret 8 * (2 + 1)
 16870                                  .L_lambda_simple_end_0083:	; new closure is in rax
 16871                                  	assert_closure(rax)
    42 0000D86C 803805              <1>  cmp byte [%1], %2
    43 0000D86F 0F85153D0000        <1>  jne L_error_incorrect_type
 16872 0000D875 FF7001                  	push SOB_CLOSURE_ENV(rax)
 16873 0000D878 FF5009                  	call SOB_CLOSURE_CODE(rax)
 16874 0000D87B 48890425[98010000]      	mov qword [free_var_51], rax
 16875 0000D883 48B8-                   	mov rax, sob_void
 16875 0000D885 [0000000000000000] 
 16876                                  
 16877 0000D88D 4889C7                  	mov rdi, rax
 16878 0000D890 E80D250000              	call print_sexpr_if_not_void
 16879                                  
 16880 0000D895 488B0425[A0010000]      	mov rax, qword [free_var_52]
 16881 0000D89D 50                      	push rax
 16882 0000D89E 6A01                    	push 1
 16883 0000D8A0 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 16884 0000D8A5 E8E7240000              	call malloc
 16885 0000D8AA 50                      	push rax
 16886 0000D8AB BF00000000              	mov rdi, 8 * 0	; new rib
 16887 0000D8B0 E8DC240000              	call malloc
 16888 0000D8B5 50                      	push rax
 16889 0000D8B6 BF08000000              	mov rdi, 8 * 1	; extended env
 16890 0000D8BB E8D1240000              	call malloc
 16891 0000D8C0 488B7D10                	mov rdi, ENV
 16892 0000D8C4 BE00000000              	mov rsi, 0
 16893 0000D8C9 BA01000000              	mov rdx, 1
 16894                                  .L_lambda_simple_env_loop_0085:	; ext_env[i + 1] <-- env[i]
 16895 0000D8CE 4883FE00                	cmp rsi, 0
 16896 0000D8D2 7410                    	je .L_lambda_simple_env_end_0085
 16897 0000D8D4 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 16898 0000D8D8 48890CD0                	mov qword [rax + 8 * rdx], rcx
 16899 0000D8DC 48FFC6                  	inc rsi
 16900 0000D8DF 48FFC2                  	inc rdx
 16901 0000D8E2 EBEA                    	jmp .L_lambda_simple_env_loop_0085
 16902                                  .L_lambda_simple_env_end_0085:
 16903 0000D8E4 5B                      	pop rbx
 16904 0000D8E5 BE00000000              	mov rsi, 0
 16905                                  .L_lambda_simple_params_loop_0085:	; copy params
 16906 0000D8EA 4883FE00                	cmp rsi, 0
 16907 0000D8EE 740E                    	je .L_lambda_simple_params_end_0085
 16908 0000D8F0 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 16909 0000D8F5 488914F3                	mov qword [rbx + 8 * rsi], rdx
 16910 0000D8F9 48FFC6                  	inc rsi
 16911 0000D8FC EBEC                    	jmp .L_lambda_simple_params_loop_0085
 16912                                  .L_lambda_simple_params_end_0085:
 16913 0000D8FE 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 16914 0000D901 4889C3                  	mov rbx, rax
 16915 0000D904 58                      	pop rax
 16916 0000D905 C60005                  	mov byte [rax], T_closure
 16917 0000D908 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 16918 0000D90C 48C74009[19D90000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0085
 16919 0000D914 E99B030000              	jmp .L_lambda_simple_end_0085
 16920                                  .L_lambda_simple_code_0085:	; lambda-simple body
 16921 0000D919 48837C241001            	cmp qword [rsp + 8 * 2], 1
 16922 0000D91F 740B                    	je .L_lambda_simple_arity_check_ok_0085
 16923 0000D921 FF742410                	push qword [rsp + 8 * 2]
 16924 0000D925 6A01                    	push 1
 16925 0000D927 E91E240000              	jmp L_error_incorrect_arity_simple
 16926                                  .L_lambda_simple_arity_check_ok_0085:
 16927 0000D92C C8000000                	enter 0, 0
 16928 0000D930 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 16929 0000D935 E857240000              	call malloc
 16930 0000D93A 50                      	push rax
 16931 0000D93B BF08000000              	mov rdi, 8 * 1	; new rib
 16932 0000D940 E84C240000              	call malloc
 16933 0000D945 50                      	push rax
 16934 0000D946 BF10000000              	mov rdi, 8 * 2	; extended env
 16935 0000D94B E841240000              	call malloc
 16936 0000D950 488B7D10                	mov rdi, ENV
 16937 0000D954 BE00000000              	mov rsi, 0
 16938 0000D959 BA01000000              	mov rdx, 1
 16939                                  .L_lambda_opt_env_loop_0016:	; ext_env[i + 1] <-- env[i]
 16940 0000D95E 4883FE01                	cmp rsi, 1
 16941 0000D962 7410                    	je .L_lambda_opt_env_end_0016
 16942 0000D964 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 16943 0000D968 48890CD0                	mov qword [rax + 8 * rdx], rcx
 16944 0000D96C 48FFC6                  	inc rsi
 16945 0000D96F 48FFC2                  	inc rdx
 16946 0000D972 EBEA                    	jmp .L_lambda_opt_env_loop_0016
 16947                                  .L_lambda_opt_env_end_0016:
 16948 0000D974 5B                      	pop rbx
 16949 0000D975 BE00000000              	mov rsi, 0
 16950                                  .L_lambda_opt_params_loop_0016:	; copy params
 16951 0000D97A 4883FE01                	cmp rsi, 1
 16952 0000D97E 740E                    	je .L_lambda_opt_params_end_0016
 16953 0000D980 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 16954 0000D985 488914F3                	mov qword [rbx + 8 * rsi], rdx
 16955 0000D989 48FFC6                  	inc rsi
 16956 0000D98C EBEC                    	jmp .L_lambda_opt_params_loop_0016
 16957                                  .L_lambda_opt_params_end_0016:
 16958 0000D98E 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 16959 0000D991 4889C3                  	mov rbx, rax
 16960 0000D994 58                      	pop rax
 16961 0000D995 C60005                  	mov byte [rax], T_closure
 16962 0000D998 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 16963 0000D99C 48C74009[A9D90000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_opt_code_0016
 16964 0000D9A4 E907030000              	jmp .L_lambda_opt_end_0016
 16965                                  .L_lambda_opt_code_0016:	; lambda-opt body
 16966 0000D9A9 48837C241001            	cmp qword [rsp + 8 * 2], 1
 16967 0000D9AF 740D                    	je .L_lambda_opt_arity_check_exact_0016
 16968 0000D9B1 7F43                    	jg .L_lambda_opt_arity_check_more_0016
 16969 0000D9B3 FF742410                	push qword [rsp + 8 * 2]
 16970 0000D9B7 6A01                    	push 1
 16971 0000D9B9 E9A0230000              	jmp L_error_incorrect_arity_opt
 16972                                  .L_lambda_opt_arity_check_exact_0016:
 16973 0000D9BE 48C744241002000000      	mov qword [rsp + 8 * 2], 2
 16974 0000D9C7 BA04000000              	mov rdx, 4
 16975 0000D9CC FF3424                  	push qword [rsp]
 16976 0000D9CF BE01000000              	mov rsi, 1
 16977                                  .L_lambda_opt_stack_shrink_loop_0040:
 16978 0000D9D4 4839D6                  	cmp rsi, rdx
 16979 0000D9D7 7411                    	je .L_lambda_opt_stack_shrink_loop_exit_0040
 16980 0000D9D9 488D5CF408              	lea rbx, [rsp + 8 + rsi * 8]
 16981 0000D9DE 488B0B                  	mov rcx, [rbx]
 16982 0000D9E1 48894BF8                	mov qword [rbx - 8], rcx
 16983 0000D9E5 48FFC6                  	inc rsi
 16984 0000D9E8 EBEA                    	jmp .L_lambda_opt_stack_shrink_loop_0040
 16985                                  .L_lambda_opt_stack_shrink_loop_exit_0040:
 16986 0000D9EA 48C703[01000000]        	mov qword [rbx], sob_nil
 16987 0000D9F1 E985000000              	jmp .L_lambda_opt_stack_adjusted_0016
 16988                                  .L_lambda_opt_arity_check_more_0016:
 16989 0000D9F6 488B542410              	mov rdx, qword [rsp + 8 * 2]
 16990 0000D9FB 4883EA01                	sub rdx, 1
 16991 0000D9FF 48C744241002000000      	mov qword [rsp + 8 * 2], 2
 16992 0000DA08 BE00000000              	mov rsi, 0
 16993 0000DA0D 488D5CD418              	lea rbx, [rsp + 2 * 8 + 1 * 8 + rdx * 8]
 16994 0000DA12 48B9-                   	mov rcx, sob_nil
 16994 0000DA14 [0100000000000000] 
 16995                                  .L_lambda_opt_stack_shrink_loop_0041:
 16996 0000DA1C 4839D6                  	cmp rsi, rdx
 16997 0000DA1F 7427                    je .L_lambda_opt_stack_shrink_loop_exit_0041
 16998 0000DA21 BF11000000              	mov rdi, 17 ; 1+8+8
 16999 0000DA26 E866230000              	call malloc
 17000 0000DA2B 48894809                	mov SOB_PAIR_CDR(rax), rcx
 17001 0000DA2F 48F7DE                  	neg rsi
 17002 0000DA32 488B0CF3                	mov rcx, qword [rbx + rsi * 8]
 17003 0000DA36 48F7DE                  	neg rsi
 17004 0000DA39 48894801                	mov SOB_PAIR_CAR(rax), rcx
 17005 0000DA3D C60021                  	mov byte [rax], T_pair
 17006 0000DA40 4889C1                  	mov rcx, rax
 17007 0000DA43 48FFC6                  	inc rsi
 17008 0000DA46 EBD4                    	jmp .L_lambda_opt_stack_shrink_loop_0041
 17009                                  .L_lambda_opt_stack_shrink_loop_exit_0041:
 17010 0000DA48 48890B                  	mov qword [rbx], rcx
 17011 0000DA4B 4883EB08                	sub rbx, 8
 17012 0000DA4F 4889E7                  	mov rdi, rsp
 17013 0000DA52 4883C718                	add rdi, 24
 17014 0000DA56 BE04000000              	mov rsi, 4
 17015                                  .L_lambda_opt_stack_shrink_loop_0042:
 17016 0000DA5B 4883FE00                	cmp rsi,0
 17017 0000DA5F 7413                    	je .L_lambda_opt_stack_shrink_loop_exit_0042
 17018 0000DA61 488B0F                  	mov rcx, qword [rdi]
 17019 0000DA64 48890B                  	mov [rbx], rcx
 17020 0000DA67 48FFCE                  	dec rsi
 17021 0000DA6A 4883EB08                	sub rbx, 8
 17022 0000DA6E 4883EF08                	sub rdi, 8
 17023 0000DA72 EBE7                    	jmp .L_lambda_opt_stack_shrink_loop_0042
 17024                                  .L_lambda_opt_stack_shrink_loop_exit_0042:
 17025 0000DA74 4883C308                	add rbx, 8
 17026 0000DA78 4889DC                  	mov rsp, rbx
 17027                                  .L_lambda_opt_stack_adjusted_0016:
 17028 0000DA7B C8000000                	enter 0, 0
 17029 0000DA7F 488B4528                	mov rax, qword [rbp + 8 * (4 + 1)]
 17030 0000DA83 50                      	push rax
 17031 0000DA84 6A01                    	push 1
 17032 0000DA86 488B0425[00000000]      	mov rax, qword [free_var_0]
 17033                                  	assert_closure(rax)
    42 0000DA8E 803805              <1>  cmp byte [%1], %2
    43 0000DA91 0F85F33A0000        <1>  jne L_error_incorrect_type
 17034 0000DA97 FF7001                  	push SOB_CLOSURE_ENV(rax)
 17035 0000DA9A FF5009                  	call SOB_CLOSURE_CODE(rax)
 17036 0000DA9D 483D[02000000]          	cmp rax, sob_boolean_false
 17037 0000DAA3 740F                              	je .L_if_else_004e
 17038 0000DAA5 48B8-                             	mov rax, L_constants + 4
 17038 0000DAA7 [0400000000000000] 
 17039 0000DAAF E9C1000000              	jmp .L_if_end_004e
 17040                                            .L_if_else_004e:
 17041 0000DAB4 488B4528                          	mov rax, qword [rbp + 8 * (4 + 1)]
 17042 0000DAB8 50                      	push rax
 17043 0000DAB9 6A01                    	push 1
 17044 0000DABB 488B0425[08000000]      	mov rax, qword [free_var_1]
 17045                                  	assert_closure(rax)
    42 0000DAC3 803805              <1>  cmp byte [%1], %2
    43 0000DAC6 0F85BE3A0000        <1>  jne L_error_incorrect_type
 17046 0000DACC FF7001                  	push SOB_CLOSURE_ENV(rax)
 17047 0000DACF FF5009                  	call SOB_CLOSURE_CODE(rax)
 17048 0000DAD2 483D[02000000]          	cmp rax, sob_boolean_false
 17049 0000DAD8 743A                              	je .L_if_else_004c
 17050 0000DADA 488B4528                          	mov rax, qword [rbp + 8 * (4 + 1)]
 17051 0000DADE 50                      	push rax
 17052 0000DADF 6A01                    	push 1
 17053 0000DAE1 488B0425[88000000]      	mov rax, qword [free_var_17]
 17054                                  	assert_closure(rax)
    42 0000DAE9 803805              <1>  cmp byte [%1], %2
    43 0000DAEC 0F85983A0000        <1>  jne L_error_incorrect_type
 17055 0000DAF2 FF7001                  	push SOB_CLOSURE_ENV(rax)
 17056 0000DAF5 FF5009                  	call SOB_CLOSURE_CODE(rax)
 17057 0000DAF8 50                      	push rax
 17058 0000DAF9 6A01                    	push 1
 17059 0000DAFB 488B0425[00000000]      	mov rax, qword [free_var_0]
 17060                                  	assert_closure(rax)
    42 0000DB03 803805              <1>  cmp byte [%1], %2
    43 0000DB06 0F857E3A0000        <1>  jne L_error_incorrect_type
 17061 0000DB0C FF7001                  	push SOB_CLOSURE_ENV(rax)
 17062 0000DB0F FF5009                  	call SOB_CLOSURE_CODE(rax)
 17063 0000DB12 EB0A                    	jmp .L_if_end_004c
 17064                                            .L_if_else_004c:
 17065 0000DB14 48B8-                             	mov rax, L_constants + 2
 17065 0000DB16 [0200000000000000] 
 17066                                  .L_if_end_004c:
 17067 0000DB1E 483D[02000000]          	cmp rax, sob_boolean_false
 17068 0000DB24 7420                              	je .L_if_else_004d
 17069 0000DB26 488B4528                          	mov rax, qword [rbp + 8 * (4 + 1)]
 17070 0000DB2A 50                      	push rax
 17071 0000DB2B 6A01                    	push 1
 17072 0000DB2D 488B0425[80000000]      	mov rax, qword [free_var_16]
 17073                                  	assert_closure(rax)
    42 0000DB35 803805              <1>  cmp byte [%1], %2
    43 0000DB38 0F854C3A0000        <1>  jne L_error_incorrect_type
 17074 0000DB3E FF7001                  	push SOB_CLOSURE_ENV(rax)
 17075 0000DB41 FF5009                  	call SOB_CLOSURE_CODE(rax)
 17076 0000DB44 EB2F                    	jmp .L_if_end_004d
 17077                                            .L_if_else_004d:
 17078 0000DB46 48B8-                             	mov rax, L_constants + 460
 17078 0000DB48 [CC01000000000000] 
 17079 0000DB50 50                      	push rax
 17080 0000DB51 48B8-                   	mov rax, L_constants + 451
 17080 0000DB53 [C301000000000000] 
 17081 0000DB5B 50                      	push rax
 17082 0000DB5C 6A02                    	push 2
 17083 0000DB5E 488B0425[30010000]      	mov rax, qword [free_var_38]
 17084                                  	assert_closure(rax)
    42 0000DB66 803805              <1>  cmp byte [%1], %2
    43 0000DB69 0F851B3A0000        <1>  jne L_error_incorrect_type
 17085 0000DB6F FF7001                  	push SOB_CLOSURE_ENV(rax)
 17086 0000DB72 FF5009                  	call SOB_CLOSURE_CODE(rax)
 17087                                  .L_if_end_004d:
 17088                                  .L_if_end_004e:
 17089 0000DB75 50                      	push rax
 17090 0000DB76 6A01                    	push 1
 17091 0000DB78 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 17092 0000DB7D E80F220000              	call malloc
 17093 0000DB82 50                      	push rax
 17094 0000DB83 BF10000000              	mov rdi, 8 * 2	; new rib
 17095 0000DB88 E804220000              	call malloc
 17096 0000DB8D 50                      	push rax
 17097 0000DB8E BF18000000              	mov rdi, 8 * 3	; extended env
 17098 0000DB93 E8F9210000              	call malloc
 17099 0000DB98 488B7D10                	mov rdi, ENV
 17100 0000DB9C BE00000000              	mov rsi, 0
 17101 0000DBA1 BA01000000              	mov rdx, 1
 17102                                  .L_lambda_simple_env_loop_0086:	; ext_env[i + 1] <-- env[i]
 17103 0000DBA6 4883FE02                	cmp rsi, 2
 17104 0000DBAA 7410                    	je .L_lambda_simple_env_end_0086
 17105 0000DBAC 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 17106 0000DBB0 48890CD0                	mov qword [rax + 8 * rdx], rcx
 17107 0000DBB4 48FFC6                  	inc rsi
 17108 0000DBB7 48FFC2                  	inc rdx
 17109 0000DBBA EBEA                    	jmp .L_lambda_simple_env_loop_0086
 17110                                  .L_lambda_simple_env_end_0086:
 17111 0000DBBC 5B                      	pop rbx
 17112 0000DBBD BE00000000              	mov rsi, 0
 17113                                  .L_lambda_simple_params_loop_0086:	; copy params
 17114 0000DBC2 4883FE02                	cmp rsi, 2
 17115 0000DBC6 740E                    	je .L_lambda_simple_params_end_0086
 17116 0000DBC8 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 17117 0000DBCD 488914F3                	mov qword [rbx + 8 * rsi], rdx
 17118 0000DBD1 48FFC6                  	inc rsi
 17119 0000DBD4 EBEC                    	jmp .L_lambda_simple_params_loop_0086
 17120                                  .L_lambda_simple_params_end_0086:
 17121 0000DBD6 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 17122 0000DBD9 4889C3                  	mov rbx, rax
 17123 0000DBDC 58                      	pop rax
 17124 0000DBDD C60005                  	mov byte [rax], T_closure
 17125 0000DBE0 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 17126 0000DBE4 48C74009[EEDB0000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0086
 17127 0000DBEC EB7B                    	jmp .L_lambda_simple_end_0086
 17128                                  .L_lambda_simple_code_0086:	; lambda-simple body
 17129 0000DBEE 48837C241001            	cmp qword [rsp + 8 * 2], 1
 17130 0000DBF4 740B                    	je .L_lambda_simple_arity_check_ok_0086
 17131 0000DBF6 FF742410                	push qword [rsp + 8 * 2]
 17132 0000DBFA 6A01                    	push 1
 17133 0000DBFC E949210000              	jmp L_error_incorrect_arity_simple
 17134                                  .L_lambda_simple_arity_check_ok_0086:
 17135 0000DC01 C8000000                	enter 0, 0
 17136 0000DC05 488B4520                	mov rax, qword [rbp + 8 * (4 + 0)]
 17137 0000DC09 50                      	push rax
 17138 0000DC0A 488B4510                	mov rax, qword [rbp + 8 * 2]
 17139 0000DC0E 488B00                  	mov rax, qword [rax + 8 * 0]
 17140 0000DC11 488B00                  	mov rax, qword [rax + 8 * 0]
 17141 0000DC14 50                      	push rax
 17142 0000DC15 6A02                    	push 2
 17143 0000DC17 488B4510                	mov rax, qword [rbp + 8 * 2]
 17144 0000DC1B 488B4008                	mov rax, qword [rax + 8 * 1]
 17145 0000DC1F 488B00                  	mov rax, qword [rax + 8 * 0]
 17146                                  	assert_closure(rax)
    42 0000DC22 803805              <1>  cmp byte [%1], %2
    43 0000DC25 0F855F390000        <1>  jne L_error_incorrect_type
 17147 0000DC2B FF7001                  	push SOB_CLOSURE_ENV(rax)
 17148 0000DC2E FF7508                  	push qword [rbp + 8 * 1] ; old ret addr
 17149 0000DC31 FF7500                  	push qword [rbp] ; same the old rbp
 17150 0000DC34 BA05000000              	mov rdx, 2 + 3
 17151 0000DC39 488B4D18                	mov rcx, COUNT
 17152 0000DC3D 488D4CCD20              	lea rcx, [rbp + 8*4 + rcx * 8]
 17153 0000DC42 4889EF                  	mov rdi, rbp
 17154                                  .L_tc_recycle_frame_loop_009f:
 17155 0000DC45 4883FA00                	cmp rdx, 0
 17156 0000DC49 7413                    	je .L_tc_recycle_frame_done_009f
 17157 0000DC4B 4883E908                	sub rcx, 8
 17158 0000DC4F 4883EF08                	sub rdi, 8
 17159 0000DC53 488B37                  	mov rsi, [rdi]
 17160 0000DC56 488931                  	mov qword [rcx], rsi
 17161 0000DC59 48FFCA                  	dec rdx
 17162 0000DC5C EBE7                    	jmp .L_tc_recycle_frame_loop_009f
 17163                                  .L_tc_recycle_frame_done_009f:
 17164 0000DC5E 5D                      	pop rbp ; restore the old rbp
 17165 0000DC5F 4889CC                  	mov rsp, rcx
 17166 0000DC62 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 17167 0000DC65 C9                      	leave
 17168 0000DC66 C21800                  	ret 8 * (2 + 1)
 17169                                  .L_lambda_simple_end_0086:	; new closure is in rax
 17170                                  	assert_closure(rax)
    42 0000DC69 803805              <1>  cmp byte [%1], %2
    43 0000DC6C 0F8518390000        <1>  jne L_error_incorrect_type
 17171 0000DC72 FF7001                  	push SOB_CLOSURE_ENV(rax)
 17172 0000DC75 FF7508                  	push qword [rbp + 8 * 1] ; old ret addr
 17173 0000DC78 FF7500                  	push qword [rbp] ; same the old rbp
 17174 0000DC7B BA04000000              	mov rdx, 1 + 3
 17175 0000DC80 488B4D18                	mov rcx, COUNT
 17176 0000DC84 488D4CCD20              	lea rcx, [rbp + 8*4 + rcx * 8]
 17177 0000DC89 4889EF                  	mov rdi, rbp
 17178                                  .L_tc_recycle_frame_loop_009e:
 17179 0000DC8C 4883FA00                	cmp rdx, 0
 17180 0000DC90 7413                    	je .L_tc_recycle_frame_done_009e
 17181 0000DC92 4883E908                	sub rcx, 8
 17182 0000DC96 4883EF08                	sub rdi, 8
 17183 0000DC9A 488B37                  	mov rsi, [rdi]
 17184 0000DC9D 488931                  	mov qword [rcx], rsi
 17185 0000DCA0 48FFCA                  	dec rdx
 17186 0000DCA3 EBE7                    	jmp .L_tc_recycle_frame_loop_009e
 17187                                  .L_tc_recycle_frame_done_009e:
 17188 0000DCA5 5D                      	pop rbp ; restore the old rbp
 17189 0000DCA6 4889CC                  	mov rsp, rcx
 17190 0000DCA9 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 17191 0000DCAC C9                      	leave
 17192 0000DCAD C22000                  	ret 8 * (2 + 2)
 17193                                  .L_lambda_opt_end_0016:	; new closure is in rax
 17194 0000DCB0 C9                      	leave
 17195 0000DCB1 C21800                  	ret 8 * (2 + 1)
 17196                                  .L_lambda_simple_end_0085:	; new closure is in rax
 17197                                  	assert_closure(rax)
    42 0000DCB4 803805              <1>  cmp byte [%1], %2
    43 0000DCB7 0F85CD380000        <1>  jne L_error_incorrect_type
 17198 0000DCBD FF7001                  	push SOB_CLOSURE_ENV(rax)
 17199 0000DCC0 FF5009                  	call SOB_CLOSURE_CODE(rax)
 17200 0000DCC3 48890425[A0010000]      	mov qword [free_var_52], rax
 17201 0000DCCB 48B8-                   	mov rax, sob_void
 17201 0000DCCD [0000000000000000] 
 17202                                  
 17203 0000DCD5 4889C7                  	mov rdi, rax
 17204 0000DCD8 E8C5200000              	call print_sexpr_if_not_void
 17205                                  
 17206 0000DCDD 48B8-                   	mov rax, L_constants + 23
 17206 0000DCDF [1700000000000000] 
 17207 0000DCE7 50                      	push rax
 17208 0000DCE8 6A01                    	push 1
 17209 0000DCEA BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 17210 0000DCEF E89D200000              	call malloc
 17211 0000DCF4 50                      	push rax
 17212 0000DCF5 BF00000000              	mov rdi, 8 * 0	; new rib
 17213 0000DCFA E892200000              	call malloc
 17214 0000DCFF 50                      	push rax
 17215 0000DD00 BF08000000              	mov rdi, 8 * 1	; extended env
 17216 0000DD05 E887200000              	call malloc
 17217 0000DD0A 488B7D10                	mov rdi, ENV
 17218 0000DD0E BE00000000              	mov rsi, 0
 17219 0000DD13 BA01000000              	mov rdx, 1
 17220                                  .L_lambda_simple_env_loop_0087:	; ext_env[i + 1] <-- env[i]
 17221 0000DD18 4883FE00                	cmp rsi, 0
 17222 0000DD1C 7410                    	je .L_lambda_simple_env_end_0087
 17223 0000DD1E 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 17224 0000DD22 48890CD0                	mov qword [rax + 8 * rdx], rcx
 17225 0000DD26 48FFC6                  	inc rsi
 17226 0000DD29 48FFC2                  	inc rdx
 17227 0000DD2C EBEA                    	jmp .L_lambda_simple_env_loop_0087
 17228                                  .L_lambda_simple_env_end_0087:
 17229 0000DD2E 5B                      	pop rbx
 17230 0000DD2F BE00000000              	mov rsi, 0
 17231                                  .L_lambda_simple_params_loop_0087:	; copy params
 17232 0000DD34 4883FE00                	cmp rsi, 0
 17233 0000DD38 740E                    	je .L_lambda_simple_params_end_0087
 17234 0000DD3A 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 17235 0000DD3F 488914F3                	mov qword [rbx + 8 * rsi], rdx
 17236 0000DD43 48FFC6                  	inc rsi
 17237 0000DD46 EBEC                    	jmp .L_lambda_simple_params_loop_0087
 17238                                  .L_lambda_simple_params_end_0087:
 17239 0000DD48 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 17240 0000DD4B 4889C3                  	mov rbx, rax
 17241 0000DD4E 58                      	pop rax
 17242 0000DD4F C60005                  	mov byte [rax], T_closure
 17243 0000DD52 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 17244 0000DD56 48C74009[63DD0000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0087
 17245 0000DD5E E9F1030000              	jmp .L_lambda_simple_end_0087
 17246                                  .L_lambda_simple_code_0087:	; lambda-simple body
 17247 0000DD63 48837C241001            	cmp qword [rsp + 8 * 2], 1
 17248 0000DD69 740B                    	je .L_lambda_simple_arity_check_ok_0087
 17249 0000DD6B FF742410                	push qword [rsp + 8 * 2]
 17250 0000DD6F 6A01                    	push 1
 17251 0000DD71 E9D41F0000              	jmp L_error_incorrect_arity_simple
 17252                                  .L_lambda_simple_arity_check_ok_0087:
 17253 0000DD76 C8000000                	enter 0, 0
 17254 0000DD7A 488B4520                	mov rax, qword [rbp + 8 * (4 + 0)]
 17255 0000DD7E 4889C2                  	mov rdx, rax
 17256 0000DD81 BF08000000              	mov rdi, 8
 17257 0000DD86 E806200000              	call malloc
 17258 0000DD8B 488910                  	mov qword[rax], rdx
 17259 0000DD8E 48894520                	mov qword [rbp + 8 * (4 + 0)], rax
 17260 0000DD92 48B8-                   	mov rax, sob_void
 17260 0000DD94 [0000000000000000] 
 17261                                  
 17262 0000DD9C BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 17263 0000DDA1 E8EB1F0000              	call malloc
 17264 0000DDA6 50                      	push rax
 17265 0000DDA7 BF08000000              	mov rdi, 8 * 1	; new rib
 17266 0000DDAC E8E01F0000              	call malloc
 17267 0000DDB1 50                      	push rax
 17268 0000DDB2 BF10000000              	mov rdi, 8 * 2	; extended env
 17269 0000DDB7 E8D51F0000              	call malloc
 17270 0000DDBC 488B7D10                	mov rdi, ENV
 17271 0000DDC0 BE00000000              	mov rsi, 0
 17272 0000DDC5 BA01000000              	mov rdx, 1
 17273                                  .L_lambda_simple_env_loop_0088:	; ext_env[i + 1] <-- env[i]
 17274 0000DDCA 4883FE01                	cmp rsi, 1
 17275 0000DDCE 7410                    	je .L_lambda_simple_env_end_0088
 17276 0000DDD0 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 17277 0000DDD4 48890CD0                	mov qword [rax + 8 * rdx], rcx
 17278 0000DDD8 48FFC6                  	inc rsi
 17279 0000DDDB 48FFC2                  	inc rdx
 17280 0000DDDE EBEA                    	jmp .L_lambda_simple_env_loop_0088
 17281                                  .L_lambda_simple_env_end_0088:
 17282 0000DDE0 5B                      	pop rbx
 17283 0000DDE1 BE00000000              	mov rsi, 0
 17284                                  .L_lambda_simple_params_loop_0088:	; copy params
 17285 0000DDE6 4883FE01                	cmp rsi, 1
 17286 0000DDEA 740E                    	je .L_lambda_simple_params_end_0088
 17287 0000DDEC 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 17288 0000DDF1 488914F3                	mov qword [rbx + 8 * rsi], rdx
 17289 0000DDF5 48FFC6                  	inc rsi
 17290 0000DDF8 EBEC                    	jmp .L_lambda_simple_params_loop_0088
 17291                                  .L_lambda_simple_params_end_0088:
 17292 0000DDFA 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 17293 0000DDFD 4889C3                  	mov rbx, rax
 17294 0000DE00 58                      	pop rax
 17295 0000DE01 C60005                  	mov byte [rax], T_closure
 17296 0000DE04 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 17297 0000DE08 48C74009[15DE0000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0088
 17298 0000DE10 E934020000              	jmp .L_lambda_simple_end_0088
 17299                                  .L_lambda_simple_code_0088:	; lambda-simple body
 17300 0000DE15 48837C241002            	cmp qword [rsp + 8 * 2], 2
 17301 0000DE1B 740B                    	je .L_lambda_simple_arity_check_ok_0088
 17302 0000DE1D FF742410                	push qword [rsp + 8 * 2]
 17303 0000DE21 6A02                    	push 2
 17304 0000DE23 E9221F0000              	jmp L_error_incorrect_arity_simple
 17305                                  .L_lambda_simple_arity_check_ok_0088:
 17306 0000DE28 C8000000                	enter 0, 0
 17307 0000DE2C 488B4520                	mov rax, qword [rbp + 8 * (4 + 0)]
 17308 0000DE30 50                      	push rax
 17309 0000DE31 6A01                    	push 1
 17310 0000DE33 488B0425[00000000]      	mov rax, qword [free_var_0]
 17311                                  	assert_closure(rax)
    42 0000DE3B 803805              <1>  cmp byte [%1], %2
    43 0000DE3E 0F8546370000        <1>  jne L_error_incorrect_type
 17312 0000DE44 FF7001                  	push SOB_CLOSURE_ENV(rax)
 17313 0000DE47 FF5009                  	call SOB_CLOSURE_CODE(rax)
 17314 0000DE4A 483D[02000000]          	cmp rax, sob_boolean_false
 17315 0000DE50 7462                              	je .L_if_else_004f
 17316 0000DE52 48B8-                             	mov rax, L_constants + 0
 17316 0000DE54 [0000000000000000] 
 17317 0000DE5C 50                      	push rax
 17318 0000DE5D 488B4528                	mov rax, qword [rbp + 8 * (4 + 1)]
 17319 0000DE61 50                      	push rax
 17320 0000DE62 6A02                    	push 2
 17321 0000DE64 488B0425[98010000]      	mov rax, qword [free_var_51]
 17322                                  	assert_closure(rax)
    42 0000DE6C 803805              <1>  cmp byte [%1], %2
    43 0000DE6F 0F8515370000        <1>  jne L_error_incorrect_type
 17323 0000DE75 FF7001                  	push SOB_CLOSURE_ENV(rax)
 17324 0000DE78 FF7508                  	push qword [rbp + 8 * 1] ; old ret addr
 17325 0000DE7B FF7500                  	push qword [rbp] ; same the old rbp
 17326 0000DE7E BA05000000              	mov rdx, 2 + 3
 17327 0000DE83 488B4D18                	mov rcx, COUNT
 17328 0000DE87 488D4CCD20              	lea rcx, [rbp + 8*4 + rcx * 8]
 17329 0000DE8C 4889EF                  	mov rdi, rbp
 17330                                  .L_tc_recycle_frame_loop_00a0:
 17331 0000DE8F 4883FA00                	cmp rdx, 0
 17332 0000DE93 7413                    	je .L_tc_recycle_frame_done_00a0
 17333 0000DE95 4883E908                	sub rcx, 8
 17334 0000DE99 4883EF08                	sub rdi, 8
 17335 0000DE9D 488B37                  	mov rsi, [rdi]
 17336 0000DEA0 488931                  	mov qword [rcx], rsi
 17337 0000DEA3 48FFCA                  	dec rdx
 17338 0000DEA6 EBE7                    	jmp .L_tc_recycle_frame_loop_00a0
 17339                                  .L_tc_recycle_frame_done_00a0:
 17340 0000DEA8 5D                      	pop rbp ; restore the old rbp
 17341 0000DEA9 4889CC                  	mov rsp, rcx
 17342 0000DEAC FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 17343 0000DEAF E991010000              	jmp .L_if_end_004f
 17344                                            .L_if_else_004f:
 17345 0000DEB4 48B8-                             	mov rax, L_constants + 128
 17345 0000DEB6 [8000000000000000] 
 17346 0000DEBE 50                      	push rax
 17347 0000DEBF 488B4528                	mov rax, qword [rbp + 8 * (4 + 1)]
 17348 0000DEC3 50                      	push rax
 17349 0000DEC4 6A02                    	push 2
 17350 0000DEC6 488B0425[08030000]      	mov rax, qword [free_var_97]
 17351                                  	assert_closure(rax)
    42 0000DECE 803805              <1>  cmp byte [%1], %2
    43 0000DED1 0F85B3360000        <1>  jne L_error_incorrect_type
 17352 0000DED7 FF7001                  	push SOB_CLOSURE_ENV(rax)
 17353 0000DEDA FF5009                  	call SOB_CLOSURE_CODE(rax)
 17354 0000DEDD 50                      	push rax
 17355 0000DEDE 488B4520                	mov rax, qword [rbp + 8 * (4 + 0)]
 17356 0000DEE2 50                      	push rax
 17357 0000DEE3 6A01                    	push 1
 17358 0000DEE5 488B0425[88000000]      	mov rax, qword [free_var_17]
 17359                                  	assert_closure(rax)
    42 0000DEED 803805              <1>  cmp byte [%1], %2
    43 0000DEF0 0F8594360000        <1>  jne L_error_incorrect_type
 17360 0000DEF6 FF7001                  	push SOB_CLOSURE_ENV(rax)
 17361 0000DEF9 FF5009                  	call SOB_CLOSURE_CODE(rax)
 17362 0000DEFC 50                      	push rax
 17363 0000DEFD 6A02                    	push 2
 17364 0000DEFF 488B4510                	mov rax, qword [rbp + 8 * 2]
 17365 0000DF03 488B00                  	mov rax, qword [rax + 8 * 0]
 17366 0000DF06 488B00                  	mov rax, qword [rax + 8 * 0]
 17367 0000DF09 488B00                  	mov rax, qword [rax]
 17368                                  	assert_closure(rax)
    42 0000DF0C 803805              <1>  cmp byte [%1], %2
    43 0000DF0F 0F8575360000        <1>  jne L_error_incorrect_type
 17369 0000DF15 FF7001                  	push SOB_CLOSURE_ENV(rax)
 17370 0000DF18 FF5009                  	call SOB_CLOSURE_CODE(rax)
 17371 0000DF1B 50                      	push rax
 17372 0000DF1C 6A01                    	push 1
 17373 0000DF1E BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 17374 0000DF23 E8691E0000              	call malloc
 17375 0000DF28 50                      	push rax
 17376 0000DF29 BF10000000              	mov rdi, 8 * 2	; new rib
 17377 0000DF2E E85E1E0000              	call malloc
 17378 0000DF33 50                      	push rax
 17379 0000DF34 BF18000000              	mov rdi, 8 * 3	; extended env
 17380 0000DF39 E8531E0000              	call malloc
 17381 0000DF3E 488B7D10                	mov rdi, ENV
 17382 0000DF42 BE00000000              	mov rsi, 0
 17383 0000DF47 BA01000000              	mov rdx, 1
 17384                                  .L_lambda_simple_env_loop_0089:	; ext_env[i + 1] <-- env[i]
 17385 0000DF4C 4883FE02                	cmp rsi, 2
 17386 0000DF50 7410                    	je .L_lambda_simple_env_end_0089
 17387 0000DF52 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 17388 0000DF56 48890CD0                	mov qword [rax + 8 * rdx], rcx
 17389 0000DF5A 48FFC6                  	inc rsi
 17390 0000DF5D 48FFC2                  	inc rdx
 17391 0000DF60 EBEA                    	jmp .L_lambda_simple_env_loop_0089
 17392                                  .L_lambda_simple_env_end_0089:
 17393 0000DF62 5B                      	pop rbx
 17394 0000DF63 BE00000000              	mov rsi, 0
 17395                                  .L_lambda_simple_params_loop_0089:	; copy params
 17396 0000DF68 4883FE02                	cmp rsi, 2
 17397 0000DF6C 740E                    	je .L_lambda_simple_params_end_0089
 17398 0000DF6E 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 17399 0000DF73 488914F3                	mov qword [rbx + 8 * rsi], rdx
 17400 0000DF77 48FFC6                  	inc rsi
 17401 0000DF7A EBEC                    	jmp .L_lambda_simple_params_loop_0089
 17402                                  .L_lambda_simple_params_end_0089:
 17403 0000DF7C 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 17404 0000DF7F 4889C3                  	mov rbx, rax
 17405 0000DF82 58                      	pop rax
 17406 0000DF83 C60005                  	mov byte [rax], T_closure
 17407 0000DF86 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 17408 0000DF8A 48C74009[94DF0000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0089
 17409 0000DF92 EB6E                    	jmp .L_lambda_simple_end_0089
 17410                                  .L_lambda_simple_code_0089:	; lambda-simple body
 17411 0000DF94 48837C241001            	cmp qword [rsp + 8 * 2], 1
 17412 0000DF9A 740B                    	je .L_lambda_simple_arity_check_ok_0089
 17413 0000DF9C FF742410                	push qword [rsp + 8 * 2]
 17414 0000DFA0 6A01                    	push 1
 17415 0000DFA2 E9A31D0000              	jmp L_error_incorrect_arity_simple
 17416                                  .L_lambda_simple_arity_check_ok_0089:
 17417 0000DFA7 C8000000                	enter 0, 0
 17418 0000DFAB 488B4510                	mov rax, qword [rbp + 8 * 2]
 17419 0000DFAF 488B00                  	mov rax, qword [rax + 8 * 0]
 17420 0000DFB2 488B00                  	mov rax, qword [rax + 8 * 0]
 17421 0000DFB5 50                      	push rax
 17422 0000DFB6 6A01                    	push 1
 17423 0000DFB8 488B0425[80000000]      	mov rax, qword [free_var_16]
 17424                                  	assert_closure(rax)
    42 0000DFC0 803805              <1>  cmp byte [%1], %2
    43 0000DFC3 0F85C1350000        <1>  jne L_error_incorrect_type
 17425 0000DFC9 FF7001                  	push SOB_CLOSURE_ENV(rax)
 17426 0000DFCC FF5009                  	call SOB_CLOSURE_CODE(rax)
 17427 0000DFCF 50                      	push rax
 17428 0000DFD0 488B4510                	mov rax, qword [rbp + 8 * 2]
 17429 0000DFD4 488B00                  	mov rax, qword [rax + 8 * 0]
 17430 0000DFD7 488B4008                	mov rax, qword [rax + 8 * 1]
 17431 0000DFDB 50                      	push rax
 17432 0000DFDC 488B4520                	mov rax, qword [rbp + 8 * (4 + 0)]
 17433 0000DFE0 50                      	push rax
 17434 0000DFE1 6A03                    	push 3
 17435 0000DFE3 488B0425[88010000]      	mov rax, qword [free_var_49]
 17436                                  	assert_closure(rax)
    42 0000DFEB 803805              <1>  cmp byte [%1], %2
    43 0000DFEE 0F8596350000        <1>  jne L_error_incorrect_type
 17437 0000DFF4 FF7001                  	push SOB_CLOSURE_ENV(rax)
 17438 0000DFF7 FF5009                  	call SOB_CLOSURE_CODE(rax)
 17439                                  
 17440 0000DFFA 488B4520                	mov rax, qword [rbp + 8 * (4 + 0)]
 17441 0000DFFE C9                      	leave
 17442 0000DFFF C21800                  	ret 8 * (2 + 1)
 17443                                  .L_lambda_simple_end_0089:	; new closure is in rax
 17444                                  	assert_closure(rax)
    42 0000E002 803805              <1>  cmp byte [%1], %2
    43 0000E005 0F857F350000        <1>  jne L_error_incorrect_type
 17445 0000E00B FF7001                  	push SOB_CLOSURE_ENV(rax)
 17446 0000E00E FF7508                  	push qword [rbp + 8 * 1] ; old ret addr
 17447 0000E011 FF7500                  	push qword [rbp] ; same the old rbp
 17448 0000E014 BA04000000              	mov rdx, 1 + 3
 17449 0000E019 488B4D18                	mov rcx, COUNT
 17450 0000E01D 488D4CCD20              	lea rcx, [rbp + 8*4 + rcx * 8]
 17451 0000E022 4889EF                  	mov rdi, rbp
 17452                                  .L_tc_recycle_frame_loop_00a1:
 17453 0000E025 4883FA00                	cmp rdx, 0
 17454 0000E029 7413                    	je .L_tc_recycle_frame_done_00a1
 17455 0000E02B 4883E908                	sub rcx, 8
 17456 0000E02F 4883EF08                	sub rdi, 8
 17457 0000E033 488B37                  	mov rsi, [rdi]
 17458 0000E036 488931                  	mov qword [rcx], rsi
 17459 0000E039 48FFCA                  	dec rdx
 17460 0000E03C EBE7                    	jmp .L_tc_recycle_frame_loop_00a1
 17461                                  .L_tc_recycle_frame_done_00a1:
 17462 0000E03E 5D                      	pop rbp ; restore the old rbp
 17463 0000E03F 4889CC                  	mov rsp, rcx
 17464 0000E042 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 17465                                  .L_if_end_004f:
 17466 0000E045 C9                      	leave
 17467 0000E046 C22000                  	ret 8 * (2 + 2)
 17468                                  .L_lambda_simple_end_0088:	; new closure is in rax
 17469 0000E049 50                      	push rax
 17470 0000E04A 488B4520                	mov rax, qword [rbp + 8 * (4 + 0)]
 17471 0000E04E 8F00                    	pop qword [rax]
 17472 0000E050 48B8-                   	mov rax, sob_void
 17472 0000E052 [0000000000000000] 
 17473                                  
 17474 0000E05A BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 17475 0000E05F E82D1D0000              	call malloc
 17476 0000E064 50                      	push rax
 17477 0000E065 BF08000000              	mov rdi, 8 * 1	; new rib
 17478 0000E06A E8221D0000              	call malloc
 17479 0000E06F 50                      	push rax
 17480 0000E070 BF10000000              	mov rdi, 8 * 2	; extended env
 17481 0000E075 E8171D0000              	call malloc
 17482 0000E07A 488B7D10                	mov rdi, ENV
 17483 0000E07E BE00000000              	mov rsi, 0
 17484 0000E083 BA01000000              	mov rdx, 1
 17485                                  .L_lambda_simple_env_loop_008a:	; ext_env[i + 1] <-- env[i]
 17486 0000E088 4883FE01                	cmp rsi, 1
 17487 0000E08C 7410                    	je .L_lambda_simple_env_end_008a
 17488 0000E08E 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 17489 0000E092 48890CD0                	mov qword [rax + 8 * rdx], rcx
 17490 0000E096 48FFC6                  	inc rsi
 17491 0000E099 48FFC2                  	inc rdx
 17492 0000E09C EBEA                    	jmp .L_lambda_simple_env_loop_008a
 17493                                  .L_lambda_simple_env_end_008a:
 17494 0000E09E 5B                      	pop rbx
 17495 0000E09F BE00000000              	mov rsi, 0
 17496                                  .L_lambda_simple_params_loop_008a:	; copy params
 17497 0000E0A4 4883FE01                	cmp rsi, 1
 17498 0000E0A8 740E                    	je .L_lambda_simple_params_end_008a
 17499 0000E0AA 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 17500 0000E0AF 488914F3                	mov qword [rbx + 8 * rsi], rdx
 17501 0000E0B3 48FFC6                  	inc rsi
 17502 0000E0B6 EBEC                    	jmp .L_lambda_simple_params_loop_008a
 17503                                  .L_lambda_simple_params_end_008a:
 17504 0000E0B8 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 17505 0000E0BB 4889C3                  	mov rbx, rax
 17506 0000E0BE 58                      	pop rax
 17507 0000E0BF C60005                  	mov byte [rax], T_closure
 17508 0000E0C2 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 17509 0000E0C6 48C74009[D3E00000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_008a
 17510 0000E0CE E97D000000              	jmp .L_lambda_simple_end_008a
 17511                                  .L_lambda_simple_code_008a:	; lambda-simple body
 17512 0000E0D3 48837C241001            	cmp qword [rsp + 8 * 2], 1
 17513 0000E0D9 740B                    	je .L_lambda_simple_arity_check_ok_008a
 17514 0000E0DB FF742410                	push qword [rsp + 8 * 2]
 17515 0000E0DF 6A01                    	push 1
 17516 0000E0E1 E9641C0000              	jmp L_error_incorrect_arity_simple
 17517                                  .L_lambda_simple_arity_check_ok_008a:
 17518 0000E0E6 C8000000                	enter 0, 0
 17519 0000E0EA 48B8-                   	mov rax, L_constants + 32
 17519 0000E0EC [2000000000000000] 
 17520 0000E0F4 50                      	push rax
 17521 0000E0F5 488B4520                	mov rax, qword [rbp + 8 * (4 + 0)]
 17522 0000E0F9 50                      	push rax
 17523 0000E0FA 6A02                    	push 2
 17524 0000E0FC 488B4510                	mov rax, qword [rbp + 8 * 2]
 17525 0000E100 488B00                  	mov rax, qword [rax + 8 * 0]
 17526 0000E103 488B00                  	mov rax, qword [rax + 8 * 0]
 17527 0000E106 488B00                  	mov rax, qword [rax]
 17528                                  	assert_closure(rax)
    42 0000E109 803805              <1>  cmp byte [%1], %2
    43 0000E10C 0F8578340000        <1>  jne L_error_incorrect_type
 17529 0000E112 FF7001                  	push SOB_CLOSURE_ENV(rax)
 17530 0000E115 FF7508                  	push qword [rbp + 8 * 1] ; old ret addr
 17531 0000E118 FF7500                  	push qword [rbp] ; same the old rbp
 17532 0000E11B BA05000000              	mov rdx, 2 + 3
 17533 0000E120 488B4D18                	mov rcx, COUNT
 17534 0000E124 488D4CCD20              	lea rcx, [rbp + 8*4 + rcx * 8]
 17535 0000E129 4889EF                  	mov rdi, rbp
 17536                                  .L_tc_recycle_frame_loop_00a2:
 17537 0000E12C 4883FA00                	cmp rdx, 0
 17538 0000E130 7413                    	je .L_tc_recycle_frame_done_00a2
 17539 0000E132 4883E908                	sub rcx, 8
 17540 0000E136 4883EF08                	sub rdi, 8
 17541 0000E13A 488B37                  	mov rsi, [rdi]
 17542 0000E13D 488931                  	mov qword [rcx], rsi
 17543 0000E140 48FFCA                  	dec rdx
 17544 0000E143 EBE7                    	jmp .L_tc_recycle_frame_loop_00a2
 17545                                  .L_tc_recycle_frame_done_00a2:
 17546 0000E145 5D                      	pop rbp ; restore the old rbp
 17547 0000E146 4889CC                  	mov rsp, rcx
 17548 0000E149 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 17549 0000E14C C9                      	leave
 17550 0000E14D C21800                  	ret 8 * (2 + 1)
 17551                                  .L_lambda_simple_end_008a:	; new closure is in rax
 17552 0000E150 C9                      	leave
 17553 0000E151 C21800                  	ret 8 * (2 + 1)
 17554                                  .L_lambda_simple_end_0087:	; new closure is in rax
 17555                                  	assert_closure(rax)
    42 0000E154 803805              <1>  cmp byte [%1], %2
    43 0000E157 0F852D340000        <1>  jne L_error_incorrect_type
 17556 0000E15D FF7001                  	push SOB_CLOSURE_ENV(rax)
 17557 0000E160 FF5009                  	call SOB_CLOSURE_CODE(rax)
 17558 0000E163 48890425[38040000]      	mov qword [free_var_135], rax
 17559 0000E16B 48B8-                   	mov rax, sob_void
 17559 0000E16D [0000000000000000] 
 17560                                  
 17561 0000E175 4889C7                  	mov rdi, rax
 17562 0000E178 E8251C0000              	call print_sexpr_if_not_void
 17563                                  
 17564 0000E17D 48B8-                   	mov rax, L_constants + 23
 17564 0000E17F [1700000000000000] 
 17565 0000E187 50                      	push rax
 17566 0000E188 6A01                    	push 1
 17567 0000E18A BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 17568 0000E18F E8FD1B0000              	call malloc
 17569 0000E194 50                      	push rax
 17570 0000E195 BF00000000              	mov rdi, 8 * 0	; new rib
 17571 0000E19A E8F21B0000              	call malloc
 17572 0000E19F 50                      	push rax
 17573 0000E1A0 BF08000000              	mov rdi, 8 * 1	; extended env
 17574 0000E1A5 E8E71B0000              	call malloc
 17575 0000E1AA 488B7D10                	mov rdi, ENV
 17576 0000E1AE BE00000000              	mov rsi, 0
 17577 0000E1B3 BA01000000              	mov rdx, 1
 17578                                  .L_lambda_simple_env_loop_008b:	; ext_env[i + 1] <-- env[i]
 17579 0000E1B8 4883FE00                	cmp rsi, 0
 17580 0000E1BC 7410                    	je .L_lambda_simple_env_end_008b
 17581 0000E1BE 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 17582 0000E1C2 48890CD0                	mov qword [rax + 8 * rdx], rcx
 17583 0000E1C6 48FFC6                  	inc rsi
 17584 0000E1C9 48FFC2                  	inc rdx
 17585 0000E1CC EBEA                    	jmp .L_lambda_simple_env_loop_008b
 17586                                  .L_lambda_simple_env_end_008b:
 17587 0000E1CE 5B                      	pop rbx
 17588 0000E1CF BE00000000              	mov rsi, 0
 17589                                  .L_lambda_simple_params_loop_008b:	; copy params
 17590 0000E1D4 4883FE00                	cmp rsi, 0
 17591 0000E1D8 740E                    	je .L_lambda_simple_params_end_008b
 17592 0000E1DA 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 17593 0000E1DF 488914F3                	mov qword [rbx + 8 * rsi], rdx
 17594 0000E1E3 48FFC6                  	inc rsi
 17595 0000E1E6 EBEC                    	jmp .L_lambda_simple_params_loop_008b
 17596                                  .L_lambda_simple_params_end_008b:
 17597 0000E1E8 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 17598 0000E1EB 4889C3                  	mov rbx, rax
 17599 0000E1EE 58                      	pop rax
 17600 0000E1EF C60005                  	mov byte [rax], T_closure
 17601 0000E1F2 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 17602 0000E1F6 48C74009[03E20000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_008b
 17603 0000E1FE E9F1030000              	jmp .L_lambda_simple_end_008b
 17604                                  .L_lambda_simple_code_008b:	; lambda-simple body
 17605 0000E203 48837C241001            	cmp qword [rsp + 8 * 2], 1
 17606 0000E209 740B                    	je .L_lambda_simple_arity_check_ok_008b
 17607 0000E20B FF742410                	push qword [rsp + 8 * 2]
 17608 0000E20F 6A01                    	push 1
 17609 0000E211 E9341B0000              	jmp L_error_incorrect_arity_simple
 17610                                  .L_lambda_simple_arity_check_ok_008b:
 17611 0000E216 C8000000                	enter 0, 0
 17612 0000E21A 488B4520                	mov rax, qword [rbp + 8 * (4 + 0)]
 17613 0000E21E 4889C2                  	mov rdx, rax
 17614 0000E221 BF08000000              	mov rdi, 8
 17615 0000E226 E8661B0000              	call malloc
 17616 0000E22B 488910                  	mov qword[rax], rdx
 17617 0000E22E 48894520                	mov qword [rbp + 8 * (4 + 0)], rax
 17618 0000E232 48B8-                   	mov rax, sob_void
 17618 0000E234 [0000000000000000] 
 17619                                  
 17620 0000E23C BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 17621 0000E241 E84B1B0000              	call malloc
 17622 0000E246 50                      	push rax
 17623 0000E247 BF08000000              	mov rdi, 8 * 1	; new rib
 17624 0000E24C E8401B0000              	call malloc
 17625 0000E251 50                      	push rax
 17626 0000E252 BF10000000              	mov rdi, 8 * 2	; extended env
 17627 0000E257 E8351B0000              	call malloc
 17628 0000E25C 488B7D10                	mov rdi, ENV
 17629 0000E260 BE00000000              	mov rsi, 0
 17630 0000E265 BA01000000              	mov rdx, 1
 17631                                  .L_lambda_simple_env_loop_008c:	; ext_env[i + 1] <-- env[i]
 17632 0000E26A 4883FE01                	cmp rsi, 1
 17633 0000E26E 7410                    	je .L_lambda_simple_env_end_008c
 17634 0000E270 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 17635 0000E274 48890CD0                	mov qword [rax + 8 * rdx], rcx
 17636 0000E278 48FFC6                  	inc rsi
 17637 0000E27B 48FFC2                  	inc rdx
 17638 0000E27E EBEA                    	jmp .L_lambda_simple_env_loop_008c
 17639                                  .L_lambda_simple_env_end_008c:
 17640 0000E280 5B                      	pop rbx
 17641 0000E281 BE00000000              	mov rsi, 0
 17642                                  .L_lambda_simple_params_loop_008c:	; copy params
 17643 0000E286 4883FE01                	cmp rsi, 1
 17644 0000E28A 740E                    	je .L_lambda_simple_params_end_008c
 17645 0000E28C 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 17646 0000E291 488914F3                	mov qword [rbx + 8 * rsi], rdx
 17647 0000E295 48FFC6                  	inc rsi
 17648 0000E298 EBEC                    	jmp .L_lambda_simple_params_loop_008c
 17649                                  .L_lambda_simple_params_end_008c:
 17650 0000E29A 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 17651 0000E29D 4889C3                  	mov rbx, rax
 17652 0000E2A0 58                      	pop rax
 17653 0000E2A1 C60005                  	mov byte [rax], T_closure
 17654 0000E2A4 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 17655 0000E2A8 48C74009[B5E20000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_008c
 17656 0000E2B0 E934020000              	jmp .L_lambda_simple_end_008c
 17657                                  .L_lambda_simple_code_008c:	; lambda-simple body
 17658 0000E2B5 48837C241002            	cmp qword [rsp + 8 * 2], 2
 17659 0000E2BB 740B                    	je .L_lambda_simple_arity_check_ok_008c
 17660 0000E2BD FF742410                	push qword [rsp + 8 * 2]
 17661 0000E2C1 6A02                    	push 2
 17662 0000E2C3 E9821A0000              	jmp L_error_incorrect_arity_simple
 17663                                  .L_lambda_simple_arity_check_ok_008c:
 17664 0000E2C8 C8000000                	enter 0, 0
 17665 0000E2CC 488B4520                	mov rax, qword [rbp + 8 * (4 + 0)]
 17666 0000E2D0 50                      	push rax
 17667 0000E2D1 6A01                    	push 1
 17668 0000E2D3 488B0425[00000000]      	mov rax, qword [free_var_0]
 17669                                  	assert_closure(rax)
    42 0000E2DB 803805              <1>  cmp byte [%1], %2
    43 0000E2DE 0F85A6320000        <1>  jne L_error_incorrect_type
 17670 0000E2E4 FF7001                  	push SOB_CLOSURE_ENV(rax)
 17671 0000E2E7 FF5009                  	call SOB_CLOSURE_CODE(rax)
 17672 0000E2EA 483D[02000000]          	cmp rax, sob_boolean_false
 17673 0000E2F0 7462                              	je .L_if_else_0050
 17674 0000E2F2 48B8-                             	mov rax, L_constants + 4
 17674 0000E2F4 [0400000000000000] 
 17675 0000E2FC 50                      	push rax
 17676 0000E2FD 488B4528                	mov rax, qword [rbp + 8 * (4 + 1)]
 17677 0000E301 50                      	push rax
 17678 0000E302 6A02                    	push 2
 17679 0000E304 488B0425[A0010000]      	mov rax, qword [free_var_52]
 17680                                  	assert_closure(rax)
    42 0000E30C 803805              <1>  cmp byte [%1], %2
    43 0000E30F 0F8575320000        <1>  jne L_error_incorrect_type
 17681 0000E315 FF7001                  	push SOB_CLOSURE_ENV(rax)
 17682 0000E318 FF7508                  	push qword [rbp + 8 * 1] ; old ret addr
 17683 0000E31B FF7500                  	push qword [rbp] ; same the old rbp
 17684 0000E31E BA05000000              	mov rdx, 2 + 3
 17685 0000E323 488B4D18                	mov rcx, COUNT
 17686 0000E327 488D4CCD20              	lea rcx, [rbp + 8*4 + rcx * 8]
 17687 0000E32C 4889EF                  	mov rdi, rbp
 17688                                  .L_tc_recycle_frame_loop_00a3:
 17689 0000E32F 4883FA00                	cmp rdx, 0
 17690 0000E333 7413                    	je .L_tc_recycle_frame_done_00a3
 17691 0000E335 4883E908                	sub rcx, 8
 17692 0000E339 4883EF08                	sub rdi, 8
 17693 0000E33D 488B37                  	mov rsi, [rdi]
 17694 0000E340 488931                  	mov qword [rcx], rsi
 17695 0000E343 48FFCA                  	dec rdx
 17696 0000E346 EBE7                    	jmp .L_tc_recycle_frame_loop_00a3
 17697                                  .L_tc_recycle_frame_done_00a3:
 17698 0000E348 5D                      	pop rbp ; restore the old rbp
 17699 0000E349 4889CC                  	mov rsp, rcx
 17700 0000E34C FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 17701 0000E34F E991010000              	jmp .L_if_end_0050
 17702                                            .L_if_else_0050:
 17703 0000E354 48B8-                             	mov rax, L_constants + 128
 17703 0000E356 [8000000000000000] 
 17704 0000E35E 50                      	push rax
 17705 0000E35F 488B4528                	mov rax, qword [rbp + 8 * (4 + 1)]
 17706 0000E363 50                      	push rax
 17707 0000E364 6A02                    	push 2
 17708 0000E366 488B0425[08030000]      	mov rax, qword [free_var_97]
 17709                                  	assert_closure(rax)
    42 0000E36E 803805              <1>  cmp byte [%1], %2
    43 0000E371 0F8513320000        <1>  jne L_error_incorrect_type
 17710 0000E377 FF7001                  	push SOB_CLOSURE_ENV(rax)
 17711 0000E37A FF5009                  	call SOB_CLOSURE_CODE(rax)
 17712 0000E37D 50                      	push rax
 17713 0000E37E 488B4520                	mov rax, qword [rbp + 8 * (4 + 0)]
 17714 0000E382 50                      	push rax
 17715 0000E383 6A01                    	push 1
 17716 0000E385 488B0425[88000000]      	mov rax, qword [free_var_17]
 17717                                  	assert_closure(rax)
    42 0000E38D 803805              <1>  cmp byte [%1], %2
    43 0000E390 0F85F4310000        <1>  jne L_error_incorrect_type
 17718 0000E396 FF7001                  	push SOB_CLOSURE_ENV(rax)
 17719 0000E399 FF5009                  	call SOB_CLOSURE_CODE(rax)
 17720 0000E39C 50                      	push rax
 17721 0000E39D 6A02                    	push 2
 17722 0000E39F 488B4510                	mov rax, qword [rbp + 8 * 2]
 17723 0000E3A3 488B00                  	mov rax, qword [rax + 8 * 0]
 17724 0000E3A6 488B00                  	mov rax, qword [rax + 8 * 0]
 17725 0000E3A9 488B00                  	mov rax, qword [rax]
 17726                                  	assert_closure(rax)
    42 0000E3AC 803805              <1>  cmp byte [%1], %2
    43 0000E3AF 0F85D5310000        <1>  jne L_error_incorrect_type
 17727 0000E3B5 FF7001                  	push SOB_CLOSURE_ENV(rax)
 17728 0000E3B8 FF5009                  	call SOB_CLOSURE_CODE(rax)
 17729 0000E3BB 50                      	push rax
 17730 0000E3BC 6A01                    	push 1
 17731 0000E3BE BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 17732 0000E3C3 E8C9190000              	call malloc
 17733 0000E3C8 50                      	push rax
 17734 0000E3C9 BF10000000              	mov rdi, 8 * 2	; new rib
 17735 0000E3CE E8BE190000              	call malloc
 17736 0000E3D3 50                      	push rax
 17737 0000E3D4 BF18000000              	mov rdi, 8 * 3	; extended env
 17738 0000E3D9 E8B3190000              	call malloc
 17739 0000E3DE 488B7D10                	mov rdi, ENV
 17740 0000E3E2 BE00000000              	mov rsi, 0
 17741 0000E3E7 BA01000000              	mov rdx, 1
 17742                                  .L_lambda_simple_env_loop_008d:	; ext_env[i + 1] <-- env[i]
 17743 0000E3EC 4883FE02                	cmp rsi, 2
 17744 0000E3F0 7410                    	je .L_lambda_simple_env_end_008d
 17745 0000E3F2 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 17746 0000E3F6 48890CD0                	mov qword [rax + 8 * rdx], rcx
 17747 0000E3FA 48FFC6                  	inc rsi
 17748 0000E3FD 48FFC2                  	inc rdx
 17749 0000E400 EBEA                    	jmp .L_lambda_simple_env_loop_008d
 17750                                  .L_lambda_simple_env_end_008d:
 17751 0000E402 5B                      	pop rbx
 17752 0000E403 BE00000000              	mov rsi, 0
 17753                                  .L_lambda_simple_params_loop_008d:	; copy params
 17754 0000E408 4883FE02                	cmp rsi, 2
 17755 0000E40C 740E                    	je .L_lambda_simple_params_end_008d
 17756 0000E40E 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 17757 0000E413 488914F3                	mov qword [rbx + 8 * rsi], rdx
 17758 0000E417 48FFC6                  	inc rsi
 17759 0000E41A EBEC                    	jmp .L_lambda_simple_params_loop_008d
 17760                                  .L_lambda_simple_params_end_008d:
 17761 0000E41C 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 17762 0000E41F 4889C3                  	mov rbx, rax
 17763 0000E422 58                      	pop rax
 17764 0000E423 C60005                  	mov byte [rax], T_closure
 17765 0000E426 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 17766 0000E42A 48C74009[34E40000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_008d
 17767 0000E432 EB6E                    	jmp .L_lambda_simple_end_008d
 17768                                  .L_lambda_simple_code_008d:	; lambda-simple body
 17769 0000E434 48837C241001            	cmp qword [rsp + 8 * 2], 1
 17770 0000E43A 740B                    	je .L_lambda_simple_arity_check_ok_008d
 17771 0000E43C FF742410                	push qword [rsp + 8 * 2]
 17772 0000E440 6A01                    	push 1
 17773 0000E442 E903190000              	jmp L_error_incorrect_arity_simple
 17774                                  .L_lambda_simple_arity_check_ok_008d:
 17775 0000E447 C8000000                	enter 0, 0
 17776 0000E44B 488B4510                	mov rax, qword [rbp + 8 * 2]
 17777 0000E44F 488B00                  	mov rax, qword [rax + 8 * 0]
 17778 0000E452 488B00                  	mov rax, qword [rax + 8 * 0]
 17779 0000E455 50                      	push rax
 17780 0000E456 6A01                    	push 1
 17781 0000E458 488B0425[80000000]      	mov rax, qword [free_var_16]
 17782                                  	assert_closure(rax)
    42 0000E460 803805              <1>  cmp byte [%1], %2
    43 0000E463 0F8521310000        <1>  jne L_error_incorrect_type
 17783 0000E469 FF7001                  	push SOB_CLOSURE_ENV(rax)
 17784 0000E46C FF5009                  	call SOB_CLOSURE_CODE(rax)
 17785 0000E46F 50                      	push rax
 17786 0000E470 488B4510                	mov rax, qword [rbp + 8 * 2]
 17787 0000E474 488B00                  	mov rax, qword [rax + 8 * 0]
 17788 0000E477 488B4008                	mov rax, qword [rax + 8 * 1]
 17789 0000E47B 50                      	push rax
 17790 0000E47C 488B4520                	mov rax, qword [rbp + 8 * (4 + 0)]
 17791 0000E480 50                      	push rax
 17792 0000E481 6A03                    	push 3
 17793 0000E483 488B0425[90010000]      	mov rax, qword [free_var_50]
 17794                                  	assert_closure(rax)
    42 0000E48B 803805              <1>  cmp byte [%1], %2
    43 0000E48E 0F85F6300000        <1>  jne L_error_incorrect_type
 17795 0000E494 FF7001                  	push SOB_CLOSURE_ENV(rax)
 17796 0000E497 FF5009                  	call SOB_CLOSURE_CODE(rax)
 17797                                  
 17798 0000E49A 488B4520                	mov rax, qword [rbp + 8 * (4 + 0)]
 17799 0000E49E C9                      	leave
 17800 0000E49F C21800                  	ret 8 * (2 + 1)
 17801                                  .L_lambda_simple_end_008d:	; new closure is in rax
 17802                                  	assert_closure(rax)
    42 0000E4A2 803805              <1>  cmp byte [%1], %2
    43 0000E4A5 0F85DF300000        <1>  jne L_error_incorrect_type
 17803 0000E4AB FF7001                  	push SOB_CLOSURE_ENV(rax)
 17804 0000E4AE FF7508                  	push qword [rbp + 8 * 1] ; old ret addr
 17805 0000E4B1 FF7500                  	push qword [rbp] ; same the old rbp
 17806 0000E4B4 BA04000000              	mov rdx, 1 + 3
 17807 0000E4B9 488B4D18                	mov rcx, COUNT
 17808 0000E4BD 488D4CCD20              	lea rcx, [rbp + 8*4 + rcx * 8]
 17809 0000E4C2 4889EF                  	mov rdi, rbp
 17810                                  .L_tc_recycle_frame_loop_00a4:
 17811 0000E4C5 4883FA00                	cmp rdx, 0
 17812 0000E4C9 7413                    	je .L_tc_recycle_frame_done_00a4
 17813 0000E4CB 4883E908                	sub rcx, 8
 17814 0000E4CF 4883EF08                	sub rdi, 8
 17815 0000E4D3 488B37                  	mov rsi, [rdi]
 17816 0000E4D6 488931                  	mov qword [rcx], rsi
 17817 0000E4D9 48FFCA                  	dec rdx
 17818 0000E4DC EBE7                    	jmp .L_tc_recycle_frame_loop_00a4
 17819                                  .L_tc_recycle_frame_done_00a4:
 17820 0000E4DE 5D                      	pop rbp ; restore the old rbp
 17821 0000E4DF 4889CC                  	mov rsp, rcx
 17822 0000E4E2 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 17823                                  .L_if_end_0050:
 17824 0000E4E5 C9                      	leave
 17825 0000E4E6 C22000                  	ret 8 * (2 + 2)
 17826                                  .L_lambda_simple_end_008c:	; new closure is in rax
 17827 0000E4E9 50                      	push rax
 17828 0000E4EA 488B4520                	mov rax, qword [rbp + 8 * (4 + 0)]
 17829 0000E4EE 8F00                    	pop qword [rax]
 17830 0000E4F0 48B8-                   	mov rax, sob_void
 17830 0000E4F2 [0000000000000000] 
 17831                                  
 17832 0000E4FA BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 17833 0000E4FF E88D180000              	call malloc
 17834 0000E504 50                      	push rax
 17835 0000E505 BF08000000              	mov rdi, 8 * 1	; new rib
 17836 0000E50A E882180000              	call malloc
 17837 0000E50F 50                      	push rax
 17838 0000E510 BF10000000              	mov rdi, 8 * 2	; extended env
 17839 0000E515 E877180000              	call malloc
 17840 0000E51A 488B7D10                	mov rdi, ENV
 17841 0000E51E BE00000000              	mov rsi, 0
 17842 0000E523 BA01000000              	mov rdx, 1
 17843                                  .L_lambda_simple_env_loop_008e:	; ext_env[i + 1] <-- env[i]
 17844 0000E528 4883FE01                	cmp rsi, 1
 17845 0000E52C 7410                    	je .L_lambda_simple_env_end_008e
 17846 0000E52E 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 17847 0000E532 48890CD0                	mov qword [rax + 8 * rdx], rcx
 17848 0000E536 48FFC6                  	inc rsi
 17849 0000E539 48FFC2                  	inc rdx
 17850 0000E53C EBEA                    	jmp .L_lambda_simple_env_loop_008e
 17851                                  .L_lambda_simple_env_end_008e:
 17852 0000E53E 5B                      	pop rbx
 17853 0000E53F BE00000000              	mov rsi, 0
 17854                                  .L_lambda_simple_params_loop_008e:	; copy params
 17855 0000E544 4883FE01                	cmp rsi, 1
 17856 0000E548 740E                    	je .L_lambda_simple_params_end_008e
 17857 0000E54A 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 17858 0000E54F 488914F3                	mov qword [rbx + 8 * rsi], rdx
 17859 0000E553 48FFC6                  	inc rsi
 17860 0000E556 EBEC                    	jmp .L_lambda_simple_params_loop_008e
 17861                                  .L_lambda_simple_params_end_008e:
 17862 0000E558 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 17863 0000E55B 4889C3                  	mov rbx, rax
 17864 0000E55E 58                      	pop rax
 17865 0000E55F C60005                  	mov byte [rax], T_closure
 17866 0000E562 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 17867 0000E566 48C74009[73E50000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_008e
 17868 0000E56E E97D000000              	jmp .L_lambda_simple_end_008e
 17869                                  .L_lambda_simple_code_008e:	; lambda-simple body
 17870 0000E573 48837C241001            	cmp qword [rsp + 8 * 2], 1
 17871 0000E579 740B                    	je .L_lambda_simple_arity_check_ok_008e
 17872 0000E57B FF742410                	push qword [rsp + 8 * 2]
 17873 0000E57F 6A01                    	push 1
 17874 0000E581 E9C4170000              	jmp L_error_incorrect_arity_simple
 17875                                  .L_lambda_simple_arity_check_ok_008e:
 17876 0000E586 C8000000                	enter 0, 0
 17877 0000E58A 48B8-                   	mov rax, L_constants + 32
 17877 0000E58C [2000000000000000] 
 17878 0000E594 50                      	push rax
 17879 0000E595 488B4520                	mov rax, qword [rbp + 8 * (4 + 0)]
 17880 0000E599 50                      	push rax
 17881 0000E59A 6A02                    	push 2
 17882 0000E59C 488B4510                	mov rax, qword [rbp + 8 * 2]
 17883 0000E5A0 488B00                  	mov rax, qword [rax + 8 * 0]
 17884 0000E5A3 488B00                  	mov rax, qword [rax + 8 * 0]
 17885 0000E5A6 488B00                  	mov rax, qword [rax]
 17886                                  	assert_closure(rax)
    42 0000E5A9 803805              <1>  cmp byte [%1], %2
    43 0000E5AC 0F85D82F0000        <1>  jne L_error_incorrect_type
 17887 0000E5B2 FF7001                  	push SOB_CLOSURE_ENV(rax)
 17888 0000E5B5 FF7508                  	push qword [rbp + 8 * 1] ; old ret addr
 17889 0000E5B8 FF7500                  	push qword [rbp] ; same the old rbp
 17890 0000E5BB BA05000000              	mov rdx, 2 + 3
 17891 0000E5C0 488B4D18                	mov rcx, COUNT
 17892 0000E5C4 488D4CCD20              	lea rcx, [rbp + 8*4 + rcx * 8]
 17893 0000E5C9 4889EF                  	mov rdi, rbp
 17894                                  .L_tc_recycle_frame_loop_00a5:
 17895 0000E5CC 4883FA00                	cmp rdx, 0
 17896 0000E5D0 7413                    	je .L_tc_recycle_frame_done_00a5
 17897 0000E5D2 4883E908                	sub rcx, 8
 17898 0000E5D6 4883EF08                	sub rdi, 8
 17899 0000E5DA 488B37                  	mov rsi, [rdi]
 17900 0000E5DD 488931                  	mov qword [rcx], rsi
 17901 0000E5E0 48FFCA                  	dec rdx
 17902 0000E5E3 EBE7                    	jmp .L_tc_recycle_frame_loop_00a5
 17903                                  .L_tc_recycle_frame_done_00a5:
 17904 0000E5E5 5D                      	pop rbp ; restore the old rbp
 17905 0000E5E6 4889CC                  	mov rsp, rcx
 17906 0000E5E9 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 17907 0000E5EC C9                      	leave
 17908 0000E5ED C21800                  	ret 8 * (2 + 1)
 17909                                  .L_lambda_simple_end_008e:	; new closure is in rax
 17910 0000E5F0 C9                      	leave
 17911 0000E5F1 C21800                  	ret 8 * (2 + 1)
 17912                                  .L_lambda_simple_end_008b:	; new closure is in rax
 17913                                  	assert_closure(rax)
    42 0000E5F4 803805              <1>  cmp byte [%1], %2
    43 0000E5F7 0F858D2F0000        <1>  jne L_error_incorrect_type
 17914 0000E5FD FF7001                  	push SOB_CLOSURE_ENV(rax)
 17915 0000E600 FF5009                  	call SOB_CLOSURE_CODE(rax)
 17916 0000E603 48890425[D0030000]      	mov qword [free_var_122], rax
 17917 0000E60B 48B8-                   	mov rax, sob_void
 17917 0000E60D [0000000000000000] 
 17918                                  
 17919 0000E615 4889C7                  	mov rdi, rax
 17920 0000E618 E885170000              	call print_sexpr_if_not_void
 17921                                  
 17922 0000E61D BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 17923 0000E622 E86A170000              	call malloc
 17924 0000E627 50                      	push rax
 17925 0000E628 BF00000000              	mov rdi, 8 * 0	; new rib
 17926 0000E62D E85F170000              	call malloc
 17927 0000E632 50                      	push rax
 17928 0000E633 BF08000000              	mov rdi, 8 * 1	; extended env
 17929 0000E638 E854170000              	call malloc
 17930 0000E63D 488B7D10                	mov rdi, ENV
 17931 0000E641 BE00000000              	mov rsi, 0
 17932 0000E646 BA01000000              	mov rdx, 1
 17933                                  .L_lambda_opt_env_loop_0017:	; ext_env[i + 1] <-- env[i]
 17934 0000E64B 4883FE00                	cmp rsi, 0
 17935 0000E64F 7410                    	je .L_lambda_opt_env_end_0017
 17936 0000E651 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 17937 0000E655 48890CD0                	mov qword [rax + 8 * rdx], rcx
 17938 0000E659 48FFC6                  	inc rsi
 17939 0000E65C 48FFC2                  	inc rdx
 17940 0000E65F EBEA                    	jmp .L_lambda_opt_env_loop_0017
 17941                                  .L_lambda_opt_env_end_0017:
 17942 0000E661 5B                      	pop rbx
 17943 0000E662 BE00000000              	mov rsi, 0
 17944                                  .L_lambda_opt_params_loop_0017:	; copy params
 17945 0000E667 4883FE00                	cmp rsi, 0
 17946 0000E66B 740E                    	je .L_lambda_opt_params_end_0017
 17947 0000E66D 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 17948 0000E672 488914F3                	mov qword [rbx + 8 * rsi], rdx
 17949 0000E676 48FFC6                  	inc rsi
 17950 0000E679 EBEC                    	jmp .L_lambda_opt_params_loop_0017
 17951                                  .L_lambda_opt_params_end_0017:
 17952 0000E67B 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 17953 0000E67E 4889C3                  	mov rbx, rax
 17954 0000E681 58                      	pop rax
 17955 0000E682 C60005                  	mov byte [rax], T_closure
 17956 0000E685 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 17957 0000E689 48C74009[96E60000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_opt_code_0017
 17958 0000E691 E92C010000              	jmp .L_lambda_opt_end_0017
 17959                                  .L_lambda_opt_code_0017:	; lambda-opt body
 17960 0000E696 48837C241000            	cmp qword [rsp + 8 * 2], 0
 17961 0000E69C 740D                    	je .L_lambda_opt_arity_check_exact_0017
 17962 0000E69E 7F43                    	jg .L_lambda_opt_arity_check_more_0017
 17963 0000E6A0 FF742410                	push qword [rsp + 8 * 2]
 17964 0000E6A4 6A00                    	push 0
 17965 0000E6A6 E9B3160000              	jmp L_error_incorrect_arity_opt
 17966                                  .L_lambda_opt_arity_check_exact_0017:
 17967 0000E6AB 48C744241001000000      	mov qword [rsp + 8 * 2], 1
 17968 0000E6B4 BA03000000              	mov rdx, 3
 17969 0000E6B9 FF3424                  	push qword [rsp]
 17970 0000E6BC BE01000000              	mov rsi, 1
 17971                                  .L_lambda_opt_stack_shrink_loop_0043:
 17972 0000E6C1 4839D6                  	cmp rsi, rdx
 17973 0000E6C4 7411                    	je .L_lambda_opt_stack_shrink_loop_exit_0043
 17974 0000E6C6 488D5CF408              	lea rbx, [rsp + 8 + rsi * 8]
 17975 0000E6CB 488B0B                  	mov rcx, [rbx]
 17976 0000E6CE 48894BF8                	mov qword [rbx - 8], rcx
 17977 0000E6D2 48FFC6                  	inc rsi
 17978 0000E6D5 EBEA                    	jmp .L_lambda_opt_stack_shrink_loop_0043
 17979                                  .L_lambda_opt_stack_shrink_loop_exit_0043:
 17980 0000E6D7 48C703[01000000]        	mov qword [rbx], sob_nil
 17981 0000E6DE E985000000              	jmp .L_lambda_opt_stack_adjusted_0017
 17982                                  .L_lambda_opt_arity_check_more_0017:
 17983 0000E6E3 488B542410              	mov rdx, qword [rsp + 8 * 2]
 17984 0000E6E8 4883EA00                	sub rdx, 0
 17985 0000E6EC 48C744241001000000      	mov qword [rsp + 8 * 2], 1
 17986 0000E6F5 BE00000000              	mov rsi, 0
 17987 0000E6FA 488D5CD410              	lea rbx, [rsp + 2 * 8 + 0 * 8 + rdx * 8]
 17988 0000E6FF 48B9-                   	mov rcx, sob_nil
 17988 0000E701 [0100000000000000] 
 17989                                  .L_lambda_opt_stack_shrink_loop_0044:
 17990 0000E709 4839D6                  	cmp rsi, rdx
 17991 0000E70C 7427                    je .L_lambda_opt_stack_shrink_loop_exit_0044
 17992 0000E70E BF11000000              	mov rdi, 17 ; 1+8+8
 17993 0000E713 E879160000              	call malloc
 17994 0000E718 48894809                	mov SOB_PAIR_CDR(rax), rcx
 17995 0000E71C 48F7DE                  	neg rsi
 17996 0000E71F 488B0CF3                	mov rcx, qword [rbx + rsi * 8]
 17997 0000E723 48F7DE                  	neg rsi
 17998 0000E726 48894801                	mov SOB_PAIR_CAR(rax), rcx
 17999 0000E72A C60021                  	mov byte [rax], T_pair
 18000 0000E72D 4889C1                  	mov rcx, rax
 18001 0000E730 48FFC6                  	inc rsi
 18002 0000E733 EBD4                    	jmp .L_lambda_opt_stack_shrink_loop_0044
 18003                                  .L_lambda_opt_stack_shrink_loop_exit_0044:
 18004 0000E735 48890B                  	mov qword [rbx], rcx
 18005 0000E738 4883EB08                	sub rbx, 8
 18006 0000E73C 4889E7                  	mov rdi, rsp
 18007 0000E73F 4883C710                	add rdi, 16
 18008 0000E743 BE03000000              	mov rsi, 3
 18009                                  .L_lambda_opt_stack_shrink_loop_0045:
 18010 0000E748 4883FE00                	cmp rsi,0
 18011 0000E74C 7413                    	je .L_lambda_opt_stack_shrink_loop_exit_0045
 18012 0000E74E 488B0F                  	mov rcx, qword [rdi]
 18013 0000E751 48890B                  	mov [rbx], rcx
 18014 0000E754 48FFCE                  	dec rsi
 18015 0000E757 4883EB08                	sub rbx, 8
 18016 0000E75B 4883EF08                	sub rdi, 8
 18017 0000E75F EBE7                    	jmp .L_lambda_opt_stack_shrink_loop_0045
 18018                                  .L_lambda_opt_stack_shrink_loop_exit_0045:
 18019 0000E761 4883C308                	add rbx, 8
 18020 0000E765 4889DC                  	mov rsp, rbx
 18021                                  .L_lambda_opt_stack_adjusted_0017:
 18022 0000E768 C8000000                	enter 0, 0
 18023 0000E76C 488B4520                	mov rax, qword [rbp + 8 * (4 + 0)]
 18024 0000E770 50                      	push rax
 18025 0000E771 6A01                    	push 1
 18026 0000E773 488B0425[38040000]      	mov rax, qword [free_var_135]
 18027                                  	assert_closure(rax)
    42 0000E77B 803805              <1>  cmp byte [%1], %2
    43 0000E77E 0F85062E0000        <1>  jne L_error_incorrect_type
 18028 0000E784 FF7001                  	push SOB_CLOSURE_ENV(rax)
 18029 0000E787 FF7508                  	push qword [rbp + 8 * 1] ; old ret addr
 18030 0000E78A FF7500                  	push qword [rbp] ; same the old rbp
 18031 0000E78D BA04000000              	mov rdx, 1 + 3
 18032 0000E792 488B4D18                	mov rcx, COUNT
 18033 0000E796 488D4CCD20              	lea rcx, [rbp + 8*4 + rcx * 8]
 18034 0000E79B 4889EF                  	mov rdi, rbp
 18035                                  .L_tc_recycle_frame_loop_00a6:
 18036 0000E79E 4883FA00                	cmp rdx, 0
 18037 0000E7A2 7413                    	je .L_tc_recycle_frame_done_00a6
 18038 0000E7A4 4883E908                	sub rcx, 8
 18039 0000E7A8 4883EF08                	sub rdi, 8
 18040 0000E7AC 488B37                  	mov rsi, [rdi]
 18041 0000E7AF 488931                  	mov qword [rcx], rsi
 18042 0000E7B2 48FFCA                  	dec rdx
 18043 0000E7B5 EBE7                    	jmp .L_tc_recycle_frame_loop_00a6
 18044                                  .L_tc_recycle_frame_done_00a6:
 18045 0000E7B7 5D                      	pop rbp ; restore the old rbp
 18046 0000E7B8 4889CC                  	mov rsp, rcx
 18047 0000E7BB FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 18048 0000E7BE C9                      	leave
 18049 0000E7BF C21800                  	ret 8 * (2 + 1)
 18050                                  .L_lambda_opt_end_0017:	; new closure is in rax
 18051 0000E7C2 48890425[40040000]      	mov qword [free_var_136], rax
 18052 0000E7CA 48B8-                   	mov rax, sob_void
 18052 0000E7CC [0000000000000000] 
 18053                                  
 18054 0000E7D4 4889C7                  	mov rdi, rax
 18055 0000E7D7 E8C6150000              	call print_sexpr_if_not_void
 18056                                  
 18057 0000E7DC 48B8-                   	mov rax, L_constants + 23
 18057 0000E7DE [1700000000000000] 
 18058 0000E7E6 50                      	push rax
 18059 0000E7E7 6A01                    	push 1
 18060 0000E7E9 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 18061 0000E7EE E89E150000              	call malloc
 18062 0000E7F3 50                      	push rax
 18063 0000E7F4 BF00000000              	mov rdi, 8 * 0	; new rib
 18064 0000E7F9 E893150000              	call malloc
 18065 0000E7FE 50                      	push rax
 18066 0000E7FF BF08000000              	mov rdi, 8 * 1	; extended env
 18067 0000E804 E888150000              	call malloc
 18068 0000E809 488B7D10                	mov rdi, ENV
 18069 0000E80D BE00000000              	mov rsi, 0
 18070 0000E812 BA01000000              	mov rdx, 1
 18071                                  .L_lambda_simple_env_loop_008f:	; ext_env[i + 1] <-- env[i]
 18072 0000E817 4883FE00                	cmp rsi, 0
 18073 0000E81B 7410                    	je .L_lambda_simple_env_end_008f
 18074 0000E81D 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 18075 0000E821 48890CD0                	mov qword [rax + 8 * rdx], rcx
 18076 0000E825 48FFC6                  	inc rsi
 18077 0000E828 48FFC2                  	inc rdx
 18078 0000E82B EBEA                    	jmp .L_lambda_simple_env_loop_008f
 18079                                  .L_lambda_simple_env_end_008f:
 18080 0000E82D 5B                      	pop rbx
 18081 0000E82E BE00000000              	mov rsi, 0
 18082                                  .L_lambda_simple_params_loop_008f:	; copy params
 18083 0000E833 4883FE00                	cmp rsi, 0
 18084 0000E837 740E                    	je .L_lambda_simple_params_end_008f
 18085 0000E839 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 18086 0000E83E 488914F3                	mov qword [rbx + 8 * rsi], rdx
 18087 0000E842 48FFC6                  	inc rsi
 18088 0000E845 EBEC                    	jmp .L_lambda_simple_params_loop_008f
 18089                                  .L_lambda_simple_params_end_008f:
 18090 0000E847 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 18091 0000E84A 4889C3                  	mov rbx, rax
 18092 0000E84D 58                      	pop rax
 18093 0000E84E C60005                  	mov byte [rax], T_closure
 18094 0000E851 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 18095 0000E855 48C74009[62E80000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_008f
 18096 0000E85D E9F6020000              	jmp .L_lambda_simple_end_008f
 18097                                  .L_lambda_simple_code_008f:	; lambda-simple body
 18098 0000E862 48837C241001            	cmp qword [rsp + 8 * 2], 1
 18099 0000E868 740B                    	je .L_lambda_simple_arity_check_ok_008f
 18100 0000E86A FF742410                	push qword [rsp + 8 * 2]
 18101 0000E86E 6A01                    	push 1
 18102 0000E870 E9D5140000              	jmp L_error_incorrect_arity_simple
 18103                                  .L_lambda_simple_arity_check_ok_008f:
 18104 0000E875 C8000000                	enter 0, 0
 18105 0000E879 488B4520                	mov rax, qword [rbp + 8 * (4 + 0)]
 18106 0000E87D 4889C2                  	mov rdx, rax
 18107 0000E880 BF08000000              	mov rdi, 8
 18108 0000E885 E807150000              	call malloc
 18109 0000E88A 488910                  	mov qword[rax], rdx
 18110 0000E88D 48894520                	mov qword [rbp + 8 * (4 + 0)], rax
 18111 0000E891 48B8-                   	mov rax, sob_void
 18111 0000E893 [0000000000000000] 
 18112                                  
 18113 0000E89B BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 18114 0000E8A0 E8EC140000              	call malloc
 18115 0000E8A5 50                      	push rax
 18116 0000E8A6 BF08000000              	mov rdi, 8 * 1	; new rib
 18117 0000E8AB E8E1140000              	call malloc
 18118 0000E8B0 50                      	push rax
 18119 0000E8B1 BF10000000              	mov rdi, 8 * 2	; extended env
 18120 0000E8B6 E8D6140000              	call malloc
 18121 0000E8BB 488B7D10                	mov rdi, ENV
 18122 0000E8BF BE00000000              	mov rsi, 0
 18123 0000E8C4 BA01000000              	mov rdx, 1
 18124                                  .L_lambda_simple_env_loop_0090:	; ext_env[i + 1] <-- env[i]
 18125 0000E8C9 4883FE01                	cmp rsi, 1
 18126 0000E8CD 7410                    	je .L_lambda_simple_env_end_0090
 18127 0000E8CF 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 18128 0000E8D3 48890CD0                	mov qword [rax + 8 * rdx], rcx
 18129 0000E8D7 48FFC6                  	inc rsi
 18130 0000E8DA 48FFC2                  	inc rdx
 18131 0000E8DD EBEA                    	jmp .L_lambda_simple_env_loop_0090
 18132                                  .L_lambda_simple_env_end_0090:
 18133 0000E8DF 5B                      	pop rbx
 18134 0000E8E0 BE00000000              	mov rsi, 0
 18135                                  .L_lambda_simple_params_loop_0090:	; copy params
 18136 0000E8E5 4883FE01                	cmp rsi, 1
 18137 0000E8E9 740E                    	je .L_lambda_simple_params_end_0090
 18138 0000E8EB 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 18139 0000E8F0 488914F3                	mov qword [rbx + 8 * rsi], rdx
 18140 0000E8F4 48FFC6                  	inc rsi
 18141 0000E8F7 EBEC                    	jmp .L_lambda_simple_params_loop_0090
 18142                                  .L_lambda_simple_params_end_0090:
 18143 0000E8F9 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 18144 0000E8FC 4889C3                  	mov rbx, rax
 18145 0000E8FF 58                      	pop rax
 18146 0000E900 C60005                  	mov byte [rax], T_closure
 18147 0000E903 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 18148 0000E907 48C74009[14E90000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0090
 18149 0000E90F E91A010000              	jmp .L_lambda_simple_end_0090
 18150                                  .L_lambda_simple_code_0090:	; lambda-simple body
 18151 0000E914 48837C241003            	cmp qword [rsp + 8 * 2], 3
 18152 0000E91A 740B                    	je .L_lambda_simple_arity_check_ok_0090
 18153 0000E91C FF742410                	push qword [rsp + 8 * 2]
 18154 0000E920 6A03                    	push 3
 18155 0000E922 E923140000              	jmp L_error_incorrect_arity_simple
 18156                                  .L_lambda_simple_arity_check_ok_0090:
 18157 0000E927 C8000000                	enter 0, 0
 18158 0000E92B 488B4530                	mov rax, qword [rbp + 8 * (4 + 2)]
 18159 0000E92F 50                      	push rax
 18160 0000E930 488B4528                	mov rax, qword [rbp + 8 * (4 + 1)]
 18161 0000E934 50                      	push rax
 18162 0000E935 6A02                    	push 2
 18163 0000E937 488B0425[30030000]      	mov rax, qword [free_var_102]
 18164                                  	assert_closure(rax)
    42 0000E93F 803805              <1>  cmp byte [%1], %2
    43 0000E942 0F85422C0000        <1>  jne L_error_incorrect_type
 18165 0000E948 FF7001                  	push SOB_CLOSURE_ENV(rax)
 18166 0000E94B FF5009                  	call SOB_CLOSURE_CODE(rax)
 18167 0000E94E 483D[02000000]          	cmp rax, sob_boolean_false
 18168 0000E954 0F84C6000000                      	je .L_if_else_0051
 18169 0000E95A 488B4530                          	mov rax, qword [rbp + 8 * (4 + 2)]
 18170 0000E95E 50                      	push rax
 18171 0000E95F 48B8-                   	mov rax, L_constants + 128
 18171 0000E961 [8000000000000000] 
 18172 0000E969 50                      	push rax
 18173 0000E96A 488B4528                	mov rax, qword [rbp + 8 * (4 + 1)]
 18174 0000E96E 50                      	push rax
 18175 0000E96F 6A02                    	push 2
 18176 0000E971 488B0425[08030000]      	mov rax, qword [free_var_97]
 18177                                  	assert_closure(rax)
    42 0000E979 803805              <1>  cmp byte [%1], %2
    43 0000E97C 0F85082C0000        <1>  jne L_error_incorrect_type
 18178 0000E982 FF7001                  	push SOB_CLOSURE_ENV(rax)
 18179 0000E985 FF5009                  	call SOB_CLOSURE_CODE(rax)
 18180 0000E988 50                      	push rax
 18181 0000E989 488B4520                	mov rax, qword [rbp + 8 * (4 + 0)]
 18182 0000E98D 50                      	push rax
 18183 0000E98E 6A03                    	push 3
 18184 0000E990 488B4510                	mov rax, qword [rbp + 8 * 2]
 18185 0000E994 488B00                  	mov rax, qword [rax + 8 * 0]
 18186 0000E997 488B00                  	mov rax, qword [rax + 8 * 0]
 18187 0000E99A 488B00                  	mov rax, qword [rax]
 18188                                  	assert_closure(rax)
    42 0000E99D 803805              <1>  cmp byte [%1], %2
    43 0000E9A0 0F85E42B0000        <1>  jne L_error_incorrect_type
 18189 0000E9A6 FF7001                  	push SOB_CLOSURE_ENV(rax)
 18190 0000E9A9 FF5009                  	call SOB_CLOSURE_CODE(rax)
 18191 0000E9AC 50                      	push rax
 18192 0000E9AD 488B4528                	mov rax, qword [rbp + 8 * (4 + 1)]
 18193 0000E9B1 50                      	push rax
 18194 0000E9B2 488B4520                	mov rax, qword [rbp + 8 * (4 + 0)]
 18195 0000E9B6 50                      	push rax
 18196 0000E9B7 6A02                    	push 2
 18197 0000E9B9 488B0425[78010000]      	mov rax, qword [free_var_47]
 18198                                  	assert_closure(rax)
    42 0000E9C1 803805              <1>  cmp byte [%1], %2
    43 0000E9C4 0F85C02B0000        <1>  jne L_error_incorrect_type
 18199 0000E9CA FF7001                  	push SOB_CLOSURE_ENV(rax)
 18200 0000E9CD FF5009                  	call SOB_CLOSURE_CODE(rax)
 18201 0000E9D0 50                      	push rax
 18202 0000E9D1 6A02                    	push 2
 18203 0000E9D3 488B0425[68000000]      	mov rax, qword [free_var_13]
 18204                                  	assert_closure(rax)
    42 0000E9DB 803805              <1>  cmp byte [%1], %2
    43 0000E9DE 0F85A62B0000        <1>  jne L_error_incorrect_type
 18205 0000E9E4 FF7001                  	push SOB_CLOSURE_ENV(rax)
 18206 0000E9E7 FF7508                  	push qword [rbp + 8 * 1] ; old ret addr
 18207 0000E9EA FF7500                  	push qword [rbp] ; same the old rbp
 18208 0000E9ED BA05000000              	mov rdx, 2 + 3
 18209 0000E9F2 488B4D18                	mov rcx, COUNT
 18210 0000E9F6 488D4CCD20              	lea rcx, [rbp + 8*4 + rcx * 8]
 18211 0000E9FB 4889EF                  	mov rdi, rbp
 18212                                  .L_tc_recycle_frame_loop_00a7:
 18213 0000E9FE 4883FA00                	cmp rdx, 0
 18214 0000EA02 7413                    	je .L_tc_recycle_frame_done_00a7
 18215 0000EA04 4883E908                	sub rcx, 8
 18216 0000EA08 4883EF08                	sub rdi, 8
 18217 0000EA0C 488B37                  	mov rsi, [rdi]
 18218 0000EA0F 488931                  	mov qword [rcx], rsi
 18219 0000EA12 48FFCA                  	dec rdx
 18220 0000EA15 EBE7                    	jmp .L_tc_recycle_frame_loop_00a7
 18221                                  .L_tc_recycle_frame_done_00a7:
 18222 0000EA17 5D                      	pop rbp ; restore the old rbp
 18223 0000EA18 4889CC                  	mov rsp, rcx
 18224 0000EA1B FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 18225 0000EA1E EB0A                    	jmp .L_if_end_0051
 18226                                            .L_if_else_0051:
 18227 0000EA20 48B8-                             	mov rax, L_constants + 1
 18227 0000EA22 [0100000000000000] 
 18228                                  .L_if_end_0051:
 18229 0000EA2A C9                      	leave
 18230 0000EA2B C22800                  	ret 8 * (2 + 3)
 18231                                  .L_lambda_simple_end_0090:	; new closure is in rax
 18232 0000EA2E 50                      	push rax
 18233 0000EA2F 488B4520                	mov rax, qword [rbp + 8 * (4 + 0)]
 18234 0000EA33 8F00                    	pop qword [rax]
 18235 0000EA35 48B8-                   	mov rax, sob_void
 18235 0000EA37 [0000000000000000] 
 18236                                  
 18237 0000EA3F BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 18238 0000EA44 E848130000              	call malloc
 18239 0000EA49 50                      	push rax
 18240 0000EA4A BF08000000              	mov rdi, 8 * 1	; new rib
 18241 0000EA4F E83D130000              	call malloc
 18242 0000EA54 50                      	push rax
 18243 0000EA55 BF10000000              	mov rdi, 8 * 2	; extended env
 18244 0000EA5A E832130000              	call malloc
 18245 0000EA5F 488B7D10                	mov rdi, ENV
 18246 0000EA63 BE00000000              	mov rsi, 0
 18247 0000EA68 BA01000000              	mov rdx, 1
 18248                                  .L_lambda_simple_env_loop_0091:	; ext_env[i + 1] <-- env[i]
 18249 0000EA6D 4883FE01                	cmp rsi, 1
 18250 0000EA71 7410                    	je .L_lambda_simple_env_end_0091
 18251 0000EA73 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 18252 0000EA77 48890CD0                	mov qword [rax + 8 * rdx], rcx
 18253 0000EA7B 48FFC6                  	inc rsi
 18254 0000EA7E 48FFC2                  	inc rdx
 18255 0000EA81 EBEA                    	jmp .L_lambda_simple_env_loop_0091
 18256                                  .L_lambda_simple_env_end_0091:
 18257 0000EA83 5B                      	pop rbx
 18258 0000EA84 BE00000000              	mov rsi, 0
 18259                                  .L_lambda_simple_params_loop_0091:	; copy params
 18260 0000EA89 4883FE01                	cmp rsi, 1
 18261 0000EA8D 740E                    	je .L_lambda_simple_params_end_0091
 18262 0000EA8F 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 18263 0000EA94 488914F3                	mov qword [rbx + 8 * rsi], rdx
 18264 0000EA98 48FFC6                  	inc rsi
 18265 0000EA9B EBEC                    	jmp .L_lambda_simple_params_loop_0091
 18266                                  .L_lambda_simple_params_end_0091:
 18267 0000EA9D 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 18268 0000EAA0 4889C3                  	mov rbx, rax
 18269 0000EAA3 58                      	pop rax
 18270 0000EAA4 C60005                  	mov byte [rax], T_closure
 18271 0000EAA7 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 18272 0000EAAB 48C74009[B8EA0000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0091
 18273 0000EAB3 E99C000000              	jmp .L_lambda_simple_end_0091
 18274                                  .L_lambda_simple_code_0091:	; lambda-simple body
 18275 0000EAB8 48837C241001            	cmp qword [rsp + 8 * 2], 1
 18276 0000EABE 740B                    	je .L_lambda_simple_arity_check_ok_0091
 18277 0000EAC0 FF742410                	push qword [rsp + 8 * 2]
 18278 0000EAC4 6A01                    	push 1
 18279 0000EAC6 E97F120000              	jmp L_error_incorrect_arity_simple
 18280                                  .L_lambda_simple_arity_check_ok_0091:
 18281 0000EACB C8000000                	enter 0, 0
 18282 0000EACF 488B4520                	mov rax, qword [rbp + 8 * (4 + 0)]
 18283 0000EAD3 50                      	push rax
 18284 0000EAD4 6A01                    	push 1
 18285 0000EAD6 488B0425[90000000]      	mov rax, qword [free_var_18]
 18286                                  	assert_closure(rax)
    42 0000EADE 803805              <1>  cmp byte [%1], %2
    43 0000EAE1 0F85A32A0000        <1>  jne L_error_incorrect_type
 18287 0000EAE7 FF7001                  	push SOB_CLOSURE_ENV(rax)
 18288 0000EAEA FF5009                  	call SOB_CLOSURE_CODE(rax)
 18289 0000EAED 50                      	push rax
 18290 0000EAEE 48B8-                   	mov rax, L_constants + 32
 18290 0000EAF0 [2000000000000000] 
 18291 0000EAF8 50                      	push rax
 18292 0000EAF9 488B4520                	mov rax, qword [rbp + 8 * (4 + 0)]
 18293 0000EAFD 50                      	push rax
 18294 0000EAFE 6A03                    	push 3
 18295 0000EB00 488B4510                	mov rax, qword [rbp + 8 * 2]
 18296 0000EB04 488B00                  	mov rax, qword [rax + 8 * 0]
 18297 0000EB07 488B00                  	mov rax, qword [rax + 8 * 0]
 18298 0000EB0A 488B00                  	mov rax, qword [rax]
 18299                                  	assert_closure(rax)
    42 0000EB0D 803805              <1>  cmp byte [%1], %2
    43 0000EB10 0F85742A0000        <1>  jne L_error_incorrect_type
 18300 0000EB16 FF7001                  	push SOB_CLOSURE_ENV(rax)
 18301 0000EB19 FF7508                  	push qword [rbp + 8 * 1] ; old ret addr
 18302 0000EB1C FF7500                  	push qword [rbp] ; same the old rbp
 18303 0000EB1F BA06000000              	mov rdx, 3 + 3
 18304 0000EB24 488B4D18                	mov rcx, COUNT
 18305 0000EB28 488D4CCD20              	lea rcx, [rbp + 8*4 + rcx * 8]
 18306 0000EB2D 4889EF                  	mov rdi, rbp
 18307                                  .L_tc_recycle_frame_loop_00a8:
 18308 0000EB30 4883FA00                	cmp rdx, 0
 18309 0000EB34 7413                    	je .L_tc_recycle_frame_done_00a8
 18310 0000EB36 4883E908                	sub rcx, 8
 18311 0000EB3A 4883EF08                	sub rdi, 8
 18312 0000EB3E 488B37                  	mov rsi, [rdi]
 18313 0000EB41 488931                  	mov qword [rcx], rsi
 18314 0000EB44 48FFCA                  	dec rdx
 18315 0000EB47 EBE7                    	jmp .L_tc_recycle_frame_loop_00a8
 18316                                  .L_tc_recycle_frame_done_00a8:
 18317 0000EB49 5D                      	pop rbp ; restore the old rbp
 18318 0000EB4A 4889CC                  	mov rsp, rcx
 18319 0000EB4D FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 18320 0000EB50 C9                      	leave
 18321 0000EB51 C21800                  	ret 8 * (2 + 1)
 18322                                  .L_lambda_simple_end_0091:	; new closure is in rax
 18323 0000EB54 C9                      	leave
 18324 0000EB55 C21800                  	ret 8 * (2 + 1)
 18325                                  .L_lambda_simple_end_008f:	; new closure is in rax
 18326                                  	assert_closure(rax)
    42 0000EB58 803805              <1>  cmp byte [%1], %2
    43 0000EB5B 0F85292A0000        <1>  jne L_error_incorrect_type
 18327 0000EB61 FF7001                  	push SOB_CLOSURE_ENV(rax)
 18328 0000EB64 FF5009                  	call SOB_CLOSURE_CODE(rax)
 18329 0000EB67 48890425[D8030000]      	mov qword [free_var_123], rax
 18330 0000EB6F 48B8-                   	mov rax, sob_void
 18330 0000EB71 [0000000000000000] 
 18331                                  
 18332 0000EB79 4889C7                  	mov rdi, rax
 18333 0000EB7C E821120000              	call print_sexpr_if_not_void
 18334                                  
 18335 0000EB81 48B8-                   	mov rax, L_constants + 23
 18335 0000EB83 [1700000000000000] 
 18336 0000EB8B 50                      	push rax
 18337 0000EB8C 6A01                    	push 1
 18338 0000EB8E BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 18339 0000EB93 E8F9110000              	call malloc
 18340 0000EB98 50                      	push rax
 18341 0000EB99 BF00000000              	mov rdi, 8 * 0	; new rib
 18342 0000EB9E E8EE110000              	call malloc
 18343 0000EBA3 50                      	push rax
 18344 0000EBA4 BF08000000              	mov rdi, 8 * 1	; extended env
 18345 0000EBA9 E8E3110000              	call malloc
 18346 0000EBAE 488B7D10                	mov rdi, ENV
 18347 0000EBB2 BE00000000              	mov rsi, 0
 18348 0000EBB7 BA01000000              	mov rdx, 1
 18349                                  .L_lambda_simple_env_loop_0092:	; ext_env[i + 1] <-- env[i]
 18350 0000EBBC 4883FE00                	cmp rsi, 0
 18351 0000EBC0 7410                    	je .L_lambda_simple_env_end_0092
 18352 0000EBC2 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 18353 0000EBC6 48890CD0                	mov qword [rax + 8 * rdx], rcx
 18354 0000EBCA 48FFC6                  	inc rsi
 18355 0000EBCD 48FFC2                  	inc rdx
 18356 0000EBD0 EBEA                    	jmp .L_lambda_simple_env_loop_0092
 18357                                  .L_lambda_simple_env_end_0092:
 18358 0000EBD2 5B                      	pop rbx
 18359 0000EBD3 BE00000000              	mov rsi, 0
 18360                                  .L_lambda_simple_params_loop_0092:	; copy params
 18361 0000EBD8 4883FE00                	cmp rsi, 0
 18362 0000EBDC 740E                    	je .L_lambda_simple_params_end_0092
 18363 0000EBDE 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 18364 0000EBE3 488914F3                	mov qword [rbx + 8 * rsi], rdx
 18365 0000EBE7 48FFC6                  	inc rsi
 18366 0000EBEA EBEC                    	jmp .L_lambda_simple_params_loop_0092
 18367                                  .L_lambda_simple_params_end_0092:
 18368 0000EBEC 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 18369 0000EBEF 4889C3                  	mov rbx, rax
 18370 0000EBF2 58                      	pop rax
 18371 0000EBF3 C60005                  	mov byte [rax], T_closure
 18372 0000EBF6 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 18373 0000EBFA 48C74009[07EC0000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0092
 18374 0000EC02 E9F6020000              	jmp .L_lambda_simple_end_0092
 18375                                  .L_lambda_simple_code_0092:	; lambda-simple body
 18376 0000EC07 48837C241001            	cmp qword [rsp + 8 * 2], 1
 18377 0000EC0D 740B                    	je .L_lambda_simple_arity_check_ok_0092
 18378 0000EC0F FF742410                	push qword [rsp + 8 * 2]
 18379 0000EC13 6A01                    	push 1
 18380 0000EC15 E930110000              	jmp L_error_incorrect_arity_simple
 18381                                  .L_lambda_simple_arity_check_ok_0092:
 18382 0000EC1A C8000000                	enter 0, 0
 18383 0000EC1E 488B4520                	mov rax, qword [rbp + 8 * (4 + 0)]
 18384 0000EC22 4889C2                  	mov rdx, rax
 18385 0000EC25 BF08000000              	mov rdi, 8
 18386 0000EC2A E862110000              	call malloc
 18387 0000EC2F 488910                  	mov qword[rax], rdx
 18388 0000EC32 48894520                	mov qword [rbp + 8 * (4 + 0)], rax
 18389 0000EC36 48B8-                   	mov rax, sob_void
 18389 0000EC38 [0000000000000000] 
 18390                                  
 18391 0000EC40 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 18392 0000EC45 E847110000              	call malloc
 18393 0000EC4A 50                      	push rax
 18394 0000EC4B BF08000000              	mov rdi, 8 * 1	; new rib
 18395 0000EC50 E83C110000              	call malloc
 18396 0000EC55 50                      	push rax
 18397 0000EC56 BF10000000              	mov rdi, 8 * 2	; extended env
 18398 0000EC5B E831110000              	call malloc
 18399 0000EC60 488B7D10                	mov rdi, ENV
 18400 0000EC64 BE00000000              	mov rsi, 0
 18401 0000EC69 BA01000000              	mov rdx, 1
 18402                                  .L_lambda_simple_env_loop_0093:	; ext_env[i + 1] <-- env[i]
 18403 0000EC6E 4883FE01                	cmp rsi, 1
 18404 0000EC72 7410                    	je .L_lambda_simple_env_end_0093
 18405 0000EC74 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 18406 0000EC78 48890CD0                	mov qword [rax + 8 * rdx], rcx
 18407 0000EC7C 48FFC6                  	inc rsi
 18408 0000EC7F 48FFC2                  	inc rdx
 18409 0000EC82 EBEA                    	jmp .L_lambda_simple_env_loop_0093
 18410                                  .L_lambda_simple_env_end_0093:
 18411 0000EC84 5B                      	pop rbx
 18412 0000EC85 BE00000000              	mov rsi, 0
 18413                                  .L_lambda_simple_params_loop_0093:	; copy params
 18414 0000EC8A 4883FE01                	cmp rsi, 1
 18415 0000EC8E 740E                    	je .L_lambda_simple_params_end_0093
 18416 0000EC90 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 18417 0000EC95 488914F3                	mov qword [rbx + 8 * rsi], rdx
 18418 0000EC99 48FFC6                  	inc rsi
 18419 0000EC9C EBEC                    	jmp .L_lambda_simple_params_loop_0093
 18420                                  .L_lambda_simple_params_end_0093:
 18421 0000EC9E 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 18422 0000ECA1 4889C3                  	mov rbx, rax
 18423 0000ECA4 58                      	pop rax
 18424 0000ECA5 C60005                  	mov byte [rax], T_closure
 18425 0000ECA8 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 18426 0000ECAC 48C74009[B9EC0000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0093
 18427 0000ECB4 E91A010000              	jmp .L_lambda_simple_end_0093
 18428                                  .L_lambda_simple_code_0093:	; lambda-simple body
 18429 0000ECB9 48837C241003            	cmp qword [rsp + 8 * 2], 3
 18430 0000ECBF 740B                    	je .L_lambda_simple_arity_check_ok_0093
 18431 0000ECC1 FF742410                	push qword [rsp + 8 * 2]
 18432 0000ECC5 6A03                    	push 3
 18433 0000ECC7 E97E100000              	jmp L_error_incorrect_arity_simple
 18434                                  .L_lambda_simple_arity_check_ok_0093:
 18435 0000ECCC C8000000                	enter 0, 0
 18436 0000ECD0 488B4530                	mov rax, qword [rbp + 8 * (4 + 2)]
 18437 0000ECD4 50                      	push rax
 18438 0000ECD5 488B4528                	mov rax, qword [rbp + 8 * (4 + 1)]
 18439 0000ECD9 50                      	push rax
 18440 0000ECDA 6A02                    	push 2
 18441 0000ECDC 488B0425[30030000]      	mov rax, qword [free_var_102]
 18442                                  	assert_closure(rax)
    42 0000ECE4 803805              <1>  cmp byte [%1], %2
    43 0000ECE7 0F859D280000        <1>  jne L_error_incorrect_type
 18443 0000ECED FF7001                  	push SOB_CLOSURE_ENV(rax)
 18444 0000ECF0 FF5009                  	call SOB_CLOSURE_CODE(rax)
 18445 0000ECF3 483D[02000000]          	cmp rax, sob_boolean_false
 18446 0000ECF9 0F84C6000000                      	je .L_if_else_0052
 18447 0000ECFF 488B4530                          	mov rax, qword [rbp + 8 * (4 + 2)]
 18448 0000ED03 50                      	push rax
 18449 0000ED04 48B8-                   	mov rax, L_constants + 128
 18449 0000ED06 [8000000000000000] 
 18450 0000ED0E 50                      	push rax
 18451 0000ED0F 488B4528                	mov rax, qword [rbp + 8 * (4 + 1)]
 18452 0000ED13 50                      	push rax
 18453 0000ED14 6A02                    	push 2
 18454 0000ED16 488B0425[08030000]      	mov rax, qword [free_var_97]
 18455                                  	assert_closure(rax)
    42 0000ED1E 803805              <1>  cmp byte [%1], %2
    43 0000ED21 0F8563280000        <1>  jne L_error_incorrect_type
 18456 0000ED27 FF7001                  	push SOB_CLOSURE_ENV(rax)
 18457 0000ED2A FF5009                  	call SOB_CLOSURE_CODE(rax)
 18458 0000ED2D 50                      	push rax
 18459 0000ED2E 488B4520                	mov rax, qword [rbp + 8 * (4 + 0)]
 18460 0000ED32 50                      	push rax
 18461 0000ED33 6A03                    	push 3
 18462 0000ED35 488B4510                	mov rax, qword [rbp + 8 * 2]
 18463 0000ED39 488B00                  	mov rax, qword [rax + 8 * 0]
 18464 0000ED3C 488B00                  	mov rax, qword [rax + 8 * 0]
 18465 0000ED3F 488B00                  	mov rax, qword [rax]
 18466                                  	assert_closure(rax)
    42 0000ED42 803805              <1>  cmp byte [%1], %2
    43 0000ED45 0F853F280000        <1>  jne L_error_incorrect_type
 18467 0000ED4B FF7001                  	push SOB_CLOSURE_ENV(rax)
 18468 0000ED4E FF5009                  	call SOB_CLOSURE_CODE(rax)
 18469 0000ED51 50                      	push rax
 18470 0000ED52 488B4528                	mov rax, qword [rbp + 8 * (4 + 1)]
 18471 0000ED56 50                      	push rax
 18472 0000ED57 488B4520                	mov rax, qword [rbp + 8 * (4 + 0)]
 18473 0000ED5B 50                      	push rax
 18474 0000ED5C 6A02                    	push 2
 18475 0000ED5E 488B0425[80010000]      	mov rax, qword [free_var_48]
 18476                                  	assert_closure(rax)
    42 0000ED66 803805              <1>  cmp byte [%1], %2
    43 0000ED69 0F851B280000        <1>  jne L_error_incorrect_type
 18477 0000ED6F FF7001                  	push SOB_CLOSURE_ENV(rax)
 18478 0000ED72 FF5009                  	call SOB_CLOSURE_CODE(rax)
 18479 0000ED75 50                      	push rax
 18480 0000ED76 6A02                    	push 2
 18481 0000ED78 488B0425[68000000]      	mov rax, qword [free_var_13]
 18482                                  	assert_closure(rax)
    42 0000ED80 803805              <1>  cmp byte [%1], %2
    43 0000ED83 0F8501280000        <1>  jne L_error_incorrect_type
 18483 0000ED89 FF7001                  	push SOB_CLOSURE_ENV(rax)
 18484 0000ED8C FF7508                  	push qword [rbp + 8 * 1] ; old ret addr
 18485 0000ED8F FF7500                  	push qword [rbp] ; same the old rbp
 18486 0000ED92 BA05000000              	mov rdx, 2 + 3
 18487 0000ED97 488B4D18                	mov rcx, COUNT
 18488 0000ED9B 488D4CCD20              	lea rcx, [rbp + 8*4 + rcx * 8]
 18489 0000EDA0 4889EF                  	mov rdi, rbp
 18490                                  .L_tc_recycle_frame_loop_00a9:
 18491 0000EDA3 4883FA00                	cmp rdx, 0
 18492 0000EDA7 7413                    	je .L_tc_recycle_frame_done_00a9
 18493 0000EDA9 4883E908                	sub rcx, 8
 18494 0000EDAD 4883EF08                	sub rdi, 8
 18495 0000EDB1 488B37                  	mov rsi, [rdi]
 18496 0000EDB4 488931                  	mov qword [rcx], rsi
 18497 0000EDB7 48FFCA                  	dec rdx
 18498 0000EDBA EBE7                    	jmp .L_tc_recycle_frame_loop_00a9
 18499                                  .L_tc_recycle_frame_done_00a9:
 18500 0000EDBC 5D                      	pop rbp ; restore the old rbp
 18501 0000EDBD 4889CC                  	mov rsp, rcx
 18502 0000EDC0 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 18503 0000EDC3 EB0A                    	jmp .L_if_end_0052
 18504                                            .L_if_else_0052:
 18505 0000EDC5 48B8-                             	mov rax, L_constants + 1
 18505 0000EDC7 [0100000000000000] 
 18506                                  .L_if_end_0052:
 18507 0000EDCF C9                      	leave
 18508 0000EDD0 C22800                  	ret 8 * (2 + 3)
 18509                                  .L_lambda_simple_end_0093:	; new closure is in rax
 18510 0000EDD3 50                      	push rax
 18511 0000EDD4 488B4520                	mov rax, qword [rbp + 8 * (4 + 0)]
 18512 0000EDD8 8F00                    	pop qword [rax]
 18513 0000EDDA 48B8-                   	mov rax, sob_void
 18513 0000EDDC [0000000000000000] 
 18514                                  
 18515 0000EDE4 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 18516 0000EDE9 E8A30F0000              	call malloc
 18517 0000EDEE 50                      	push rax
 18518 0000EDEF BF08000000              	mov rdi, 8 * 1	; new rib
 18519 0000EDF4 E8980F0000              	call malloc
 18520 0000EDF9 50                      	push rax
 18521 0000EDFA BF10000000              	mov rdi, 8 * 2	; extended env
 18522 0000EDFF E88D0F0000              	call malloc
 18523 0000EE04 488B7D10                	mov rdi, ENV
 18524 0000EE08 BE00000000              	mov rsi, 0
 18525 0000EE0D BA01000000              	mov rdx, 1
 18526                                  .L_lambda_simple_env_loop_0094:	; ext_env[i + 1] <-- env[i]
 18527 0000EE12 4883FE01                	cmp rsi, 1
 18528 0000EE16 7410                    	je .L_lambda_simple_env_end_0094
 18529 0000EE18 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 18530 0000EE1C 48890CD0                	mov qword [rax + 8 * rdx], rcx
 18531 0000EE20 48FFC6                  	inc rsi
 18532 0000EE23 48FFC2                  	inc rdx
 18533 0000EE26 EBEA                    	jmp .L_lambda_simple_env_loop_0094
 18534                                  .L_lambda_simple_env_end_0094:
 18535 0000EE28 5B                      	pop rbx
 18536 0000EE29 BE00000000              	mov rsi, 0
 18537                                  .L_lambda_simple_params_loop_0094:	; copy params
 18538 0000EE2E 4883FE01                	cmp rsi, 1
 18539 0000EE32 740E                    	je .L_lambda_simple_params_end_0094
 18540 0000EE34 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 18541 0000EE39 488914F3                	mov qword [rbx + 8 * rsi], rdx
 18542 0000EE3D 48FFC6                  	inc rsi
 18543 0000EE40 EBEC                    	jmp .L_lambda_simple_params_loop_0094
 18544                                  .L_lambda_simple_params_end_0094:
 18545 0000EE42 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 18546 0000EE45 4889C3                  	mov rbx, rax
 18547 0000EE48 58                      	pop rax
 18548 0000EE49 C60005                  	mov byte [rax], T_closure
 18549 0000EE4C 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 18550 0000EE50 48C74009[5DEE0000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0094
 18551 0000EE58 E99C000000              	jmp .L_lambda_simple_end_0094
 18552                                  .L_lambda_simple_code_0094:	; lambda-simple body
 18553 0000EE5D 48837C241001            	cmp qword [rsp + 8 * 2], 1
 18554 0000EE63 740B                    	je .L_lambda_simple_arity_check_ok_0094
 18555 0000EE65 FF742410                	push qword [rsp + 8 * 2]
 18556 0000EE69 6A01                    	push 1
 18557 0000EE6B E9DA0E0000              	jmp L_error_incorrect_arity_simple
 18558                                  .L_lambda_simple_arity_check_ok_0094:
 18559 0000EE70 C8000000                	enter 0, 0
 18560 0000EE74 488B4520                	mov rax, qword [rbp + 8 * (4 + 0)]
 18561 0000EE78 50                      	push rax
 18562 0000EE79 6A01                    	push 1
 18563 0000EE7B 488B0425[98000000]      	mov rax, qword [free_var_19]
 18564                                  	assert_closure(rax)
    42 0000EE83 803805              <1>  cmp byte [%1], %2
    43 0000EE86 0F85FE260000        <1>  jne L_error_incorrect_type
 18565 0000EE8C FF7001                  	push SOB_CLOSURE_ENV(rax)
 18566 0000EE8F FF5009                  	call SOB_CLOSURE_CODE(rax)
 18567 0000EE92 50                      	push rax
 18568 0000EE93 48B8-                   	mov rax, L_constants + 32
 18568 0000EE95 [2000000000000000] 
 18569 0000EE9D 50                      	push rax
 18570 0000EE9E 488B4520                	mov rax, qword [rbp + 8 * (4 + 0)]
 18571 0000EEA2 50                      	push rax
 18572 0000EEA3 6A03                    	push 3
 18573 0000EEA5 488B4510                	mov rax, qword [rbp + 8 * 2]
 18574 0000EEA9 488B00                  	mov rax, qword [rax + 8 * 0]
 18575 0000EEAC 488B00                  	mov rax, qword [rax + 8 * 0]
 18576 0000EEAF 488B00                  	mov rax, qword [rax]
 18577                                  	assert_closure(rax)
    42 0000EEB2 803805              <1>  cmp byte [%1], %2
    43 0000EEB5 0F85CF260000        <1>  jne L_error_incorrect_type
 18578 0000EEBB FF7001                  	push SOB_CLOSURE_ENV(rax)
 18579 0000EEBE FF7508                  	push qword [rbp + 8 * 1] ; old ret addr
 18580 0000EEC1 FF7500                  	push qword [rbp] ; same the old rbp
 18581 0000EEC4 BA06000000              	mov rdx, 3 + 3
 18582 0000EEC9 488B4D18                	mov rcx, COUNT
 18583 0000EECD 488D4CCD20              	lea rcx, [rbp + 8*4 + rcx * 8]
 18584 0000EED2 4889EF                  	mov rdi, rbp
 18585                                  .L_tc_recycle_frame_loop_00aa:
 18586 0000EED5 4883FA00                	cmp rdx, 0
 18587 0000EED9 7413                    	je .L_tc_recycle_frame_done_00aa
 18588 0000EEDB 4883E908                	sub rcx, 8
 18589 0000EEDF 4883EF08                	sub rdi, 8
 18590 0000EEE3 488B37                  	mov rsi, [rdi]
 18591 0000EEE6 488931                  	mov qword [rcx], rsi
 18592 0000EEE9 48FFCA                  	dec rdx
 18593 0000EEEC EBE7                    	jmp .L_tc_recycle_frame_loop_00aa
 18594                                  .L_tc_recycle_frame_done_00aa:
 18595 0000EEEE 5D                      	pop rbp ; restore the old rbp
 18596 0000EEEF 4889CC                  	mov rsp, rcx
 18597 0000EEF2 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 18598 0000EEF5 C9                      	leave
 18599 0000EEF6 C21800                  	ret 8 * (2 + 1)
 18600                                  .L_lambda_simple_end_0094:	; new closure is in rax
 18601 0000EEF9 C9                      	leave
 18602 0000EEFA C21800                  	ret 8 * (2 + 1)
 18603                                  .L_lambda_simple_end_0092:	; new closure is in rax
 18604                                  	assert_closure(rax)
    42 0000EEFD 803805              <1>  cmp byte [%1], %2
    43 0000EF00 0F8584260000        <1>  jne L_error_incorrect_type
 18605 0000EF06 FF7001                  	push SOB_CLOSURE_ENV(rax)
 18606 0000EF09 FF5009                  	call SOB_CLOSURE_CODE(rax)
 18607 0000EF0C 48890425[48040000]      	mov qword [free_var_137], rax
 18608 0000EF14 48B8-                   	mov rax, sob_void
 18608 0000EF16 [0000000000000000] 
 18609                                  
 18610 0000EF1E 4889C7                  	mov rdi, rax
 18611 0000EF21 E87C0E0000              	call print_sexpr_if_not_void
 18612                                  
 18613 0000EF26 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 18614 0000EF2B E8610E0000              	call malloc
 18615 0000EF30 50                      	push rax
 18616 0000EF31 BF00000000              	mov rdi, 8 * 0	; new rib
 18617 0000EF36 E8560E0000              	call malloc
 18618 0000EF3B 50                      	push rax
 18619 0000EF3C BF08000000              	mov rdi, 8 * 1	; extended env
 18620 0000EF41 E84B0E0000              	call malloc
 18621 0000EF46 488B7D10                	mov rdi, ENV
 18622 0000EF4A BE00000000              	mov rsi, 0
 18623 0000EF4F BA01000000              	mov rdx, 1
 18624                                  .L_lambda_simple_env_loop_0095:	; ext_env[i + 1] <-- env[i]
 18625 0000EF54 4883FE00                	cmp rsi, 0
 18626 0000EF58 7410                    	je .L_lambda_simple_env_end_0095
 18627 0000EF5A 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 18628 0000EF5E 48890CD0                	mov qword [rax + 8 * rdx], rcx
 18629 0000EF62 48FFC6                  	inc rsi
 18630 0000EF65 48FFC2                  	inc rdx
 18631 0000EF68 EBEA                    	jmp .L_lambda_simple_env_loop_0095
 18632                                  .L_lambda_simple_env_end_0095:
 18633 0000EF6A 5B                      	pop rbx
 18634 0000EF6B BE00000000              	mov rsi, 0
 18635                                  .L_lambda_simple_params_loop_0095:	; copy params
 18636 0000EF70 4883FE00                	cmp rsi, 0
 18637 0000EF74 740E                    	je .L_lambda_simple_params_end_0095
 18638 0000EF76 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 18639 0000EF7B 488914F3                	mov qword [rbx + 8 * rsi], rdx
 18640 0000EF7F 48FFC6                  	inc rsi
 18641 0000EF82 EBEC                    	jmp .L_lambda_simple_params_loop_0095
 18642                                  .L_lambda_simple_params_end_0095:
 18643 0000EF84 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 18644 0000EF87 4889C3                  	mov rbx, rax
 18645 0000EF8A 58                      	pop rax
 18646 0000EF8B C60005                  	mov byte [rax], T_closure
 18647 0000EF8E 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 18648 0000EF92 48C74009[9FEF0000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0095
 18649 0000EF9A E987000000              	jmp .L_lambda_simple_end_0095
 18650                                  .L_lambda_simple_code_0095:	; lambda-simple body
 18651 0000EF9F 48837C241001            	cmp qword [rsp + 8 * 2], 1
 18652 0000EFA5 740B                    	je .L_lambda_simple_arity_check_ok_0095
 18653 0000EFA7 FF742410                	push qword [rsp + 8 * 2]
 18654 0000EFAB 6A01                    	push 1
 18655 0000EFAD E9980D0000              	jmp L_error_incorrect_arity_simple
 18656                                  .L_lambda_simple_arity_check_ok_0095:
 18657 0000EFB2 C8000000                	enter 0, 0
 18658 0000EFB6 488B4520                	mov rax, qword [rbp + 8 * (4 + 0)]
 18659 0000EFBA 50                      	push rax
 18660 0000EFBB 6A00                    	push 0
 18661 0000EFBD 488B0425[D0000000]      	mov rax, qword [free_var_26]
 18662                                  	assert_closure(rax)
    42 0000EFC5 803805              <1>  cmp byte [%1], %2
    43 0000EFC8 0F85BC250000        <1>  jne L_error_incorrect_type
 18663 0000EFCE FF7001                  	push SOB_CLOSURE_ENV(rax)
 18664 0000EFD1 FF5009                  	call SOB_CLOSURE_CODE(rax)
 18665 0000EFD4 50                      	push rax
 18666 0000EFD5 6A02                    	push 2
 18667 0000EFD7 488B0425[60010000]      	mov rax, qword [free_var_44]
 18668                                  	assert_closure(rax)
    42 0000EFDF 803805              <1>  cmp byte [%1], %2
    43 0000EFE2 0F85A2250000        <1>  jne L_error_incorrect_type
 18669 0000EFE8 FF7001                  	push SOB_CLOSURE_ENV(rax)
 18670 0000EFEB FF7508                  	push qword [rbp + 8 * 1] ; old ret addr
 18671 0000EFEE FF7500                  	push qword [rbp] ; same the old rbp
 18672 0000EFF1 BA05000000              	mov rdx, 2 + 3
 18673 0000EFF6 488B4D18                	mov rcx, COUNT
 18674 0000EFFA 488D4CCD20              	lea rcx, [rbp + 8*4 + rcx * 8]
 18675 0000EFFF 4889EF                  	mov rdi, rbp
 18676                                  .L_tc_recycle_frame_loop_00ab:
 18677 0000F002 4883FA00                	cmp rdx, 0
 18678 0000F006 7413                    	je .L_tc_recycle_frame_done_00ab
 18679 0000F008 4883E908                	sub rcx, 8
 18680 0000F00C 4883EF08                	sub rdi, 8
 18681 0000F010 488B37                  	mov rsi, [rdi]
 18682 0000F013 488931                  	mov qword [rcx], rsi
 18683 0000F016 48FFCA                  	dec rdx
 18684 0000F019 EBE7                    	jmp .L_tc_recycle_frame_loop_00ab
 18685                                  .L_tc_recycle_frame_done_00ab:
 18686 0000F01B 5D                      	pop rbp ; restore the old rbp
 18687 0000F01C 4889CC                  	mov rsp, rcx
 18688 0000F01F FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 18689 0000F022 C9                      	leave
 18690 0000F023 C21800                  	ret 8 * (2 + 1)
 18691                                  .L_lambda_simple_end_0095:	; new closure is in rax
 18692 0000F026 48890425[50040000]      	mov qword [free_var_138], rax
 18693 0000F02E 48B8-                   	mov rax, sob_void
 18693 0000F030 [0000000000000000] 
 18694                                  
 18695 0000F038 4889C7                  	mov rdi, rax
 18696 0000F03B E8620D0000              	call print_sexpr_if_not_void
 18697                                  
 18698 0000F040 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 18699 0000F045 E8470D0000              	call malloc
 18700 0000F04A 50                      	push rax
 18701 0000F04B BF00000000              	mov rdi, 8 * 0	; new rib
 18702 0000F050 E83C0D0000              	call malloc
 18703 0000F055 50                      	push rax
 18704 0000F056 BF08000000              	mov rdi, 8 * 1	; extended env
 18705 0000F05B E8310D0000              	call malloc
 18706 0000F060 488B7D10                	mov rdi, ENV
 18707 0000F064 BE00000000              	mov rsi, 0
 18708 0000F069 BA01000000              	mov rdx, 1
 18709                                  .L_lambda_simple_env_loop_0096:	; ext_env[i + 1] <-- env[i]
 18710 0000F06E 4883FE00                	cmp rsi, 0
 18711 0000F072 7410                    	je .L_lambda_simple_env_end_0096
 18712 0000F074 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 18713 0000F078 48890CD0                	mov qword [rax + 8 * rdx], rcx
 18714 0000F07C 48FFC6                  	inc rsi
 18715 0000F07F 48FFC2                  	inc rdx
 18716 0000F082 EBEA                    	jmp .L_lambda_simple_env_loop_0096
 18717                                  .L_lambda_simple_env_end_0096:
 18718 0000F084 5B                      	pop rbx
 18719 0000F085 BE00000000              	mov rsi, 0
 18720                                  .L_lambda_simple_params_loop_0096:	; copy params
 18721 0000F08A 4883FE00                	cmp rsi, 0
 18722 0000F08E 740E                    	je .L_lambda_simple_params_end_0096
 18723 0000F090 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 18724 0000F095 488914F3                	mov qword [rbx + 8 * rsi], rdx
 18725 0000F099 48FFC6                  	inc rsi
 18726 0000F09C EBEC                    	jmp .L_lambda_simple_params_loop_0096
 18727                                  .L_lambda_simple_params_end_0096:
 18728 0000F09E 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 18729 0000F0A1 4889C3                  	mov rbx, rax
 18730 0000F0A4 58                      	pop rax
 18731 0000F0A5 C60005                  	mov byte [rax], T_closure
 18732 0000F0A8 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 18733 0000F0AC 48C74009[B6F00000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0096
 18734 0000F0B4 EB78                    	jmp .L_lambda_simple_end_0096
 18735                                  .L_lambda_simple_code_0096:	; lambda-simple body
 18736 0000F0B6 48837C241001            	cmp qword [rsp + 8 * 2], 1
 18737 0000F0BC 740B                    	je .L_lambda_simple_arity_check_ok_0096
 18738 0000F0BE FF742410                	push qword [rsp + 8 * 2]
 18739 0000F0C2 6A01                    	push 1
 18740 0000F0C4 E9810C0000              	jmp L_error_incorrect_arity_simple
 18741                                  .L_lambda_simple_arity_check_ok_0096:
 18742 0000F0C9 C8000000                	enter 0, 0
 18743 0000F0CD 488B4520                	mov rax, qword [rbp + 8 * (4 + 0)]
 18744 0000F0D1 50                      	push rax
 18745 0000F0D2 48B8-                   	mov rax, L_constants + 32
 18745 0000F0D4 [2000000000000000] 
 18746 0000F0DC 50                      	push rax
 18747 0000F0DD 6A02                    	push 2
 18748 0000F0DF 488B0425[30030000]      	mov rax, qword [free_var_102]
 18749                                  	assert_closure(rax)
    42 0000F0E7 803805              <1>  cmp byte [%1], %2
    43 0000F0EA 0F859A240000        <1>  jne L_error_incorrect_type
 18750 0000F0F0 FF7001                  	push SOB_CLOSURE_ENV(rax)
 18751 0000F0F3 FF7508                  	push qword [rbp + 8 * 1] ; old ret addr
 18752 0000F0F6 FF7500                  	push qword [rbp] ; same the old rbp
 18753 0000F0F9 BA05000000              	mov rdx, 2 + 3
 18754 0000F0FE 488B4D18                	mov rcx, COUNT
 18755 0000F102 488D4CCD20              	lea rcx, [rbp + 8*4 + rcx * 8]
 18756 0000F107 4889EF                  	mov rdi, rbp
 18757                                  .L_tc_recycle_frame_loop_00ac:
 18758 0000F10A 4883FA00                	cmp rdx, 0
 18759 0000F10E 7413                    	je .L_tc_recycle_frame_done_00ac
 18760 0000F110 4883E908                	sub rcx, 8
 18761 0000F114 4883EF08                	sub rdi, 8
 18762 0000F118 488B37                  	mov rsi, [rdi]
 18763 0000F11B 488931                  	mov qword [rcx], rsi
 18764 0000F11E 48FFCA                  	dec rdx
 18765 0000F121 EBE7                    	jmp .L_tc_recycle_frame_loop_00ac
 18766                                  .L_tc_recycle_frame_done_00ac:
 18767 0000F123 5D                      	pop rbp ; restore the old rbp
 18768 0000F124 4889CC                  	mov rsp, rcx
 18769 0000F127 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 18770 0000F12A C9                      	leave
 18771 0000F12B C21800                  	ret 8 * (2 + 1)
 18772                                  .L_lambda_simple_end_0096:	; new closure is in rax
 18773 0000F12E 48890425[58040000]      	mov qword [free_var_139], rax
 18774 0000F136 48B8-                   	mov rax, sob_void
 18774 0000F138 [0000000000000000] 
 18775                                  
 18776 0000F140 4889C7                  	mov rdi, rax
 18777 0000F143 E85A0C0000              	call print_sexpr_if_not_void
 18778                                  
 18779 0000F148 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 18780 0000F14D E83F0C0000              	call malloc
 18781 0000F152 50                      	push rax
 18782 0000F153 BF00000000              	mov rdi, 8 * 0	; new rib
 18783 0000F158 E8340C0000              	call malloc
 18784 0000F15D 50                      	push rax
 18785 0000F15E BF08000000              	mov rdi, 8 * 1	; extended env
 18786 0000F163 E8290C0000              	call malloc
 18787 0000F168 488B7D10                	mov rdi, ENV
 18788 0000F16C BE00000000              	mov rsi, 0
 18789 0000F171 BA01000000              	mov rdx, 1
 18790                                  .L_lambda_simple_env_loop_0097:	; ext_env[i + 1] <-- env[i]
 18791 0000F176 4883FE00                	cmp rsi, 0
 18792 0000F17A 7410                    	je .L_lambda_simple_env_end_0097
 18793 0000F17C 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 18794 0000F180 48890CD0                	mov qword [rax + 8 * rdx], rcx
 18795 0000F184 48FFC6                  	inc rsi
 18796 0000F187 48FFC2                  	inc rdx
 18797 0000F18A EBEA                    	jmp .L_lambda_simple_env_loop_0097
 18798                                  .L_lambda_simple_env_end_0097:
 18799 0000F18C 5B                      	pop rbx
 18800 0000F18D BE00000000              	mov rsi, 0
 18801                                  .L_lambda_simple_params_loop_0097:	; copy params
 18802 0000F192 4883FE00                	cmp rsi, 0
 18803 0000F196 740E                    	je .L_lambda_simple_params_end_0097
 18804 0000F198 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 18805 0000F19D 488914F3                	mov qword [rbx + 8 * rsi], rdx
 18806 0000F1A1 48FFC6                  	inc rsi
 18807 0000F1A4 EBEC                    	jmp .L_lambda_simple_params_loop_0097
 18808                                  .L_lambda_simple_params_end_0097:
 18809 0000F1A6 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 18810 0000F1A9 4889C3                  	mov rbx, rax
 18811 0000F1AC 58                      	pop rax
 18812 0000F1AD C60005                  	mov byte [rax], T_closure
 18813 0000F1B0 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 18814 0000F1B4 48C74009[BEF10000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0097
 18815 0000F1BC EB78                    	jmp .L_lambda_simple_end_0097
 18816                                  .L_lambda_simple_code_0097:	; lambda-simple body
 18817 0000F1BE 48837C241001            	cmp qword [rsp + 8 * 2], 1
 18818 0000F1C4 740B                    	je .L_lambda_simple_arity_check_ok_0097
 18819 0000F1C6 FF742410                	push qword [rsp + 8 * 2]
 18820 0000F1CA 6A01                    	push 1
 18821 0000F1CC E9790B0000              	jmp L_error_incorrect_arity_simple
 18822                                  .L_lambda_simple_arity_check_ok_0097:
 18823 0000F1D1 C8000000                	enter 0, 0
 18824 0000F1D5 48B8-                   	mov rax, L_constants + 32
 18824 0000F1D7 [2000000000000000] 
 18825 0000F1DF 50                      	push rax
 18826 0000F1E0 488B4520                	mov rax, qword [rbp + 8 * (4 + 0)]
 18827 0000F1E4 50                      	push rax
 18828 0000F1E5 6A02                    	push 2
 18829 0000F1E7 488B0425[30030000]      	mov rax, qword [free_var_102]
 18830                                  	assert_closure(rax)
    42 0000F1EF 803805              <1>  cmp byte [%1], %2
    43 0000F1F2 0F8592230000        <1>  jne L_error_incorrect_type
 18831 0000F1F8 FF7001                  	push SOB_CLOSURE_ENV(rax)
 18832 0000F1FB FF7508                  	push qword [rbp + 8 * 1] ; old ret addr
 18833 0000F1FE FF7500                  	push qword [rbp] ; same the old rbp
 18834 0000F201 BA05000000              	mov rdx, 2 + 3
 18835 0000F206 488B4D18                	mov rcx, COUNT
 18836 0000F20A 488D4CCD20              	lea rcx, [rbp + 8*4 + rcx * 8]
 18837 0000F20F 4889EF                  	mov rdi, rbp
 18838                                  .L_tc_recycle_frame_loop_00ad:
 18839 0000F212 4883FA00                	cmp rdx, 0
 18840 0000F216 7413                    	je .L_tc_recycle_frame_done_00ad
 18841 0000F218 4883E908                	sub rcx, 8
 18842 0000F21C 4883EF08                	sub rdi, 8
 18843 0000F220 488B37                  	mov rsi, [rdi]
 18844 0000F223 488931                  	mov qword [rcx], rsi
 18845 0000F226 48FFCA                  	dec rdx
 18846 0000F229 EBE7                    	jmp .L_tc_recycle_frame_loop_00ad
 18847                                  .L_tc_recycle_frame_done_00ad:
 18848 0000F22B 5D                      	pop rbp ; restore the old rbp
 18849 0000F22C 4889CC                  	mov rsp, rcx
 18850 0000F22F FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 18851 0000F232 C9                      	leave
 18852 0000F233 C21800                  	ret 8 * (2 + 1)
 18853                                  .L_lambda_simple_end_0097:	; new closure is in rax
 18854 0000F236 48890425[60040000]      	mov qword [free_var_140], rax
 18855 0000F23E 48B8-                   	mov rax, sob_void
 18855 0000F240 [0000000000000000] 
 18856                                  
 18857 0000F248 4889C7                  	mov rdi, rax
 18858 0000F24B E8520B0000              	call print_sexpr_if_not_void
 18859                                  
 18860 0000F250 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 18861 0000F255 E8370B0000              	call malloc
 18862 0000F25A 50                      	push rax
 18863 0000F25B BF00000000              	mov rdi, 8 * 0	; new rib
 18864 0000F260 E82C0B0000              	call malloc
 18865 0000F265 50                      	push rax
 18866 0000F266 BF08000000              	mov rdi, 8 * 1	; extended env
 18867 0000F26B E8210B0000              	call malloc
 18868 0000F270 488B7D10                	mov rdi, ENV
 18869 0000F274 BE00000000              	mov rsi, 0
 18870 0000F279 BA01000000              	mov rdx, 1
 18871                                  .L_lambda_simple_env_loop_0098:	; ext_env[i + 1] <-- env[i]
 18872 0000F27E 4883FE00                	cmp rsi, 0
 18873 0000F282 7410                    	je .L_lambda_simple_env_end_0098
 18874 0000F284 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 18875 0000F288 48890CD0                	mov qword [rax + 8 * rdx], rcx
 18876 0000F28C 48FFC6                  	inc rsi
 18877 0000F28F 48FFC2                  	inc rdx
 18878 0000F292 EBEA                    	jmp .L_lambda_simple_env_loop_0098
 18879                                  .L_lambda_simple_env_end_0098:
 18880 0000F294 5B                      	pop rbx
 18881 0000F295 BE00000000              	mov rsi, 0
 18882                                  .L_lambda_simple_params_loop_0098:	; copy params
 18883 0000F29A 4883FE00                	cmp rsi, 0
 18884 0000F29E 740E                    	je .L_lambda_simple_params_end_0098
 18885 0000F2A0 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 18886 0000F2A5 488914F3                	mov qword [rbx + 8 * rsi], rdx
 18887 0000F2A9 48FFC6                  	inc rsi
 18888 0000F2AC EBEC                    	jmp .L_lambda_simple_params_loop_0098
 18889                                  .L_lambda_simple_params_end_0098:
 18890 0000F2AE 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 18891 0000F2B1 4889C3                  	mov rbx, rax
 18892 0000F2B4 58                      	pop rax
 18893 0000F2B5 C60005                  	mov byte [rax], T_closure
 18894 0000F2B8 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 18895 0000F2BC 48C74009[C9F20000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0098
 18896 0000F2C4 E992000000              	jmp .L_lambda_simple_end_0098
 18897                                  .L_lambda_simple_code_0098:	; lambda-simple body
 18898 0000F2C9 48837C241001            	cmp qword [rsp + 8 * 2], 1
 18899 0000F2CF 740B                    	je .L_lambda_simple_arity_check_ok_0098
 18900 0000F2D1 FF742410                	push qword [rsp + 8 * 2]
 18901 0000F2D5 6A01                    	push 1
 18902 0000F2D7 E96E0A0000              	jmp L_error_incorrect_arity_simple
 18903                                  .L_lambda_simple_arity_check_ok_0098:
 18904 0000F2DC C8000000                	enter 0, 0
 18905 0000F2E0 48B8-                   	mov rax, L_constants + 512
 18905 0000F2E2 [0002000000000000] 
 18906 0000F2EA 50                      	push rax
 18907 0000F2EB 488B4520                	mov rax, qword [rbp + 8 * (4 + 0)]
 18908 0000F2EF 50                      	push rax
 18909 0000F2F0 6A02                    	push 2
 18910 0000F2F2 488B0425[60010000]      	mov rax, qword [free_var_44]
 18911                                  	assert_closure(rax)
    42 0000F2FA 803805              <1>  cmp byte [%1], %2
    43 0000F2FD 0F8587220000        <1>  jne L_error_incorrect_type
 18912 0000F303 FF7001                  	push SOB_CLOSURE_ENV(rax)
 18913 0000F306 FF5009                  	call SOB_CLOSURE_CODE(rax)
 18914 0000F309 50                      	push rax
 18915 0000F30A 6A01                    	push 1
 18916 0000F30C 488B0425[D8000000]      	mov rax, qword [free_var_27]
 18917                                  	assert_closure(rax)
    42 0000F314 803805              <1>  cmp byte [%1], %2
    43 0000F317 0F856D220000        <1>  jne L_error_incorrect_type
 18918 0000F31D FF7001                  	push SOB_CLOSURE_ENV(rax)
 18919 0000F320 FF7508                  	push qword [rbp + 8 * 1] ; old ret addr
 18920 0000F323 FF7500                  	push qword [rbp] ; same the old rbp
 18921 0000F326 BA04000000              	mov rdx, 1 + 3
 18922 0000F32B 488B4D18                	mov rcx, COUNT
 18923 0000F32F 488D4CCD20              	lea rcx, [rbp + 8*4 + rcx * 8]
 18924 0000F334 4889EF                  	mov rdi, rbp
 18925                                  .L_tc_recycle_frame_loop_00ae:
 18926 0000F337 4883FA00                	cmp rdx, 0
 18927 0000F33B 7413                    	je .L_tc_recycle_frame_done_00ae
 18928 0000F33D 4883E908                	sub rcx, 8
 18929 0000F341 4883EF08                	sub rdi, 8
 18930 0000F345 488B37                  	mov rsi, [rdi]
 18931 0000F348 488931                  	mov qword [rcx], rsi
 18932 0000F34B 48FFCA                  	dec rdx
 18933 0000F34E EBE7                    	jmp .L_tc_recycle_frame_loop_00ae
 18934                                  .L_tc_recycle_frame_done_00ae:
 18935 0000F350 5D                      	pop rbp ; restore the old rbp
 18936 0000F351 4889CC                  	mov rsp, rcx
 18937 0000F354 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 18938 0000F357 C9                      	leave
 18939 0000F358 C21800                  	ret 8 * (2 + 1)
 18940                                  .L_lambda_simple_end_0098:	; new closure is in rax
 18941 0000F35B 48890425[68040000]      	mov qword [free_var_141], rax
 18942 0000F363 48B8-                   	mov rax, sob_void
 18942 0000F365 [0000000000000000] 
 18943                                  
 18944 0000F36D 4889C7                  	mov rdi, rax
 18945 0000F370 E82D0A0000              	call print_sexpr_if_not_void
 18946                                  
 18947 0000F375 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 18948 0000F37A E8120A0000              	call malloc
 18949 0000F37F 50                      	push rax
 18950 0000F380 BF00000000              	mov rdi, 8 * 0	; new rib
 18951 0000F385 E8070A0000              	call malloc
 18952 0000F38A 50                      	push rax
 18953 0000F38B BF08000000              	mov rdi, 8 * 1	; extended env
 18954 0000F390 E8FC090000              	call malloc
 18955 0000F395 488B7D10                	mov rdi, ENV
 18956 0000F399 BE00000000              	mov rsi, 0
 18957 0000F39E BA01000000              	mov rdx, 1
 18958                                  .L_lambda_simple_env_loop_0099:	; ext_env[i + 1] <-- env[i]
 18959 0000F3A3 4883FE00                	cmp rsi, 0
 18960 0000F3A7 7410                    	je .L_lambda_simple_env_end_0099
 18961 0000F3A9 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 18962 0000F3AD 48890CD0                	mov qword [rax + 8 * rdx], rcx
 18963 0000F3B1 48FFC6                  	inc rsi
 18964 0000F3B4 48FFC2                  	inc rdx
 18965 0000F3B7 EBEA                    	jmp .L_lambda_simple_env_loop_0099
 18966                                  .L_lambda_simple_env_end_0099:
 18967 0000F3B9 5B                      	pop rbx
 18968 0000F3BA BE00000000              	mov rsi, 0
 18969                                  .L_lambda_simple_params_loop_0099:	; copy params
 18970 0000F3BF 4883FE00                	cmp rsi, 0
 18971 0000F3C3 740E                    	je .L_lambda_simple_params_end_0099
 18972 0000F3C5 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 18973 0000F3CA 488914F3                	mov qword [rbx + 8 * rsi], rdx
 18974 0000F3CE 48FFC6                  	inc rsi
 18975 0000F3D1 EBEC                    	jmp .L_lambda_simple_params_loop_0099
 18976                                  .L_lambda_simple_params_end_0099:
 18977 0000F3D3 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 18978 0000F3D6 4889C3                  	mov rbx, rax
 18979 0000F3D9 58                      	pop rax
 18980 0000F3DA C60005                  	mov byte [rax], T_closure
 18981 0000F3DD 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 18982 0000F3E1 48C74009[EEF30000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0099
 18983 0000F3E9 E987000000              	jmp .L_lambda_simple_end_0099
 18984                                  .L_lambda_simple_code_0099:	; lambda-simple body
 18985 0000F3EE 48837C241001            	cmp qword [rsp + 8 * 2], 1
 18986 0000F3F4 740B                    	je .L_lambda_simple_arity_check_ok_0099
 18987 0000F3F6 FF742410                	push qword [rsp + 8 * 2]
 18988 0000F3FA 6A01                    	push 1
 18989 0000F3FC E949090000              	jmp L_error_incorrect_arity_simple
 18990                                  .L_lambda_simple_arity_check_ok_0099:
 18991 0000F401 C8000000                	enter 0, 0
 18992 0000F405 488B4520                	mov rax, qword [rbp + 8 * (4 + 0)]
 18993 0000F409 50                      	push rax
 18994 0000F40A 6A01                    	push 1
 18995 0000F40C 488B0425[68040000]      	mov rax, qword [free_var_141]
 18996                                  	assert_closure(rax)
    42 0000F414 803805              <1>  cmp byte [%1], %2
    43 0000F417 0F856D210000        <1>  jne L_error_incorrect_type
 18997 0000F41D FF7001                  	push SOB_CLOSURE_ENV(rax)
 18998 0000F420 FF5009                  	call SOB_CLOSURE_CODE(rax)
 18999 0000F423 50                      	push rax
 19000 0000F424 6A01                    	push 1
 19001 0000F426 488B0425[B0020000]      	mov rax, qword [free_var_86]
 19002                                  	assert_closure(rax)
    42 0000F42E 803805              <1>  cmp byte [%1], %2
    43 0000F431 0F8553210000        <1>  jne L_error_incorrect_type
 19003 0000F437 FF7001                  	push SOB_CLOSURE_ENV(rax)
 19004 0000F43A FF7508                  	push qword [rbp + 8 * 1] ; old ret addr
 19005 0000F43D FF7500                  	push qword [rbp] ; same the old rbp
 19006 0000F440 BA04000000              	mov rdx, 1 + 3
 19007 0000F445 488B4D18                	mov rcx, COUNT
 19008 0000F449 488D4CCD20              	lea rcx, [rbp + 8*4 + rcx * 8]
 19009 0000F44E 4889EF                  	mov rdi, rbp
 19010                                  .L_tc_recycle_frame_loop_00af:
 19011 0000F451 4883FA00                	cmp rdx, 0
 19012 0000F455 7413                    	je .L_tc_recycle_frame_done_00af
 19013 0000F457 4883E908                	sub rcx, 8
 19014 0000F45B 4883EF08                	sub rdi, 8
 19015 0000F45F 488B37                  	mov rsi, [rdi]
 19016 0000F462 488931                  	mov qword [rcx], rsi
 19017 0000F465 48FFCA                  	dec rdx
 19018 0000F468 EBE7                    	jmp .L_tc_recycle_frame_loop_00af
 19019                                  .L_tc_recycle_frame_done_00af:
 19020 0000F46A 5D                      	pop rbp ; restore the old rbp
 19021 0000F46B 4889CC                  	mov rsp, rcx
 19022 0000F46E FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 19023 0000F471 C9                      	leave
 19024 0000F472 C21800                  	ret 8 * (2 + 1)
 19025                                  .L_lambda_simple_end_0099:	; new closure is in rax
 19026 0000F475 48890425[70040000]      	mov qword [free_var_142], rax
 19027 0000F47D 48B8-                   	mov rax, sob_void
 19027 0000F47F [0000000000000000] 
 19028                                  
 19029 0000F487 4889C7                  	mov rdi, rax
 19030 0000F48A E813090000              	call print_sexpr_if_not_void
 19031                                  
 19032 0000F48F BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 19033 0000F494 E8F8080000              	call malloc
 19034 0000F499 50                      	push rax
 19035 0000F49A BF00000000              	mov rdi, 8 * 0	; new rib
 19036 0000F49F E8ED080000              	call malloc
 19037 0000F4A4 50                      	push rax
 19038 0000F4A5 BF08000000              	mov rdi, 8 * 1	; extended env
 19039 0000F4AA E8E2080000              	call malloc
 19040 0000F4AF 488B7D10                	mov rdi, ENV
 19041 0000F4B3 BE00000000              	mov rsi, 0
 19042 0000F4B8 BA01000000              	mov rdx, 1
 19043                                  .L_lambda_simple_env_loop_009a:	; ext_env[i + 1] <-- env[i]
 19044 0000F4BD 4883FE00                	cmp rsi, 0
 19045 0000F4C1 7410                    	je .L_lambda_simple_env_end_009a
 19046 0000F4C3 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 19047 0000F4C7 48890CD0                	mov qword [rax + 8 * rdx], rcx
 19048 0000F4CB 48FFC6                  	inc rsi
 19049 0000F4CE 48FFC2                  	inc rdx
 19050 0000F4D1 EBEA                    	jmp .L_lambda_simple_env_loop_009a
 19051                                  .L_lambda_simple_env_end_009a:
 19052 0000F4D3 5B                      	pop rbx
 19053 0000F4D4 BE00000000              	mov rsi, 0
 19054                                  .L_lambda_simple_params_loop_009a:	; copy params
 19055 0000F4D9 4883FE00                	cmp rsi, 0
 19056 0000F4DD 740E                    	je .L_lambda_simple_params_end_009a
 19057 0000F4DF 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 19058 0000F4E4 488914F3                	mov qword [rbx + 8 * rsi], rdx
 19059 0000F4E8 48FFC6                  	inc rsi
 19060 0000F4EB EBEC                    	jmp .L_lambda_simple_params_loop_009a
 19061                                  .L_lambda_simple_params_end_009a:
 19062 0000F4ED 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 19063 0000F4F0 4889C3                  	mov rbx, rax
 19064 0000F4F3 58                      	pop rax
 19065 0000F4F4 C60005                  	mov byte [rax], T_closure
 19066 0000F4F7 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 19067 0000F4FB 48C74009[08F50000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_009a
 19068 0000F503 E999000000              	jmp .L_lambda_simple_end_009a
 19069                                  .L_lambda_simple_code_009a:	; lambda-simple body
 19070 0000F508 48837C241001            	cmp qword [rsp + 8 * 2], 1
 19071 0000F50E 740B                    	je .L_lambda_simple_arity_check_ok_009a
 19072 0000F510 FF742410                	push qword [rsp + 8 * 2]
 19073 0000F514 6A01                    	push 1
 19074 0000F516 E92F080000              	jmp L_error_incorrect_arity_simple
 19075                                  .L_lambda_simple_arity_check_ok_009a:
 19076 0000F51B C8000000                	enter 0, 0
 19077 0000F51F 488B4520                	mov rax, qword [rbp + 8 * (4 + 0)]
 19078 0000F523 50                      	push rax
 19079 0000F524 6A01                    	push 1
 19080 0000F526 488B0425[60040000]      	mov rax, qword [free_var_140]
 19081                                  	assert_closure(rax)
    42 0000F52E 803805              <1>  cmp byte [%1], %2
    43 0000F531 0F8553200000        <1>  jne L_error_incorrect_type
 19082 0000F537 FF7001                  	push SOB_CLOSURE_ENV(rax)
 19083 0000F53A FF5009                  	call SOB_CLOSURE_CODE(rax)
 19084 0000F53D 483D[02000000]          	cmp rax, sob_boolean_false
 19085 0000F543 7454                              	je .L_if_else_0053
 19086 0000F545 488B4520                          	mov rax, qword [rbp + 8 * (4 + 0)]
 19087 0000F549 50                      	push rax
 19088 0000F54A 6A01                    	push 1
 19089 0000F54C 488B0425[10030000]      	mov rax, qword [free_var_98]
 19090                                  	assert_closure(rax)
    42 0000F554 803805              <1>  cmp byte [%1], %2
    43 0000F557 0F852D200000        <1>  jne L_error_incorrect_type
 19091 0000F55D FF7001                  	push SOB_CLOSURE_ENV(rax)
 19092 0000F560 FF7508                  	push qword [rbp + 8 * 1] ; old ret addr
 19093 0000F563 FF7500                  	push qword [rbp] ; same the old rbp
 19094 0000F566 BA04000000              	mov rdx, 1 + 3
 19095 0000F56B 488B4D18                	mov rcx, COUNT
 19096 0000F56F 488D4CCD20              	lea rcx, [rbp + 8*4 + rcx * 8]
 19097 0000F574 4889EF                  	mov rdi, rbp
 19098                                  .L_tc_recycle_frame_loop_00b0:
 19099 0000F577 4883FA00                	cmp rdx, 0
 19100 0000F57B 7413                    	je .L_tc_recycle_frame_done_00b0
 19101 0000F57D 4883E908                	sub rcx, 8
 19102 0000F581 4883EF08                	sub rdi, 8
 19103 0000F585 488B37                  	mov rsi, [rdi]
 19104 0000F588 488931                  	mov qword [rcx], rsi
 19105 0000F58B 48FFCA                  	dec rdx
 19106 0000F58E EBE7                    	jmp .L_tc_recycle_frame_loop_00b0
 19107                                  .L_tc_recycle_frame_done_00b0:
 19108 0000F590 5D                      	pop rbp ; restore the old rbp
 19109 0000F591 4889CC                  	mov rsp, rcx
 19110 0000F594 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 19111 0000F597 EB04                    	jmp .L_if_end_0053
 19112                                            .L_if_else_0053:
 19113 0000F599 488B4520                          	mov rax, qword [rbp + 8 * (4 + 0)]
 19114                                  .L_if_end_0053:
 19115 0000F59D C9                      	leave
 19116 0000F59E C21800                  	ret 8 * (2 + 1)
 19117                                  .L_lambda_simple_end_009a:	; new closure is in rax
 19118 0000F5A1 48890425[78040000]      	mov qword [free_var_143], rax
 19119 0000F5A9 48B8-                   	mov rax, sob_void
 19119 0000F5AB [0000000000000000] 
 19120                                  
 19121 0000F5B3 4889C7                  	mov rdi, rax
 19122 0000F5B6 E8E7070000              	call print_sexpr_if_not_void
 19123                                  
 19124 0000F5BB BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 19125 0000F5C0 E8CC070000              	call malloc
 19126 0000F5C5 50                      	push rax
 19127 0000F5C6 BF00000000              	mov rdi, 8 * 0	; new rib
 19128 0000F5CB E8C1070000              	call malloc
 19129 0000F5D0 50                      	push rax
 19130 0000F5D1 BF08000000              	mov rdi, 8 * 1	; extended env
 19131 0000F5D6 E8B6070000              	call malloc
 19132 0000F5DB 488B7D10                	mov rdi, ENV
 19133 0000F5DF BE00000000              	mov rsi, 0
 19134 0000F5E4 BA01000000              	mov rdx, 1
 19135                                  .L_lambda_simple_env_loop_009b:	; ext_env[i + 1] <-- env[i]
 19136 0000F5E9 4883FE00                	cmp rsi, 0
 19137 0000F5ED 7410                    	je .L_lambda_simple_env_end_009b
 19138 0000F5EF 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 19139 0000F5F3 48890CD0                	mov qword [rax + 8 * rdx], rcx
 19140 0000F5F7 48FFC6                  	inc rsi
 19141 0000F5FA 48FFC2                  	inc rdx
 19142 0000F5FD EBEA                    	jmp .L_lambda_simple_env_loop_009b
 19143                                  .L_lambda_simple_env_end_009b:
 19144 0000F5FF 5B                      	pop rbx
 19145 0000F600 BE00000000              	mov rsi, 0
 19146                                  .L_lambda_simple_params_loop_009b:	; copy params
 19147 0000F605 4883FE00                	cmp rsi, 0
 19148 0000F609 740E                    	je .L_lambda_simple_params_end_009b
 19149 0000F60B 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 19150 0000F610 488914F3                	mov qword [rbx + 8 * rsi], rdx
 19151 0000F614 48FFC6                  	inc rsi
 19152 0000F617 EBEC                    	jmp .L_lambda_simple_params_loop_009b
 19153                                  .L_lambda_simple_params_end_009b:
 19154 0000F619 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 19155 0000F61C 4889C3                  	mov rbx, rax
 19156 0000F61F 58                      	pop rax
 19157 0000F620 C60005                  	mov byte [rax], T_closure
 19158 0000F623 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 19159 0000F627 48C74009[34F60000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_009b
 19160 0000F62F E948040000              	jmp .L_lambda_simple_end_009b
 19161                                  .L_lambda_simple_code_009b:	; lambda-simple body
 19162 0000F634 48837C241002            	cmp qword [rsp + 8 * 2], 2
 19163 0000F63A 740B                    	je .L_lambda_simple_arity_check_ok_009b
 19164 0000F63C FF742410                	push qword [rsp + 8 * 2]
 19165 0000F640 6A02                    	push 2
 19166 0000F642 E903070000              	jmp L_error_incorrect_arity_simple
 19167                                  .L_lambda_simple_arity_check_ok_009b:
 19168 0000F647 C8000000                	enter 0, 0
 19169 0000F64B 488B4520                	mov rax, qword [rbp + 8 * (4 + 0)]
 19170 0000F64F 50                      	push rax
 19171 0000F650 6A01                    	push 1
 19172 0000F652 488B0425[08000000]      	mov rax, qword [free_var_1]
 19173                                  	assert_closure(rax)
    42 0000F65A 803805              <1>  cmp byte [%1], %2
    43 0000F65D 0F85271F0000        <1>  jne L_error_incorrect_type
 19174 0000F663 FF7001                  	push SOB_CLOSURE_ENV(rax)
 19175 0000F666 FF5009                  	call SOB_CLOSURE_CODE(rax)
 19176 0000F669 483D[02000000]          	cmp rax, sob_boolean_false
 19177 0000F66F 7420                              	je .L_if_else_0054
 19178 0000F671 488B4528                          	mov rax, qword [rbp + 8 * (4 + 1)]
 19179 0000F675 50                      	push rax
 19180 0000F676 6A01                    	push 1
 19181 0000F678 488B0425[08000000]      	mov rax, qword [free_var_1]
 19182                                  	assert_closure(rax)
    42 0000F680 803805              <1>  cmp byte [%1], %2
    43 0000F683 0F85011F0000        <1>  jne L_error_incorrect_type
 19183 0000F689 FF7001                  	push SOB_CLOSURE_ENV(rax)
 19184 0000F68C FF5009                  	call SOB_CLOSURE_CODE(rax)
 19185 0000F68F EB0A                    	jmp .L_if_end_0054
 19186                                            .L_if_else_0054:
 19187 0000F691 48B8-                             	mov rax, L_constants + 2
 19187 0000F693 [0200000000000000] 
 19188                                  .L_if_end_0054:
 19189 0000F69B 483D[02000000]          	cmp rax, sob_boolean_false
 19190 0000F6A1 0F84FF000000                      	je .L_if_else_005c
 19191 0000F6A7 488B4528                          	mov rax, qword [rbp + 8 * (4 + 1)]
 19192 0000F6AB 50                      	push rax
 19193 0000F6AC 6A01                    	push 1
 19194 0000F6AE 488B0425[80000000]      	mov rax, qword [free_var_16]
 19195                                  	assert_closure(rax)
    42 0000F6B6 803805              <1>  cmp byte [%1], %2
    43 0000F6B9 0F85CB1E0000        <1>  jne L_error_incorrect_type
 19196 0000F6BF FF7001                  	push SOB_CLOSURE_ENV(rax)
 19197 0000F6C2 FF5009                  	call SOB_CLOSURE_CODE(rax)
 19198 0000F6C5 50                      	push rax
 19199 0000F6C6 488B4520                	mov rax, qword [rbp + 8 * (4 + 0)]
 19200 0000F6CA 50                      	push rax
 19201 0000F6CB 6A01                    	push 1
 19202 0000F6CD 488B0425[80000000]      	mov rax, qword [free_var_16]
 19203                                  	assert_closure(rax)
    42 0000F6D5 803805              <1>  cmp byte [%1], %2
    43 0000F6D8 0F85AC1E0000        <1>  jne L_error_incorrect_type
 19204 0000F6DE FF7001                  	push SOB_CLOSURE_ENV(rax)
 19205 0000F6E1 FF5009                  	call SOB_CLOSURE_CODE(rax)
 19206 0000F6E4 50                      	push rax
 19207 0000F6E5 6A02                    	push 2
 19208 0000F6E7 488B0425[80040000]      	mov rax, qword [free_var_144]
 19209                                  	assert_closure(rax)
    42 0000F6EF 803805              <1>  cmp byte [%1], %2
    43 0000F6F2 0F85921E0000        <1>  jne L_error_incorrect_type
 19210 0000F6F8 FF7001                  	push SOB_CLOSURE_ENV(rax)
 19211 0000F6FB FF5009                  	call SOB_CLOSURE_CODE(rax)
 19212 0000F6FE 483D[02000000]          	cmp rax, sob_boolean_false
 19213 0000F704 0F848D000000                      	je .L_if_else_0055
 19214 0000F70A 488B4528                          	mov rax, qword [rbp + 8 * (4 + 1)]
 19215 0000F70E 50                      	push rax
 19216 0000F70F 6A01                    	push 1
 19217 0000F711 488B0425[88000000]      	mov rax, qword [free_var_17]
 19218                                  	assert_closure(rax)
    42 0000F719 803805              <1>  cmp byte [%1], %2
    43 0000F71C 0F85681E0000        <1>  jne L_error_incorrect_type
 19219 0000F722 FF7001                  	push SOB_CLOSURE_ENV(rax)
 19220 0000F725 FF5009                  	call SOB_CLOSURE_CODE(rax)
 19221 0000F728 50                      	push rax
 19222 0000F729 488B4520                	mov rax, qword [rbp + 8 * (4 + 0)]
 19223 0000F72D 50                      	push rax
 19224 0000F72E 6A01                    	push 1
 19225 0000F730 488B0425[88000000]      	mov rax, qword [free_var_17]
 19226                                  	assert_closure(rax)
    42 0000F738 803805              <1>  cmp byte [%1], %2
    43 0000F73B 0F85491E0000        <1>  jne L_error_incorrect_type
 19227 0000F741 FF7001                  	push SOB_CLOSURE_ENV(rax)
 19228 0000F744 FF5009                  	call SOB_CLOSURE_CODE(rax)
 19229 0000F747 50                      	push rax
 19230 0000F748 6A02                    	push 2
 19231 0000F74A 488B0425[80040000]      	mov rax, qword [free_var_144]
 19232                                  	assert_closure(rax)
    42 0000F752 803805              <1>  cmp byte [%1], %2
    43 0000F755 0F852F1E0000        <1>  jne L_error_incorrect_type
 19233 0000F75B FF7001                  	push SOB_CLOSURE_ENV(rax)
 19234 0000F75E FF7508                  	push qword [rbp + 8 * 1] ; old ret addr
 19235 0000F761 FF7500                  	push qword [rbp] ; same the old rbp
 19236 0000F764 BA05000000              	mov rdx, 2 + 3
 19237 0000F769 488B4D18                	mov rcx, COUNT
 19238 0000F76D 488D4CCD20              	lea rcx, [rbp + 8*4 + rcx * 8]
 19239 0000F772 4889EF                  	mov rdi, rbp
 19240                                  .L_tc_recycle_frame_loop_00b1:
 19241 0000F775 4883FA00                	cmp rdx, 0
 19242 0000F779 7413                    	je .L_tc_recycle_frame_done_00b1
 19243 0000F77B 4883E908                	sub rcx, 8
 19244 0000F77F 4883EF08                	sub rdi, 8
 19245 0000F783 488B37                  	mov rsi, [rdi]
 19246 0000F786 488931                  	mov qword [rcx], rsi
 19247 0000F789 48FFCA                  	dec rdx
 19248 0000F78C EBE7                    	jmp .L_tc_recycle_frame_loop_00b1
 19249                                  .L_tc_recycle_frame_done_00b1:
 19250 0000F78E 5D                      	pop rbp ; restore the old rbp
 19251 0000F78F 4889CC                  	mov rsp, rcx
 19252 0000F792 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 19253 0000F795 EB0A                    	jmp .L_if_end_0055
 19254                                            .L_if_else_0055:
 19255 0000F797 48B8-                             	mov rax, L_constants + 2
 19255 0000F799 [0200000000000000] 
 19256                                  .L_if_end_0055:
 19257 0000F7A1 E9D2020000              	jmp .L_if_end_005c
 19258                                            .L_if_else_005c:
 19259 0000F7A6 488B4520                          	mov rax, qword [rbp + 8 * (4 + 0)]
 19260 0000F7AA 50                      	push rax
 19261 0000F7AB 6A01                    	push 1
 19262 0000F7AD 488B0425[30000000]      	mov rax, qword [free_var_6]
 19263                                  	assert_closure(rax)
    42 0000F7B5 803805              <1>  cmp byte [%1], %2
    43 0000F7B8 0F85CC1D0000        <1>  jne L_error_incorrect_type
 19264 0000F7BE FF7001                  	push SOB_CLOSURE_ENV(rax)
 19265 0000F7C1 FF5009                  	call SOB_CLOSURE_CODE(rax)
 19266 0000F7C4 483D[02000000]          	cmp rax, sob_boolean_false
 19267 0000F7CA 0F848B000000                      	je .L_if_else_0057
 19268 0000F7D0 488B4528                          	mov rax, qword [rbp + 8 * (4 + 1)]
 19269 0000F7D4 50                      	push rax
 19270 0000F7D5 6A01                    	push 1
 19271 0000F7D7 488B0425[30000000]      	mov rax, qword [free_var_6]
 19272                                  	assert_closure(rax)
    42 0000F7DF 803805              <1>  cmp byte [%1], %2
    43 0000F7E2 0F85A21D0000        <1>  jne L_error_incorrect_type
 19273 0000F7E8 FF7001                  	push SOB_CLOSURE_ENV(rax)
 19274 0000F7EB FF5009                  	call SOB_CLOSURE_CODE(rax)
 19275 0000F7EE 483D[02000000]          	cmp rax, sob_boolean_false
 19276 0000F7F4 7459                              	je .L_if_else_0056
 19277 0000F7F6 488B4528                          	mov rax, qword [rbp + 8 * (4 + 1)]
 19278 0000F7FA 50                      	push rax
 19279 0000F7FB 6A01                    	push 1
 19280 0000F7FD 488B0425[98000000]      	mov rax, qword [free_var_19]
 19281                                  	assert_closure(rax)
    42 0000F805 803805              <1>  cmp byte [%1], %2
    43 0000F808 0F857C1D0000        <1>  jne L_error_incorrect_type
 19282 0000F80E FF7001                  	push SOB_CLOSURE_ENV(rax)
 19283 0000F811 FF5009                  	call SOB_CLOSURE_CODE(rax)
 19284 0000F814 50                      	push rax
 19285 0000F815 488B4520                	mov rax, qword [rbp + 8 * (4 + 0)]
 19286 0000F819 50                      	push rax
 19287 0000F81A 6A01                    	push 1
 19288 0000F81C 488B0425[98000000]      	mov rax, qword [free_var_19]
 19289                                  	assert_closure(rax)
    42 0000F824 803805              <1>  cmp byte [%1], %2
    43 0000F827 0F855D1D0000        <1>  jne L_error_incorrect_type
 19290 0000F82D FF7001                  	push SOB_CLOSURE_ENV(rax)
 19291 0000F830 FF5009                  	call SOB_CLOSURE_CODE(rax)
 19292 0000F833 50                      	push rax
 19293 0000F834 6A02                    	push 2
 19294 0000F836 488B0425[50030000]      	mov rax, qword [free_var_106]
 19295                                  	assert_closure(rax)
    42 0000F83E 803805              <1>  cmp byte [%1], %2
    43 0000F841 0F85431D0000        <1>  jne L_error_incorrect_type
 19296 0000F847 FF7001                  	push SOB_CLOSURE_ENV(rax)
 19297 0000F84A FF5009                  	call SOB_CLOSURE_CODE(rax)
 19298 0000F84D EB0A                    	jmp .L_if_end_0056
 19299                                            .L_if_else_0056:
 19300 0000F84F 48B8-                             	mov rax, L_constants + 2
 19300 0000F851 [0200000000000000] 
 19301                                  .L_if_end_0056:
 19302 0000F859 EB0A                    	jmp .L_if_end_0057
 19303                                            .L_if_else_0057:
 19304 0000F85B 48B8-                             	mov rax, L_constants + 2
 19304 0000F85D [0200000000000000] 
 19305                                  .L_if_end_0057:
 19306 0000F865 483D[02000000]          	cmp rax, sob_boolean_false
 19307 0000F86B 0F8490000000                      	je .L_if_else_005b
 19308 0000F871 488B4528                          	mov rax, qword [rbp + 8 * (4 + 1)]
 19309 0000F875 50                      	push rax
 19310 0000F876 6A01                    	push 1
 19311 0000F878 488B0425[48040000]      	mov rax, qword [free_var_137]
 19312                                  	assert_closure(rax)
    42 0000F880 803805              <1>  cmp byte [%1], %2
    43 0000F883 0F85011D0000        <1>  jne L_error_incorrect_type
 19313 0000F889 FF7001                  	push SOB_CLOSURE_ENV(rax)
 19314 0000F88C FF5009                  	call SOB_CLOSURE_CODE(rax)
 19315 0000F88F 50                      	push rax
 19316 0000F890 488B4520                	mov rax, qword [rbp + 8 * (4 + 0)]
 19317 0000F894 50                      	push rax
 19318 0000F895 6A01                    	push 1
 19319 0000F897 488B0425[48040000]      	mov rax, qword [free_var_137]
 19320                                  	assert_closure(rax)
    42 0000F89F 803805              <1>  cmp byte [%1], %2
    43 0000F8A2 0F85E21C0000        <1>  jne L_error_incorrect_type
 19321 0000F8A8 FF7001                  	push SOB_CLOSURE_ENV(rax)
 19322 0000F8AB FF5009                  	call SOB_CLOSURE_CODE(rax)
 19323 0000F8AE 50                      	push rax
 19324 0000F8AF 6A02                    	push 2
 19325 0000F8B1 488B0425[80040000]      	mov rax, qword [free_var_144]
 19326                                  	assert_closure(rax)
    42 0000F8B9 803805              <1>  cmp byte [%1], %2
    43 0000F8BC 0F85C81C0000        <1>  jne L_error_incorrect_type
 19327 0000F8C2 FF7001                  	push SOB_CLOSURE_ENV(rax)
 19328 0000F8C5 FF7508                  	push qword [rbp + 8 * 1] ; old ret addr
 19329 0000F8C8 FF7500                  	push qword [rbp] ; same the old rbp
 19330 0000F8CB BA05000000              	mov rdx, 2 + 3
 19331 0000F8D0 488B4D18                	mov rcx, COUNT
 19332 0000F8D4 488D4CCD20              	lea rcx, [rbp + 8*4 + rcx * 8]
 19333 0000F8D9 4889EF                  	mov rdi, rbp
 19334                                  .L_tc_recycle_frame_loop_00b2:
 19335 0000F8DC 4883FA00                	cmp rdx, 0
 19336 0000F8E0 7413                    	je .L_tc_recycle_frame_done_00b2
 19337 0000F8E2 4883E908                	sub rcx, 8
 19338 0000F8E6 4883EF08                	sub rdi, 8
 19339 0000F8EA 488B37                  	mov rsi, [rdi]
 19340 0000F8ED 488931                  	mov qword [rcx], rsi
 19341 0000F8F0 48FFCA                  	dec rdx
 19342 0000F8F3 EBE7                    	jmp .L_tc_recycle_frame_loop_00b2
 19343                                  .L_tc_recycle_frame_done_00b2:
 19344 0000F8F5 5D                      	pop rbp ; restore the old rbp
 19345 0000F8F6 4889CC                  	mov rsp, rcx
 19346 0000F8F9 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 19347 0000F8FC E977010000              	jmp .L_if_end_005b
 19348                                            .L_if_else_005b:
 19349 0000F901 488B4520                          	mov rax, qword [rbp + 8 * (4 + 0)]
 19350 0000F905 50                      	push rax
 19351 0000F906 6A01                    	push 1
 19352 0000F908 488B0425[20000000]      	mov rax, qword [free_var_4]
 19353                                  	assert_closure(rax)
    42 0000F910 803805              <1>  cmp byte [%1], %2
    43 0000F913 0F85711C0000        <1>  jne L_error_incorrect_type
 19354 0000F919 FF7001                  	push SOB_CLOSURE_ENV(rax)
 19355 0000F91C FF5009                  	call SOB_CLOSURE_CODE(rax)
 19356 0000F91F 483D[02000000]          	cmp rax, sob_boolean_false
 19357 0000F925 0F848B000000                      	je .L_if_else_0059
 19358 0000F92B 488B4528                          	mov rax, qword [rbp + 8 * (4 + 1)]
 19359 0000F92F 50                      	push rax
 19360 0000F930 6A01                    	push 1
 19361 0000F932 488B0425[20000000]      	mov rax, qword [free_var_4]
 19362                                  	assert_closure(rax)
    42 0000F93A 803805              <1>  cmp byte [%1], %2
    43 0000F93D 0F85471C0000        <1>  jne L_error_incorrect_type
 19363 0000F943 FF7001                  	push SOB_CLOSURE_ENV(rax)
 19364 0000F946 FF5009                  	call SOB_CLOSURE_CODE(rax)
 19365 0000F949 483D[02000000]          	cmp rax, sob_boolean_false
 19366 0000F94F 7459                              	je .L_if_else_0058
 19367 0000F951 488B4528                          	mov rax, qword [rbp + 8 * (4 + 1)]
 19368 0000F955 50                      	push rax
 19369 0000F956 6A01                    	push 1
 19370 0000F958 488B0425[90000000]      	mov rax, qword [free_var_18]
 19371                                  	assert_closure(rax)
    42 0000F960 803805              <1>  cmp byte [%1], %2
    43 0000F963 0F85211C0000        <1>  jne L_error_incorrect_type
 19372 0000F969 FF7001                  	push SOB_CLOSURE_ENV(rax)
 19373 0000F96C FF5009                  	call SOB_CLOSURE_CODE(rax)
 19374 0000F96F 50                      	push rax
 19375 0000F970 488B4520                	mov rax, qword [rbp + 8 * (4 + 0)]
 19376 0000F974 50                      	push rax
 19377 0000F975 6A01                    	push 1
 19378 0000F977 488B0425[90000000]      	mov rax, qword [free_var_18]
 19379                                  	assert_closure(rax)
    42 0000F97F 803805              <1>  cmp byte [%1], %2
    43 0000F982 0F85021C0000        <1>  jne L_error_incorrect_type
 19380 0000F988 FF7001                  	push SOB_CLOSURE_ENV(rax)
 19381 0000F98B FF5009                  	call SOB_CLOSURE_CODE(rax)
 19382 0000F98E 50                      	push rax
 19383 0000F98F 6A02                    	push 2
 19384 0000F991 488B0425[50030000]      	mov rax, qword [free_var_106]
 19385                                  	assert_closure(rax)
    42 0000F999 803805              <1>  cmp byte [%1], %2
    43 0000F99C 0F85E81B0000        <1>  jne L_error_incorrect_type
 19386 0000F9A2 FF7001                  	push SOB_CLOSURE_ENV(rax)
 19387 0000F9A5 FF5009                  	call SOB_CLOSURE_CODE(rax)
 19388 0000F9A8 EB0A                    	jmp .L_if_end_0058
 19389                                            .L_if_else_0058:
 19390 0000F9AA 48B8-                             	mov rax, L_constants + 2
 19390 0000F9AC [0200000000000000] 
 19391                                  .L_if_end_0058:
 19392 0000F9B4 EB0A                    	jmp .L_if_end_0059
 19393                                            .L_if_else_0059:
 19394 0000F9B6 48B8-                             	mov rax, L_constants + 2
 19394 0000F9B8 [0200000000000000] 
 19395                                  .L_if_end_0059:
 19396 0000F9C0 483D[02000000]          	cmp rax, sob_boolean_false
 19397 0000F9C6 7459                              	je .L_if_else_005a
 19398 0000F9C8 488B4528                          	mov rax, qword [rbp + 8 * (4 + 1)]
 19399 0000F9CC 50                      	push rax
 19400 0000F9CD 488B4520                	mov rax, qword [rbp + 8 * (4 + 0)]
 19401 0000F9D1 50                      	push rax
 19402 0000F9D2 6A02                    	push 2
 19403 0000F9D4 488B0425[F0030000]      	mov rax, qword [free_var_126]
 19404                                  	assert_closure(rax)
    42 0000F9DC 803805              <1>  cmp byte [%1], %2
    43 0000F9DF 0F85A51B0000        <1>  jne L_error_incorrect_type
 19405 0000F9E5 FF7001                  	push SOB_CLOSURE_ENV(rax)
 19406 0000F9E8 FF7508                  	push qword [rbp + 8 * 1] ; old ret addr
 19407 0000F9EB FF7500                  	push qword [rbp] ; same the old rbp
 19408 0000F9EE BA05000000              	mov rdx, 2 + 3
 19409 0000F9F3 488B4D18                	mov rcx, COUNT
 19410 0000F9F7 488D4CCD20              	lea rcx, [rbp + 8*4 + rcx * 8]
 19411 0000F9FC 4889EF                  	mov rdi, rbp
 19412                                  .L_tc_recycle_frame_loop_00b3:
 19413 0000F9FF 4883FA00                	cmp rdx, 0
 19414 0000FA03 7413                    	je .L_tc_recycle_frame_done_00b3
 19415 0000FA05 4883E908                	sub rcx, 8
 19416 0000FA09 4883EF08                	sub rdi, 8
 19417 0000FA0D 488B37                  	mov rsi, [rdi]
 19418 0000FA10 488931                  	mov qword [rcx], rsi
 19419 0000FA13 48FFCA                  	dec rdx
 19420 0000FA16 EBE7                    	jmp .L_tc_recycle_frame_loop_00b3
 19421                                  .L_tc_recycle_frame_done_00b3:
 19422 0000FA18 5D                      	pop rbp ; restore the old rbp
 19423 0000FA19 4889CC                  	mov rsp, rcx
 19424 0000FA1C FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 19425 0000FA1F EB57                    	jmp .L_if_end_005a
 19426                                            .L_if_else_005a:
 19427 0000FA21 488B4528                          	mov rax, qword [rbp + 8 * (4 + 1)]
 19428 0000FA25 50                      	push rax
 19429 0000FA26 488B4520                	mov rax, qword [rbp + 8 * (4 + 0)]
 19430 0000FA2A 50                      	push rax
 19431 0000FA2B 6A02                    	push 2
 19432 0000FA2D 488B0425[B8010000]      	mov rax, qword [free_var_55]
 19433                                  	assert_closure(rax)
    42 0000FA35 803805              <1>  cmp byte [%1], %2
    43 0000FA38 0F854C1B0000        <1>  jne L_error_incorrect_type
 19434 0000FA3E FF7001                  	push SOB_CLOSURE_ENV(rax)
 19435 0000FA41 FF7508                  	push qword [rbp + 8 * 1] ; old ret addr
 19436 0000FA44 FF7500                  	push qword [rbp] ; same the old rbp
 19437 0000FA47 BA05000000              	mov rdx, 2 + 3
 19438 0000FA4C 488B4D18                	mov rcx, COUNT
 19439 0000FA50 488D4CCD20              	lea rcx, [rbp + 8*4 + rcx * 8]
 19440 0000FA55 4889EF                  	mov rdi, rbp
 19441                                  .L_tc_recycle_frame_loop_00b4:
 19442 0000FA58 4883FA00                	cmp rdx, 0
 19443 0000FA5C 7413                    	je .L_tc_recycle_frame_done_00b4
 19444 0000FA5E 4883E908                	sub rcx, 8
 19445 0000FA62 4883EF08                	sub rdi, 8
 19446 0000FA66 488B37                  	mov rsi, [rdi]
 19447 0000FA69 488931                  	mov qword [rcx], rsi
 19448 0000FA6C 48FFCA                  	dec rdx
 19449 0000FA6F EBE7                    	jmp .L_tc_recycle_frame_loop_00b4
 19450                                  .L_tc_recycle_frame_done_00b4:
 19451 0000FA71 5D                      	pop rbp ; restore the old rbp
 19452 0000FA72 4889CC                  	mov rsp, rcx
 19453 0000FA75 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 19454                                  .L_if_end_005a:
 19455                                  .L_if_end_005b:
 19456                                  .L_if_end_005c:
 19457 0000FA78 C9                      	leave
 19458 0000FA79 C22000                  	ret 8 * (2 + 2)
 19459                                  .L_lambda_simple_end_009b:	; new closure is in rax
 19460 0000FA7C 48890425[80040000]      	mov qword [free_var_144], rax
 19461 0000FA84 48B8-                   	mov rax, sob_void
 19461 0000FA86 [0000000000000000] 
 19462                                  
 19463 0000FA8E 4889C7                  	mov rdi, rax
 19464 0000FA91 E80C030000              	call print_sexpr_if_not_void
 19465                                  
 19466 0000FA96 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 19467 0000FA9B E8F1020000              	call malloc
 19468 0000FAA0 50                      	push rax
 19469 0000FAA1 BF00000000              	mov rdi, 8 * 0	; new rib
 19470 0000FAA6 E8E6020000              	call malloc
 19471 0000FAAB 50                      	push rax
 19472 0000FAAC BF08000000              	mov rdi, 8 * 1	; extended env
 19473 0000FAB1 E8DB020000              	call malloc
 19474 0000FAB6 488B7D10                	mov rdi, ENV
 19475 0000FABA BE00000000              	mov rsi, 0
 19476 0000FABF BA01000000              	mov rdx, 1
 19477                                  .L_lambda_simple_env_loop_009c:	; ext_env[i + 1] <-- env[i]
 19478 0000FAC4 4883FE00                	cmp rsi, 0
 19479 0000FAC8 7410                    	je .L_lambda_simple_env_end_009c
 19480 0000FACA 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 19481 0000FACE 48890CD0                	mov qword [rax + 8 * rdx], rcx
 19482 0000FAD2 48FFC6                  	inc rsi
 19483 0000FAD5 48FFC2                  	inc rdx
 19484 0000FAD8 EBEA                    	jmp .L_lambda_simple_env_loop_009c
 19485                                  .L_lambda_simple_env_end_009c:
 19486 0000FADA 5B                      	pop rbx
 19487 0000FADB BE00000000              	mov rsi, 0
 19488                                  .L_lambda_simple_params_loop_009c:	; copy params
 19489 0000FAE0 4883FE00                	cmp rsi, 0
 19490 0000FAE4 740E                    	je .L_lambda_simple_params_end_009c
 19491 0000FAE6 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 19492 0000FAEB 488914F3                	mov qword [rbx + 8 * rsi], rdx
 19493 0000FAEF 48FFC6                  	inc rsi
 19494 0000FAF2 EBEC                    	jmp .L_lambda_simple_params_loop_009c
 19495                                  .L_lambda_simple_params_end_009c:
 19496 0000FAF4 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 19497 0000FAF7 4889C3                  	mov rbx, rax
 19498 0000FAFA 58                      	pop rax
 19499 0000FAFB C60005                  	mov byte [rax], T_closure
 19500 0000FAFE 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 19501 0000FB02 48C74009[0FFB0000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_009c
 19502 0000FB0A E95A010000              	jmp .L_lambda_simple_end_009c
 19503                                  .L_lambda_simple_code_009c:	; lambda-simple body
 19504 0000FB0F 48837C241002            	cmp qword [rsp + 8 * 2], 2
 19505 0000FB15 740B                    	je .L_lambda_simple_arity_check_ok_009c
 19506 0000FB17 FF742410                	push qword [rsp + 8 * 2]
 19507 0000FB1B 6A02                    	push 2
 19508 0000FB1D E928020000              	jmp L_error_incorrect_arity_simple
 19509                                  .L_lambda_simple_arity_check_ok_009c:
 19510 0000FB22 C8000000                	enter 0, 0
 19511 0000FB26 488B4528                	mov rax, qword [rbp + 8 * (4 + 1)]
 19512 0000FB2A 50                      	push rax
 19513 0000FB2B 6A01                    	push 1
 19514 0000FB2D 488B0425[00000000]      	mov rax, qword [free_var_0]
 19515                                  	assert_closure(rax)
    42 0000FB35 803805              <1>  cmp byte [%1], %2
    43 0000FB38 0F854C1A0000        <1>  jne L_error_incorrect_type
 19516 0000FB3E FF7001                  	push SOB_CLOSURE_ENV(rax)
 19517 0000FB41 FF5009                  	call SOB_CLOSURE_CODE(rax)
 19518 0000FB44 483D[02000000]          	cmp rax, sob_boolean_false
 19519 0000FB4A 740F                              	je .L_if_else_005e
 19520 0000FB4C 48B8-                             	mov rax, L_constants + 2
 19520 0000FB4E [0200000000000000] 
 19521 0000FB56 E90A010000              	jmp .L_if_end_005e
 19522                                            .L_if_else_005e:
 19523 0000FB5B 488B4520                          	mov rax, qword [rbp + 8 * (4 + 0)]
 19524 0000FB5F 50                      	push rax
 19525 0000FB60 488B4528                	mov rax, qword [rbp + 8 * (4 + 1)]
 19526 0000FB64 50                      	push rax
 19527 0000FB65 6A01                    	push 1
 19528 0000FB67 488B0425[C0010000]      	mov rax, qword [free_var_56]
 19529                                  	assert_closure(rax)
    42 0000FB6F 803805              <1>  cmp byte [%1], %2
    43 0000FB72 0F85121A0000        <1>  jne L_error_incorrect_type
 19530 0000FB78 FF7001                  	push SOB_CLOSURE_ENV(rax)
 19531 0000FB7B FF5009                  	call SOB_CLOSURE_CODE(rax)
 19532 0000FB7E 50                      	push rax
 19533 0000FB7F 6A02                    	push 2
 19534 0000FB81 488B0425[B8010000]      	mov rax, qword [free_var_55]
 19535                                  	assert_closure(rax)
    42 0000FB89 803805              <1>  cmp byte [%1], %2
    43 0000FB8C 0F85F8190000        <1>  jne L_error_incorrect_type
 19536 0000FB92 FF7001                  	push SOB_CLOSURE_ENV(rax)
 19537 0000FB95 FF5009                  	call SOB_CLOSURE_CODE(rax)
 19538 0000FB98 483D[02000000]          	cmp rax, sob_boolean_false
 19539 0000FB9E 7454                              	je .L_if_else_005d
 19540 0000FBA0 488B4528                          	mov rax, qword [rbp + 8 * (4 + 1)]
 19541 0000FBA4 50                      	push rax
 19542 0000FBA5 6A01                    	push 1
 19543 0000FBA7 488B0425[80000000]      	mov rax, qword [free_var_16]
 19544                                  	assert_closure(rax)
    42 0000FBAF 803805              <1>  cmp byte [%1], %2
    43 0000FBB2 0F85D2190000        <1>  jne L_error_incorrect_type
 19545 0000FBB8 FF7001                  	push SOB_CLOSURE_ENV(rax)
 19546 0000FBBB FF7508                  	push qword [rbp + 8 * 1] ; old ret addr
 19547 0000FBBE FF7500                  	push qword [rbp] ; same the old rbp
 19548 0000FBC1 BA04000000              	mov rdx, 1 + 3
 19549 0000FBC6 488B4D18                	mov rcx, COUNT
 19550 0000FBCA 488D4CCD20              	lea rcx, [rbp + 8*4 + rcx * 8]
 19551 0000FBCF 4889EF                  	mov rdi, rbp
 19552                                  .L_tc_recycle_frame_loop_00b5:
 19553 0000FBD2 4883FA00                	cmp rdx, 0
 19554 0000FBD6 7413                    	je .L_tc_recycle_frame_done_00b5
 19555 0000FBD8 4883E908                	sub rcx, 8
 19556 0000FBDC 4883EF08                	sub rdi, 8
 19557 0000FBE0 488B37                  	mov rsi, [rdi]
 19558 0000FBE3 488931                  	mov qword [rcx], rsi
 19559 0000FBE6 48FFCA                  	dec rdx
 19560 0000FBE9 EBE7                    	jmp .L_tc_recycle_frame_loop_00b5
 19561                                  .L_tc_recycle_frame_done_00b5:
 19562 0000FBEB 5D                      	pop rbp ; restore the old rbp
 19563 0000FBEC 4889CC                  	mov rsp, rcx
 19564 0000FBEF FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 19565 0000FBF2 EB71                    	jmp .L_if_end_005d
 19566                                            .L_if_else_005d:
 19567 0000FBF4 488B4528                          	mov rax, qword [rbp + 8 * (4 + 1)]
 19568 0000FBF8 50                      	push rax
 19569 0000FBF9 6A01                    	push 1
 19570 0000FBFB 488B0425[88000000]      	mov rax, qword [free_var_17]
 19571                                  	assert_closure(rax)
    42 0000FC03 803805              <1>  cmp byte [%1], %2
    43 0000FC06 0F857E190000        <1>  jne L_error_incorrect_type
 19572 0000FC0C FF7001                  	push SOB_CLOSURE_ENV(rax)
 19573 0000FC0F FF5009                  	call SOB_CLOSURE_CODE(rax)
 19574 0000FC12 50                      	push rax
 19575 0000FC13 488B4520                	mov rax, qword [rbp + 8 * (4 + 0)]
 19576 0000FC17 50                      	push rax
 19577 0000FC18 6A02                    	push 2
 19578 0000FC1A 488B0425[88040000]      	mov rax, qword [free_var_145]
 19579                                  	assert_closure(rax)
    42 0000FC22 803805              <1>  cmp byte [%1], %2
    43 0000FC25 0F855F190000        <1>  jne L_error_incorrect_type
 19580 0000FC2B FF7001                  	push SOB_CLOSURE_ENV(rax)
 19581 0000FC2E FF7508                  	push qword [rbp + 8 * 1] ; old ret addr
 19582 0000FC31 FF7500                  	push qword [rbp] ; same the old rbp
 19583 0000FC34 BA05000000              	mov rdx, 2 + 3
 19584 0000FC39 488B4D18                	mov rcx, COUNT
 19585 0000FC3D 488D4CCD20              	lea rcx, [rbp + 8*4 + rcx * 8]
 19586 0000FC42 4889EF                  	mov rdi, rbp
 19587                                  .L_tc_recycle_frame_loop_00b6:
 19588 0000FC45 4883FA00                	cmp rdx, 0
 19589 0000FC49 7413                    	je .L_tc_recycle_frame_done_00b6
 19590 0000FC4B 4883E908                	sub rcx, 8
 19591 0000FC4F 4883EF08                	sub rdi, 8
 19592 0000FC53 488B37                  	mov rsi, [rdi]
 19593 0000FC56 488931                  	mov qword [rcx], rsi
 19594 0000FC59 48FFCA                  	dec rdx
 19595 0000FC5C EBE7                    	jmp .L_tc_recycle_frame_loop_00b6
 19596                                  .L_tc_recycle_frame_done_00b6:
 19597 0000FC5E 5D                      	pop rbp ; restore the old rbp
 19598 0000FC5F 4889CC                  	mov rsp, rcx
 19599 0000FC62 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 19600                                  .L_if_end_005d:
 19601                                  .L_if_end_005e:
 19602 0000FC65 C9                      	leave
 19603 0000FC66 C22000                  	ret 8 * (2 + 2)
 19604                                  .L_lambda_simple_end_009c:	; new closure is in rax
 19605 0000FC69 48890425[88040000]      	mov qword [free_var_145], rax
 19606 0000FC71 48B8-                   	mov rax, sob_void
 19606 0000FC73 [0000000000000000] 
 19607                                  
 19608 0000FC7B 4889C7                  	mov rdi, rax
 19609 0000FC7E E81F010000              	call print_sexpr_if_not_void
 19610                                  
 19611 0000FC83 48B8-                   	mov rax, L_constants + 512
 19611 0000FC85 [0002000000000000] 
 19612 0000FC8D 50                      	push rax
 19613 0000FC8E 48B8-                   	mov rax, L_constants + 128
 19613 0000FC90 [8000000000000000] 
 19614 0000FC98 50                      	push rax
 19615 0000FC99 6A02                    	push 2
 19616 0000FC9B 488B0425[08030000]      	mov rax, qword [free_var_97]
 19617                                  	assert_closure(rax)
    42 0000FCA3 803805              <1>  cmp byte [%1], %2
    43 0000FCA6 0F85DE180000        <1>  jne L_error_incorrect_type
 19618 0000FCAC FF7001                  	push SOB_CLOSURE_ENV(rax)
 19619 0000FCAF FF5009                  	call SOB_CLOSURE_CODE(rax)
 19620                                  
 19621 0000FCB2 4889C7                  	mov rdi, rax
 19622 0000FCB5 E8E8000000              	call print_sexpr_if_not_void
 19623                                  
 19624 0000FCBA 48BF-                           mov rdi, fmt_memory_usage
 19624 0000FCBC [7002000000000000] 
 19625 0000FCC4 488B3425[F7020000]              mov rsi, qword [top_of_memory]
 19626 0000FCCC 4881EE[90040000]                sub rsi, memory
 19627 0000FCD3 B800000000                      mov rax, 0
 19628                                  	ENTER
    33 0000FCD8 C8000000            <1>  enter 0, 0
    34 0000FCDC 4883E4F0            <1>  and rsp, ~15
 19629 0000FCE0 E8(00000000)                    call printf
 19630                                  	LEAVE
    38 0000FCE5 C9                  <1>  leave
 19631 0000FCE6 C9                      	leave
 19632 0000FCE7 C3                      	ret
 19633                                  
 19634                                  L_error_non_closure:
 19635 0000FCE8 488B3C25[00000000]              mov rdi, qword [stderr]
 19636 0000FCF0 48BE-                           mov rsi, fmt_non_closure
 19636 0000FCF2 [A702000000000000] 
 19637 0000FCFA B800000000                      mov rax, 0
 19638                                  	ENTER
    33 0000FCFF C8000000            <1>  enter 0, 0
    34 0000FD03 4883E4F0            <1>  and rsp, ~15
 19639 0000FD07 E8(00000000)                    call fprintf
 19640                                  	LEAVE
    38 0000FD0C C9                  <1>  leave
 19641 0000FD0D 48C7C0FEFFFFFF                  mov rax, -2
 19642 0000FD14 E8(00000000)                    call exit
 19643                                  
 19644                                  L_error_improper_list:
 19645 0000FD19 488B3C25[00000000]      	mov rdi, qword [stderr]
 19646 0000FD21 48BE-                   	mov rsi, fmt_error_improper_list
 19646 0000FD23 [CF02000000000000] 
 19647 0000FD2B B800000000              	mov rax, 0
 19648                                  	ENTER
    33 0000FD30 C8000000            <1>  enter 0, 0
    34 0000FD34 4883E4F0            <1>  and rsp, ~15
 19649 0000FD38 E8(00000000)            	call fprintf
 19650                                  	LEAVE
    38 0000FD3D C9                  <1>  leave
 19651 0000FD3E 48C7C0F9FFFFFF          	mov rax, -7
 19652 0000FD45 E8(00000000)            	call exit
 19653                                  
 19654                                  L_error_incorrect_arity_simple:
 19655 0000FD4A 488B3C25[00000000]              mov rdi, qword [stderr]
 19656 0000FD52 48BE-                           mov rsi, fmt_incorrect_arity_simple
 19656 0000FD54 [1102000000000000] 
 19657 0000FD5C EB12                            jmp L_error_incorrect_arity_common
 19658                                  L_error_incorrect_arity_opt:
 19659 0000FD5E 488B3C25[00000000]              mov rdi, qword [stderr]
 19660 0000FD66 48BE-                           mov rsi, fmt_incorrect_arity_opt
 19660 0000FD68 [3C02000000000000] 
 19661                                  L_error_incorrect_arity_common:
 19662 0000FD70 5A                              pop rdx
 19663 0000FD71 59                              pop rcx
 19664 0000FD72 B800000000                      mov rax, 0
 19665                                  	ENTER
    33 0000FD77 C8000000            <1>  enter 0, 0
    34 0000FD7B 4883E4F0            <1>  and rsp, ~15
 19666 0000FD7F E8(00000000)                    call fprintf
 19667                                  	LEAVE
    38 0000FD84 C9                  <1>  leave
 19668 0000FD85 48C7C0FAFFFFFF                  mov rax, -6
 19669 0000FD8C E8(00000000)                    call exit
 19670                                  
 19671                                  section .data
 19672                                  fmt_incorrect_arity_simple:
 19673 00000211 212121204578706563-             db `!!! Expected %ld arguments, but given %ld\n\0`
 19673 0000021A 74656420256C642061-
 19673 00000223 7267756D656E74732C-
 19673 0000022C 206275742067697665-
 19673 00000235 6E20256C640A00     
 19674                                  fmt_incorrect_arity_opt:
 19675 0000023C 212121204578706563-             db `!!! Expected at least %ld arguments, but given %ld\n\0`
 19675 00000245 746564206174206C65-
 19675 0000024E 61737420256C642061-
 19675 00000257 7267756D656E74732C-
 19675 00000260 206275742067697665-
 19675 00000269 6E20256C640A00     
 19676                                  fmt_memory_usage:
 19677 00000270 0A0A21212120557365-             db `\n\n!!! Used %ld bytes of dynamically-allocated memory\n\n\0`
 19677 00000279 6420256C6420627974-
 19677 00000282 6573206F662064796E-
 19677 0000028B 616D6963616C6C792D-
 19677 00000294 616C6C6F6361746564-
 19677 0000029D 206D656D6F72790A0A-
 19677 000002A6 00                 
 19678                                  fmt_non_closure:
 19679 000002A7 21212120417474656D-             db `!!! Attempting to apply a non-closure!\n\0`
 19679 000002B0 7074696E6720746F20-
 19679 000002B9 6170706C792061206E-
 19679 000002C2 6F6E2D636C6F737572-
 19679 000002CB 65210A00           
 19680                                  fmt_error_improper_list:
 19681 000002CF 212121205468652061-     	db `!!! The argument is not a proper list!\n\0`
 19681 000002D8 7267756D656E742069-
 19681 000002E1 73206E6F7420612070-
 19681 000002EA 726F706572206C6973-
 19681 000002F3 74210A00           
 19682                                  
 19683                                  section .bss
 19684                                  memory:
 19685 00000490 <res 40000000h>         	resb gbytes(1)
 19686                                  
 19687                                  section .data
 19688                                  top_of_memory:
 19689 000002F7 [9004000000000000]              dq memory
 19690                                  
 19691                                  section .text
 19692                                  malloc:
 19693 0000FD91 488B0425[F7020000]              mov rax, qword [top_of_memory]
 19694 0000FD99 48013C25[F7020000]              add qword [top_of_memory], rdi
 19695 0000FDA1 C3                              ret
 19696                                          
 19697                                  print_sexpr_if_not_void:
 19698 0000FDA2 4881FF[00000000]        	cmp rdi, sob_void
 19699 0000FDA9 7501                    	jne print_sexpr
 19700 0000FDAB C3                      	ret
 19701                                  
 19702                                  section .data
 19703                                  fmt_void:
 19704 000002FF 233C766F69643E00        	db `#<void>\0`
 19705                                  fmt_nil:
 19706 00000307 282900                  	db `()\0`
 19707                                  fmt_boolean_false:
 19708 0000030A 236600                  	db `#f\0`
 19709                                  fmt_boolean_true:
 19710 0000030D 237400                  	db `#t\0`
 19711                                  fmt_char_backslash:
 19712 00000310 235C5C00                	db `#\\\\\0`
 19713                                  fmt_char_dquote:
 19714 00000314 235C2200                	db `#\\"\0`
 19715                                  fmt_char_simple:
 19716 00000318 235C256300              	db `#\\%c\0`
 19717                                  fmt_char_null:
 19718 0000031D 235C6E756C00            	db `#\\nul\0`
 19719                                  fmt_char_bell:
 19720 00000323 235C62656C6C00          	db `#\\bell\0`
 19721                                  fmt_char_backspace:
 19722 0000032A 235C6261636B737061-     	db `#\\backspace\0`
 19722 00000333 636500             
 19723                                  fmt_char_tab:
 19724 00000336 235C74616200            	db `#\\tab\0`
 19725                                  fmt_char_newline:
 19726 0000033C 235C6E65776C696E65-     	db `#\\newline\0`
 19726 00000345 00                 
 19727                                  fmt_char_formfeed:
 19728 00000346 235C7061676500          	db `#\\page\0`
 19729                                  fmt_char_return:
 19730 0000034D 235C72657475726E00      	db `#\\return\0`
 19731                                  fmt_char_escape:
 19732 00000356 235C65736300            	db `#\\esc\0`
 19733                                  fmt_char_space:
 19734 0000035C 235C737061636500        	db `#\\space\0`
 19735                                  fmt_char_hex:
 19736 00000364 235C782530325800        	db `#\\x%02X\0`
 19737                                  fmt_closure:
 19738 0000036C 233C636C6F73757265-     	db `#<closure at 0x%08X env=0x%08X code=0x%08X>\0`
 19738 00000375 206174203078253038-
 19738 0000037E 5820656E763D307825-
 19738 00000387 30385820636F64653D-
 19738 00000390 3078253038583E00   
 19739                                  fmt_lparen:
 19740 00000398 2800                    	db `(\0`
 19741                                  fmt_dotted_pair:
 19742 0000039A 202E2000                	db ` . \0`
 19743                                  fmt_rparen:
 19744 0000039E 2900                    	db `)\0`
 19745                                  fmt_space:
 19746 000003A0 2000                    	db ` \0`
 19747                                  fmt_empty_vector:
 19748 000003A2 23282900                	db `#()\0`
 19749                                  fmt_vector:
 19750 000003A6 232800                  	db `#(\0`
 19751                                  fmt_real:
 19752 000003A9 256600                  	db `%f\0`
 19753                                  fmt_fraction:
 19754 000003AC 256C642F256C6400        	db `%ld/%ld\0`
 19755                                  fmt_zero:
 19756 000003B4 3000                    	db `0\0`
 19757                                  fmt_int:
 19758 000003B6 256C6400                	db `%ld\0`
 19759                                  fmt_unknown_sexpr_error:
 19760 000003BA 0A0A21212120457272-     	db `\n\n!!! Error: Unknown type of sexpr (0x%02X) `
 19760 000003C3 6F723A20556E6B6E6F-
 19760 000003CC 776E2074797065206F-
 19760 000003D5 662073657870722028-
 19760 000003DE 3078253032582920   
 19761 000003E6 617420616464726573-     	db `at address 0x%08X\n\n\0`
 19761 000003EF 73203078253038580A-
 19761 000003F8 0A00               
 19762                                  fmt_dquote:
 19763 000003FA 2200                    	db `\"\0`
 19764                                  fmt_string_char:
 19765 000003FC 256300                          db `%c\0`
 19766                                  fmt_string_char_7:
 19767 000003FF 5C6100                          db `\\a\0`
 19768                                  fmt_string_char_8:
 19769 00000402 5C6200                          db `\\b\0`
 19770                                  fmt_string_char_9:
 19771 00000405 5C7400                          db `\\t\0`
 19772                                  fmt_string_char_10:
 19773 00000408 5C6E00                          db `\\n\0`
 19774                                  fmt_string_char_11:
 19775 0000040B 5C7600                          db `\\v\0`
 19776                                  fmt_string_char_12:
 19777 0000040E 5C6600                          db `\\f\0`
 19778                                  fmt_string_char_13:
 19779 00000411 5C7200                          db `\\r\0`
 19780                                  fmt_string_char_34:
 19781 00000414 5C2200                          db `\\"\0`
 19782                                  fmt_string_char_92:
 19783 00000417 5C5C00                          db `\\\\\0`
 19784                                  fmt_string_char_hex:
 19785 0000041A 5C7825583B00                    db `\\x%X;\0`
 19786                                  
 19787                                  section .text
 19788                                  
 19789                                  print_sexpr:
 19790                                  	ENTER
    33 0000FDAC C8000000            <1>  enter 0, 0
    34 0000FDB0 4883E4F0            <1>  and rsp, ~15
 19791 0000FDB4 8A07                    	mov al, byte [rdi]
 19792 0000FDB6 3C00                    	cmp al, T_void
 19793 0000FDB8 744D                    	je .Lvoid
 19794 0000FDBA 3C01                    	cmp al, T_nil
 19795 0000FDBC 7458                    	je .Lnil
 19796 0000FDBE 3C09                    	cmp al, T_boolean_false
 19797 0000FDC0 7463                    	je .Lboolean_false
 19798 0000FDC2 3C0A                    	cmp al, T_boolean_true
 19799 0000FDC4 746E                    	je .Lboolean_true
 19800 0000FDC6 3C02                    	cmp al, T_char
 19801 0000FDC8 7479                    	je .Lchar
 19802 0000FDCA 3C04                    	cmp al, T_symbol
 19803 0000FDCC 0F84BB010000            	je .Lsymbol
 19804 0000FDD2 3C21                    	cmp al, T_pair
 19805 0000FDD4 0F84D6010000            	je .Lpair
 19806 0000FDDA 3C22                    	cmp al, T_vector
 19807 0000FDDC 0F849F020000            	je .Lvector
 19808 0000FDE2 3C05                    	cmp al, T_closure
 19809 0000FDE4 0F8489010000            	je .Lclosure
 19810 0000FDEA 3C12                    	cmp al, T_real
 19811 0000FDEC 0F8430030000            	je .Lreal
 19812 0000FDF2 3C11                    	cmp al, T_rational
 19813 0000FDF4 0F8456030000            	je .Lrational
 19814 0000FDFA 3C03                    	cmp al, T_string
 19815 0000FDFC 0F848F030000            	je .Lstring
 19816                                  
 19817 0000FE02 E9C7040000              	jmp .Lunknown_sexpr_type
 19818                                  
 19819                                  .Lvoid:
 19820 0000FE07 48BF-                   	mov rdi, fmt_void
 19820 0000FE09 [FF02000000000000] 
 19821 0000FE11 E9F5040000              	jmp .Lemit
 19822                                  
 19823                                  .Lnil:
 19824 0000FE16 48BF-                   	mov rdi, fmt_nil
 19824 0000FE18 [0703000000000000] 
 19825 0000FE20 E9E6040000              	jmp .Lemit
 19826                                  
 19827                                  .Lboolean_false:
 19828 0000FE25 48BF-                   	mov rdi, fmt_boolean_false
 19828 0000FE27 [0A03000000000000] 
 19829 0000FE2F E9D7040000              	jmp .Lemit
 19830                                  
 19831                                  .Lboolean_true:
 19832 0000FE34 48BF-                   	mov rdi, fmt_boolean_true
 19832 0000FE36 [0D03000000000000] 
 19833 0000FE3E E9C8040000              	jmp .Lemit
 19834                                  
 19835                                  .Lchar:
 19836 0000FE43 8A4701                  	mov al, byte [rdi + 1]
 19837 0000FE46 3C20                    	cmp al, ' '
 19838 0000FE48 7E28                    	jle .Lchar_whitespace
 19839 0000FE4A 3C5C                    	cmp al, 92 		; backslash
 19840 0000FE4C 0F847C000000            	je .Lchar_backslash
 19841 0000FE52 3C22                    	cmp al, '"'
 19842 0000FE54 0F8483000000            	je .Lchar_dquote
 19843 0000FE5A 4825FF000000            	and rax, 255
 19844 0000FE60 48BF-                   	mov rdi, fmt_char_simple
 19844 0000FE62 [1803000000000000] 
 19845 0000FE6A 4889C6                  	mov rsi, rax
 19846 0000FE6D E999040000              	jmp .Lemit
 19847                                  
 19848                                  .Lchar_whitespace:
 19849 0000FE72 3C00                    	cmp al, 0
 19850 0000FE74 7476                    	je .Lchar_null
 19851 0000FE76 3C07                    	cmp al, 7
 19852 0000FE78 0F847D000000            	je .Lchar_bell
 19853 0000FE7E 3C08                    	cmp al, 8
 19854 0000FE80 0F8484000000            	je .Lchar_backspace
 19855 0000FE86 3C09                    	cmp al, 9
 19856 0000FE88 0F848B000000            	je .Lchar_tab
 19857 0000FE8E 3C0A                    	cmp al, 10
 19858 0000FE90 0F8492000000            	je .Lchar_newline
 19859 0000FE96 3C0C                    	cmp al, 12
 19860 0000FE98 0F8499000000            	je .Lchar_formfeed
 19861 0000FE9E 3C0D                    	cmp al, 13
 19862 0000FEA0 0F84A0000000            	je .Lchar_return
 19863 0000FEA6 3C1B                    	cmp al, 27
 19864 0000FEA8 0F84A7000000            	je .Lchar_escape
 19865 0000FEAE 4825FF000000            	and rax, 255
 19866 0000FEB4 3C20                    	cmp al, ' '
 19867 0000FEB6 0F84A8000000            	je .Lchar_space
 19868 0000FEBC 48BF-                   	mov rdi, fmt_char_hex
 19868 0000FEBE [6403000000000000] 
 19869 0000FEC6 4889C6                  	mov rsi, rax
 19870 0000FEC9 E93D040000              	jmp .Lemit	
 19871                                  
 19872                                  .Lchar_backslash:
 19873 0000FECE 48BF-                   	mov rdi, fmt_char_backslash
 19873 0000FED0 [1003000000000000] 
 19874 0000FED8 E92E040000              	jmp .Lemit
 19875                                  
 19876                                  .Lchar_dquote:
 19877 0000FEDD 48BF-                   	mov rdi, fmt_char_dquote
 19877 0000FEDF [1403000000000000] 
 19878 0000FEE7 E91F040000              	jmp .Lemit
 19879                                  
 19880                                  .Lchar_null:
 19881 0000FEEC 48BF-                   	mov rdi, fmt_char_null
 19881 0000FEEE [1D03000000000000] 
 19882 0000FEF6 E910040000              	jmp .Lemit
 19883                                  
 19884                                  .Lchar_bell:
 19885 0000FEFB 48BF-                   	mov rdi, fmt_char_bell
 19885 0000FEFD [2303000000000000] 
 19886 0000FF05 E901040000              	jmp .Lemit
 19887                                  
 19888                                  .Lchar_backspace:
 19889 0000FF0A 48BF-                   	mov rdi, fmt_char_backspace
 19889 0000FF0C [2A03000000000000] 
 19890 0000FF14 E9F2030000              	jmp .Lemit
 19891                                  
 19892                                  .Lchar_tab:
 19893 0000FF19 48BF-                   	mov rdi, fmt_char_tab
 19893 0000FF1B [3603000000000000] 
 19894 0000FF23 E9E3030000              	jmp .Lemit
 19895                                  
 19896                                  .Lchar_newline:
 19897 0000FF28 48BF-                   	mov rdi, fmt_char_newline
 19897 0000FF2A [3C03000000000000] 
 19898 0000FF32 E9D4030000              	jmp .Lemit
 19899                                  
 19900                                  .Lchar_formfeed:
 19901 0000FF37 48BF-                   	mov rdi, fmt_char_formfeed
 19901 0000FF39 [4603000000000000] 
 19902 0000FF41 E9C5030000              	jmp .Lemit
 19903                                  
 19904                                  .Lchar_return:
 19905 0000FF46 48BF-                   	mov rdi, fmt_char_return
 19905 0000FF48 [4D03000000000000] 
 19906 0000FF50 E9B6030000              	jmp .Lemit
 19907                                  
 19908                                  .Lchar_escape:
 19909 0000FF55 48BF-                   	mov rdi, fmt_char_escape
 19909 0000FF57 [5603000000000000] 
 19910 0000FF5F E9A7030000              	jmp .Lemit
 19911                                  
 19912                                  .Lchar_space:
 19913 0000FF64 48BF-                   	mov rdi, fmt_char_space
 19913 0000FF66 [5C03000000000000] 
 19914 0000FF6E E998030000              	jmp .Lemit
 19915                                  
 19916                                  .Lclosure:
 19917 0000FF73 4889FE                  	mov rsi, qword rdi
 19918 0000FF76 48BF-                   	mov rdi, fmt_closure
 19918 0000FF78 [6C03000000000000] 
 19919 0000FF80 488B5601                	mov rdx, SOB_CLOSURE_ENV(rsi)
 19920 0000FF84 488B4E09                	mov rcx, SOB_CLOSURE_CODE(rsi)
 19921 0000FF88 E97E030000              	jmp .Lemit
 19922                                  
 19923                                  .Lsymbol:
 19924 0000FF8D 488B7F01                	mov rdi, qword [rdi + 1] ; sob_string
 19925 0000FF91 BE01000000              	mov rsi, 1		 ; size = 1 byte
 19926 0000FF96 488B5701                	mov rdx, qword [rdi + 1] ; length
 19927 0000FF9A 488D7F09                	lea rdi, [rdi + 1 + 8]	 ; actual characters
 19928 0000FF9E 488B0C25[00000000]      	mov rcx, qword [stdout]	 ; FILE *
 19929 0000FFA6 E8(00000000)            	call fwrite
 19930 0000FFAB E970030000              	jmp .Lend
 19931                                  	
 19932                                  .Lpair:
 19933 0000FFB0 57                      	push rdi
 19934 0000FFB1 48BF-                   	mov rdi, fmt_lparen
 19934 0000FFB3 [9803000000000000] 
 19935 0000FFBB B800000000              	mov rax, 0
 19936                                          ENTER
    33 0000FFC0 C8000000            <1>  enter 0, 0
    34 0000FFC4 4883E4F0            <1>  and rsp, ~15
 19937 0000FFC8 E8(00000000)            	call printf
 19938                                          LEAVE
    38 0000FFCD C9                  <1>  leave
 19939 0000FFCE 488B3C24                	mov rdi, qword [rsp] 	; pair
 19940 0000FFD2 488B7F01                	mov rdi, SOB_PAIR_CAR(rdi)
 19941 0000FFD6 E8D1FDFFFF              	call print_sexpr
 19942 0000FFDB 5F                      	pop rdi 		; pair
 19943 0000FFDC 488B7F09                	mov rdi, SOB_PAIR_CDR(rdi)
 19944                                  .Lcdr:
 19945 0000FFE0 8A07                    	mov al, byte [rdi]
 19946 0000FFE2 3C01                    	cmp al, T_nil
 19947 0000FFE4 7447                    	je .Lcdr_nil
 19948 0000FFE6 3C21                    	cmp al, T_pair
 19949 0000FFE8 7462                    	je .Lcdr_pair
 19950 0000FFEA 57                      	push rdi
 19951 0000FFEB 48BF-                   	mov rdi, fmt_dotted_pair
 19951 0000FFED [9A03000000000000] 
 19952 0000FFF5 B800000000              	mov rax, 0
 19953                                  	ENTER
    33 0000FFFA C8000000            <1>  enter 0, 0
    34 0000FFFE 4883E4F0            <1>  and rsp, ~15
 19954 00010002 E8(00000000)            	call printf
 19955                                  	LEAVE
    38 00010007 C9                  <1>  leave
 19956 00010008 5F                      	pop rdi
 19957 00010009 E89EFDFFFF              	call print_sexpr
 19958 0001000E 48BF-                   	mov rdi, fmt_rparen
 19958 00010010 [9E03000000000000] 
 19959 00010018 B800000000              	mov rax, 0
 19960                                  	ENTER
    33 0001001D C8000000            <1>  enter 0, 0
    34 00010021 4883E4F0            <1>  and rsp, ~15
 19961 00010025 E8(00000000)            	call printf
 19962                                  	LEAVE
    38 0001002A C9                  <1>  leave
 19963                                  	LEAVE
    38 0001002B C9                  <1>  leave
 19964 0001002C C3                      	ret
 19965                                  
 19966                                  .Lcdr_nil:
 19967 0001002D 48BF-                   	mov rdi, fmt_rparen
 19967 0001002F [9E03000000000000] 
 19968 00010037 B800000000              	mov rax, 0
 19969                                  	ENTER
    33 0001003C C8000000            <1>  enter 0, 0
    34 00010040 4883E4F0            <1>  and rsp, ~15
 19970 00010044 E8(00000000)            	call printf
 19971                                  	LEAVE
    38 00010049 C9                  <1>  leave
 19972                                  	LEAVE
    38 0001004A C9                  <1>  leave
 19973 0001004B C3                      	ret
 19974                                  
 19975                                  .Lcdr_pair:
 19976 0001004C 57                      	push rdi
 19977 0001004D 48BF-                   	mov rdi, fmt_space
 19977 0001004F [A003000000000000] 
 19978 00010057 B800000000              	mov rax, 0
 19979                                  	ENTER
    33 0001005C C8000000            <1>  enter 0, 0
    34 00010060 4883E4F0            <1>  and rsp, ~15
 19980 00010064 E8(00000000)            	call printf
 19981                                  	LEAVE
    38 00010069 C9                  <1>  leave
 19982 0001006A 488B3C24                	mov rdi, qword [rsp]
 19983 0001006E 488B7F01                	mov rdi, SOB_PAIR_CAR(rdi)
 19984 00010072 E835FDFFFF              	call print_sexpr
 19985 00010077 5F                      	pop rdi
 19986 00010078 488B7F09                	mov rdi, SOB_PAIR_CDR(rdi)
 19987 0001007C E95FFFFFFF              	jmp .Lcdr
 19988                                  
 19989                                  .Lvector:
 19990 00010081 488B4701                	mov rax, qword [rdi + 1] ; length
 19991 00010085 4883F800                	cmp rax, 0
 19992 00010089 0F8484000000            	je .Lvector_empty
 19993 0001008F 57                      	push rdi
 19994 00010090 48BF-                   	mov rdi, fmt_vector
 19994 00010092 [A603000000000000] 
 19995 0001009A B800000000              	mov rax, 0
 19996                                  	ENTER
    33 0001009F C8000000            <1>  enter 0, 0
    34 000100A3 4883E4F0            <1>  and rsp, ~15
 19997 000100A7 E8(00000000)            	call printf
 19998                                  	LEAVE
    38 000100AC C9                  <1>  leave
 19999 000100AD 488B3C24                	mov rdi, qword [rsp]
 20000 000100B1 FF7701                  	push qword [rdi + 1]
 20001 000100B4 6A01                    	push 1
 20002 000100B6 488B7F09                	mov rdi, qword [rdi + 1 + 8] ; v[0]
 20003 000100BA E8EDFCFFFF              	call print_sexpr
 20004                                  .Lvector_loop:
 20005                                  	; [rsp] index
 20006                                  	; [rsp + 8*1] limit
 20007                                  	; [rsp + 8*2] vector
 20008 000100BF 488B0424                	mov rax, qword [rsp]
 20009 000100C3 483B442408              	cmp rax, qword [rsp + 8*1]
 20010 000100C8 7436                    	je .Lvector_end
 20011 000100CA 48BF-                   	mov rdi, fmt_space
 20011 000100CC [A003000000000000] 
 20012 000100D4 B800000000              	mov rax, 0
 20013                                  	ENTER
    33 000100D9 C8000000            <1>  enter 0, 0
    34 000100DD 4883E4F0            <1>  and rsp, ~15
 20014 000100E1 E8(00000000)            	call printf
 20015                                  	LEAVE
    38 000100E6 C9                  <1>  leave
 20016 000100E7 488B0424                	mov rax, qword [rsp]
 20017 000100EB 488B5C2410              	mov rbx, qword [rsp + 8*2]
 20018 000100F0 488B7CC309              	mov rdi, qword [rbx + 1 + 8 + 8 * rax] ; v[i]
 20019 000100F5 E8B2FCFFFF              	call print_sexpr
 20020 000100FA 48FF0424                	inc qword [rsp]
 20021 000100FE EBBF                    	jmp .Lvector_loop
 20022                                  
 20023                                  .Lvector_end:
 20024 00010100 4883C418                	add rsp, 8*3
 20025 00010104 48BF-                   	mov rdi, fmt_rparen
 20025 00010106 [9E03000000000000] 
 20026 0001010E E9F8010000              	jmp .Lemit	
 20027                                  
 20028                                  .Lvector_empty:
 20029 00010113 48BF-                   	mov rdi, fmt_empty_vector
 20029 00010115 [A203000000000000] 
 20030 0001011D E9E9010000              	jmp .Lemit
 20031                                  
 20032                                  .Lreal:
 20033 00010122 FF7701                  	push qword [rdi + 1]
 20034 00010125 F20F100424              	movsd xmm0, qword [rsp]
 20035 0001012A 4883C408                	add rsp, 8*1
 20036 0001012E 48BF-                   	mov rdi, fmt_real
 20036 00010130 [A903000000000000] 
 20037 00010138 B801000000              	mov rax, 1
 20038                                  	ENTER
    33 0001013D C8000000            <1>  enter 0, 0
    34 00010141 4883E4F0            <1>  and rsp, ~15
 20039 00010145 E8(00000000)            	call printf
 20040                                  	LEAVE
    38 0001014A C9                  <1>  leave
 20041 0001014B E9D0010000              	jmp .Lend
 20042                                  
 20043                                  .Lrational:
 20044 00010150 488B7701                	mov rsi, qword [rdi + 1]
 20045 00010154 488B5709                	mov rdx, qword [rdi + 1 + 8]
 20046 00010158 4883FE00                	cmp rsi, 0
 20047 0001015C 7415                    	je .Lrat_zero
 20048 0001015E 4883FA01                	cmp rdx, 1
 20049 00010162 741E                    	je .Lrat_int
 20050 00010164 48BF-                   	mov rdi, fmt_fraction
 20050 00010166 [AC03000000000000] 
 20051 0001016E E998010000              	jmp .Lemit
 20052                                  
 20053                                  .Lrat_zero:
 20054 00010173 48BF-                   	mov rdi, fmt_zero
 20054 00010175 [B403000000000000] 
 20055 0001017D E989010000              	jmp .Lemit
 20056                                  
 20057                                  .Lrat_int:
 20058 00010182 48BF-                   	mov rdi, fmt_int
 20058 00010184 [B603000000000000] 
 20059 0001018C E97A010000              	jmp .Lemit
 20060                                  
 20061                                  .Lstring:
 20062 00010191 488D4709                	lea rax, [rdi + 1 + 8]
 20063 00010195 50                      	push rax
 20064 00010196 FF7701                  	push qword [rdi + 1]
 20065 00010199 48BF-                   	mov rdi, fmt_dquote
 20065 0001019B [FA03000000000000] 
 20066 000101A3 B800000000              	mov rax, 0
 20067                                  	ENTER
    33 000101A8 C8000000            <1>  enter 0, 0
    34 000101AC 4883E4F0            <1>  and rsp, ~15
 20068 000101B0 E8(00000000)            	call printf
 20069                                  	LEAVE
    38 000101B5 C9                  <1>  leave
 20070                                  .Lstring_loop:
 20071                                  	; qword [rsp]: limit
 20072                                  	; qword [rsp + 8*1]: char *
 20073 000101B6 48833C2400              	cmp qword [rsp], 0
 20074 000101BB 0F84FD000000            	je .Lstring_end
 20075 000101C1 488B442408              	mov rax, qword [rsp + 8*1]
 20076 000101C6 8A00                    	mov al, byte [rax]
 20077 000101C8 4825FF000000            	and rax, 255
 20078 000101CE 3C07                    	cmp al, 7
 20079 000101D0 7468                            je .Lstring_char_7
 20080 000101D2 3C08                            cmp al, 8
 20081 000101D4 7470                            je .Lstring_char_8
 20082 000101D6 3C09                            cmp al, 9
 20083 000101D8 7478                            je .Lstring_char_9
 20084 000101DA 3C0A                            cmp al, 10
 20085 000101DC 0F847C000000                    je .Lstring_char_10
 20086 000101E2 3C0B                            cmp al, 11
 20087 000101E4 0F8480000000                    je .Lstring_char_11
 20088 000101EA 3C0C                            cmp al, 12
 20089 000101EC 0F8484000000                    je .Lstring_char_12
 20090 000101F2 3C0D                            cmp al, 13
 20091 000101F4 0F8488000000                    je .Lstring_char_13
 20092 000101FA 3C22                            cmp al, 34
 20093 000101FC 0F848C000000                    je .Lstring_char_34
 20094 00010202 3C5C                            cmp al, 92              ;         je .Lstring_char_92
 20096 00010204 3C20                            cmp al, ' '
 20097 00010206 0F8CA0000000                    jl .Lstring_char_hex
 20098 0001020C 48BF-                           mov rdi, fmt_string_char
 20098 0001020E [FC03000000000000] 
 20099 00010216 4889C6                          mov rsi, rax
 20100                                  .Lstring_char_emit:
 20101 00010219 B800000000                      mov rax, 0
 20102                                          ENTER
    33 0001021E C8000000            <1>  enter 0, 0
    34 00010222 4883E4F0            <1>  and rsp, ~15
 20103 00010226 E8(00000000)                    call printf
 20104                                          LEAVE
    38 0001022B C9                  <1>  leave
 20105 0001022C 48FF0C24                        dec qword [rsp]
 20106 00010230 48FF442408                      inc qword [rsp + 8*1]
 20107 00010235 E97CFFFFFF                      jmp .Lstring_loop
 20108                                  
 20109                                  .Lstring_char_7:
 20110 0001023A 48BF-                           mov rdi, fmt_string_char_7
 20110 0001023C [FF03000000000000] 
 20111 00010244 EBD3                            jmp .Lstring_char_emit
 20112                                  
 20113                                  .Lstring_char_8:
 20114 00010246 48BF-                           mov rdi, fmt_string_char_8
 20114 00010248 [0204000000000000] 
 20115 00010250 EBC7                            jmp .Lstring_char_emit
 20116                                          
 20117                                  .Lstring_char_9:
 20118 00010252 48BF-                           mov rdi, fmt_string_char_9
 20118 00010254 [0504000000000000] 
 20119 0001025C EBBB                            jmp .Lstring_char_emit
 20120                                  
 20121                                  .Lstring_char_10:
 20122 0001025E 48BF-                           mov rdi, fmt_string_char_10
 20122 00010260 [0804000000000000] 
 20123 00010268 EBAF                            jmp .Lstring_char_emit
 20124                                  
 20125                                  .Lstring_char_11:
 20126 0001026A 48BF-                           mov rdi, fmt_string_char_11
 20126 0001026C [0B04000000000000] 
 20127 00010274 EBA3                            jmp .Lstring_char_emit
 20128                                  
 20129                                  .Lstring_char_12:
 20130 00010276 48BF-                           mov rdi, fmt_string_char_12
 20130 00010278 [0E04000000000000] 
 20131 00010280 EB97                            jmp .Lstring_char_emit
 20132                                  
 20133                                  .Lstring_char_13:
 20134 00010282 48BF-                           mov rdi, fmt_string_char_13
 20134 00010284 [1104000000000000] 
 20135 0001028C EB8B                            jmp .Lstring_char_emit
 20136                                  
 20137                                  .Lstring_char_34:
 20138 0001028E 48BF-                           mov rdi, fmt_string_char_34
 20138 00010290 [1404000000000000] 
 20139 00010298 E97CFFFFFF                      jmp .Lstring_char_emit
 20140                                  
 20141                                  .Lstring_char_92:
 20142 0001029D 48BF-                           mov rdi, fmt_string_char_92
 20142 0001029F [1704000000000000] 
 20143 000102A7 E96DFFFFFF                      jmp .Lstring_char_emit
 20144                                  
 20145                                  .Lstring_char_hex:
 20146 000102AC 48BF-                           mov rdi, fmt_string_char_hex
 20146 000102AE [1A04000000000000] 
 20147 000102B6 4889C6                          mov rsi, rax
 20148 000102B9 E95BFFFFFF                      jmp .Lstring_char_emit        
 20149                                  
 20150                                  .Lstring_end:
 20151 000102BE 4883C410                	add rsp, 8 * 2
 20152 000102C2 48BF-                   	mov rdi, fmt_dquote
 20152 000102C4 [FA03000000000000] 
 20153 000102CC EB3D                    	jmp .Lemit
 20154                                  
 20155                                  .Lunknown_sexpr_type:
 20156 000102CE 48BE-                   	mov rsi, fmt_unknown_sexpr_error
 20156 000102D0 [BA03000000000000] 
 20157 000102D8 4825FF000000            	and rax, 255
 20158 000102DE 4889C2                  	mov rdx, rax
 20159 000102E1 4889F9                  	mov rcx, rdi
 20160 000102E4 488B3C25[00000000]      	mov rdi, qword [stderr]
 20161 000102EC B800000000              	mov rax, 0
 20162                                  	ENTER
    33 000102F1 C8000000            <1>  enter 0, 0
    34 000102F5 4883E4F0            <1>  and rsp, ~15
 20163 000102F9 E8(00000000)            	call fprintf
 20164                                  	LEAVE
    38 000102FE C9                  <1>  leave
 20165 000102FF 48C7C0FFFFFFFF          	mov rax, -1
 20166 00010306 E8(00000000)            	call exit
 20167                                  
 20168                                  .Lemit:
 20169 0001030B B800000000              	mov rax, 0
 20170                                  	ENTER
    33 00010310 C8000000            <1>  enter 0, 0
    34 00010314 4883E4F0            <1>  and rsp, ~15
 20171 00010318 E8(00000000)            	call printf
 20172                                  	LEAVE
    38 0001031D C9                  <1>  leave
 20173 0001031E EB00                    	jmp .Lend
 20174                                  
 20175                                  .Lend:
 20176                                  	LEAVE
    38 00010320 C9                  <1>  leave
 20177 00010321 C3                      	ret
 20178                                  
 20179                                  ;;; rdi: address of free variable
 20180                                  ;;; rsi: address of code-pointer
 20181                                  bind_primitive:
 20182                                          ENTER
    33 00010322 C8000000            <1>  enter 0, 0
    34 00010326 4883E4F0            <1>  and rsp, ~15
 20183 0001032A 57                              push rdi
 20184 0001032B BF11000000                      mov rdi, (1 + 8 + 8)
 20185 00010330 E85CFAFFFF                      call malloc
 20186 00010335 5F                              pop rdi
 20187 00010336 C60005                          mov byte [rax], T_closure
 20188 00010339 48C7400100000000                mov SOB_CLOSURE_ENV(rax), 0 ; dummy, lexical environment
 20189 00010341 48897009                        mov SOB_CLOSURE_CODE(rax), rsi ; code pointer
 20190 00010345 488907                          mov qword [rdi], rax
 20191                                          LEAVE
    38 00010348 C9                  <1>  leave
 20192 00010349 C3                              ret
 20193                                  
 20194                                  ;;; PLEASE IMPLEMENT THIS PROCEDURE
 20195                                  L_code_ptr_bin_apply:
 20196 0001034A C8000000                	enter 0, 0 ; mov rbp, rsp  push rbp
 20197 0001034E 48837D1802              	cmp COUNT, 2 ;check if number of arguments are 2 - closure and list
 20198 00010353 0F8592110000            	jne L_error_arg_count_2
 20199 00010359 488B4520                	mov rax, PARAM(0) ;first argument - closure
 20200 0001035D 803805                          cmp byte [rax], T_closure
 20201 00010360 0F8582F9FFFF                    jne L_error_non_closure
 20202 00010366 488B4528                        mov rax, PARAM(1) ;second argument - list
 20203 0001036A 803821                          cmp byte [rax], T_pair
 20204 0001036D 740D                            je .L_apply_second_arg_is_pair
 20205 0001036F 483D[01000000]                  cmp rax, sob_nil
 20206 00010375 7448                            je .L_apply_second_arg_is_null
 20207 00010377 E99DF9FFFF                      jmp L_error_improper_list
 20208                                  .L_apply_second_arg_is_pair:
 20209 0001037C BA00000000              	mov rdx, 0 ; initialize rdx to 0
 20210 00010381 488B7528                	mov rsi, PARAM(1) ; rsi will be used to iterate through the list 
 20211                                  .L_start_loop_length_pair:
 20212 00010385 4881FE[01000000]        	cmp rsi, sob_nil ; check if the current element is the end of the list 
 20213 0001038C 740D                    	je .L_apply_end_count_list ; if it is, jump to done 
 20214 0001038E 488B7609                	mov rsi, SOB_PAIR_CDR(rsi)  ; move to the next element in the list 
 20215 00010392 48FFC2                  	inc rdx ; increment the counter in rdx 
 20216 00010395 4883EC08                	sub rsp, 8
 20217 00010399 EBEA                    	jmp .L_start_loop_length_pair ; jump back to the beginning of the loop 
 20218                                  .L_apply_end_count_list: 
 20219 0001039B 4889E3                  	mov rbx, rsp
 20220 0001039E 488B7528                	mov rsi, PARAM(1)
 20221                                  .L_apply_push_elements: 
 20222 000103A2 4881FE[01000000]        	cmp rsi, sob_nil
 20223 000103A9 7411                    	je .L_apply_push_elements_end
 20224 000103AB 488B4E01                	mov rcx, SOB_PAIR_CAR(rsi)
 20225 000103AF 48890B                  	mov qword [rbx], rcx
 20226 000103B2 488B7609                	mov rsi, SOB_PAIR_CDR(rsi) 
 20227 000103B6 4883C308                	add rbx, 8
 20228 000103BA EBE6                    	jmp .L_apply_push_elements
 20229                                  .L_apply_push_elements_end:
 20230 000103BC 52                      	push rdx
 20231 000103BD EB02                    	jmp .L_apply_end
 20232                                  .L_apply_second_arg_is_null:
 20233 000103BF 6A00                    	push 0
 20234                                  .L_apply_end:
 20235 000103C1 488B4520                	mov rax, PARAM(0)
 20236 000103C5 FF7001                  	push SOB_CLOSURE_ENV(rax) ;closure in rax
 20237 000103C8 FF7508                          push qword [rbp + 8 * 1] ; old ret addr
 20238 000103CB FF7500                          push qword [rbp] ; same the old rbp
 20239 000103CE 4883C204                        add rdx, 4
 20240 000103D2 488B4D18                        mov rcx, COUNT
 20241 000103D6 488D4CCD20                      lea rcx, [rbp + 8*4 + rcx * 8]
 20242 000103DB 4889EF                          mov rdi, rbp
 20243                                  .L_startLoop_recycle:
 20244 000103DE 4883FA00                        cmp rdx, 0
 20245 000103E2 7413                            je .L_endLoop_recycle
 20246 000103E4 4883E908                       	sub rcx, 8
 20247 000103E8 4883EF08                        sub rdi, 8
 20248 000103EC 488B37                          mov rsi, [rdi]
 20249 000103EF 488931                          mov qword [rcx], rsi
 20250 000103F2 48FFCA                          dec rdx
 20251 000103F5 EBE7                            jmp .L_startLoop_recycle
 20252                                  .L_endLoop_recycle:
 20253 000103F7 4889CC                          mov rsp, rcx
 20254 000103FA 5D                              pop rbp ; restore the old rbp
 20255 000103FB FF6009                          jmp SOB_CLOSURE_CODE(rax)
 20256                                  		
 20257                                  
 20258                                  	
 20259                                  L_code_ptr_is_null:
 20260                                          ENTER
    33 000103FE C8000000            <1>  enter 0, 0
    34 00010402 4883E4F0            <1>  and rsp, ~15
 20261 00010406 48837D1801                      cmp COUNT, 1
 20262 0001040B 0F85A5100000                    jne L_error_arg_count_1
 20263 00010411 488B4520                        mov rax, PARAM(0)
 20264 00010415 803801                          cmp byte [rax], T_nil
 20265 00010418 750C                            jne .L_false
 20266 0001041A 48B8-                           mov rax, sob_boolean_true
 20266 0001041C [0300000000000000] 
 20267 00010424 EB0A                            jmp .L_end
 20268                                  .L_false:
 20269 00010426 48B8-                           mov rax, sob_boolean_false
 20269 00010428 [0200000000000000] 
 20270                                  .L_end:
 20271                                          LEAVE
    38 00010430 C9                  <1>  leave
 20272 00010431 C21800                          ret AND_KILL_FRAME(1)
 20273                                  
 20274                                  L_code_ptr_is_pair:
 20275                                          ENTER
    33 00010434 C8000000            <1>  enter 0, 0
    34 00010438 4883E4F0            <1>  and rsp, ~15
 20276 0001043C 48837D1801                      cmp COUNT, 1
 20277 00010441 0F856F100000                    jne L_error_arg_count_1
 20278 00010447 488B4520                        mov rax, PARAM(0)
 20279 0001044B 803821                          cmp byte [rax], T_pair
 20280 0001044E 750C                            jne .L_false
 20281 00010450 48B8-                           mov rax, sob_boolean_true
 20281 00010452 [0300000000000000] 
 20282 0001045A EB0A                            jmp .L_end
 20283                                  .L_false:
 20284 0001045C 48B8-                           mov rax, sob_boolean_false
 20284 0001045E [0200000000000000] 
 20285                                  .L_end:
 20286                                          LEAVE
    38 00010466 C9                  <1>  leave
 20287 00010467 C21800                          ret AND_KILL_FRAME(1)
 20288                                          
 20289                                  L_code_ptr_is_void:
 20290                                          ENTER
    33 0001046A C8000000            <1>  enter 0, 0
    34 0001046E 4883E4F0            <1>  and rsp, ~15
 20291 00010472 48837D1801                      cmp COUNT, 1
 20292 00010477 0F8539100000                    jne L_error_arg_count_1
 20293 0001047D 488B4520                        mov rax, PARAM(0)
 20294 00010481 803800                          cmp byte [rax], T_void
 20295 00010484 750C                            jne .L_false
 20296 00010486 48B8-                           mov rax, sob_boolean_true
 20296 00010488 [0300000000000000] 
 20297 00010490 EB0A                            jmp .L_end
 20298                                  .L_false:
 20299 00010492 48B8-                           mov rax, sob_boolean_false
 20299 00010494 [0200000000000000] 
 20300                                  .L_end:
 20301                                          LEAVE
    38 0001049C C9                  <1>  leave
 20302 0001049D C21800                          ret AND_KILL_FRAME(1)
 20303                                  
 20304                                  L_code_ptr_is_char:
 20305                                          ENTER
    33 000104A0 C8000000            <1>  enter 0, 0
    34 000104A4 4883E4F0            <1>  and rsp, ~15
 20306 000104A8 48837D1801                      cmp COUNT, 1
 20307 000104AD 0F8503100000                    jne L_error_arg_count_1
 20308 000104B3 488B4520                        mov rax, PARAM(0)
 20309 000104B7 803802                          cmp byte [rax], T_char
 20310 000104BA 750C                            jne .L_false
 20311 000104BC 48B8-                           mov rax, sob_boolean_true
 20311 000104BE [0300000000000000] 
 20312 000104C6 EB0A                            jmp .L_end
 20313                                  .L_false:
 20314 000104C8 48B8-                           mov rax, sob_boolean_false
 20314 000104CA [0200000000000000] 
 20315                                  .L_end:
 20316                                          LEAVE
    38 000104D2 C9                  <1>  leave
 20317 000104D3 C21800                          ret AND_KILL_FRAME(1)
 20318                                  
 20319                                  L_code_ptr_is_string:
 20320                                          ENTER
    33 000104D6 C8000000            <1>  enter 0, 0
    34 000104DA 4883E4F0            <1>  and rsp, ~15
 20321 000104DE 48837D1801                      cmp COUNT, 1
 20322 000104E3 0F85CD0F0000                    jne L_error_arg_count_1
 20323 000104E9 488B4520                        mov rax, PARAM(0)
 20324 000104ED 803803                          cmp byte [rax], T_string
 20325 000104F0 750C                            jne .L_false
 20326 000104F2 48B8-                           mov rax, sob_boolean_true
 20326 000104F4 [0300000000000000] 
 20327 000104FC EB0A                            jmp .L_end
 20328                                  .L_false:
 20329 000104FE 48B8-                           mov rax, sob_boolean_false
 20329 00010500 [0200000000000000] 
 20330                                  .L_end:
 20331                                          LEAVE
    38 00010508 C9                  <1>  leave
 20332 00010509 C21800                          ret AND_KILL_FRAME(1)
 20333                                  
 20334                                  L_code_ptr_is_symbol:
 20335                                          ENTER
    33 0001050C C8000000            <1>  enter 0, 0
    34 00010510 4883E4F0            <1>  and rsp, ~15
 20336 00010514 48837D1801                      cmp COUNT, 1
 20337 00010519 0F85970F0000                    jne L_error_arg_count_1
 20338 0001051F 488B4520                        mov rax, PARAM(0)
 20339 00010523 803804                          cmp byte [rax], T_symbol
 20340 00010526 750C                            jne .L_false
 20341 00010528 48B8-                           mov rax, sob_boolean_true
 20341 0001052A [0300000000000000] 
 20342 00010532 EB0A                            jmp .L_end
 20343                                  .L_false:
 20344 00010534 48B8-                           mov rax, sob_boolean_false
 20344 00010536 [0200000000000000] 
 20345                                  .L_end:
 20346                                          LEAVE
    38 0001053E C9                  <1>  leave
 20347 0001053F C21800                          ret AND_KILL_FRAME(1)
 20348                                  
 20349                                  L_code_ptr_is_vector:
 20350                                          ENTER
    33 00010542 C8000000            <1>  enter 0, 0
    34 00010546 4883E4F0            <1>  and rsp, ~15
 20351 0001054A 48837D1801                      cmp COUNT, 1
 20352 0001054F 0F85610F0000                    jne L_error_arg_count_1
 20353 00010555 488B4520                        mov rax, PARAM(0)
 20354 00010559 803822                          cmp byte [rax], T_vector
 20355 0001055C 750C                            jne .L_false
 20356 0001055E 48B8-                           mov rax, sob_boolean_true
 20356 00010560 [0300000000000000] 
 20357 00010568 EB0A                            jmp .L_end
 20358                                  .L_false:
 20359 0001056A 48B8-                           mov rax, sob_boolean_false
 20359 0001056C [0200000000000000] 
 20360                                  .L_end:
 20361                                          LEAVE
    38 00010574 C9                  <1>  leave
 20362 00010575 C21800                          ret AND_KILL_FRAME(1)
 20363                                  
 20364                                  L_code_ptr_is_closure:
 20365                                          ENTER
    33 00010578 C8000000            <1>  enter 0, 0
    34 0001057C 4883E4F0            <1>  and rsp, ~15
 20366 00010580 48837D1801                      cmp COUNT, 1
 20367 00010585 0F852B0F0000                    jne L_error_arg_count_1
 20368 0001058B 488B4520                        mov rax, PARAM(0)
 20369 0001058F 803805                          cmp byte [rax], T_closure
 20370 00010592 750C                            jne .L_false
 20371 00010594 48B8-                           mov rax, sob_boolean_true
 20371 00010596 [0300000000000000] 
 20372 0001059E EB0A                            jmp .L_end
 20373                                  .L_false:
 20374 000105A0 48B8-                           mov rax, sob_boolean_false
 20374 000105A2 [0200000000000000] 
 20375                                  .L_end:
 20376                                          LEAVE
    38 000105AA C9                  <1>  leave
 20377 000105AB C21800                          ret AND_KILL_FRAME(1)
 20378                                  
 20379                                  L_code_ptr_is_real:
 20380                                          ENTER
    33 000105AE C8000000            <1>  enter 0, 0
    34 000105B2 4883E4F0            <1>  and rsp, ~15
 20381 000105B6 48837D1801                      cmp COUNT, 1
 20382 000105BB 0F85F50E0000                    jne L_error_arg_count_1
 20383 000105C1 488B4520                        mov rax, PARAM(0)
 20384 000105C5 803812                          cmp byte [rax], T_real
 20385 000105C8 750C                            jne .L_false
 20386 000105CA 48B8-                           mov rax, sob_boolean_true
 20386 000105CC [0300000000000000] 
 20387 000105D4 EB0A                            jmp .L_end
 20388                                  .L_false:
 20389 000105D6 48B8-                           mov rax, sob_boolean_false
 20389 000105D8 [0200000000000000] 
 20390                                  .L_end:
 20391                                          LEAVE
    38 000105E0 C9                  <1>  leave
 20392 000105E1 C21800                          ret AND_KILL_FRAME(1)
 20393                                  
 20394                                  L_code_ptr_is_rational:
 20395                                          ENTER
    33 000105E4 C8000000            <1>  enter 0, 0
    34 000105E8 4883E4F0            <1>  and rsp, ~15
 20396 000105EC 48837D1801                      cmp COUNT, 1
 20397 000105F1 0F85BF0E0000                    jne L_error_arg_count_1
 20398 000105F7 488B4520                        mov rax, PARAM(0)
 20399 000105FB 803811                          cmp byte [rax], T_rational
 20400 000105FE 750C                            jne .L_false
 20401 00010600 48B8-                           mov rax, sob_boolean_true
 20401 00010602 [0300000000000000] 
 20402 0001060A EB0A                            jmp .L_end
 20403                                  .L_false:
 20404 0001060C 48B8-                           mov rax, sob_boolean_false
 20404 0001060E [0200000000000000] 
 20405                                  .L_end:
 20406                                          LEAVE
    38 00010616 C9                  <1>  leave
 20407 00010617 C21800                          ret AND_KILL_FRAME(1)
 20408                                  
 20409                                  L_code_ptr_is_boolean:
 20410                                          ENTER
    33 0001061A C8000000            <1>  enter 0, 0
    34 0001061E 4883E4F0            <1>  and rsp, ~15
 20411 00010622 48837D1801                      cmp COUNT, 1
 20412 00010627 0F85890E0000                    jne L_error_arg_count_1
 20413 0001062D 488B4520                        mov rax, PARAM(0)
 20414 00010631 8A18                            mov bl, byte [rax]
 20415 00010633 80E308                          and bl, T_boolean
 20416 00010636 740C                            je .L_false
 20417 00010638 48B8-                           mov rax, sob_boolean_true
 20417 0001063A [0300000000000000] 
 20418 00010642 EB0A                            jmp .L_end
 20419                                  .L_false:
 20420 00010644 48B8-                           mov rax, sob_boolean_false
 20420 00010646 [0200000000000000] 
 20421                                  .L_end:
 20422                                          LEAVE
    38 0001064E C9                  <1>  leave
 20423 0001064F C21800                          ret AND_KILL_FRAME(1)
 20424                                          
 20425                                  L_code_ptr_is_number:
 20426                                          ENTER
    33 00010652 C8000000            <1>  enter 0, 0
    34 00010656 4883E4F0            <1>  and rsp, ~15
 20427 0001065A 48837D1801                      cmp COUNT, 1
 20428 0001065F 0F85510E0000                    jne L_error_arg_count_1
 20429 00010665 488B4520                        mov rax, PARAM(0)
 20430 00010669 8A18                            mov bl, byte [rax]
 20431 0001066B 80E310                          and bl, T_number
 20432 0001066E 740C                            je .L_false
 20433 00010670 48B8-                           mov rax, sob_boolean_true
 20433 00010672 [0300000000000000] 
 20434 0001067A EB0A                            jmp .L_end
 20435                                  .L_false:
 20436 0001067C 48B8-                           mov rax, sob_boolean_false
 20436 0001067E [0200000000000000] 
 20437                                  .L_end:
 20438                                          LEAVE
    38 00010686 C9                  <1>  leave
 20439 00010687 C21800                          ret AND_KILL_FRAME(1)
 20440                                          
 20441                                  L_code_ptr_is_collection:
 20442                                          ENTER
    33 0001068A C8000000            <1>  enter 0, 0
    34 0001068E 4883E4F0            <1>  and rsp, ~15
 20443 00010692 48837D1801                      cmp COUNT, 1
 20444 00010697 0F85190E0000                    jne L_error_arg_count_1
 20445 0001069D 488B4520                        mov rax, PARAM(0)
 20446 000106A1 8A18                            mov bl, byte [rax]
 20447 000106A3 80E320                          and bl, T_collection
 20448 000106A6 740C                            je .L_false
 20449 000106A8 48B8-                           mov rax, sob_boolean_true
 20449 000106AA [0300000000000000] 
 20450 000106B2 EB0A                            jmp .L_end
 20451                                  .L_false:
 20452 000106B4 48B8-                           mov rax, sob_boolean_false
 20452 000106B6 [0200000000000000] 
 20453                                  .L_end:
 20454                                          LEAVE
    38 000106BE C9                  <1>  leave
 20455 000106BF C21800                          ret AND_KILL_FRAME(1)
 20456                                  
 20457                                  L_code_ptr_cons:
 20458                                          ENTER
    33 000106C2 C8000000            <1>  enter 0, 0
    34 000106C6 4883E4F0            <1>  and rsp, ~15
 20459 000106CA 48837D1802                      cmp COUNT, 2
 20460 000106CF 0F85160E0000                    jne L_error_arg_count_2
 20461 000106D5 BF11000000                      mov rdi, (1 + 8 + 8)
 20462 000106DA E8B2F6FFFF                      call malloc
 20463 000106DF C60021                          mov byte [rax], T_pair
 20464 000106E2 488B5D20                        mov rbx, PARAM(0)
 20465 000106E6 48895801                        mov SOB_PAIR_CAR(rax), rbx
 20466 000106EA 488B5D28                        mov rbx, PARAM(1)
 20467 000106EE 48895809                        mov SOB_PAIR_CDR(rax), rbx
 20468                                          LEAVE
    38 000106F2 C9                  <1>  leave
 20469 000106F3 C22000                          ret AND_KILL_FRAME(2)
 20470                                  
 20471                                  L_code_ptr_display_sexpr:
 20472                                          ENTER
    33 000106F6 C8000000            <1>  enter 0, 0
    34 000106FA 4883E4F0            <1>  and rsp, ~15
 20473 000106FE 48837D1801                      cmp COUNT, 1
 20474 00010703 0F85AD0D0000                    jne L_error_arg_count_1
 20475 00010709 488B7D20                        mov rdi, PARAM(0)
 20476 0001070D E89AF6FFFF                      call print_sexpr
 20477 00010712 48B8-                           mov rax, sob_void
 20477 00010714 [0000000000000000] 
 20478                                          LEAVE
    38 0001071C C9                  <1>  leave
 20479 0001071D C21800                          ret AND_KILL_FRAME(1)
 20480                                  
 20481                                  L_code_ptr_write_char:
 20482                                          ENTER
    33 00010720 C8000000            <1>  enter 0, 0
    34 00010724 4883E4F0            <1>  and rsp, ~15
 20483 00010728 48837D1801                      cmp COUNT, 1
 20484 0001072D 0F85830D0000                    jne L_error_arg_count_1
 20485 00010733 488B4520                        mov rax, PARAM(0)
 20486                                          assert_char(rax)
    42 00010737 803802              <1>  cmp byte [%1], %2
    43 0001073A 0F854A0E0000        <1>  jne L_error_incorrect_type
 20487 00010740 8A4001                          mov al, SOB_CHAR_VALUE(rax)
 20488 00010743 4825FF000000                    and rax, 255
 20489 00010749 48BF-                           mov rdi, fmt_char
 20489 0001074B [2004000000000000] 
 20490 00010753 4889C6                          mov rsi, rax
 20491 00010756 B800000000                      mov rax, 0
 20492                                  	ENTER
    33 0001075B C8000000            <1>  enter 0, 0
    34 0001075F 4883E4F0            <1>  and rsp, ~15
 20493 00010763 E8(00000000)                    call printf
 20494                                  	LEAVE
    38 00010768 C9                  <1>  leave
 20495 00010769 48B8-                           mov rax, sob_void
 20495 0001076B [0000000000000000] 
 20496                                          LEAVE
    38 00010773 C9                  <1>  leave
 20497 00010774 C21800                          ret AND_KILL_FRAME(1)
 20498                                  
 20499                                  L_code_ptr_car:
 20500                                          ENTER
    33 00010777 C8000000            <1>  enter 0, 0
    34 0001077B 4883E4F0            <1>  and rsp, ~15
 20501 0001077F 48837D1801                      cmp COUNT, 1
 20502 00010784 0F852C0D0000                    jne L_error_arg_count_1
 20503 0001078A 488B4520                        mov rax, PARAM(0)
 20504                                          assert_pair(rax)
    42 0001078E 803821              <1>  cmp byte [%1], %2
    43 00010791 0F85F30D0000        <1>  jne L_error_incorrect_type
 20505 00010797 488B4001                        mov rax, SOB_PAIR_CAR(rax)
 20506                                          LEAVE
    38 0001079B C9                  <1>  leave
 20507 0001079C C21800                          ret AND_KILL_FRAME(1)
 20508                                          
 20509                                  L_code_ptr_cdr:
 20510                                          ENTER
    33 0001079F C8000000            <1>  enter 0, 0
    34 000107A3 4883E4F0            <1>  and rsp, ~15
 20511 000107A7 48837D1801                      cmp COUNT, 1
 20512 000107AC 0F85040D0000                    jne L_error_arg_count_1
 20513 000107B2 488B4520                        mov rax, PARAM(0)
 20514                                          assert_pair(rax)
    42 000107B6 803821              <1>  cmp byte [%1], %2
    43 000107B9 0F85CB0D0000        <1>  jne L_error_incorrect_type
 20515 000107BF 488B4009                        mov rax, SOB_PAIR_CDR(rax)
 20516                                          LEAVE
    38 000107C3 C9                  <1>  leave
 20517 000107C4 C21800                          ret AND_KILL_FRAME(1)
 20518                                          
 20519                                  L_code_ptr_string_length:
 20520                                          ENTER
    33 000107C7 C8000000            <1>  enter 0, 0
    34 000107CB 4883E4F0            <1>  and rsp, ~15
 20521 000107CF 48837D1801                      cmp COUNT, 1
 20522 000107D4 0F85DC0C0000                    jne L_error_arg_count_1
 20523 000107DA 488B4520                        mov rax, PARAM(0)
 20524                                          assert_string(rax)
    42 000107DE 803803              <1>  cmp byte [%1], %2
    43 000107E1 0F85A30D0000        <1>  jne L_error_incorrect_type
 20525 000107E7 488B7801                        mov rdi, SOB_STRING_LENGTH(rax)
 20526 000107EB E83A0C0000                      call make_integer
 20527                                          LEAVE
    38 000107F0 C9                  <1>  leave
 20528 000107F1 C21800                          ret AND_KILL_FRAME(1)
 20529                                  
 20530                                  L_code_ptr_vector_length:
 20531                                          ENTER
    33 000107F4 C8000000            <1>  enter 0, 0
    34 000107F8 4883E4F0            <1>  and rsp, ~15
 20532 000107FC 48837D1801                      cmp COUNT, 1
 20533 00010801 0F85AF0C0000                    jne L_error_arg_count_1
 20534 00010807 488B4520                        mov rax, PARAM(0)
 20535                                          assert_vector(rax)
    42 0001080B 803822              <1>  cmp byte [%1], %2
    43 0001080E 0F85760D0000        <1>  jne L_error_incorrect_type
 20536 00010814 488B7801                        mov rdi, SOB_VECTOR_LENGTH(rax)
 20537 00010818 E80D0C0000                      call make_integer
 20538                                          LEAVE
    38 0001081D C9                  <1>  leave
 20539 0001081E C21800                          ret AND_KILL_FRAME(1)
 20540                                  
 20541                                  L_code_ptr_real_to_integer:
 20542                                          ENTER
    33 00010821 C8000000            <1>  enter 0, 0
    34 00010825 4883E4F0            <1>  and rsp, ~15
 20543 00010829 48837D1801                      cmp COUNT, 1
 20544 0001082E 0F85820C0000                    jne L_error_arg_count_1
 20545 00010834 488B5D20                        mov rbx, PARAM(0)
 20546                                          assert_real(rbx)
    42 00010838 803B12              <1>  cmp byte [%1], %2
    43 0001083B 0F85490D0000        <1>  jne L_error_incorrect_type
 20547 00010841 F20F104301                      movsd xmm0, qword [rbx + 1]
 20548 00010846 F2480F2CF8                      cvttsd2si rdi, xmm0
 20549 0001084B E8DA0B0000                      call make_integer
 20550                                          LEAVE
    38 00010850 C9                  <1>  leave
 20551 00010851 C21800                          ret AND_KILL_FRAME(1)
 20552                                  
 20553                                  L_code_ptr_exit:
 20554                                          ENTER
    33 00010854 C8000000            <1>  enter 0, 0
    34 00010858 4883E4F0            <1>  and rsp, ~15
 20555 0001085C 48837D1800                      cmp COUNT, 0
 20556 00010861 0F851A0C0000                    jne L_error_arg_count_0
 20557 00010867 B800000000                      mov rax, 0
 20558 0001086C E8(00000000)                    call exit
 20559                                  
 20560                                  L_code_ptr_integer_to_real:
 20561                                          ENTER
    33 00010871 C8000000            <1>  enter 0, 0
    34 00010875 4883E4F0            <1>  and rsp, ~15
 20562 00010879 48837D1801                      cmp COUNT, 1
 20563 0001087E 0F85320C0000                    jne L_error_arg_count_1
 20564 00010884 488B4520                        mov rax, PARAM(0)
 20565                                          assert_integer(rax)
    47                              <1>  assert_rational(%1)
    42 00010888 803811              <2>  cmp byte [%1], %2
    43 0001088B 0F85F90C0000        <2>  jne L_error_incorrect_type
    48 00010891 4883780901          <1>  cmp qword [%1 + 1 + 8], 1
    49 00010896 0F85EE0C0000        <1>  jne L_error_incorrect_type
 20566 0001089C FF7001                          push qword [rax + 1]
 20567 0001089F F2480F2A0424                    cvtsi2sd xmm0, qword [rsp]
 20568 000108A5 E8640B0000                      call make_real
 20569                                          LEAVE
    38 000108AA C9                  <1>  leave
 20570 000108AB C21800                          ret AND_KILL_FRAME(1)
 20571                                  
 20572                                  L_code_ptr_rational_to_real:
 20573                                          ENTER
    33 000108AE C8000000            <1>  enter 0, 0
    34 000108B2 4883E4F0            <1>  and rsp, ~15
 20574 000108B6 48837D1801                      cmp COUNT, 1
 20575 000108BB 0F85F50B0000                    jne L_error_arg_count_1
 20576 000108C1 488B4520                        mov rax, PARAM(0)
 20577                                          assert_rational(rax)
    42 000108C5 803811              <1>  cmp byte [%1], %2
    43 000108C8 0F85BC0C0000        <1>  jne L_error_incorrect_type
 20578 000108CE FF7001                          push qword [rax + 1]
 20579 000108D1 F2480F2A0424                    cvtsi2sd xmm0, qword [rsp]
 20580 000108D7 FF7009                          push qword [rax + 1 + 8]
 20581 000108DA F2480F2A0C24                    cvtsi2sd xmm1, qword [rsp]
 20582 000108E0 F20F5EC1                        divsd xmm0, xmm1
 20583 000108E4 E8250B0000                      call make_real
 20584                                          LEAVE
    38 000108E9 C9                  <1>  leave
 20585 000108EA C21800                          ret AND_KILL_FRAME(1)
 20586                                  
 20587                                  L_code_ptr_char_to_integer:
 20588                                          ENTER
    33 000108ED C8000000            <1>  enter 0, 0
    34 000108F1 4883E4F0            <1>  and rsp, ~15
 20589 000108F5 48837D1801                      cmp COUNT, 1
 20590 000108FA 0F85B60B0000                    jne L_error_arg_count_1
 20591 00010900 488B4520                        mov rax, PARAM(0)
 20592                                          assert_char(rax)
    42 00010904 803802              <1>  cmp byte [%1], %2
    43 00010907 0F857D0C0000        <1>  jne L_error_incorrect_type
 20593 0001090D 8A4001                          mov al, byte [rax + 1]
 20594 00010910 4825FF000000                    and rax, 255
 20595 00010916 4889C7                          mov rdi, rax
 20596 00010919 E80C0B0000                      call make_integer
 20597                                          LEAVE
    38 0001091E C9                  <1>  leave
 20598 0001091F C21800                          ret AND_KILL_FRAME(1)
 20599                                  
 20600                                  L_code_ptr_integer_to_char:
 20601                                          ENTER
    33 00010922 C8000000            <1>  enter 0, 0
    34 00010926 4883E4F0            <1>  and rsp, ~15
 20602 0001092A 48837D1801                      cmp COUNT, 1
 20603 0001092F 0F85810B0000                    jne L_error_arg_count_1
 20604 00010935 488B4520                        mov rax, PARAM(0)
 20605                                          assert_integer(rax)
    47                              <1>  assert_rational(%1)
    42 00010939 803811              <2>  cmp byte [%1], %2
    43 0001093C 0F85480C0000        <2>  jne L_error_incorrect_type
    48 00010942 4883780901          <1>  cmp qword [%1 + 1 + 8], 1
    49 00010947 0F853D0C0000        <1>  jne L_error_incorrect_type
 20606 0001094D 488B5801                        mov rbx, qword [rax + 1]
 20607 00010951 4883FB00                        cmp rbx, 0
 20608 00010955 0F8EF50A0000                    jle L_error_integer_range
 20609 0001095B 4881FB00010000                  cmp rbx, 256
 20610 00010962 0F8DE80A0000                    jge L_error_integer_range
 20611 00010968 BF02000000                      mov rdi, (1 + 1)
 20612 0001096D E81FF4FFFF                      call malloc
 20613 00010972 C60002                          mov byte [rax], T_char
 20614 00010975 885801                          mov byte [rax + 1], bl
 20615                                          LEAVE
    38 00010978 C9                  <1>  leave
 20616 00010979 C21800                          ret AND_KILL_FRAME(1)
 20617                                  
 20618                                  L_code_ptr_trng:
 20619                                          ENTER
    33 0001097C C8000000            <1>  enter 0, 0
    34 00010980 4883E4F0            <1>  and rsp, ~15
 20620 00010984 48837D1800                      cmp COUNT, 0
 20621 00010989 0F85F20A0000                    jne L_error_arg_count_0
 20622 0001098F 480FC7F7                        rdrand rdi
 20623 00010993 48D1EF                          shr rdi, 1
 20624 00010996 E88F0A0000                      call make_integer
 20625                                          LEAVE
    38 0001099B C9                  <1>  leave
 20626 0001099C C21000                          ret AND_KILL_FRAME(0)
 20627                                  
 20628                                  L_code_ptr_is_zero:
 20629                                          ENTER
    33 0001099F C8000000            <1>  enter 0, 0
    34 000109A3 4883E4F0            <1>  and rsp, ~15
 20630 000109A7 48837D1801                      cmp COUNT, 1
 20631 000109AC 0F85040B0000                    jne L_error_arg_count_1
 20632 000109B2 488B4520                        mov rax, PARAM(0)
 20633 000109B6 803811                          cmp byte [rax], T_rational
 20634 000109B9 740A                            je .L_rational
 20635 000109BB 803812                          cmp byte [rax], T_real
 20636 000109BE 740E                            je .L_real
 20637 000109C0 E9C50B0000                      jmp L_error_incorrect_type
 20638                                  .L_rational:
 20639 000109C5 4883780100                      cmp qword [rax + 1], 0
 20640 000109CA 7420                            je .L_zero
 20641 000109CC EB12                            jmp .L_not_zero
 20642                                  .L_real:
 20643 000109CE 660FEFC0                        pxor xmm0, xmm0
 20644 000109D2 FF7001                          push qword [rax + 1]
 20645 000109D5 F20F100C24                      movsd xmm1, qword [rsp]
 20646 000109DA 660F2EC1                        ucomisd xmm0, xmm1
 20647 000109DE 740C                            je .L_zero
 20648                                  .L_not_zero:
 20649 000109E0 48B8-                           mov rax, sob_boolean_false
 20649 000109E2 [0200000000000000] 
 20650 000109EA EB0A                            jmp .L_end
 20651                                  .L_zero:
 20652 000109EC 48B8-                           mov rax, sob_boolean_true
 20652 000109EE [0300000000000000] 
 20653                                  .L_end:
 20654                                          LEAVE
    38 000109F6 C9                  <1>  leave
 20655 000109F7 C21800                          ret AND_KILL_FRAME(1)
 20656                                  
 20657                                  L_code_ptr_is_integer:
 20658                                          ENTER
    33 000109FA C8000000            <1>  enter 0, 0
    34 000109FE 4883E4F0            <1>  and rsp, ~15
 20659 00010A02 48837D1801                      cmp COUNT, 1
 20660 00010A07 0F85A90A0000                    jne L_error_arg_count_1
 20661 00010A0D 488B4520                        mov rax, PARAM(0)
 20662 00010A11 803811                          cmp byte [rax], T_rational
 20663 00010A14 7513                            jne .L_false
 20664 00010A16 4883780901                      cmp qword [rax + 1 + 8], 1
 20665 00010A1B 750C                            jne .L_false
 20666 00010A1D 48B8-                           mov rax, sob_boolean_true
 20666 00010A1F [0300000000000000] 
 20667 00010A27 EB0A                            jmp .L_exit
 20668                                  .L_false:
 20669 00010A29 48B8-                           mov rax, sob_boolean_false
 20669 00010A2B [0200000000000000] 
 20670                                  .L_exit:
 20671                                          LEAVE
    38 00010A33 C9                  <1>  leave
 20672 00010A34 C21800                          ret AND_KILL_FRAME(1)
 20673                                  
 20674                                  L_code_ptr_raw_bin_add_rr:
 20675                                          ENTER
    33 00010A37 C8000000            <1>  enter 0, 0
    34 00010A3B 4883E4F0            <1>  and rsp, ~15
 20676 00010A3F 48837D1802                      cmp COUNT, 2
 20677 00010A44 0F85A10A0000                    jne L_error_arg_count_2
 20678 00010A4A 488B5D20                        mov rbx, PARAM(0)
 20679                                          assert_real(rbx)
    42 00010A4E 803B12              <1>  cmp byte [%1], %2
    43 00010A51 0F85330B0000        <1>  jne L_error_incorrect_type
 20680 00010A57 488B4D28                        mov rcx, PARAM(1)
 20681                                          assert_real(rcx)
    42 00010A5B 803912              <1>  cmp byte [%1], %2
    43 00010A5E 0F85260B0000        <1>  jne L_error_incorrect_type
 20682 00010A64 F20F104301                      movsd xmm0, qword [rbx + 1]
 20683 00010A69 F20F104901                      movsd xmm1, qword [rcx + 1]
 20684 00010A6E F20F58C1                        addsd xmm0, xmm1
 20685 00010A72 E897090000                      call make_real
 20686                                          LEAVE
    38 00010A77 C9                  <1>  leave
 20687 00010A78 C22000                          ret AND_KILL_FRAME(2)
 20688                                  
 20689                                  L_code_ptr_raw_bin_sub_rr:
 20690                                          ENTER
    33 00010A7B C8000000            <1>  enter 0, 0
    34 00010A7F 4883E4F0            <1>  and rsp, ~15
 20691 00010A83 48837D1802                      cmp COUNT, 2
 20692 00010A88 0F855D0A0000                    jne L_error_arg_count_2
 20693 00010A8E 488B5D20                        mov rbx, PARAM(0)
 20694                                          assert_real(rbx)
    42 00010A92 803B12              <1>  cmp byte [%1], %2
    43 00010A95 0F85EF0A0000        <1>  jne L_error_incorrect_type
 20695 00010A9B 488B4D28                        mov rcx, PARAM(1)
 20696                                          assert_real(rcx)
    42 00010A9F 803912              <1>  cmp byte [%1], %2
    43 00010AA2 0F85E20A0000        <1>  jne L_error_incorrect_type
 20697 00010AA8 F20F104301                      movsd xmm0, qword [rbx + 1]
 20698 00010AAD F20F104901                      movsd xmm1, qword [rcx + 1]
 20699 00010AB2 F20F5CC1                        subsd xmm0, xmm1
 20700 00010AB6 E853090000                      call make_real
 20701                                          LEAVE
    38 00010ABB C9                  <1>  leave
 20702 00010ABC C22000                          ret AND_KILL_FRAME(2)
 20703                                  
 20704                                  L_code_ptr_raw_bin_mul_rr:
 20705                                          ENTER
    33 00010ABF C8000000            <1>  enter 0, 0
    34 00010AC3 4883E4F0            <1>  and rsp, ~15
 20706 00010AC7 48837D1802                      cmp COUNT, 2
 20707 00010ACC 0F85190A0000                    jne L_error_arg_count_2
 20708 00010AD2 488B5D20                        mov rbx, PARAM(0)
 20709                                          assert_real(rbx)
    42 00010AD6 803B12              <1>  cmp byte [%1], %2
    43 00010AD9 0F85AB0A0000        <1>  jne L_error_incorrect_type
 20710 00010ADF 488B4D28                        mov rcx, PARAM(1)
 20711                                          assert_real(rcx)
    42 00010AE3 803912              <1>  cmp byte [%1], %2
    43 00010AE6 0F859E0A0000        <1>  jne L_error_incorrect_type
 20712 00010AEC F20F104301                      movsd xmm0, qword [rbx + 1]
 20713 00010AF1 F20F104901                      movsd xmm1, qword [rcx + 1]
 20714 00010AF6 F20F59C1                        mulsd xmm0, xmm1
 20715 00010AFA E80F090000                      call make_real
 20716                                          LEAVE
    38 00010AFF C9                  <1>  leave
 20717 00010B00 C22000                          ret AND_KILL_FRAME(2)
 20718                                  
 20719                                  L_code_ptr_raw_bin_div_rr:
 20720                                          ENTER
    33 00010B03 C8000000            <1>  enter 0, 0
    34 00010B07 4883E4F0            <1>  and rsp, ~15
 20721 00010B0B 48837D1802                      cmp COUNT, 2
 20722 00010B10 0F85D5090000                    jne L_error_arg_count_2
 20723 00010B16 488B5D20                        mov rbx, PARAM(0)
 20724                                          assert_real(rbx)
    42 00010B1A 803B12              <1>  cmp byte [%1], %2
    43 00010B1D 0F85670A0000        <1>  jne L_error_incorrect_type
 20725 00010B23 488B4D28                        mov rcx, PARAM(1)
 20726                                          assert_real(rcx)
    42 00010B27 803912              <1>  cmp byte [%1], %2
    43 00010B2A 0F855A0A0000        <1>  jne L_error_incorrect_type
 20727 00010B30 F20F104301                      movsd xmm0, qword [rbx + 1]
 20728 00010B35 F20F104901                      movsd xmm1, qword [rcx + 1]
 20729 00010B3A 660FEFD2                        pxor xmm2, xmm2
 20730 00010B3E 660F2ECA                        ucomisd xmm1, xmm2
 20731 00010B42 0F84730A0000                    je L_error_division_by_zero
 20732 00010B48 F20F5EC1                        divsd xmm0, xmm1
 20733 00010B4C E8BD080000                      call make_real
 20734                                          LEAVE
    38 00010B51 C9                  <1>  leave
 20735 00010B52 C22000                          ret AND_KILL_FRAME(2)
 20736                                  
 20737                                  L_code_ptr_raw_bin_add_qq:
 20738                                          ENTER
    33 00010B55 C8000000            <1>  enter 0, 0
    34 00010B59 4883E4F0            <1>  and rsp, ~15
 20739 00010B5D 48837D1802                      cmp COUNT, 2
 20740 00010B62 0F8583090000                    jne L_error_arg_count_2
 20741 00010B68 4C8B4520                        mov r8, PARAM(0)
 20742                                          assert_rational(r8)
    42 00010B6C 41803811            <1>  cmp byte [%1], %2
    43 00010B70 0F85140A0000        <1>  jne L_error_incorrect_type
 20743 00010B76 4C8B4D28                        mov r9, PARAM(1)
 20744                                          assert_rational(r9)
    42 00010B7A 41803911            <1>  cmp byte [%1], %2
    43 00010B7E 0F85060A0000        <1>  jne L_error_incorrect_type
 20745 00010B84 498B4001                        mov rax, qword [r8 + 1] ; num1
 20746 00010B88 498B5909                        mov rbx, qword [r9 + 1 + 8] ; den 2
 20747 00010B8C 4899                            cqo
 20748 00010B8E 48F7EB                          imul rbx
 20749 00010B91 4889C6                          mov rsi, rax
 20750 00010B94 498B4009                        mov rax, qword [r8 + 1 + 8] ; den1
 20751 00010B98 498B5901                        mov rbx, qword [r9 + 1]     ; num2
 20752 00010B9C 4899                            cqo
 20753 00010B9E 48F7EB                          imul rbx
 20754 00010BA1 4801C6                          add rsi, rax
 20755 00010BA4 498B4009                        mov rax, qword [r8 + 1 + 8] ; den1
 20756 00010BA8 498B5909                        mov rbx, qword [r9 + 1 + 8] ; den2
 20757 00010BAC 4899                            cqo
 20758 00010BAE 48F7EB                          imul rbx
 20759 00010BB1 4889C7                          mov rdi, rax
 20760 00010BB4 E827010000                      call normalize_rational
 20761                                          LEAVE
    38 00010BB9 C9                  <1>  leave
 20762 00010BBA C22000                          ret AND_KILL_FRAME(2)
 20763                                  
 20764                                  L_code_ptr_raw_bin_sub_qq:
 20765                                          ENTER
    33 00010BBD C8000000            <1>  enter 0, 0
    34 00010BC1 4883E4F0            <1>  and rsp, ~15
 20766 00010BC5 48837D1802                      cmp COUNT, 2
 20767 00010BCA 0F851B090000                    jne L_error_arg_count_2
 20768 00010BD0 4C8B4520                        mov r8, PARAM(0)
 20769                                          assert_rational(r8)
    42 00010BD4 41803811            <1>  cmp byte [%1], %2
    43 00010BD8 0F85AC090000        <1>  jne L_error_incorrect_type
 20770 00010BDE 4C8B4D28                        mov r9, PARAM(1)
 20771                                          assert_rational(r9)
    42 00010BE2 41803911            <1>  cmp byte [%1], %2
    43 00010BE6 0F859E090000        <1>  jne L_error_incorrect_type
 20772 00010BEC 498B4001                        mov rax, qword [r8 + 1] ; num1
 20773 00010BF0 498B5909                        mov rbx, qword [r9 + 1 + 8] ; den 2
 20774 00010BF4 4899                            cqo
 20775 00010BF6 48F7EB                          imul rbx
 20776 00010BF9 4889C6                          mov rsi, rax
 20777 00010BFC 498B4009                        mov rax, qword [r8 + 1 + 8] ; den1
 20778 00010C00 498B5901                        mov rbx, qword [r9 + 1]     ; num2
 20779 00010C04 4899                            cqo
 20780 00010C06 48F7EB                          imul rbx
 20781 00010C09 4829C6                          sub rsi, rax
 20782 00010C0C 498B4009                        mov rax, qword [r8 + 1 + 8] ; den1
 20783 00010C10 498B5909                        mov rbx, qword [r9 + 1 + 8] ; den2
 20784 00010C14 4899                            cqo
 20785 00010C16 48F7EB                          imul rbx
 20786 00010C19 4889C7                          mov rdi, rax
 20787 00010C1C E8BF000000                      call normalize_rational
 20788                                          LEAVE
    38 00010C21 C9                  <1>  leave
 20789 00010C22 C22000                          ret AND_KILL_FRAME(2)
 20790                                  
 20791                                  L_code_ptr_raw_bin_mul_qq:
 20792                                          ENTER
    33 00010C25 C8000000            <1>  enter 0, 0
    34 00010C29 4883E4F0            <1>  and rsp, ~15
 20793 00010C2D 48837D1802                      cmp COUNT, 2
 20794 00010C32 0F85B3080000                    jne L_error_arg_count_2
 20795 00010C38 4C8B4520                        mov r8, PARAM(0)
 20796                                          assert_rational(r8)
    42 00010C3C 41803811            <1>  cmp byte [%1], %2
    43 00010C40 0F8544090000        <1>  jne L_error_incorrect_type
 20797 00010C46 4C8B4D28                        mov r9, PARAM(1)
 20798                                          assert_rational(r9)
    42 00010C4A 41803911            <1>  cmp byte [%1], %2
    43 00010C4E 0F8536090000        <1>  jne L_error_incorrect_type
 20799 00010C54 498B4001                        mov rax, qword [r8 + 1] ; num1
 20800 00010C58 498B5901                        mov rbx, qword [r9 + 1] ; num2
 20801 00010C5C 4899                            cqo
 20802 00010C5E 48F7EB                          imul rbx
 20803 00010C61 4889C6                          mov rsi, rax
 20804 00010C64 498B4009                        mov rax, qword [r8 + 1 + 8] ; den1
 20805 00010C68 498B5909                        mov rbx, qword [r9 + 1 + 8] ; den2
 20806 00010C6C 4899                            cqo
 20807 00010C6E 48F7EB                          imul rbx
 20808 00010C71 4889C7                          mov rdi, rax
 20809 00010C74 E867000000                      call normalize_rational
 20810                                          LEAVE
    38 00010C79 C9                  <1>  leave
 20811 00010C7A C22000                          ret AND_KILL_FRAME(2)
 20812                                          
 20813                                  L_code_ptr_raw_bin_div_qq:
 20814                                          ENTER
    33 00010C7D C8000000            <1>  enter 0, 0
    34 00010C81 4883E4F0            <1>  and rsp, ~15
 20815 00010C85 48837D1802                      cmp COUNT, 2
 20816 00010C8A 0F855B080000                    jne L_error_arg_count_2
 20817 00010C90 4C8B4520                        mov r8, PARAM(0)
 20818                                          assert_rational(r8)
    42 00010C94 41803811            <1>  cmp byte [%1], %2
    43 00010C98 0F85EC080000        <1>  jne L_error_incorrect_type
 20819 00010C9E 4C8B4D28                        mov r9, PARAM(1)
 20820                                          assert_rational(r9)
    42 00010CA2 41803911            <1>  cmp byte [%1], %2
    43 00010CA6 0F85DE080000        <1>  jne L_error_incorrect_type
 20821 00010CAC 4983790100                      cmp qword [r9 + 1], 0
 20822 00010CB1 0F8404090000                    je L_error_division_by_zero
 20823 00010CB7 498B4001                        mov rax, qword [r8 + 1] ; num1
 20824 00010CBB 498B5909                        mov rbx, qword [r9 + 1 + 8] ; den 2
 20825 00010CBF 4899                            cqo
 20826 00010CC1 48F7EB                          imul rbx
 20827 00010CC4 4889C6                          mov rsi, rax
 20828 00010CC7 498B4009                        mov rax, qword [r8 + 1 + 8] ; den1
 20829 00010CCB 498B5901                        mov rbx, qword [r9 + 1] ; num2
 20830 00010CCF 4899                            cqo
 20831 00010CD1 48F7EB                          imul rbx
 20832 00010CD4 4889C7                          mov rdi, rax
 20833 00010CD7 E804000000                      call normalize_rational
 20834                                          LEAVE
    38 00010CDC C9                  <1>  leave
 20835 00010CDD C22000                          ret AND_KILL_FRAME(2)
 20836                                          
 20837                                  normalize_rational:
 20838 00010CE0 56                              push rsi
 20839 00010CE1 57                              push rdi
 20840 00010CE2 E839000000                      call gcd
 20841 00010CE7 4889C3                          mov rbx, rax
 20842 00010CEA 58                              pop rax
 20843 00010CEB 4899                            cqo
 20844 00010CED 48F7FB                          idiv rbx
 20845 00010CF0 4989C0                          mov r8, rax
 20846 00010CF3 58                              pop rax
 20847 00010CF4 4899                            cqo
 20848 00010CF6 48F7FB                          idiv rbx
 20849 00010CF9 4989C1                          mov r9, rax
 20850 00010CFC BF11000000                      mov rdi, (1 + 8 + 8)
 20851 00010D01 E88BF0FFFF                      call malloc
 20852 00010D06 C60011                          mov byte [rax], T_rational
 20853 00010D09 4C894801                        mov qword [rax + 1], r9
 20854 00010D0D 4C894009                        mov qword [rax + 1 + 8], r8
 20855 00010D11 C3                              ret
 20856                                  
 20857                                  iabs:
 20858 00010D12 4889F8                          mov rax, rdi
 20859 00010D15 4883F800                        cmp rax, 0
 20860 00010D19 7C01                            jl .Lneg
 20861 00010D1B C3                              ret
 20862                                  .Lneg:
 20863 00010D1C 48F7D8                          neg rax
 20864 00010D1F C3                              ret
 20865                                  
 20866                                  gcd:
 20867 00010D20 E8EDFFFFFF                      call iabs
 20868 00010D25 4889C3                          mov rbx, rax
 20869 00010D28 4889F7                          mov rdi, rsi
 20870 00010D2B E8E2FFFFFF                      call iabs
 20871 00010D30 4883F800                        cmp rax, 0
 20872 00010D34 7502                            jne .L0
 20873 00010D36 4893                            xchg rax, rbx
 20874                                  .L0:
 20875 00010D38 4883FB00                        cmp rbx, 0
 20876 00010D3C 740C                            je .L1
 20877 00010D3E 4899                            cqo
 20878 00010D40 48F7F3                          div rbx
 20879 00010D43 4889D0                          mov rax, rdx
 20880 00010D46 4893                            xchg rax, rbx
 20881 00010D48 EBEE                            jmp .L0
 20882                                  .L1:
 20883 00010D4A C3                              ret
 20884                                  
 20885                                  L_code_ptr_error:
 20886                                          ENTER
    33 00010D4B C8000000            <1>  enter 0, 0
    34 00010D4F 4883E4F0            <1>  and rsp, ~15
 20887 00010D53 48837D1802                      cmp COUNT, 2
 20888 00010D58 0F858D070000                    jne L_error_arg_count_2
 20889 00010D5E 488B7520                        mov rsi, PARAM(0)
 20890                                          assert_symbol(rsi)
    42 00010D62 803E04              <1>  cmp byte [%1], %2
    43 00010D65 0F851F080000        <1>  jne L_error_incorrect_type
 20891 00010D6B 488B7528                        mov rsi, PARAM(1)
 20892                                          assert_string(rsi)
    42 00010D6F 803E03              <1>  cmp byte [%1], %2
    43 00010D72 0F8512080000        <1>  jne L_error_incorrect_type
 20893 00010D78 48BF-                           mov rdi, fmt_scheme_error_part_1
 20893 00010D7A [5805000000000000] 
 20894 00010D82 B800000000                      mov rax, 0
 20895                                  	ENTER
    33 00010D87 C8000000            <1>  enter 0, 0
    34 00010D8B 4883E4F0            <1>  and rsp, ~15
 20896 00010D8F E8(00000000)                    call printf
 20897                                  	LEAVE
    38 00010D94 C9                  <1>  leave
 20898 00010D95 488B7D20                        mov rdi, PARAM(0)
 20899 00010D99 E80EF0FFFF                      call print_sexpr
 20900 00010D9E 48BF-                           mov rdi, fmt_scheme_error_part_2
 20900 00010DA0 [6C05000000000000] 
 20901 00010DA8 B800000000                      mov rax, 0
 20902                                  	ENTER
    33 00010DAD C8000000            <1>  enter 0, 0
    34 00010DB1 4883E4F0            <1>  and rsp, ~15
 20903 00010DB5 E8(00000000)                    call printf
 20904                                  	LEAVE
    38 00010DBA C9                  <1>  leave
 20905 00010DBB 488B4528                        mov rax, PARAM(1)       ; sob_string
 20906 00010DBF BE01000000                      mov rsi, 1              ; size = 1 byte
 20907 00010DC4 488B5001                        mov rdx, qword [rax + 1] ; length
 20908 00010DC8 488D7809                        lea rdi, [rax + 1 + 8]   ; actual characters
 20909 00010DCC 488B0C25[00000000]              mov rcx, qword [stdout]  ; FILE*
 20910 00010DD4 E8(00000000)                    call fwrite
 20911 00010DD9 48BF-                           mov rdi, fmt_scheme_error_part_3
 20911 00010DDB [AE05000000000000] 
 20912 00010DE3 B800000000                      mov rax, 0
 20913                                  	ENTER
    33 00010DE8 C8000000            <1>  enter 0, 0
    34 00010DEC 4883E4F0            <1>  and rsp, ~15
 20914 00010DF0 E8(00000000)                    call printf
 20915                                  	LEAVE
    38 00010DF5 C9                  <1>  leave
 20916 00010DF6 48C7C0F7FFFFFF                  mov rax, -9
 20917 00010DFD E8(00000000)                    call exit
 20918                                  
 20919                                  L_code_ptr_raw_less_than_rr:
 20920                                          ENTER
    33 00010E02 C8000000            <1>  enter 0, 0
    34 00010E06 4883E4F0            <1>  and rsp, ~15
 20921 00010E0A 48837D1802                      cmp COUNT, 2
 20922 00010E0F 0F85D6060000                    jne L_error_arg_count_2
 20923 00010E15 488B7520                        mov rsi, PARAM(0)
 20924                                          assert_real(rsi)
    42 00010E19 803E12              <1>  cmp byte [%1], %2
    43 00010E1C 0F8568070000        <1>  jne L_error_incorrect_type
 20925 00010E22 488B7D28                        mov rdi, PARAM(1)
 20926                                          assert_real(rdi)
    42 00010E26 803F12              <1>  cmp byte [%1], %2
    43 00010E29 0F855B070000        <1>  jne L_error_incorrect_type
 20927 00010E2F F20F104601                      movsd xmm0, qword [rsi + 1]
 20928 00010E34 F20F104F01                      movsd xmm1, qword [rdi + 1]
 20929 00010E39 660F2FC1                        comisd xmm0, xmm1
 20930 00010E3D 730C                            jae .L_false
 20931 00010E3F 48B8-                           mov rax, sob_boolean_true
 20931 00010E41 [0300000000000000] 
 20932 00010E49 EB0A                            jmp .L_exit
 20933                                  .L_false:
 20934 00010E4B 48B8-                           mov rax, sob_boolean_false
 20934 00010E4D [0200000000000000] 
 20935                                  .L_exit:
 20936                                          LEAVE
    38 00010E55 C9                  <1>  leave
 20937 00010E56 C22000                          ret AND_KILL_FRAME(2)
 20938                                          
 20939                                  L_code_ptr_raw_less_than_qq:
 20940                                          ENTER
    33 00010E59 C8000000            <1>  enter 0, 0
    34 00010E5D 4883E4F0            <1>  and rsp, ~15
 20941 00010E61 48837D1802                      cmp COUNT, 2
 20942 00010E66 0F857F060000                    jne L_error_arg_count_2
 20943 00010E6C 488B7520                        mov rsi, PARAM(0)
 20944                                          assert_rational(rsi)
    42 00010E70 803E11              <1>  cmp byte [%1], %2
    43 00010E73 0F8511070000        <1>  jne L_error_incorrect_type
 20945 00010E79 488B7D28                        mov rdi, PARAM(1)
 20946                                          assert_rational(rdi)
    42 00010E7D 803F11              <1>  cmp byte [%1], %2
    43 00010E80 0F8504070000        <1>  jne L_error_incorrect_type
 20947 00010E86 488B4601                        mov rax, qword [rsi + 1] ; num1
 20948 00010E8A 4899                            cqo
 20949 00010E8C 48F76F09                        imul qword [rdi + 1 + 8] ; den2
 20950 00010E90 4889C1                          mov rcx, rax
 20951 00010E93 488B4609                        mov rax, qword [rsi + 1 + 8] ; den1
 20952 00010E97 4899                            cqo
 20953 00010E99 48F76F01                        imul qword [rdi + 1]          ; num2
 20954 00010E9D 4829C1                          sub rcx, rax
 20955 00010EA0 7D0C                            jge .L_false
 20956 00010EA2 48B8-                           mov rax, sob_boolean_true
 20956 00010EA4 [0300000000000000] 
 20957 00010EAC EB0A                            jmp .L_exit
 20958                                  .L_false:
 20959 00010EAE 48B8-                           mov rax, sob_boolean_false
 20959 00010EB0 [0200000000000000] 
 20960                                  .L_exit:
 20961                                          LEAVE
    38 00010EB8 C9                  <1>  leave
 20962 00010EB9 C22000                          ret AND_KILL_FRAME(2)
 20963                                  
 20964                                  L_code_ptr_raw_equal_rr:
 20965                                          ENTER
    33 00010EBC C8000000            <1>  enter 0, 0
    34 00010EC0 4883E4F0            <1>  and rsp, ~15
 20966 00010EC4 48837D1802                      cmp COUNT, 2
 20967 00010EC9 0F851C060000                    jne L_error_arg_count_2
 20968 00010ECF 488B7520                        mov rsi, PARAM(0)
 20969                                          assert_real(rsi)
    42 00010ED3 803E12              <1>  cmp byte [%1], %2
    43 00010ED6 0F85AE060000        <1>  jne L_error_incorrect_type
 20970 00010EDC 488B7D28                        mov rdi, PARAM(1)
 20971                                          assert_real(rdi)
    42 00010EE0 803F12              <1>  cmp byte [%1], %2
    43 00010EE3 0F85A1060000        <1>  jne L_error_incorrect_type
 20972 00010EE9 F20F104601                      movsd xmm0, qword [rsi + 1]
 20973 00010EEE F20F104F01                      movsd xmm1, qword [rdi + 1]
 20974 00010EF3 660F2FC1                        comisd xmm0, xmm1
 20975 00010EF7 750C                            jne .L_false
 20976 00010EF9 48B8-                           mov rax, sob_boolean_true
 20976 00010EFB [0300000000000000] 
 20977 00010F03 EB0A                            jmp .L_exit
 20978                                  .L_false:
 20979 00010F05 48B8-                           mov rax, sob_boolean_false
 20979 00010F07 [0200000000000000] 
 20980                                  .L_exit:
 20981                                          LEAVE
    38 00010F0F C9                  <1>  leave
 20982 00010F10 C22000                          ret AND_KILL_FRAME(2)
 20983                                          
 20984                                  L_code_ptr_raw_equal_qq:
 20985                                          ENTER
    33 00010F13 C8000000            <1>  enter 0, 0
    34 00010F17 4883E4F0            <1>  and rsp, ~15
 20986 00010F1B 48837D1802                      cmp COUNT, 2
 20987 00010F20 0F85C5050000                    jne L_error_arg_count_2
 20988 00010F26 488B7520                        mov rsi, PARAM(0)
 20989                                          assert_rational(rsi)
    42 00010F2A 803E11              <1>  cmp byte [%1], %2
    43 00010F2D 0F8557060000        <1>  jne L_error_incorrect_type
 20990 00010F33 488B7D28                        mov rdi, PARAM(1)
 20991                                          assert_rational(rdi)
    42 00010F37 803F11              <1>  cmp byte [%1], %2
    43 00010F3A 0F854A060000        <1>  jne L_error_incorrect_type
 20992 00010F40 488B4601                        mov rax, qword [rsi + 1] ; num1
 20993 00010F44 4899                            cqo
 20994 00010F46 48F76F09                        imul qword [rdi + 1 + 8] ; den2
 20995 00010F4A 4889C1                          mov rcx, rax
 20996 00010F4D 488B4709                        mov rax, qword [rdi + 1 + 8] ; den1
 20997 00010F51 4899                            cqo
 20998 00010F53 48F76F01                        imul qword [rdi + 1]          ; num2
 20999 00010F57 4829C1                          sub rcx, rax
 21000 00010F5A 750C                            jne .L_false
 21001 00010F5C 48B8-                           mov rax, sob_boolean_true
 21001 00010F5E [0300000000000000] 
 21002 00010F66 EB0A                            jmp .L_exit
 21003                                  .L_false:
 21004 00010F68 48B8-                           mov rax, sob_boolean_false
 21004 00010F6A [0200000000000000] 
 21005                                  .L_exit:
 21006                                          LEAVE
    38 00010F72 C9                  <1>  leave
 21007 00010F73 C22000                          ret AND_KILL_FRAME(2)
 21008                                  
 21009                                  L_code_ptr_quotient:
 21010                                          ENTER
    33 00010F76 C8000000            <1>  enter 0, 0
    34 00010F7A 4883E4F0            <1>  and rsp, ~15
 21011 00010F7E 48837D1802                      cmp COUNT, 2
 21012 00010F83 0F8562050000                    jne L_error_arg_count_2
 21013 00010F89 488B7520                        mov rsi, PARAM(0)
 21014                                          assert_integer(rsi)
    47                              <1>  assert_rational(%1)
    42 00010F8D 803E11              <2>  cmp byte [%1], %2
    43 00010F90 0F85F4050000        <2>  jne L_error_incorrect_type
    48 00010F96 48837E0901          <1>  cmp qword [%1 + 1 + 8], 1
    49 00010F9B 0F85E9050000        <1>  jne L_error_incorrect_type
 21015 00010FA1 488B7D28                        mov rdi, PARAM(1)
 21016                                          assert_integer(rdi)
    47                              <1>  assert_rational(%1)
    42 00010FA5 803F11              <2>  cmp byte [%1], %2
    43 00010FA8 0F85DC050000        <2>  jne L_error_incorrect_type
    48 00010FAE 48837F0901          <1>  cmp qword [%1 + 1 + 8], 1
    49 00010FB3 0F85D1050000        <1>  jne L_error_incorrect_type
 21017 00010FB9 488B4601                        mov rax, qword [rsi + 1]
 21018 00010FBD 488B5F01                        mov rbx, qword [rdi + 1]
 21019 00010FC1 4883FB00                        cmp rbx, 0
 21020 00010FC5 0F84F0050000                    je L_error_division_by_zero
 21021 00010FCB 4899                            cqo
 21022 00010FCD 48F7FB                          idiv rbx
 21023 00010FD0 4889C7                          mov rdi, rax
 21024 00010FD3 E852040000                      call make_integer
 21025                                          LEAVE
    38 00010FD8 C9                  <1>  leave
 21026 00010FD9 C22000                          ret AND_KILL_FRAME(2)
 21027                                          
 21028                                  L_code_ptr_remainder:
 21029                                          ENTER
    33 00010FDC C8000000            <1>  enter 0, 0
    34 00010FE0 4883E4F0            <1>  and rsp, ~15
 21030 00010FE4 48837D1802                      cmp COUNT, 2
 21031 00010FE9 0F85FC040000                    jne L_error_arg_count_2
 21032 00010FEF 488B7520                        mov rsi, PARAM(0)
 21033                                          assert_integer(rsi)
    47                              <1>  assert_rational(%1)
    42 00010FF3 803E11              <2>  cmp byte [%1], %2
    43 00010FF6 0F858E050000        <2>  jne L_error_incorrect_type
    48 00010FFC 48837E0901          <1>  cmp qword [%1 + 1 + 8], 1
    49 00011001 0F8583050000        <1>  jne L_error_incorrect_type
 21034 00011007 488B7D28                        mov rdi, PARAM(1)
 21035                                          assert_integer(rdi)
    47                              <1>  assert_rational(%1)
    42 0001100B 803F11              <2>  cmp byte [%1], %2
    43 0001100E 0F8576050000        <2>  jne L_error_incorrect_type
    48 00011014 48837F0901          <1>  cmp qword [%1 + 1 + 8], 1
    49 00011019 0F856B050000        <1>  jne L_error_incorrect_type
 21036 0001101F 488B4601                        mov rax, qword [rsi + 1]
 21037 00011023 488B5F01                        mov rbx, qword [rdi + 1]
 21038 00011027 4883FB00                        cmp rbx, 0
 21039 0001102B 0F848A050000                    je L_error_division_by_zero
 21040 00011031 4899                            cqo
 21041 00011033 48F7FB                          idiv rbx
 21042 00011036 4889D7                          mov rdi, rdx
 21043 00011039 E8EC030000                      call make_integer
 21044                                          LEAVE
    38 0001103E C9                  <1>  leave
 21045 0001103F C22000                          ret AND_KILL_FRAME(2)
 21046                                  
 21047                                  L_code_ptr_set_car:
 21048                                          ENTER
    33 00011042 C8000000            <1>  enter 0, 0
    34 00011046 4883E4F0            <1>  and rsp, ~15
 21049 0001104A 48837D1802                      cmp COUNT, 2
 21050 0001104F 0F8596040000                    jne L_error_arg_count_2
 21051 00011055 488B4520                        mov rax, PARAM(0)
 21052                                          assert_pair(rax)
    42 00011059 803821              <1>  cmp byte [%1], %2
    43 0001105C 0F8528050000        <1>  jne L_error_incorrect_type
 21053 00011062 488B5D28                        mov rbx, PARAM(1)
 21054 00011066 48895801                        mov SOB_PAIR_CAR(rax), rbx
 21055 0001106A 48B8-                           mov rax, sob_void
 21055 0001106C [0000000000000000] 
 21056                                          LEAVE
    38 00011074 C9                  <1>  leave
 21057 00011075 C22000                          ret AND_KILL_FRAME(2)
 21058                                  
 21059                                  L_code_ptr_set_cdr:
 21060                                          ENTER
    33 00011078 C8000000            <1>  enter 0, 0
    34 0001107C 4883E4F0            <1>  and rsp, ~15
 21061 00011080 48837D1802                      cmp COUNT, 2
 21062 00011085 0F8560040000                    jne L_error_arg_count_2
 21063 0001108B 488B4520                        mov rax, PARAM(0)
 21064                                          assert_pair(rax)
    42 0001108F 803821              <1>  cmp byte [%1], %2
    43 00011092 0F85F2040000        <1>  jne L_error_incorrect_type
 21065 00011098 488B5D28                        mov rbx, PARAM(1)
 21066 0001109C 48895809                        mov SOB_PAIR_CDR(rax), rbx
 21067 000110A0 48B8-                           mov rax, sob_void
 21067 000110A2 [0000000000000000] 
 21068                                          LEAVE
    38 000110AA C9                  <1>  leave
 21069 000110AB C22000                          ret AND_KILL_FRAME(2)
 21070                                  
 21071                                  L_code_ptr_string_ref:
 21072                                          ENTER
    33 000110AE C8000000            <1>  enter 0, 0
    34 000110B2 4883E4F0            <1>  and rsp, ~15
 21073 000110B6 48837D1802                      cmp COUNT, 2
 21074 000110BB 0F852A040000                    jne L_error_arg_count_2
 21075 000110C1 488B7D20                        mov rdi, PARAM(0)
 21076                                          assert_string(rdi)
    42 000110C5 803F03              <1>  cmp byte [%1], %2
    43 000110C8 0F85BC040000        <1>  jne L_error_incorrect_type
 21077 000110CE 488B7528                        mov rsi, PARAM(1)
 21078                                          assert_integer(rsi)
    47                              <1>  assert_rational(%1)
    42 000110D2 803E11              <2>  cmp byte [%1], %2
    43 000110D5 0F85AF040000        <2>  jne L_error_incorrect_type
    48 000110DB 48837E0901          <1>  cmp qword [%1 + 1 + 8], 1
    49 000110E0 0F85A4040000        <1>  jne L_error_incorrect_type
 21079 000110E6 488B5701                        mov rdx, qword [rdi + 1]
 21080 000110EA 488B4E01                        mov rcx, qword [rsi + 1]
 21081 000110EE 4839D1                          cmp rcx, rdx
 21082 000110F1 0F8D59030000                    jge L_error_integer_range
 21083 000110F7 4883F900                        cmp rcx, 0
 21084 000110FB 0F8C4F030000                    jl L_error_integer_range
 21085 00011101 8A5C3909                        mov bl, byte [rdi + 1 + 8 + 1 * rcx]
 21086 00011105 BF02000000                      mov rdi, 2
 21087 0001110A E882ECFFFF                      call malloc
 21088 0001110F C60002                          mov byte [rax], T_char
 21089 00011112 885801                          mov byte [rax + 1], bl
 21090                                          LEAVE
    38 00011115 C9                  <1>  leave
 21091 00011116 C22000                          ret AND_KILL_FRAME(2)
 21092                                  
 21093                                  L_code_ptr_vector_ref:
 21094                                          ENTER
    33 00011119 C8000000            <1>  enter 0, 0
    34 0001111D 4883E4F0            <1>  and rsp, ~15
 21095 00011121 48837D1802                      cmp COUNT, 2
 21096 00011126 0F85BF030000                    jne L_error_arg_count_2
 21097 0001112C 488B7D20                        mov rdi, PARAM(0)
 21098                                          assert_vector(rdi)
    42 00011130 803F22              <1>  cmp byte [%1], %2
    43 00011133 0F8551040000        <1>  jne L_error_incorrect_type
 21099 00011139 488B7528                        mov rsi, PARAM(1)
 21100                                          assert_integer(rsi)
    47                              <1>  assert_rational(%1)
    42 0001113D 803E11              <2>  cmp byte [%1], %2
    43 00011140 0F8544040000        <2>  jne L_error_incorrect_type
    48 00011146 48837E0901          <1>  cmp qword [%1 + 1 + 8], 1
    49 0001114B 0F8539040000        <1>  jne L_error_incorrect_type
 21101 00011151 488B5701                        mov rdx, qword [rdi + 1]
 21102 00011155 488B4E01                        mov rcx, qword [rsi + 1]
 21103 00011159 4839D1                          cmp rcx, rdx
 21104 0001115C 0F8DEE020000                    jge L_error_integer_range
 21105 00011162 4883F900                        cmp rcx, 0
 21106 00011166 0F8CE4020000                    jl L_error_integer_range
 21107 0001116C 488B44CF09                      mov rax, [rdi + 1 + 8 + 8 * rcx]
 21108                                          LEAVE
    38 00011171 C9                  <1>  leave
 21109 00011172 C22000                          ret AND_KILL_FRAME(2)
 21110                                  
 21111                                  L_code_ptr_vector_set:
 21112                                          ENTER
    33 00011175 C8000000            <1>  enter 0, 0
    34 00011179 4883E4F0            <1>  and rsp, ~15
 21113 0001117D 48837D1803                      cmp COUNT, 3
 21114 00011182 0F85CD030000                    jne L_error_arg_count_3
 21115 00011188 488B7D20                        mov rdi, PARAM(0)
 21116                                          assert_vector(rdi)
    42 0001118C 803F22              <1>  cmp byte [%1], %2
    43 0001118F 0F85F5030000        <1>  jne L_error_incorrect_type
 21117 00011195 488B7528                        mov rsi, PARAM(1)
 21118                                          assert_integer(rsi)
    47                              <1>  assert_rational(%1)
    42 00011199 803E11              <2>  cmp byte [%1], %2
    43 0001119C 0F85E8030000        <2>  jne L_error_incorrect_type
    48 000111A2 48837E0901          <1>  cmp qword [%1 + 1 + 8], 1
    49 000111A7 0F85DD030000        <1>  jne L_error_incorrect_type
 21119 000111AD 488B5701                        mov rdx, qword [rdi + 1]
 21120 000111B1 488B4E01                        mov rcx, qword [rsi + 1]
 21121 000111B5 4839D1                          cmp rcx, rdx
 21122 000111B8 0F8D92020000                    jge L_error_integer_range
 21123 000111BE 4883F900                        cmp rcx, 0
 21124 000111C2 0F8C88020000                    jl L_error_integer_range
 21125 000111C8 488B4530                        mov rax, PARAM(2)
 21126 000111CC 488944CF09                      mov qword [rdi + 1 + 8 + 8 * rcx], rax
 21127 000111D1 48B8-                           mov rax, sob_void
 21127 000111D3 [0000000000000000] 
 21128                                          LEAVE
    38 000111DB C9                  <1>  leave
 21129 000111DC C22800                          ret AND_KILL_FRAME(3)
 21130                                  
 21131                                  L_code_ptr_string_set:
 21132                                          ENTER
    33 000111DF C8000000            <1>  enter 0, 0
    34 000111E3 4883E4F0            <1>  and rsp, ~15
 21133 000111E7 48837D1803                      cmp COUNT, 3
 21134 000111EC 0F8563030000                    jne L_error_arg_count_3
 21135 000111F2 488B7D20                        mov rdi, PARAM(0)
 21136                                          assert_string(rdi)
    42 000111F6 803F03              <1>  cmp byte [%1], %2
    43 000111F9 0F858B030000        <1>  jne L_error_incorrect_type
 21137 000111FF 488B7528                        mov rsi, PARAM(1)
 21138                                          assert_integer(rsi)
    47                              <1>  assert_rational(%1)
    42 00011203 803E11              <2>  cmp byte [%1], %2
    43 00011206 0F857E030000        <2>  jne L_error_incorrect_type
    48 0001120C 48837E0901          <1>  cmp qword [%1 + 1 + 8], 1
    49 00011211 0F8573030000        <1>  jne L_error_incorrect_type
 21139 00011217 488B5701                        mov rdx, qword [rdi + 1]
 21140 0001121B 488B4E01                        mov rcx, qword [rsi + 1]
 21141 0001121F 4839D1                          cmp rcx, rdx
 21142 00011222 0F8D28020000                    jge L_error_integer_range
 21143 00011228 4883F900                        cmp rcx, 0
 21144 0001122C 0F8C1E020000                    jl L_error_integer_range
 21145 00011232 488B4530                        mov rax, PARAM(2)
 21146                                          assert_char(rax)
    42 00011236 803802              <1>  cmp byte [%1], %2
    43 00011239 0F854B030000        <1>  jne L_error_incorrect_type
 21147 0001123F 8A4001                          mov al, byte [rax + 1]
 21148 00011242 88443909                        mov byte [rdi + 1 + 8 + 1 * rcx], al
 21149 00011246 48B8-                           mov rax, sob_void
 21149 00011248 [0000000000000000] 
 21150                                          LEAVE
    38 00011250 C9                  <1>  leave
 21151 00011251 C22800                          ret AND_KILL_FRAME(3)
 21152                                  
 21153                                  L_code_ptr_make_vector:
 21154                                          ENTER
    33 00011254 C8000000            <1>  enter 0, 0
    34 00011258 4883E4F0            <1>  and rsp, ~15
 21155 0001125C 48837D1802                      cmp COUNT, 2
 21156 00011261 0F8584020000                    jne L_error_arg_count_2
 21157 00011267 488B4D20                        mov rcx, PARAM(0)
 21158                                          assert_integer(rcx)
    47                              <1>  assert_rational(%1)
    42 0001126B 803911              <2>  cmp byte [%1], %2
    43 0001126E 0F8516030000        <2>  jne L_error_incorrect_type
    48 00011274 4883790901          <1>  cmp qword [%1 + 1 + 8], 1
    49 00011279 0F850B030000        <1>  jne L_error_incorrect_type
 21159 0001127F 488B4901                        mov rcx, qword [rcx + 1]
 21160 00011283 4883F900                        cmp rcx, 0
 21161 00011287 0F8CC3010000                    jl L_error_integer_range
 21162 0001128D 488B5528                        mov rdx, PARAM(1)
 21163 00011291 488D3CCD09000000                lea rdi, [1 + 8 + 8 * rcx]
 21164 00011299 E8F3EAFFFF                      call malloc
 21165 0001129E C60022                          mov byte [rax], T_vector
 21166 000112A1 48894801                        mov qword [rax + 1], rcx
 21167 000112A5 41B800000000                    mov r8, 0
 21168                                  .L0:
 21169 000112AB 4939C8                          cmp r8, rcx
 21170 000112AE 740A                            je .L1
 21171 000112B0 4A8954C009                      mov qword [rax + 1 + 8 + 8 * r8], rdx
 21172 000112B5 49FFC0                          inc r8
 21173 000112B8 EBF1                            jmp .L0
 21174                                  .L1:
 21175                                          LEAVE
    38 000112BA C9                  <1>  leave
 21176 000112BB C22000                          ret AND_KILL_FRAME(2)
 21177                                          
 21178                                  L_code_ptr_make_string:
 21179                                          ENTER
    33 000112BE C8000000            <1>  enter 0, 0
    34 000112C2 4883E4F0            <1>  and rsp, ~15
 21180 000112C6 48837D1802                      cmp COUNT, 2
 21181 000112CB 0F851A020000                    jne L_error_arg_count_2
 21182 000112D1 488B4D20                        mov rcx, PARAM(0)
 21183                                          assert_integer(rcx)
    47                              <1>  assert_rational(%1)
    42 000112D5 803911              <2>  cmp byte [%1], %2
    43 000112D8 0F85AC020000        <2>  jne L_error_incorrect_type
    48 000112DE 4883790901          <1>  cmp qword [%1 + 1 + 8], 1
    49 000112E3 0F85A1020000        <1>  jne L_error_incorrect_type
 21184 000112E9 488B4901                        mov rcx, qword [rcx + 1]
 21185 000112ED 4883F900                        cmp rcx, 0
 21186 000112F1 0F8C59010000                    jl L_error_integer_range
 21187 000112F7 488B5528                        mov rdx, PARAM(1)
 21188                                          assert_char(rdx)
    42 000112FB 803A02              <1>  cmp byte [%1], %2
    43 000112FE 0F8586020000        <1>  jne L_error_incorrect_type
 21189 00011304 8A5201                          mov dl, byte [rdx + 1]
 21190 00011307 488D7909                        lea rdi, [1 + 8 + 1 * rcx]
 21191 0001130B E881EAFFFF                      call malloc
 21192 00011310 C60003                          mov byte [rax], T_string
 21193 00011313 48894801                        mov qword [rax + 1], rcx
 21194 00011317 41B800000000                    mov r8, 0
 21195                                  .L0:
 21196 0001131D 4939C8                          cmp r8, rcx
 21197 00011320 740A                            je .L1
 21198 00011322 4188540009                      mov byte [rax + 1 + 8 + 1 * r8], dl
 21199 00011327 49FFC0                          inc r8
 21200 0001132A EBF1                            jmp .L0
 21201                                  .L1:
 21202                                          LEAVE
    38 0001132C C9                  <1>  leave
 21203 0001132D C22000                          ret AND_KILL_FRAME(2)
 21204                                  
 21205                                  L_code_ptr_numerator:
 21206                                          ENTER
    33 00011330 C8000000            <1>  enter 0, 0
    34 00011334 4883E4F0            <1>  and rsp, ~15
 21207 00011338 48837D1801                      cmp COUNT, 1
 21208 0001133D 0F8573010000                    jne L_error_arg_count_1
 21209 00011343 488B4520                        mov rax, PARAM(0)
 21210                                          assert_rational(rax)
    42 00011347 803811              <1>  cmp byte [%1], %2
    43 0001134A 0F853A020000        <1>  jne L_error_incorrect_type
 21211 00011350 488B7801                        mov rdi, qword [rax + 1]
 21212 00011354 E8D1000000                      call make_integer
 21213                                          LEAVE
    38 00011359 C9                  <1>  leave
 21214 0001135A C21800                          ret AND_KILL_FRAME(1)
 21215                                          
 21216                                  L_code_ptr_denominator:
 21217                                          ENTER
    33 0001135D C8000000            <1>  enter 0, 0
    34 00011361 4883E4F0            <1>  and rsp, ~15
 21218 00011365 48837D1801                      cmp COUNT, 1
 21219 0001136A 0F8546010000                    jne L_error_arg_count_1
 21220 00011370 488B4520                        mov rax, PARAM(0)
 21221                                          assert_rational(rax)
    42 00011374 803811              <1>  cmp byte [%1], %2
    43 00011377 0F850D020000        <1>  jne L_error_incorrect_type
 21222 0001137D 488B7809                        mov rdi, qword [rax + 1 + 8]
 21223 00011381 E8A4000000                      call make_integer
 21224                                          LEAVE
    38 00011386 C9                  <1>  leave
 21225 00011387 C21800                          ret AND_KILL_FRAME(1)
 21226                                  
 21227                                  L_code_ptr_eq:
 21228                                  	ENTER
    33 0001138A C8000000            <1>  enter 0, 0
    34 0001138E 4883E4F0            <1>  and rsp, ~15
 21229 00011392 48837D1802              	cmp COUNT, 2
 21230 00011397 0F854E010000            	jne L_error_arg_count_2
 21231 0001139D 488B7D20                	mov rdi, PARAM(0)
 21232 000113A1 488B7528                	mov rsi, PARAM(1)
 21233 000113A5 4839F7                  	cmp rdi, rsi
 21234 000113A8 744A                    	je .L_eq_true
 21235 000113AA 8A17                    	mov dl, byte [rdi]
 21236 000113AC 3A16                    	cmp dl, byte [rsi]
 21237 000113AE 7550                    	jne .L_eq_false
 21238 000113B0 80FA02                  	cmp dl, T_char
 21239 000113B3 7437                    	je .L_char
 21240 000113B5 80FA04                  	cmp dl, T_symbol
 21241 000113B8 742A                    	je .L_symbol
 21242 000113BA 80FA12                  	cmp dl, T_real
 21243 000113BD 741D                    	je .L_real
 21244 000113BF 80FA11                  	cmp dl, T_rational
 21245 000113C2 7402                    	je .L_rational
 21246 000113C4 EB3A                    	jmp .L_eq_false
 21247                                  .L_rational:
 21248 000113C6 488B4601                	mov rax, qword [rsi + 1]
 21249 000113CA 483B4701                	cmp rax, qword [rdi + 1]
 21250 000113CE 7530                    	jne .L_eq_false
 21251 000113D0 488B4609                	mov rax, qword [rsi + 1 + 8]
 21252 000113D4 483B4709                	cmp rax, qword [rdi + 1 + 8]
 21253 000113D8 7526                    	jne .L_eq_false
 21254 000113DA EB18                    	jmp .L_eq_true
 21255                                  .L_real:
 21256 000113DC 488B4601                	mov rax, qword [rsi + 1]
 21257 000113E0 483B4701                	cmp rax, qword [rdi + 1]
 21258                                  .L_symbol:
 21259                                  	; never reached, because symbols are static!
 21260                                  	; but I'm keeping it in case, I'll ever change
 21261                                  	; the implementation
 21262 000113E4 488B4601                	mov rax, qword [rsi + 1]
 21263 000113E8 483B4701                	cmp rax, qword [rdi + 1]
 21264                                  .L_char:
 21265 000113EC 8A5E01                  	mov bl, byte [rsi + 1]
 21266 000113EF 3A5F01                  	cmp bl, byte [rdi + 1]
 21267 000113F2 750C                    	jne .L_eq_false
 21268                                  .L_eq_true:
 21269 000113F4 48B8-                   	mov rax, sob_boolean_true
 21269 000113F6 [0300000000000000] 
 21270 000113FE EB0A                    	jmp .L_eq_exit
 21271                                  .L_eq_false:
 21272 00011400 48B8-                   	mov rax, sob_boolean_false
 21272 00011402 [0200000000000000] 
 21273                                  .L_eq_exit:
 21274                                  	LEAVE
    38 0001140A C9                  <1>  leave
 21275 0001140B C22000                  	ret AND_KILL_FRAME(2)
 21276                                  
 21277                                  make_real:
 21278                                          ENTER
    33 0001140E C8000000            <1>  enter 0, 0
    34 00011412 4883E4F0            <1>  and rsp, ~15
 21279 00011416 BF09000000                      mov rdi, (1 + 8)
 21280 0001141B E871E9FFFF                      call malloc
 21281 00011420 C60012                          mov byte [rax], T_real
 21282 00011423 F20F114001                      movsd qword [rax + 1], xmm0
 21283                                          LEAVE
    38 00011428 C9                  <1>  leave
 21284 00011429 C3                              ret
 21285                                          
 21286                                  make_integer:
 21287                                          ENTER
    33 0001142A C8000000            <1>  enter 0, 0
    34 0001142E 4883E4F0            <1>  and rsp, ~15
 21288 00011432 4889FE                          mov rsi, rdi
 21289 00011435 BF11000000                      mov rdi, (1 + 8 + 8)
 21290 0001143A E852E9FFFF                      call malloc
 21291 0001143F C60011                          mov byte [rax], T_rational
 21292 00011442 48897001                        mov qword [rax + 1], rsi
 21293 00011446 48C7400901000000                mov qword [rax + 1 + 8], 1
 21294                                          LEAVE
    38 0001144E C9                  <1>  leave
 21295 0001144F C3                              ret
 21296                                          
 21297                                  L_error_integer_range:
 21298 00011450 488B3C25[00000000]              mov rdi, qword [stderr]
 21299 00011458 48BE-                           mov rsi, fmt_integer_range
 21299 0001145A [2505000000000000] 
 21300 00011462 B800000000                      mov rax, 0
 21301                                  	ENTER
    33 00011467 C8000000            <1>  enter 0, 0
    34 0001146B 4883E4F0            <1>  and rsp, ~15
 21302 0001146F E8(00000000)                    call fprintf
 21303                                  	LEAVE
    38 00011474 C9                  <1>  leave
 21304 00011475 48C7C0FBFFFFFF                  mov rax, -5
 21305 0001147C E8(00000000)                    call exit
 21306                                  
 21307                                  L_error_arg_count_0:
 21308 00011481 488B3C25[00000000]              mov rdi, qword [stderr]
 21309 00011489 48BE-                           mov rsi, fmt_arg_count_0
 21309 0001148B [2304000000000000] 
 21310 00011493 488B5518                        mov rdx, COUNT
 21311 00011497 B800000000                      mov rax, 0
 21312                                  	ENTER
    33 0001149C C8000000            <1>  enter 0, 0
    34 000114A0 4883E4F0            <1>  and rsp, ~15
 21313 000114A4 E8(00000000)                    call fprintf
 21314                                  	LEAVE
    38 000114A9 C9                  <1>  leave
 21315 000114AA 48C7C0FDFFFFFF                  mov rax, -3
 21316 000114B1 E8(00000000)                    call exit
 21317                                  
 21318                                  L_error_arg_count_1:
 21319 000114B6 488B3C25[00000000]              mov rdi, qword [stderr]
 21320 000114BE 48BE-                           mov rsi, fmt_arg_count_1
 21320 000114C0 [4B04000000000000] 
 21321 000114C8 488B5518                        mov rdx, COUNT
 21322 000114CC B800000000                      mov rax, 0
 21323                                  	ENTER
    33 000114D1 C8000000            <1>  enter 0, 0
    34 000114D5 4883E4F0            <1>  and rsp, ~15
 21324 000114D9 E8(00000000)                    call fprintf
 21325                                  	LEAVE
    38 000114DE C9                  <1>  leave
 21326 000114DF 48C7C0FDFFFFFF                  mov rax, -3
 21327 000114E6 E8(00000000)                    call exit
 21328                                  
 21329                                  L_error_arg_count_2:
 21330 000114EB 488B3C25[00000000]              mov rdi, qword [stderr]
 21331 000114F3 48BE-                           mov rsi, fmt_arg_count_2
 21331 000114F5 [B104000000000000] 
 21332 000114FD 488B5518                        mov rdx, COUNT
 21333 00011501 B800000000                      mov rax, 0
 21334                                  	ENTER
    33 00011506 C8000000            <1>  enter 0, 0
    34 0001150A 4883E4F0            <1>  and rsp, ~15
 21335 0001150E E8(00000000)                    call fprintf
 21336                                  	LEAVE
    38 00011513 C9                  <1>  leave
 21337 00011514 48C7C0FDFFFFFF                  mov rax, -3
 21338 0001151B E8(00000000)                    call exit
 21339                                  
 21340                                  L_error_arg_count_12:
 21341 00011520 488B3C25[00000000]              mov rdi, qword [stderr]
 21342 00011528 48BE-                           mov rsi, fmt_arg_count_12
 21342 0001152A [7104000000000000] 
 21343 00011532 488B5518                        mov rdx, COUNT
 21344 00011536 B800000000                      mov rax, 0
 21345                                  	ENTER
    33 0001153B C8000000            <1>  enter 0, 0
    34 0001153F 4883E4F0            <1>  and rsp, ~15
 21346 00011543 E8(00000000)                    call fprintf
 21347                                  	LEAVE
    38 00011548 C9                  <1>  leave
 21348 00011549 48C7C0FDFFFFFF                  mov rax, -3
 21349 00011550 E8(00000000)                    call exit
 21350                                  
 21351                                  L_error_arg_count_3:
 21352 00011555 488B3C25[00000000]              mov rdi, qword [stderr]
 21353 0001155D 48BE-                           mov rsi, fmt_arg_count_3
 21353 0001155F [D804000000000000] 
 21354 00011567 488B5518                        mov rdx, COUNT
 21355 0001156B B800000000                      mov rax, 0
 21356                                  	ENTER
    33 00011570 C8000000            <1>  enter 0, 0
    34 00011574 4883E4F0            <1>  and rsp, ~15
 21357 00011578 E8(00000000)                    call fprintf
 21358                                  	LEAVE
    38 0001157D C9                  <1>  leave
 21359 0001157E 48C7C0FDFFFFFF                  mov rax, -3
 21360 00011585 E8(00000000)                    call exit
 21361                                          
 21362                                  L_error_incorrect_type:
 21363 0001158A 488B3C25[00000000]              mov rdi, qword [stderr]
 21364 00011592 48BE-                           mov rsi, fmt_type
 21364 00011594 [0105000000000000] 
 21365 0001159C B800000000                      mov rax, 0
 21366                                  	ENTER
    33 000115A1 C8000000            <1>  enter 0, 0
    34 000115A5 4883E4F0            <1>  and rsp, ~15
 21367 000115A9 E8(00000000)                    call fprintf
 21368                                  	LEAVE
    38 000115AE C9                  <1>  leave
 21369 000115AF 48C7C0FCFFFFFF                  mov rax, -4
 21370 000115B6 E8(00000000)                    call exit
 21371                                  
 21372                                  L_error_division_by_zero:
 21373 000115BB 488B3C25[00000000]              mov rdi, qword [stderr]
 21374 000115C3 48BE-                           mov rsi, fmt_division_by_zero
 21374 000115C5 [4205000000000000] 
 21375 000115CD B800000000                      mov rax, 0
 21376                                  	ENTER
    33 000115D2 C8000000            <1>  enter 0, 0
    34 000115D6 4883E4F0            <1>  and rsp, ~15
 21377 000115DA E8(00000000)                    call fprintf
 21378                                  	LEAVE
    38 000115DF C9                  <1>  leave
 21379 000115E0 48C7C0F8FFFFFF                  mov rax, -8
 21380 000115E7 E8(00000000)                    call exit
 21381                                  
 21382                                  section .data
 21383                                  fmt_char:
 21384 00000420 256300                          db `%c\0`
 21385                                  fmt_arg_count_0:
 21386 00000423 212121204578706563-             db `!!! Expecting zero arguments. Found %d\n\0`
 21386 0000042C 74696E67207A65726F-
 21386 00000435 20617267756D656E74-
 21386 0000043E 732E20466F756E6420-
 21386 00000447 25640A00           
 21387                                  fmt_arg_count_1:
 21388 0000044B 212121204578706563-             db `!!! Expecting one argument. Found %d\n\0`
 21388 00000454 74696E67206F6E6520-
 21388 0000045D 617267756D656E742E-
 21388 00000466 20466F756E64202564-
 21388 0000046F 0A00               
 21389                                  fmt_arg_count_12:
 21390 00000471 212121204578706563-             db `!!! Expecting one required and one optional argument. Found %d\n\0`
 21390 0000047A 74696E67206F6E6520-
 21390 00000483 726571756972656420-
 21390 0000048C 616E64206F6E65206F-
 21390 00000495 7074696F6E616C2061-
 21390 0000049E 7267756D656E742E20-
 21390 000004A7 466F756E642025640A-
 21390 000004B0 00                 
 21391                                  fmt_arg_count_2:
 21392 000004B1 212121204578706563-             db `!!! Expecting two arguments. Found %d\n\0`
 21392 000004BA 74696E672074776F20-
 21392 000004C3 617267756D656E7473-
 21392 000004CC 2E20466F756E642025-
 21392 000004D5 640A00             
 21393                                  fmt_arg_count_3:
 21394 000004D8 212121204578706563-             db `!!! Expecting three arguments. Found %d\n\0`
 21394 000004E1 74696E672074687265-
 21394 000004EA 6520617267756D656E-
 21394 000004F3 74732E20466F756E64-
 21394 000004FC 2025640A00         
 21395                                  fmt_type:
 21396 00000501 2121212046756E6374-             db `!!! Function passed incorrect type\n\0`
 21396 0000050A 696F6E207061737365-
 21396 00000513 6420696E636F727265-
 21396 0000051C 637420747970650A00 
 21397                                  fmt_integer_range:
 21398 00000525 21212120496E636F72-             db `!!! Incorrect integer range\n\0`
 21398 0000052E 7265637420696E7465-
 21398 00000537 6765722072616E6765-
 21398 00000540 0A00               
 21399                                  fmt_division_by_zero:
 21400 00000542 212121204469766973-             db `!!! Division by zero\n\0`
 21400 0000054B 696F6E206279207A65-
 21400 00000554 726F0A00           
 21401                                  fmt_scheme_error_part_1:
 21402 00000558 0A2121212054686520-             db `\n!!! The procedure \0`
 21402 00000561 70726F636564757265-
 21402 0000056A 2000               
 21403                                  fmt_scheme_error_part_2:
 21404 0000056C 2061736B656420746F-             db ` asked to terminate the program\n`
 21404 00000575 207465726D696E6174-
 21404 0000057E 65207468652070726F-
 21404 00000587 6772616D0A         
 21405 0000058C 202020207769746820-             db `    with the following message:\n\n\0`
 21405 00000595 74686520666F6C6C6F-
 21405 0000059E 77696E67206D657373-
 21405 000005A7 6167653A0A0A00     
 21406                                  fmt_scheme_error_part_3:
 21407 000005AE 0A0A476F6F64627965-             db `\n\nGoodbye!\n\n\0`
 21407 000005B7 210A0A00           
 21408                                  
